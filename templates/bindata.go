// Code generated by go-bindata.
// sources:
// golang.create-raw.tmpl
// golang.create.tmpl
// golang.decl.tmpl
// golang.delete-all.tmpl
// golang.delete-world.tmpl
// golang.delete.tmpl
// golang.dialect-postgres.tmpl
// golang.dialect-sqlite3.tmpl
// golang.footer.tmpl
// golang.get-all.tmpl
// golang.get-count.tmpl
// golang.get-first.tmpl
// golang.get-has.tmpl
// golang.get-last.tmpl
// golang.get-limitoffset.tmpl
// golang.get-one-all.tmpl
// golang.get-one.tmpl
// golang.get-paged.tmpl
// golang.get-scalar-all.tmpl
// golang.get-scalar.tmpl
// golang.header.tmpl
// golang.misc.tmpl
// golang.update.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _golangCreateRawTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x92\xcd\xaa\xdb\x3c\x10\x86\xd7\xd6\x55\xcc\x97\x95\x0d\x39\xba\x80\x0f\xb2\x28\xe5\x14\x02\xdd\x34\xe9\x5e\x28\xd6\xd8\xa8\x91\x25\x9f\x91\x9c\x1f\x84\xee\xbd\x48\x3a\x09\x2e\xb4\xa5\xb4\x0b\x83\x3c\x1a\xbd\xcf\x3b\x3f\x31\xbe\x80\xc2\x41\x5b\x84\x8d\xd7\xa3\x95\x61\x21\xdc\xc0\x4b\x4a\xec\x20\xaf\x1f\x09\x65\x40\x11\x23\xf0\xe3\x32\x0c\xfa\x06\x29\xb5\x31\x42\x1f\x6e\xb3\x24\x39\x01\xff\x40\x23\xa4\xd4\x41\xcb\x9a\x18\xe1\x3d\x78\xc0\xb0\x90\x85\x94\xb6\x80\x44\xf9\x73\xd4\xb1\x8c\x42\xab\x8a\x36\x5b\x73\xb5\xbd\xb8\xf3\x1f\x41\x25\x8d\x4f\x24\x8b\xf1\xe7\x72\x27\xa7\xee\x55\x2c\x5b\xd2\x56\x07\x8b\x57\xe0\x9f\x34\x1a\xe5\x21\x67\xe7\x38\x4e\x27\x54\xfe\xcd\x00\xdf\xdb\xc1\xc1\x46\x88\x12\x11\x3e\x4c\x61\x93\xb3\x9a\x8b\x24\x10\xe5\x1f\x76\xf9\xf0\x66\x4e\x8b\x55\x06\xc5\x01\xad\x42\x6a\xdd\xe9\x1b\x57\x5a\x1a\xec\xc3\x16\xd6\xcf\x3b\xd6\xe4\x3b\xe3\xc6\x63\x98\x42\x5b\x35\xb6\x10\x23\x14\xff\x4f\x23\x5d\x75\xa2\x87\x5c\xe8\x3c\x3b\x0a\xbe\x76\x4e\xdb\x11\x56\xf6\x57\x0d\x65\x4d\x6e\xe8\x0e\x0a\x9b\xf4\x05\x89\x7f\x59\x90\xee\x07\x77\xfd\x0d\x87\x1f\x7b\x69\x73\x0b\xa5\x52\xe4\x06\x68\x07\x23\x43\x40\xfb\x10\xee\x8a\x99\x46\x0f\x65\x5c\xff\xed\xc0\x6a\x03\x91\x35\x0d\x55\xae\xd5\x66\x5b\x90\x93\x3c\xe3\x2b\x51\x8b\x44\x1d\x6b\x12\x7b\x24\x3c\x90\xab\xc1\x5b\x6d\x6a\x9f\x8d\xc7\x3a\x0c\x21\x08\x7d\xdd\x88\xff\x7f\xa8\xe0\xf5\x86\xfd\x2f\xdc\xff\xad\x2f\x21\xe6\xf3\x13\x55\xc0\xfc\xb3\xf4\x61\x6f\x3d\x52\xd8\xab\xf6\x9f\xaa\xcd\x77\x23\x86\x2c\x98\x97\xb4\x16\xcd\xbf\xde\x67\xcc\x9b\xda\x87\x5b\x5e\x87\xf9\xdc\xd5\xfa\xdf\x57\x74\x75\xfc\x1e\x00\x00\xff\xff\x83\x16\x8b\x04\x74\x03\x00\x00")

func golangCreateRawTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangCreateRawTmpl,
		"golang.create-raw.tmpl",
	)
}

func golangCreateRawTmpl() (*asset, error) {
	bytes, err := golangCreateRawTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.create-raw.tmpl", size: 884, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangCreateTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x92\xcf\x8a\xdb\x30\x10\xc6\xcf\xd6\x53\x4c\x73\xb2\x21\xab\x07\x58\xd8\x43\x59\xb6\x34\x50\x02\x4d\xb6\x67\xa1\x44\x63\xa3\x46\x96\xbc\x23\x39\x4e\x10\x7e\xf7\x22\x69\xb3\xf5\x42\xff\x40\x7b\x08\x28\x23\xf9\xfb\x7d\x33\xf3\xc5\x78\x07\x0a\x5b\x6d\x11\x56\x5e\x77\x56\x86\x91\x70\x05\x77\xf3\xcc\x1e\x09\x65\x40\x11\x23\xf0\xfd\xd8\xb6\xfa\x02\xf3\x5c\xc7\x08\xc7\x70\x19\x24\xc9\x1e\xf8\x47\xea\x3c\xcc\x73\x03\x35\xab\x62\x84\xd7\xea\x0e\xc3\x48\x16\xe6\x79\x0d\x48\x94\x7e\x8e\x1a\x96\x40\x68\x55\x56\x66\x4b\xaa\xb6\x67\x77\xfa\x3b\x52\x52\xf7\x13\xc8\x62\xfc\xb5\xd8\xc1\xa9\x6b\x91\xaa\x52\x59\xb7\xc0\xb7\x88\xca\x6f\xdd\x04\xa9\x28\x84\x75\x13\xdc\x3f\x80\x3b\x7c\xe7\xea\xc0\x3f\x3b\x77\xf2\x7c\xeb\xa6\xba\xe1\xdf\x9e\x1f\xeb\x26\x37\x72\x93\x4e\x67\x6d\x75\xb0\x38\x01\xff\xa4\xd1\xa8\x44\x67\xe5\x4d\x7f\x40\xe5\x5f\x0c\xf0\x8d\x6d\x1d\xac\x84\xc8\x15\xe1\x43\x1f\x56\x99\x75\x96\x04\x22\xff\x87\x87\x74\x78\x31\x87\xd1\x2a\x83\x62\x87\x56\x21\xd5\xd9\x82\x96\x06\x8f\x61\x0d\xcb\xcf\x1b\x56\xa5\x3b\xe3\xba\x7d\xe8\x43\x5d\x34\xd6\x10\x23\xe4\x21\xbc\x19\x69\x8a\x93\xd4\xe4\x7e\x1c\x06\x47\xc1\x97\xd9\x6b\xdb\xc1\xc2\xfe\x62\x25\xac\x4a\x2b\x79\x6d\x9f\xf4\x19\x89\x7f\x1d\x91\xae\x3b\x37\xfd\x81\xc3\xf7\x47\x69\xd3\x1e\xa4\x52\xe4\x5a\xa8\x5b\x23\x43\x40\x7b\x13\x6e\xb2\x99\x4a\xb7\x79\xe1\x1f\x1e\xc0\x6a\x03\x91\x55\x15\x15\xae\xd5\x66\x9d\x91\xbd\x3c\xe1\x13\x51\x8d\x44\x0d\xab\x66\x76\x7b\x70\x43\x2e\xa2\x63\xb5\x29\x73\x36\x1e\xcb\x32\x84\x20\xf4\x25\x53\xf7\xef\x3a\x78\xba\xe0\xf1\x37\xee\xff\xd5\x97\x10\xc3\xe9\x0d\x95\xc1\xfc\x8b\xf4\x61\x63\x3d\x52\xd8\xa8\xfa\xbf\xba\x4d\x77\x1d\x86\x24\x98\x92\x5e\x9a\xe6\xcf\xd7\x01\x53\xdc\x8f\xe1\x92\xe2\x30\x9c\xde\x67\x71\x71\xfc\x11\x00\x00\xff\xff\x65\xdf\x97\x09\xb4\x03\x00\x00")

func golangCreateTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangCreateTmpl,
		"golang.create.tmpl",
	)
}

func golangCreateTmpl() (*asset, error) {
	bytes, err := golangCreateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.create.tmpl", size: 948, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeclTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\xd6\x55\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\x49\x4d\xce\x51\x52\xa8\xad\xe5\x4a\x2b\xcd\x4b\x56\xd0\xc8\x4f\xca\x52\xd0\xaa\xae\x56\xd0\x0b\x4a\x4d\x4e\xcd\x2c\x4b\x2d\x72\x4a\x2c\x4e\x55\xa8\xad\xf5\xcc\x2d\xc8\xd1\x54\x00\x49\x04\x67\xa6\xe7\x25\x96\x94\x16\x81\x44\x15\xaa\xb9\x40\x42\x4e\xf9\x29\x95\x20\x23\x6a\x41\xbc\xd4\xbc\x14\x05\xdd\xda\x5a\x2e\x40\x00\x00\x00\xff\xff\x9b\x28\x5e\xfd\x65\x00\x00\x00")

func golangDeclTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeclTmpl,
		"golang.decl.tmpl",
	)
}

func golangDeclTmpl() (*asset, error) {
	bytes, err := golangDeclTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.decl.tmpl", size: 101, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeleteAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x90\xb1\x6a\xc3\x30\x10\x86\x67\xe9\x29\xae\x86\x82\x03\x89\xe9\x50\x3a\x14\x3c\x04\x9a\xad\x4b\x9b\x07\x30\x8e\x7d\x32\x6a\x64\x29\x3d\x9d\xd3\x94\x43\xef\x5e\x6c\x07\xea\xa1\x10\xe8\xa0\x49\xff\xff\x7d\xdc\x2f\xb2\x81\x16\x8d\xf5\x08\x59\xb4\x9d\xaf\x79\x20\xcc\x60\x93\x92\x7e\x41\x87\x8c\x95\x08\x14\xfb\xc1\x18\x7b\x81\x94\x72\x11\x68\xf8\x72\xaa\xa9\xee\xa1\xd8\x52\x17\x21\xa5\x15\xe4\x5a\x35\x61\xf0\x0c\xd6\xf3\xd3\xe3\x1a\x90\x68\x7c\x81\x56\x7a\x14\xa0\x6f\x27\xa2\x5e\xda\xac\x3f\x87\xe3\x6d\x55\x4d\xdd\xaf\x48\x8b\xfc\x0d\x3b\x84\xf6\x7b\x46\xa9\x26\xf8\xc8\x50\x55\x91\x7b\x2e\x45\xe0\x44\xd6\xb3\x81\xec\xfe\x33\x83\x62\xff\xf6\x0a\x63\x28\x1c\x3e\x0a\x17\xba\x3d\xf7\x9c\xcf\xd1\x35\x88\x80\xb1\xe8\xda\x73\xed\x06\x5c\x38\xb5\xaa\x2a\xc2\x38\x5f\xf5\x5c\xc2\xd8\x6d\xc9\x9e\x91\x8a\xdd\x05\x9b\x9b\x7d\x65\xcd\x54\xbd\x2b\xc1\x5b\x07\xa2\x95\x22\xe4\x81\x3c\x3c\xac\x27\x58\x5f\x1f\x71\x47\x94\x23\xd1\x4a\xab\xa4\xaf\x63\xce\xc2\x12\x26\x7b\xf1\x1e\xbe\xe2\xd6\x18\x6c\x18\xdb\xfc\x5f\xd0\xeb\xff\x95\xed\xad\x5b\xae\xf9\x13\x00\x00\xff\xff\x38\x18\x61\x7b\x08\x02\x00\x00")

func golangDeleteAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteAllTmpl,
		"golang.delete-all.tmpl",
	)
}

func golangDeleteAllTmpl() (*asset, error) {
	bytes, err := golangDeleteAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete-all.tmpl", size: 520, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeleteWorldTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x90\xb1\x6a\xc3\x30\x10\x86\x67\xe9\x29\xae\x86\x82\x4d\x13\xd1\xa1\x74\xf3\x10\x4a\xb6\x2e\x4d\x1f\x20\x38\xd6\x39\xa8\x55\x4f\xcd\xe9\x9c\xba\x08\xbf\x7b\xb1\x5c\x87\xcc\x19\x84\x40\xe8\xff\xbe\xbb\x3f\xa5\x35\x58\xec\x1c\x21\x14\xd1\x1d\xa9\x91\x9e\xb1\x80\xf5\x38\x6a\x8b\x1e\x05\x37\xde\x97\xad\x0c\xd0\x06\x12\x1c\xc4\xbc\xcc\x77\x05\x65\x1b\x7a\x12\x70\x24\xcf\x4f\x2b\x40\xe6\xe9\x04\xae\xf4\x84\x44\xb2\x99\xa1\xaf\xf9\x87\x60\x7f\x67\xb4\x3a\x37\x0c\xfb\x3d\x63\x84\x78\xf2\x66\x87\xb1\xf7\xb2\xbc\x5e\x71\xe7\x3c\x37\x74\x44\x30\xef\x6f\xaf\x11\xa6\x70\x0e\xce\xca\x1a\xc2\xe1\xc3\x58\x76\x67\x64\xb3\x1d\xb0\x2d\x53\x82\x6f\x76\x24\x1d\x14\xf7\xa7\x02\x0c\x8c\x63\xa5\x95\xeb\xf2\xf7\xbb\x1a\xc8\x79\x48\x5a\x29\x46\xe9\x99\xe0\x71\x95\x09\x5f\xcd\x27\x6e\x99\x4b\x64\xae\xb4\x1a\xf5\x24\xc9\x73\x2c\x9a\xec\x34\xbb\xf0\x13\x37\x5d\x87\xad\xa0\x2d\x6f\xc0\xaa\x79\xb7\x87\x7a\x59\xf3\x52\xd6\xd4\xd5\x12\xfe\x17\x93\xf3\x3a\xa5\x4b\x95\x7f\x01\x00\x00\xff\xff\xab\x74\xf7\x3d\xaa\x01\x00\x00")

func golangDeleteWorldTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteWorldTmpl,
		"golang.delete-world.tmpl",
	)
}

func golangDeleteWorldTmpl() (*asset, error) {
	bytes, err := golangDeleteWorldTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete-world.tmpl", size: 426, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeleteTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x91\xcd\x6a\xeb\x30\x10\x46\xd7\xd2\x53\xcc\xf5\xca\x06\xc7\xdc\x75\x21\x85\x40\xb3\xe8\x36\x79\x00\x21\x5b\x23\xa3\x46\x96\x9a\xb1\xec\xa6\x08\xbd\x7b\x91\x12\xda\x6c\x4a\xa0\x0b\x81\x7e\xe6\x3b\x67\x18\xc5\xb8\x01\x85\xda\x38\x84\x6a\x36\xa3\x93\x61\x21\xac\x60\x93\x12\x7f\x41\x8b\x01\x45\x8c\xd0\x1d\x17\xad\xcd\x05\x52\xaa\x63\x84\x21\x5c\xde\x25\xc9\x09\xba\x1d\x8d\x33\xa4\xd4\x40\xcd\x99\x2a\xd5\x0a\x7a\xef\x6d\x0b\x48\x94\x97\xa7\x86\x67\x03\x3a\x55\x90\xfc\x5e\x67\xdc\xea\x4f\x8f\x5d\x92\xc6\x1f\xd3\xef\xb4\xde\xab\xcf\x2b\x8b\xc5\x08\x38\xf5\xa8\xe6\xb3\x85\xee\xd5\x69\x0f\x95\x10\xe5\x46\xcc\x61\x0a\x15\xe4\xa2\x55\x12\x88\x72\x86\x6d\xde\x9c\x6d\xbf\x38\x65\x51\x1c\xd0\x29\xa4\xda\xf7\x6f\x9d\x32\xd2\xe2\x10\x5a\xb8\x8f\x37\x9c\xe5\x37\xeb\xc7\x63\x98\x42\x7d\x65\xb4\x10\x23\x68\x83\x56\xad\xd2\x2e\x78\xd7\x30\x67\x42\x10\xce\xd7\x91\x3c\x6d\xa1\x70\xc9\xac\x48\xdd\xfe\x82\xc3\xc3\x3c\x33\xba\x44\xff\x6d\xc1\x19\x0b\x91\x33\x46\x18\x16\x72\xa0\xa5\x9d\xb1\x2d\xc0\x49\x9e\x70\x4f\x54\x23\x51\xc3\x59\x2a\xd2\xc1\x2f\x2e\x7c\x6b\x4b\x13\xdd\xc1\x7f\xcc\x3b\xad\x71\x08\xa8\xea\x3f\xb3\x6f\x35\x37\x05\x3c\xc3\xff\x36\xe7\x79\x9e\xfb\xed\x6b\xbe\x02\x00\x00\xff\xff\x7b\x04\x72\x2b\x57\x02\x00\x00")

func golangDeleteTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteTmpl,
		"golang.delete.tmpl",
	)
}

func golangDeleteTmpl() (*asset, error) {
	bytes, err := golangDeleteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete.tmpl", size: 599, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDialectPostgresTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x90\x4b\x6e\x84\x30\x10\x44\xd7\xf6\x29\x4a\x5e\x41\x04\x1e\x29\xd9\x25\x62\x85\x72\x81\xdc\x80\x4f\x33\x69\x05\x6c\xa6\x6d\xb2\xb1\x7c\xf7\x08\xe7\x2f\x79\x55\x55\xef\x59\xea\x94\x5a\xcc\xb4\xb0\x23\x18\xde\x76\x2f\xd1\x20\x67\xad\xcc\x95\xe3\xeb\x31\xda\xc9\x6f\x97\x95\xc7\xcb\x7e\x33\x3a\x25\x90\x9b\xd1\xe6\xac\xf5\x3f\x2e\xb4\x93\x77\x21\xca\xc0\x2e\xb6\x24\xe2\xa5\x48\x96\xc3\x4d\xa8\x78\xdb\x57\xa4\x04\xfb\x42\x13\xf1\x3b\x09\x72\xae\xc1\xa1\xff\x41\x9e\x4f\xa2\x22\x11\x14\xb6\x46\xa5\xd5\xaf\x10\x21\x0a\xbb\x6b\x03\xff\x86\xd1\xfb\xb5\x46\xd2\x8a\x17\x50\x49\x1e\xbb\x13\xb2\xd5\xdd\x7e\xb3\xc5\x53\x3f\x9d\x71\xd2\x4a\x95\x91\xed\xfd\x4c\xb6\x5f\x87\x10\xaa\x1a\x5d\x07\x73\xff\x60\x3e\x6b\x25\x14\x0f\x71\x65\xf3\xfd\x59\x83\x28\x07\x9d\x6d\xd6\xe7\xfb\x9a\x18\xd3\x60\x19\xd6\x40\x3a\xff\xbd\xc2\x47\x00\x00\x00\xff\xff\x28\x4c\xe9\xcf\x3d\x01\x00\x00")

func golangDialectPostgresTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDialectPostgresTmpl,
		"golang.dialect-postgres.tmpl",
	)
}

func golangDialectPostgresTmpl() (*asset, error) {
	bytes, err := golangDialectPostgresTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.dialect-postgres.tmpl", size: 317, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDialectSqlite3Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x91\x41\x4b\xc4\x30\x10\x85\xcf\xc9\xaf\x18\x73\x6a\x61\xdb\x45\xbc\xad\xf4\xb4\x78\x10\x3c\xa9\x37\xf1\xd0\x6d\xa7\x75\xb0\x49\xd6\x49\x2a\x42\xc8\x7f\x97\xa4\xeb\xb6\x42\x4f\xf3\xde\xf7\xf5\x41\x42\xa8\xa0\xc7\x81\x0c\x82\x22\x7d\xb6\xec\x15\xc4\x28\x85\x1a\xc9\x7f\xcc\xa7\xba\xb3\x7a\xaf\x5b\xef\xcd\x7e\xb4\x95\xfb\x9a\xc8\xe3\x9d\x92\x21\x00\x9a\x1e\xaa\x18\xa5\xfc\x67\x70\x55\x67\x8d\xf3\xdc\x92\xf1\x15\x32\x5b\xce\xba\x61\x36\x1d\x14\xa4\xcf\x13\x84\x00\xf5\x33\x76\x48\xdf\xc8\x10\x63\x09\xe4\x8e\x57\xe4\x21\x11\x05\x32\x43\x66\x4b\x28\xa4\x58\x85\xe0\x3c\x93\x19\x77\x60\x3f\xe1\x64\xed\x54\x42\x90\x82\x06\xc0\x7c\x39\x34\x09\xaa\x8b\xcb\xc8\x3a\xbb\xca\xfb\x14\x05\x29\x44\x2e\xd6\x47\xdb\x23\x34\x0d\x6c\x4a\xeb\xdf\x97\x9e\xd0\x6e\xfc\x93\x2d\x7b\xca\x7c\xee\xec\x64\x4d\x0a\x96\x15\xae\x7e\x6a\x9d\x7f\x34\x3d\xfe\x14\xda\x8d\x3b\x50\x07\xb5\x14\x69\x80\xa5\x7b\xd3\x40\x75\x7b\x91\x0a\x46\x3f\xb3\xb9\xc2\xaf\x4c\xfa\xe5\xdc\x76\x98\xe0\xb7\xdc\x3f\xbc\x97\x3b\xf0\x3c\x63\x06\xa2\xdc\x50\x4a\xad\x49\x94\xe9\xdb\x04\x43\x3b\x39\x94\x71\xfb\x28\xbf\x01\x00\x00\xff\xff\xf2\xcb\x38\xa5\xd6\x01\x00\x00")

func golangDialectSqlite3TmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDialectSqlite3Tmpl,
		"golang.dialect-sqlite3.tmpl",
	)
}

func golangDialectSqlite3Tmpl() (*asset, error) {
	bytes, err := golangDialectSqlite3TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.dialect-sqlite3.tmpl", size: 470, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x93\xcf\x8e\xd3\x30\x10\xc6\xcf\x9e\xa7\x18\x6e\x49\xb5\xf8\x84\xb8\xa0\x1e\xd8\x5d\x0e\x1c\x10\x52\x9b\x17\x48\x93\x69\xd7\xaa\xeb\x04\x77\xb2\x0c\xb2\xf2\xee\xc8\xf9\x5f\x9a\x05\x21\xb5\x8a\x3d\xf2\x7c\xdf\xcf\xfe\xec\x10\xd0\x1c\x51\xef\x9b\xba\xae\x3c\xef\x04\xdb\x16\xf8\x57\x4d\xb8\x13\xbc\xb2\x6f\x0a\xc6\x00\xaa\x3c\xe0\xe6\xf9\x11\x14\x0b\x6e\x32\x81\x16\xe0\xd8\xb8\x02\x13\x2f\xb8\xd9\x49\x8a\x27\xe2\x4c\x92\x82\x05\x8b\xca\x31\x09\xeb\xa7\xfe\x9b\x62\xd2\xf7\x3c\x20\x79\x1f\xff\x95\x4f\xa3\xa2\x39\xa2\x17\xcd\x82\xdb\x2d\x3a\x63\x63\x69\xaa\xf5\x6b\xb7\x71\x52\x1e\xf4\xf7\x9a\x5c\x94\x4e\x3f\x75\xe5\x77\xf3\x7a\xe5\x89\x1b\xef\xe2\xbc\x6b\x01\xa5\x5a\x88\xbf\xa1\x3e\x88\x39\x63\xef\x89\x9f\xaa\xcb\xc5\x70\x92\x62\xf2\x06\xd7\xc2\x67\xa2\x61\xd1\x63\x1f\x28\x35\xf0\x77\xfa\x0b\xd7\x08\x72\x67\xb7\xab\xac\x3d\xe4\xc5\xf9\xff\x0d\xe7\xce\x7f\x59\x86\x80\x3e\x77\x27\x42\xfd\x8d\xf8\xa5\x2a\xaf\x31\xcb\x5b\x8c\x10\x50\xef\xcd\xc9\xe5\xdc\x78\xc2\xb6\x8d\x6e\xaf\xb9\xc7\x21\xd7\x08\x73\x73\xfc\x53\xae\xf7\x87\x3f\x58\x2f\x31\x58\x74\x34\xf8\xea\x5e\xab\x73\x54\xef\x99\xc8\x95\x71\x3c\x8f\xfa\xfb\x35\x32\x1a\xc7\xe4\x8f\x79\x41\x18\x20\x84\xf7\x2b\x5b\x50\x7f\x52\x2f\xb4\x46\xb5\x4c\xd6\xf4\xd4\x50\x04\x50\x53\xde\xdd\xc9\x83\x5a\x04\xd2\x57\x46\x25\x5e\x57\x9a\x0c\x00\x54\x49\x96\x98\x3e\x5b\xfb\xc6\x8d\x37\x8e\x3f\x7e\x78\x18\x32\x06\x75\xc9\xcf\xf4\xc5\xfb\x65\xee\xb7\x96\xcf\x8f\xab\x96\xfb\xe2\x85\x2e\x79\x92\xc6\x77\x68\xdc\x69\xde\xcd\xd8\x57\x1e\x56\xfb\x26\x39\x00\xf5\xd3\xe7\x75\x26\xdd\x1b\xbc\xfe\xb0\x3a\x93\x74\xde\xe0\x5f\xc9\x7e\x07\x00\x00\xff\xff\x0d\x56\x59\xce\x18\x04\x00\x00")

func golangFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangFooterTmpl,
		"golang.footer.tmpl",
	)
}

func golangFooterTmpl() (*asset, error) {
	bytes, err := golangFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.footer.tmpl", size: 1048, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\xc1\x6e\x1b\x21\x10\x86\xcf\xf0\x14\x53\x9f\x58\xc9\xd9\x07\x48\xb5\x87\xa8\xea\xa1\x97\x4a\x8d\x1f\x60\x85\xcd\x60\xd1\xb0\xe0\xcc\xb2\x6b\x47\x88\x77\xaf\x06\x9c\xd4\x87\xb6\x56\x0f\x96\x0c\x3b\x7c\xff\x3f\xff\x4c\xce\x0f\x60\xd0\xba\x80\xb0\x99\xdd\x31\xe8\xb4\x10\x6e\xe0\xa1\x14\xf9\xe4\xfd\x98\x33\xf4\xbb\xc5\x5a\x77\x81\x52\x54\xce\x70\x48\x97\x93\x26\x3d\x41\xff\x44\xc7\x19\x4a\xe9\x40\x49\x41\xf1\x3c\x43\xce\x30\x7b\x77\xc0\x68\xa1\x7f\x8e\x67\x28\x65\x0b\x48\xc4\xbf\x48\x9d\x64\x25\x0c\xa6\xa2\xe5\xad\xac\x0b\x6b\x7c\xb9\xa3\xa9\xe9\xf8\x5b\xf1\xef\xa8\x7d\x34\x6f\x1b\x28\x45\x8a\x9c\x01\xa7\x3d\x9a\xf9\xd5\x43\xff\x2d\xd8\x08\x9b\x71\xac\x37\xe3\x9c\xa6\xd4\x8a\x56\x4d\x30\xd6\x33\x0c\xfc\xe7\xd5\xef\x97\x60\x3c\x8e\xcf\x18\x0c\x92\x8a\xfb\x9f\xbd\x71\xda\xe3\x21\x6d\xe1\xf6\x79\x27\x05\x7f\xf3\xf1\xb8\x4b\x53\x52\x8d\xb1\xe5\x04\xac\x43\x6f\x56\xed\x17\xbc\xf1\x2b\xc5\x38\x72\x44\x2d\x8f\xc7\x01\x2a\x98\xdc\x8a\xd4\xff\x58\x90\xde\xfe\x45\x60\x80\x70\xb6\x3e\xfd\x34\x40\x70\x1e\xb2\x14\x82\x30\x2d\x14\xf8\xb8\xad\xb8\x49\xbf\xe0\x57\x22\x85\x44\x9d\x14\x45\x0a\x83\x16\xb9\x3d\x16\xee\xbf\xf8\x38\xa3\x62\x27\x36\x7e\x5c\x7e\xc7\x4b\x52\x5d\xa5\xe5\x0c\x2e\xb8\x14\xf0\xfc\x3e\x3b\x29\x04\x2b\x0e\xef\xc5\xbb\x83\x0e\x3c\x0c\x6d\x0c\x45\x0b\xca\x7a\x9d\x12\x86\x5a\xde\xd5\x2e\xc5\x1f\x5c\xde\xb1\xc9\x3e\xdb\xf2\x0c\xa0\x4f\x27\x0c\x46\xb5\x9c\x58\x88\x47\xde\xbc\xb4\x86\xae\xf4\xc7\x0f\x4b\xcc\xe9\x3e\xff\x77\x30\xd7\x82\x26\x14\x9c\x97\xbc\x2b\xd7\x6d\xfa\x15\x00\x00\xff\xff\x53\xa0\xdb\x6c\x0f\x03\x00\x00")

func golangGetAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetAllTmpl,
		"golang.get-all.tmpl",
	)
}

func golangGetAllTmpl() (*asset, error) {
	bytes, err := golangGetAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-all.tmpl", size: 783, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetCountTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x90\xb1\x4e\xc3\x30\x10\x86\x67\xdf\x53\x1c\x19\x50\x22\xa5\x11\x03\x62\xeb\x80\x10\x03\x23\xed\x03\x44\x4e\x7c\x89\x4c\x1d\x9b\x5e\x9c\xd0\xca\xf2\xbb\x23\xbb\x20\xba\xa0\x0e\x91\x62\xdf\xfd\xdf\x6f\x7d\x21\x6c\x50\xd1\xa0\x2d\x61\x31\xeb\xd1\x4a\xbf\x30\x15\xb8\x89\x11\x5e\xdc\x62\x7d\x1b\x02\x36\xfb\x65\x18\xf4\x09\x63\x2c\x43\xc0\xde\x9f\x3e\x25\xcb\x09\x9b\x67\x1e\x67\x8c\xb1\xc2\x12\x44\x9f\x96\x51\x5b\xff\xf4\x58\x23\x31\xa7\xcf\x71\x05\x89\x4f\x56\x65\x20\x5c\x97\x69\xbb\xba\xc3\xcd\x26\xc9\xe3\x5f\xcf\xff\xb0\xce\xa9\x73\x81\x31\x82\x08\x01\x69\xea\x48\xcd\x47\x83\xcd\x9b\x1d\x1c\x16\x6d\x9b\x6f\xda\xd9\x4f\xfe\xb2\xb4\x4a\xc6\x36\x9f\x71\x9b\x7e\x8e\xa6\x5b\xac\x32\xd4\xee\xc8\x2a\xe2\xd2\x75\x1f\x8d\xd2\xd2\x50\xef\x6b\xbc\x8e\x57\x20\xd2\xcc\xb8\x71\xef\x27\x5f\x5e\x18\x35\x86\x80\x83\x26\xa3\x56\x69\x16\xba\x7a\x2f\x88\x64\x62\x8b\x99\xc7\x7a\x25\x6e\xde\x17\xe2\xf3\xce\x7d\xdd\xca\x36\xfb\x5e\xda\xf2\x3e\x6b\xad\x40\xe8\x21\x4b\xbd\xdb\xa2\xd5\x06\x03\x08\xc1\xe4\x17\xb6\xf8\x50\x67\xfa\x24\x0f\xf4\xca\x5c\x12\x73\x05\x22\x02\xfc\xce\x33\xa0\x4e\x29\x48\x6a\x7e\xe4\x7d\x07\x00\x00\xff\xff\xb2\xa6\x98\xc5\xf6\x01\x00\x00")

func golangGetCountTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetCountTmpl,
		"golang.get-count.tmpl",
	)
}

func golangGetCountTmpl() (*asset, error) {
	bytes, err := golangGetCountTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-count.tmpl", size: 502, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetFirstTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\xc1\x6a\xdc\x30\x10\x86\xcf\xd2\x53\x4c\xf6\x24\xc3\xc6\x0f\x90\xb2\x87\x52\x5a\xe8\xa5\xd0\xec\x03\x08\xed\x6a\x64\xd4\xc8\x52\x33\x96\x9d\x0d\x42\xef\x5e\x46\x6b\xb7\xdb\x42\x1b\xe8\xc1\x60\x8d\x67\xbe\xff\xb7\xe6\x2f\xe5\x1e\x2c\x3a\x1f\x11\x76\x93\x1f\xa2\xc9\x33\xe1\x0e\xee\x6b\x95\x9f\x3c\x4d\x59\x97\x02\xfd\x71\x76\xce\x5f\xa0\x56\x55\x0a\x9c\xf3\xe5\xbb\x21\x33\x42\xff\x9e\x86\x09\x6a\xed\x40\x49\x51\x0a\xac\xd5\xc7\xf4\x02\xb5\xee\x01\x89\xf8\x49\xd4\x49\x16\xc1\x68\x1b\x55\xde\x2a\xfa\xb8\xa4\xa7\x37\xe5\x0c\x0d\xbf\xc4\xfe\x0e\x3b\x25\xfb\xba\x83\x5a\x9b\x19\x1c\x4f\x68\xa7\xe7\x00\xfd\xe7\xe8\x12\xec\xb4\x6e\x15\x3d\xe5\x31\x5f\x9b\x16\x43\xa0\xdb\x19\x0e\xfc\xf2\x1c\x4e\x73\xb4\x01\xf5\x23\x46\x8b\xa4\xd2\xe9\x5b\x6f\xbd\x09\x78\xce\x7b\xb8\x1d\xef\xa4\xe0\x6f\x21\x0d\xc7\x3c\x66\x75\x65\xec\xa1\x14\x70\x1e\x83\x5d\x4c\x98\xf1\xc6\xaf\x14\x5a\x53\x7a\x99\xae\x37\xf2\x70\x80\x06\x26\xbf\x20\xf5\x5f\x67\xa4\xd7\x7f\x11\x18\x20\xbc\x6b\xa3\x77\x07\x88\x3e\x40\x91\x42\x10\xe6\x99\x22\x1f\xf7\x0d\x37\x9a\x27\xfc\x48\xa4\x90\xa8\x93\xa2\x4a\x61\xd1\x21\xff\x1e\x0b\xf7\x1f\x42\x9a\x50\xb1\x13\xef\xe0\x6e\x2d\x7e\xc1\x4b\x56\x5d\xa3\xad\xfc\x87\xc3\x36\xc0\xa8\xee\xdd\x9f\xa2\x6f\xa8\xb2\xec\x6f\x2d\xd1\x07\xf6\xd2\xd6\xe1\xa3\xcf\x5b\x34\xa4\x60\xf0\x4f\xb1\xe3\xd9\x44\x5e\xb4\xb1\x96\x92\x03\xe5\x82\xc9\x19\x63\xeb\xee\xe0\x3f\x2f\x40\x6e\x1d\x0c\xe6\xf8\x6c\xa9\x64\x53\x1c\x8f\x35\x40\x3f\x02\x00\x00\xff\xff\xd6\x6d\xf1\xa0\xff\x02\x00\x00")

func golangGetFirstTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetFirstTmpl,
		"golang.get-first.tmpl",
	)
}

func golangGetFirstTmpl() (*asset, error) {
	bytes, err := golangGetFirstTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-first.tmpl", size: 767, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetHasTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x90\x4d\x6e\xf3\x20\x10\x86\xd7\x70\x8a\xf9\xbc\xf8\x64\x4b\x8e\x6f\x90\x45\x17\x95\xda\x65\x93\x03\x58\xe3\x30\x38\x34\x18\x9a\x01\xbb\x89\x10\x77\xaf\x70\x5a\x35\x9b\x2a\x0b\x24\x7e\xe6\x7d\x5e\xf4\xa4\xb4\x01\x45\xda\x38\x82\x2a\x98\xd1\x61\x9c\x99\x2a\xd8\xe4\x2c\x5f\x30\xf4\x29\x41\xb7\x9f\xb5\x36\x17\xc8\xb9\x4e\x09\x0e\xf1\xf2\x81\x8c\x13\x74\x4f\x3c\x06\xc8\xb9\x81\x5a\x8a\x23\x06\x18\xbc\xb7\x2d\x10\x73\x59\x9e\x1b\x59\xd0\xe4\xd4\xca\x92\xf7\x3d\xc6\x2d\xfe\xf4\xa0\x04\x79\xfc\xad\xf8\x1b\x35\x78\x75\xad\x20\x67\x29\x52\x02\x9a\x06\x52\xe1\x6c\xa1\x7b\x75\xda\x43\xd5\xf7\xeb\x4d\x1f\xe2\x14\x6f\x43\x0b\x32\xf4\xeb\x19\xb6\x65\x73\xb6\xc3\xec\x94\xa5\x7e\x47\x4e\x11\xd7\x7e\x78\xef\x94\x41\x4b\x87\xd8\xc2\x7d\xbc\x91\xa2\xbc\x59\x3f\xee\xe3\x14\xeb\x1b\xa3\x85\x94\x40\x1b\xb2\x6a\x41\x3b\xd3\xdd\x7f\xa5\x28\x1e\xb6\xb0\xf2\xd8\x2c\xc4\xdd\xdb\x4c\x7c\xdd\xf9\xcf\x47\xd9\x6e\x7f\x40\x57\xff\x3f\x62\x68\xa4\x30\x7a\x15\xfa\x6f\x0b\xce\x58\x48\x52\x08\xa6\x38\xb3\x03\x8d\x36\x50\xbb\xf2\x27\x3c\xd1\x33\x73\x4d\xcc\x8d\x14\x59\xfe\x8c\x1c\x31\xb4\x25\x26\x8b\x99\x6f\x77\x5f\x01\x00\x00\xff\xff\xa6\x4c\x7a\x05\xee\x01\x00\x00")

func golangGetHasTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetHasTmpl,
		"golang.get-has.tmpl",
	)
}

func golangGetHasTmpl() (*asset, error) {
	bytes, err := golangGetHasTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-has.tmpl", size: 494, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetLastTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x90\x3f\x6f\x83\x30\x10\xc5\x67\xfb\x53\x5c\x99\x40\x22\x4c\x55\xb7\x4c\x55\x87\x4a\x5d\x9a\x74\x47\x06\x1f\xc8\x8d\xb1\xc9\x71\xa4\x49\x2d\x7f\xf7\xca\xd0\x48\x64\xb0\xfc\xef\xde\xfb\x3d\xbd\x10\x76\xa0\xb1\x33\x0e\x21\x9b\x4c\xef\x14\xcf\x84\x19\xec\x62\x94\x3d\xf2\x87\x9a\x38\x04\xa8\x0e\xc8\x33\xb9\xea\xeb\x36\x22\xc4\x98\xb7\x7c\x85\xd6\x3b\xc6\x2b\x57\xaf\xeb\x5e\x4a\x31\x9e\xc0\x38\x7e\x79\x2e\x20\x97\x22\x04\x18\x15\xa9\xe1\xae\x85\x18\x4b\x40\xa2\xb4\x3c\x15\x32\x71\xd1\xe9\x05\x24\xb7\x21\x1a\xaf\x6f\x2b\x3f\x79\xe0\xd0\xa0\x9e\xce\x16\xaa\x77\xd7\x79\xc8\xea\x7a\x79\xa9\x27\x1e\x38\x83\x34\x74\x51\x04\xf5\x72\x87\x7d\x3a\x9c\x6d\x33\x3b\x6d\xb1\x3e\xa0\xd3\x48\xb9\x6f\xbe\x2b\x6d\x94\xc5\x96\x4b\xd8\xca\x0b\x29\xd2\x9f\xf5\xfd\x91\x07\xce\x57\x8f\x12\xc6\x53\x21\x17\xb4\x71\x86\x37\xe9\xa5\x48\xe9\xf7\xb0\xf8\x91\xb9\x20\x55\x9f\x33\xd2\xed\xe0\x7f\xb6\xda\xea\xd8\x2a\x97\x87\x00\x4a\x6b\xf2\x1d\xe4\x9d\x55\xcc\xe8\xee\x4e\x05\xc4\x58\x48\x61\xba\xa5\x8c\xa7\x3d\x38\x63\x21\x48\x21\x68\x05\x85\x00\xbf\x48\xfe\xa1\xb6\x84\x1c\xd4\x09\xdf\x88\x72\x24\x2a\xa4\x88\x72\x33\xaf\xa8\x7f\x18\x77\xc6\xca\x54\xdd\x7f\xbb\x7f\x01\x00\x00\xff\xff\x87\x3b\xb0\x2a\xe2\x01\x00\x00")

func golangGetLastTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetLastTmpl,
		"golang.get-last.tmpl",
	)
}

func golangGetLastTmpl() (*asset, error) {
	bytes, err := golangGetLastTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-last.tmpl", size: 482, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetLimitoffsetTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\xcf\x8a\xdb\x3c\x14\xc5\xd7\xd2\x53\xdc\x2f\x2b\x1b\x3c\x5e\x7d\x74\x31\xc5\x8b\x52\xba\x28\x94\x42\x27\x0f\x60\x14\xeb\x2a\xa8\x23\x4b\x99\x6b\x39\xc9\xa0\xea\xdd\xcb\x95\x92\x10\x86\x42\xff\x2c\x02\x92\x72\x7c\xce\x4f\x47\x37\xa5\x07\xd0\x68\xac\x47\xd8\x2c\x76\xef\x55\x5c\x09\x37\xf0\x90\xb3\xfc\x62\x67\x1b\x51\x8f\x29\x41\xbf\x5d\x8d\xb1\x67\xc8\xb9\x49\x09\xa6\x78\x3e\x28\x52\x33\xf4\x1f\x68\xbf\xe4\xdc\x49\xe1\x58\x0b\xd6\xc7\x0e\x82\x31\x0b\x96\xf5\xbb\xff\x5b\x68\xa4\xa0\x70\x5a\x20\x25\x58\x9c\x9d\x30\x18\xe8\x9f\xc2\x09\x72\xee\x00\x89\xf8\x17\xa8\x95\x8c\x81\x5e\x97\x5c\x29\xef\xa1\xac\x3f\x86\xe7\x3f\x20\x52\xb4\xbf\xf1\x40\xc1\xb9\xa2\xbc\x71\xbf\x37\xdf\x05\xfd\xba\x81\x9c\xa5\x48\x09\x70\xde\xa1\x5e\x5e\x1c\xf4\x9f\xbd\x09\xb0\x19\xc7\x72\x32\x2e\x71\x8e\x55\x74\x54\x04\x63\xd9\xc3\xc0\x8b\x17\xb7\x5b\xbd\x76\x38\x3e\xa1\xd7\x48\x4d\xd8\x7d\xef\xb5\x55\x0e\xa7\xd8\xc1\xfd\xe7\xad\x14\xfc\x9f\x0b\xfb\x6d\x9c\x63\x53\x3d\x3a\x2e\xc5\x58\x74\xfa\xa8\xdc\x8a\x95\x1e\x7e\xc0\x14\xe6\x59\x41\xce\x6f\x2e\x21\xc5\x38\x72\x95\xb5\xb7\xc7\x01\x4a\x1a\xd9\x23\x52\xff\x6d\x45\x7a\xfd\x37\x5b\x61\x4d\x31\xfc\x6f\x00\x6f\x1d\x24\x29\x04\x61\x5c\xc9\xf3\xb6\x2b\x21\xb3\x7a\xc6\x4f\x44\x0d\x12\xb5\x52\x64\x29\x34\x1a\xe4\x26\x18\xa7\xff\xe8\xc2\x82\x0d\xf3\x99\x70\x3b\xfc\x8a\xe7\xd8\xb4\xc5\x2d\x25\xb0\xde\x46\x8f\xa7\xeb\xcb\x4b\x21\x38\x71\xb8\x8a\xb7\x93\xf2\xfc\x8a\x4a\x6b\x0a\x06\x1a\xe3\x54\x8c\xe8\x8b\xbc\x85\x9c\x5b\x29\x7e\x41\xf9\x1b\x4c\xe6\xac\xa3\x37\x80\x3a\x1c\xd0\xeb\xa6\xb6\xc7\x41\x3c\x2b\x95\xa5\x5e\xe8\xe2\xfe\x78\x43\x62\x9f\xf6\xfd\x5f\x17\x73\x11\xd4\x20\x6f\x9d\xe4\xb1\xba\x0c\xde\xcf\x00\x00\x00\xff\xff\x19\xa1\xee\xa3\x6a\x03\x00\x00")

func golangGetLimitoffsetTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetLimitoffsetTmpl,
		"golang.get-limitoffset.tmpl",
	)
}

func golangGetLimitoffsetTmpl() (*asset, error) {
	bytes, err := golangGetLimitoffsetTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-limitoffset.tmpl", size: 874, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetOneAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x93\x5f\x8a\xdb\x30\x10\xc6\x9f\xa5\x53\xcc\x1a\x0a\x36\x64\x7d\x80\x2d\x79\x28\xa5\x94\x3e\x74\xa1\xc9\x01\x8c\x12\x8d\x82\xba\xb2\xb4\x19\xcb\xf9\x83\xd0\xdd\xcb\x28\x4e\xe3\xb6\xb4\x29\xfb\x10\x88\x46\x33\xbf\xef\x9b\xd1\x38\xa5\x47\xd0\x68\xac\x47\xa8\x06\xbb\xf3\x2a\x8e\x84\x15\x3c\xe6\x2c\x3f\x63\xec\x52\x82\x76\x3d\x1a\x63\x4f\x90\x73\x9d\x12\x6c\xe3\xe9\x55\x91\xea\xa1\xfd\x40\xbb\x01\x72\x6e\xa0\x96\x22\x25\x98\xa2\xab\x70\x84\x9c\x17\x80\x44\xfc\x0b\xd4\x48\x96\x40\xaf\x0b\x53\xce\xf5\xac\x3f\x84\x97\x3b\x62\x8a\x76\x37\xa9\xbf\xa3\x36\x41\x9f\x2b\xc8\xb9\x58\xc1\x7e\x83\x7a\xd8\x3b\x68\xbf\x78\x13\xa0\xea\xba\x12\xe9\x86\xd8\xc7\x4b\xd2\x41\x11\x74\xe5\x0c\x4b\xfe\xb3\x77\x9b\xd1\x6b\x87\xdd\x0a\xbd\x46\xaa\xc3\xe6\x7b\xab\xad\x72\xb8\x8d\x0b\x98\x97\x37\x52\xf0\x9d\x0b\xbb\x75\xec\x63\x7d\x61\x2c\x20\x25\x30\x16\x9d\x3e\x28\x37\xe2\xcc\xaf\x14\x5d\x47\xe1\x38\x5c\xe6\xf1\xb4\x84\x02\x26\x7b\x40\x6a\xbf\x8d\x48\xe7\x7f\x11\x18\x20\xac\x29\xa5\x0f\x4b\xf0\xd6\x41\x92\x42\x10\xc6\x91\x3c\x1f\x17\x05\xd7\xab\x17\xfc\x44\x54\x23\x51\x23\x45\x96\x42\xa3\x41\x6e\x8f\x85\xdb\x8f\x2e\x0c\x58\xb3\x13\x6b\xe0\x61\x0a\x3e\xe3\x29\xd6\x4d\xa1\x4d\xfc\xa7\xe5\xb5\x80\x51\xcd\xfb\xdf\x45\xef\xa8\xb2\xec\x2f\x29\xd7\xeb\x61\xef\x98\xf8\x1c\x56\xe1\x38\x14\x7b\xe5\x85\xac\xb7\xf1\xba\x2b\x52\xb0\xd6\x4f\xfd\xf5\x56\x79\x7e\x7b\xa5\x35\x05\x03\xb5\x71\x2a\x46\xf4\x25\xbb\x81\x37\xce\xa4\xd4\xfc\xd9\xfc\xbc\x2c\x86\xf0\x55\xf9\x33\xfb\x64\xf9\x57\xb2\x3e\x1a\xa8\xde\xed\xab\xd9\x52\xde\x60\xff\x33\xb4\xfb\xae\xa6\x0c\x6e\x97\xf7\xfc\xfa\xf1\x78\xeb\x24\xef\xf1\xb4\xe9\x3f\x02\x00\x00\xff\xff\x6c\x43\xa9\x37\xa4\x03\x00\x00")

func golangGetOneAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetOneAllTmpl,
		"golang.get-one-all.tmpl",
	)
}

func golangGetOneAllTmpl() (*asset, error) {
	bytes, err := golangGetOneAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-one-all.tmpl", size: 932, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetOneTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x91\x41\x8e\xe3\x20\x10\x45\xd7\x70\x8a\x1a\xaf\x6c\x29\xf1\x0d\xb2\x98\xc5\x68\x34\xcb\x49\x0e\x60\xe1\x50\x58\x74\x70\xd1\x29\x63\x27\x69\xc4\xdd\x5b\x90\x44\xf1\xa6\x95\x05\x12\x14\x9f\xff\xbf\x1e\x31\x6e\x41\xa3\xb1\x84\x50\x4d\x76\x20\x15\x66\xc6\x0a\xb6\x29\xc9\xbf\x18\xba\x18\xa1\x3d\xcc\xc6\xd8\x2b\xa4\x54\xc7\x08\xc7\x70\xfd\x54\xac\x46\x68\x7f\xf3\x30\x41\x4a\x0d\xd4\x52\xc4\x08\x8f\xe9\xde\x5f\x20\xa5\x0d\x20\x73\x5e\x9e\x1b\x99\x23\x90\x74\xf1\x94\xeb\x3c\x4b\x8b\x3f\xbd\x09\x53\x3c\xbc\xa2\x7e\xb6\xea\xbd\xbe\x55\x90\x52\xa9\x82\x63\x8f\x7a\x3a\x3b\x68\xff\x91\xf1\x50\x75\x5d\x99\x74\x53\x18\xc3\x5d\xb4\x28\x86\xae\x9c\x61\x97\x37\x67\xd7\xcf\xa4\x1d\x76\x7b\x24\x8d\x5c\xfb\xfe\xa3\xd5\x56\x39\x3c\x86\x0d\xac\x9f\x37\x52\xe4\x3b\xe7\x87\x43\x18\x43\x7d\xf7\xd8\x40\x8c\x60\x2c\x3a\xbd\x28\x37\xe3\xaa\x6f\xa9\x63\xc9\x86\x27\x18\x29\x32\x98\x1d\x94\x00\xb6\x0b\x72\xfb\x7f\x46\xbe\xed\xfd\xe5\x9d\x59\x7b\x38\x2a\xca\x54\x94\xd6\xec\x0d\xd4\xc6\xa9\x10\x90\x8a\x75\x53\xe2\x84\x35\x05\xfc\xaf\x1d\x90\x75\x10\xa5\x10\x8c\x61\x66\xca\x9e\x5f\xc8\xfe\xf5\x3f\xb9\xc0\xa8\x4e\xf8\x87\xb9\x46\xe6\x46\x8a\x24\x57\xe2\x82\xfd\xa9\x25\xeb\x64\xc6\xfa\x00\xff\x1d\x00\x00\xff\xff\xc4\x50\x3a\x21\x33\x02\x00\x00")

func golangGetOneTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetOneTmpl,
		"golang.get-one.tmpl",
	)
}

func golangGetOneTmpl() (*asset, error) {
	bytes, err := golangGetOneTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-one.tmpl", size: 563, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetPagedTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x53\xcd\x8a\xdb\x30\x10\x3e\x4b\x4f\x31\xf5\xc9\x06\xaf\xd9\xf3\x16\x17\x4a\xe9\xa1\x50\xca\x76\xf3\x00\x46\xb1\x46\x46\x8d\x2c\x65\x65\x39\xc9\xe2\xea\xdd\xcb\x48\xce\x4f\x69\x69\x97\x3d\x04\x6c\xf9\xd3\xf7\x97\x99\x65\xb9\x03\x89\x4a\x5b\x84\x62\xd2\x83\x15\x61\xf6\x58\xc0\x5d\x8c\xfc\x51\x0c\x28\xbb\x65\x81\x66\x33\x2b\xa5\x4f\x10\x63\xb9\x2c\xd0\x87\xd3\x5e\x78\x31\x42\xf3\xd1\x0f\x13\xc4\x58\x73\x66\xf4\xa8\x03\x68\x1b\x6a\xe8\x83\xdb\xa1\x85\x29\x78\x6d\x87\x0a\x4a\xce\xbc\x3b\x4e\xb0\x2c\x30\x19\xdd\xa3\x53\xd0\x3c\xb9\x23\x5d\x5b\xa1\x6e\x0e\x2b\xba\x06\xf4\x9e\x7e\xce\x57\x9c\x8c\xa1\x95\xc9\x09\xbf\x75\xa9\xed\xc1\xed\xfe\x6b\x51\xf8\xe1\x6a\x10\x92\xbf\xb3\xe0\x3f\xb8\xb7\x4e\xbe\x14\x10\x23\x67\x5a\x9d\x93\xb4\x2d\x14\x05\x2c\x9c\xb1\xf3\x01\x14\xf7\x05\x67\x91\x73\xb6\x2c\x80\xe3\x16\xe5\xf4\x6c\xa0\xf9\x62\x95\x83\xa2\xeb\xd2\x49\x37\x85\x31\x64\xaa\x83\xf0\xd0\xa5\x77\x68\xe9\xe1\xd9\x6c\x67\x2b\x0d\x76\x4f\x68\x25\xfa\xd2\x6d\x7f\x34\x52\x0b\x83\x7d\xa8\xe1\xf6\x7a\xc5\x19\x7d\x33\x6e\xd8\x84\x31\x94\x99\xa3\xa6\x2a\x95\x46\x23\x0f\xc2\xcc\xb8\x86\xfc\x09\xbd\x1b\x47\x01\x31\x66\x93\x6b\xe4\x8a\x73\xd6\x75\xf4\x07\xe4\x6e\x1f\x5a\x48\x6a\x5e\x1f\xd0\x37\xdf\x67\xf4\x2f\xaf\xa1\xfd\x83\x95\xea\x21\xbe\x77\x2d\x58\x6d\x52\x39\x1e\xc3\xec\x2d\xbd\xd6\x50\x14\x75\xd2\x19\xc5\x0e\x3f\x7b\x5f\xa2\xf7\x15\x15\xc6\x24\x2a\xa4\x32\xc8\x51\xf3\xc9\xb8\x09\xcb\x2a\xd7\xa8\xad\x0e\x16\x8f\xd0\x7c\x15\x53\x78\xdc\xa5\xe2\x94\xbb\x60\xbf\xe1\x29\x94\x55\x12\xba\x05\xe7\x49\xe2\x8c\x91\x99\xf6\x0c\xde\xf4\xc2\xd2\x18\x08\x29\xbd\x53\x50\x2a\x23\x42\x40\x9b\xe0\xd5\x4d\x55\x57\xc8\x55\xb5\xe2\xec\x2f\xe1\x5e\x91\x8e\xe2\xe5\x51\x6f\x41\xec\xf7\x68\x65\x99\x7b\x27\x15\x1a\xc6\xec\x35\xf7\xb0\x2a\x3c\x5c\x2c\x13\x4f\xf5\xfe\x2d\x9d\x26\xb2\xbc\x7f\x1f\xe0\x3e\x5d\xa3\x03\xb4\x49\xbe\xa2\xf1\xcd\x5f\x53\x8e\xeb\xca\xb5\xa0\xc6\xd0\x6c\xf6\x5e\xdb\x50\x9e\x3d\xfe\x56\x43\xe4\x2c\x02\x9a\x09\x6f\x86\x3f\xdf\xcc\xcf\x59\x7d\xf5\x98\xb3\x5e\x40\x35\x99\xe6\xb4\x1e\xeb\x9a\xfd\x0a\x00\x00\xff\xff\x21\x85\x6b\xb5\x68\x04\x00\x00")

func golangGetPagedTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetPagedTmpl,
		"golang.get-paged.tmpl",
	)
}

func golangGetPagedTmpl() (*asset, error) {
	bytes, err := golangGetPagedTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-paged.tmpl", size: 1128, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetScalarAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x93\xd1\xaa\xdb\x30\x0c\x86\xaf\xed\xa7\xd0\x09\x0c\x12\xe8\xc9\x03\x9c\xd1\x8b\x31\x36\xd8\xc5\x06\x6b\x1f\x20\xb8\xb5\x5c\xbc\xe3\xd8\xa7\x8a\x93\xb6\x18\xbf\xfb\x90\x9b\xee\x64\x1b\x5b\xc7\x2e\x02\xb1\x22\x7d\xbf\x24\xff\x49\xe9\x11\x34\x1a\xeb\x11\xaa\xc1\x1e\xbc\x8a\x23\x61\x05\x8f\x39\xcb\x8f\xd6\xeb\x2e\x25\x68\xb7\xa3\x31\xf6\x0c\x39\xd7\x29\xc1\x3e\x9e\x5f\x14\xa9\x1e\xda\x77\x74\x18\x20\xe7\x06\x6a\x29\x52\x82\x39\xba\x09\x27\xc8\x79\x05\x48\xc4\x4f\xa0\x46\xb2\x06\x7a\x5d\xa0\x72\x29\x68\xfd\x14\x9e\xef\xa9\x29\x3a\xbc\x6a\xfd\x99\xb5\x0b\xfa\x52\x41\xce\xa5\x17\xec\x77\xa8\x87\xa3\x83\xf6\x93\x37\x01\xaa\xae\x2b\x91\x6e\x88\x7d\xbc\x26\x4d\x8a\xa0\x2b\x67\x58\xf3\xcb\xd1\xed\x46\xaf\x1d\x76\x1b\xf4\x1a\xa9\x0e\xbb\x6f\xad\xb6\xca\xe1\x3e\xae\x60\x59\xde\x48\xc1\xdf\x5c\x38\x6c\x63\x1f\xeb\x2b\x63\x05\x29\x81\xb1\xe8\xf4\xa4\xdc\x88\x8b\x7e\xa5\xe8\x3a\x0a\xa7\xe1\xba\x90\xa7\x35\x14\x30\xd9\x09\xa9\xfd\x3a\x22\x5d\xfe\x46\x60\x80\xb0\xa6\x94\x3e\xac\xc1\x5b\x07\x49\x0a\x41\x18\x47\xf2\x7c\x5c\x15\x5c\xaf\x9e\xf1\x03\x51\x8d\x44\x8d\x14\x59\x0a\x8d\x06\x79\x3c\x16\x6e\xdf\xbb\x30\x60\xcd\x9d\x58\x03\x0f\x73\xf0\x0b\x9e\x63\xdd\x14\xda\xcc\x7f\x5a\xdf\x0a\x18\xd5\xbc\xfd\x55\xf4\x8e\x2a\xcb\xfe\x94\xe2\xad\xe3\x5e\xca\x75\x58\x6f\xe3\xcd\x19\x52\x30\xf8\x87\xd8\x76\xaf\x3c\x5f\xb4\xd2\x9a\x82\x81\xda\x38\x15\x23\xfa\x92\xdd\xc0\x7f\x2e\xa0\xd4\xfc\x3e\xe9\xb2\x2c\x86\xf0\x59\xf9\xcb\x26\x9c\x06\x96\x7f\x21\xeb\xa3\x81\xea\xcd\xb1\x5a\x38\xf0\x15\xf6\x2f\x1b\xba\xdf\xd5\x9c\xc1\xe3\xb2\xa9\x6f\xbf\x0a\xaf\x8a\x4d\x3b\xdb\xfa\x7b\x00\x00\x00\xff\xff\x77\x81\xd1\x69\x93\x03\x00\x00")

func golangGetScalarAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetScalarAllTmpl,
		"golang.get-scalar-all.tmpl",
	)
}

func golangGetScalarAllTmpl() (*asset, error) {
	bytes, err := golangGetScalarAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-scalar-all.tmpl", size: 915, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetScalarTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x51\x4d\x6e\xeb\x20\x10\x5e\x9b\x53\xcc\xf3\xca\x96\x12\x6e\xe0\xc5\x5b\xe4\x49\x6f\x53\xa9\xce\x01\x2c\x1c\x06\x8b\x06\x43\x33\xc6\x4e\x52\xc4\xdd\x2b\x48\xda\x78\xd3\x66\x81\x04\xc3\x7c\x3f\xfa\xbe\x10\xb6\x20\x51\x69\x8b\x50\x4e\x7a\xb0\xc2\xcf\x84\x25\x6c\x63\x64\xff\xb4\x95\x5d\x08\xc0\xf7\xb3\x52\xfa\x02\x31\x56\x21\xc0\xc1\x5f\xde\x05\x89\x11\xf8\x5f\x1a\x26\x88\xb1\x86\x8a\x15\x21\xc0\x7d\xda\xba\x33\xc4\xb8\x01\x24\x4a\xc7\x51\xcd\x92\x06\x5a\x99\x49\xd9\x5a\x50\xdb\xc5\x1d\x9f\xa9\x09\x1a\x1e\x5a\x3f\x73\xf5\x4e\x5e\x4b\x88\x31\x7b\xc1\xb1\x47\x39\x9d\x0c\xf0\xff\x56\x39\x28\xbb\x2e\x4f\xba\xc9\x8f\xfe\xb6\xb4\x08\x82\x2e\xbf\xa1\x49\x97\x93\xe9\x67\x2b\x0d\x76\x2d\x5a\x89\x54\xb9\xfe\x8d\x4b\x2d\x0c\x1e\xfc\x06\xd6\xf0\x9a\x15\xe9\xcf\xb8\x61\xef\x47\x5f\xdd\x38\x36\x10\x02\x28\x8d\x46\x2e\xc2\xcc\xb8\xf2\x9b\xed\x68\xab\xfd\x57\x32\xac\x48\xc9\x34\x90\x05\x48\x2f\x48\xfc\x75\x46\xba\xb6\xee\xfc\x8c\x8c\xef\x0f\xc2\xa6\x54\x84\x94\xe4\x14\x54\xca\x08\xef\xd1\x66\xea\x3a\xcb\x15\x5a\xe5\xe4\x9b\x06\xa6\x93\xe1\x3b\xa2\x17\xd7\xba\xf3\x04\x81\x15\x05\xa1\x9f\xc9\x26\xf6\x0f\x24\xf7\xa8\xca\x6a\xc3\x8a\xf8\x8d\xfd\xd3\xa4\xc9\xaf\x88\x64\x7e\x14\x47\xdc\x11\x55\x48\x54\x67\xf8\x63\x39\x57\xb6\x66\x4f\x95\xdc\x4b\xfb\x0c\x00\x00\xff\xff\x7a\x69\x38\x17\x71\x02\x00\x00")

func golangGetScalarTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetScalarTmpl,
		"golang.get-scalar.tmpl",
	)
}

func golangGetScalarTmpl() (*asset, error) {
	bytes, err := golangGetScalarTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-scalar.tmpl", size: 625, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x59\x6d\x73\xdb\xb8\x11\xfe\x4c\xfe\x8a\x8d\x9a\x64\x48\x8f\x02\x5d\xe7\x3a\x9d\xa9\x6e\xdc\x99\xd8\x72\x5a\x4f\x1d\x3b\x67\xcb\x77\xd3\xb9\xcb\xe8\x20\x12\x94\x79\xa6\x00\x19\x00\x25\xba\x2a\xff\x7b\x67\x01\x90\x04\xf5\xe2\x24\xd7\x7c\x48\x28\x60\x77\xb1\xfb\xec\xe2\x59\x00\xd9\x6e\xdf\xc1\x6b\xb1\xd2\xb9\xe0\x0a\xc6\xa7\x40\x6e\xdc\xf7\xbb\xba\x0e\xc3\xd1\x08\xde\xdf\x4f\x6f\xfe\x71\x71\x7d\x71\xfb\x7e\x7a\x31\x81\xb3\x7f\xc3\x42\xac\x1e\x17\x24\xe7\x23\xb5\xa2\x09\x5b\x0a\xfe\xc8\x9e\x17\x62\x94\xce\x2b\xb2\xfe\x33\x6a\x4c\x6e\xe0\xfa\x66\x0a\x17\x93\xcb\x29\x09\xc3\x15\x4d\x1e\xe9\x82\xc1\x76\x0b\xe4\x93\xfb\x46\xd3\xf9\x72\x25\xa4\x86\x28\x0c\x06\xf3\x67\xcd\xd4\x20\x0c\x06\x89\xe0\x9a\x55\x1a\x3f\x53\xaa\xe9\x9c\x2a\x36\x52\x4f\x05\xfe\x66\x52\x0a\x69\x84\xb2\xa5\x11\x90\x2c\x2b\x58\xe2\x3e\x17\xac\x5a\xe1\x97\xd2\x32\x11\x7c\xed\x3e\x73\xbe\x30\x1a\x3a\x5f\x32\xfc\xb7\xe4\x79\x22\x52\xf3\xa9\x9e\x79\x32\x08\x43\x8c\x5e\x52\xbe\x60\x40\x2e\x2a\x2d\xe9\xa5\x71\x4a\xa1\x83\x01\x3a\x8c\x1f\x28\xc3\x78\x8a\x9f\xb1\x41\xe4\x93\x64\x6b\xc6\x35\x24\x82\xa7\x39\x82\x45\x0b\xc8\x9d\x62\x26\xc5\x12\x12\x5a\xaa\x9c\x2f\x60\x5e\xe6\x45\x0a\x19\xcd\x8b\x52\x32\x15\xae\xa9\x84\x19\x9c\x82\x73\x92\x5c\x6a\x41\xfd\x41\x74\x97\x5c\x51\xa5\x2f\x79\xca\xaa\x76\x26\x5b\x6a\x72\xb7\x92\x39\xd7\x6e\x08\x7d\x27\x1f\x4b\xcd\xaa\xd0\x8c\x44\x61\xf0\xb3\xa4\xab\x0b\x29\x51\xba\xe4\x49\xc4\xa4\x84\x93\x0b\x44\x2c\x06\x03\x1c\x6c\x25\xd3\xa5\xe4\xf8\xab\x0e\x83\x2b\xb1\x58\x30\x69\x65\x33\x21\x97\x54\xbb\xf5\x87\x40\xe5\x42\x01\x21\x24\xe7\x9a\xc9\x8c\x26\x6c\x5b\xc7\x61\x18\x30\x29\xa7\x42\x7c\xa4\xfc\xf9\x56\x6c\x14\x9c\x5a\xb3\x8a\x5c\xb3\x4d\x34\xd0\x42\xc0\x92\xf2\x67\x90\x62\xa3\x06\xb1\x91\xbe\xe7\xaa\x5c\x21\x26\x2c\x9d\xc8\x7c\xcd\xe4\x8e\x4e\xd9\xcd\x43\x6a\x04\x9c\xe2\xc5\x72\xa5\x9f\xef\x57\x29\xd5\x6c\x47\x85\xe1\x0c\x94\x66\x6a\x10\x63\x32\x30\x00\x28\xc4\xc2\x84\xfa\x35\x91\xc0\x36\x0c\xf2\x0c\x5c\xfc\xaf\x4e\x81\xe7\x05\x8e\x39\x44\x9c\x09\xab\x4b\x08\x89\xc3\xa0\x0e\xeb\x30\xd4\xcf\x2b\x06\x66\x91\x73\x91\x32\xc0\x54\x84\x89\xe0\xca\x94\x6f\x3b\x3e\xbb\xe7\x8f\x5c\x6c\xb8\x27\x79\x0a\xb9\xd0\xb4\x2f\xb3\x83\x8b\x3f\x79\x2d\x10\x5d\x7f\x64\x5a\x4d\x04\x67\xbd\x91\x2e\x0d\xfe\xf0\x39\xba\x23\x69\xce\xf5\x4f\xb9\x28\x28\x96\xa5\x3f\xed\xa1\x8a\xc0\x75\x01\x21\x5c\x65\xa2\x11\x04\x2c\x20\x83\x77\x18\x18\xe7\x5b\xed\x30\x70\x29\xb4\xd0\xe2\x74\xb3\x58\x3b\xf4\x63\xc9\xe4\xf3\x5d\x99\x65\x79\xd5\x8c\xd5\x2e\x41\x11\x6b\x8b\xd1\x26\x2a\x76\x12\xb8\x68\x53\x97\xe4\x42\x4a\xe2\xa6\x5b\xcd\x8d\x2d\x6b\xcf\x80\xab\x66\x93\xc5\xb6\xe8\xbb\x34\x36\xd6\x30\x6f\xcd\x8f\x9f\x1b\x23\x9d\xdd\x25\x7d\x64\x66\xa8\x89\xb8\x6f\x98\x1d\x34\xca\xf3\xc2\x98\x65\x48\x93\x6f\x8d\x3f\xdb\x0b\x29\xc7\x6e\x4f\xa9\x4d\xae\x93\x07\xa3\xbb\x0d\x83\x84\x2a\x06\xea\xa9\xc0\x90\x6c\x56\xc7\x61\x10\x30\xe2\xaa\x62\x3f\xe5\xbe\x82\x4d\xfa\x11\x85\xa6\x22\xba\x00\x37\xfb\x01\x96\xbb\x55\x16\xa5\x7e\x06\xbd\x70\x77\x6c\xb8\xb8\xc2\x20\x68\x42\xdb\x2b\xd8\x61\x18\x98\xfa\x18\xc3\x0b\x55\x8d\x42\xf6\x6b\xec\xb6\xf7\x30\x0c\xea\xce\x41\xd6\xd5\x63\xf4\x2d\xde\x78\x75\x7c\xc8\x8f\xfe\xb4\xb7\x9e\xee\x76\x4d\xf4\x84\xa5\x3a\x53\x7e\xad\x7e\x8b\x0b\xde\x06\x3c\xe4\xc2\xce\xb4\xb7\x2f\xc6\xe0\xaf\xdc\xf7\x2f\xd9\xdf\xbe\x5d\x75\x0e\xbd\xe9\x3f\xe0\xf0\x21\x2f\x0f\xd0\x85\x15\x6b\x86\xc7\xde\x9a\xad\xab\x86\x36\x5c\x25\xb5\xb4\x6a\xa8\xa3\x62\x89\xc5\xf5\x65\xfa\x8d\xb0\xc2\x6f\x99\x2a\x0b\x3d\x74\x3b\xcf\x51\xc7\x57\x69\x9f\x18\x75\x44\xb6\xaf\x7c\x2b\x36\x5f\xa3\xdf\xa8\x63\x28\xae\x71\x72\xa1\xdf\x7f\x12\x46\x6a\xa7\xdb\xa4\x4c\xe9\x9c\x1b\x64\x80\x0b\x0d\x14\x56\x56\x0e\xfb\x54\x21\x94\x7a\x3e\x17\x7c\xcd\xa4\x42\x81\xbe\xaa\x99\x45\xfc\xdc\xb4\x6d\x56\x06\xbc\xc9\x99\x47\xb8\xc6\x9f\xc9\x59\x18\xa4\xf3\x8f\x4c\x3f\x88\x54\x85\x61\xf0\x4f\x21\x1e\x95\x27\x14\x5c\x8b\x8d\xed\xd4\x31\xe0\x41\x86\x4c\xf3\x25\x73\x7d\xc9\x94\xce\xcd\x8a\x71\xb7\xbd\x87\xa0\x44\x29\x13\xd6\x16\x49\x94\xce\xe1\x64\x72\x66\xe0\x6a\x98\x6e\x1b\x06\xea\xa9\x98\xa5\x73\x3b\x3a\x3e\x35\xb4\x73\xc0\x4a\xdc\x92\xe1\xab\x43\x64\x38\xf4\x69\xd4\x74\xca\x20\x65\x59\x73\xac\xb0\x4b\x80\x0b\xd1\xac\x7a\xc0\x9a\xf3\x84\x9c\x17\x42\xb1\x28\x0e\x03\xb4\x52\x3b\x65\x3c\x77\x38\x15\xeb\x24\x4a\x7e\xca\xf9\x22\x8a\x7f\xf8\x16\xb7\x10\x5f\x38\x85\xb7\x93\x33\x94\x9c\x9c\x8d\x9d\xad\xa1\xf5\x79\x4e\x0c\xe4\x04\x71\x3e\xb5\x10\x5f\x8b\x4d\xd8\x32\xba\xab\xf7\xad\x7f\x58\x9c\xe4\x14\x0f\x9f\xf6\xa0\x68\xa8\x1b\x4f\x8b\xd7\x74\xc9\xe0\xbf\x60\xce\x6a\x19\x0c\xde\x3c\x0d\xa0\xae\x91\xc6\xd3\x39\x69\x53\x0c\xa7\xc0\xd9\xa6\x15\xaf\xeb\x08\x23\xed\x1d\x44\x59\x72\xc3\x31\x1f\xc6\x3a\x42\x30\x1b\xc2\x0e\x0c\x66\xc3\x6d\xb7\xbd\xb5\xf0\xb4\xba\x8f\x4c\x0f\x9a\x74\x4e\xfa\xe8\x04\xbd\xf3\xad\xf7\x89\xb9\xa4\x65\xa1\xc7\x3b\xe0\x1e\xeb\x2c\x0e\x69\x27\x8a\xc5\x85\xfd\xb2\x3d\x02\x88\xf9\xef\x58\x88\x31\xb8\x4c\x43\xd4\xaf\x48\xa7\x27\xe6\xbf\xb7\x0e\xe2\xf7\xe4\xac\x29\x8d\xf8\x80\x2d\x53\xb3\x89\xae\xc0\xdd\x1b\xc8\xb9\xfd\x17\x99\x62\x5a\x0d\x3d\xf3\xba\x6a\x8b\xdd\x99\x3d\x63\x8b\x9c\x47\x5f\x2c\x71\xdf\xa1\xae\x9e\x9c\xc4\xdb\x69\x85\xf2\xba\x1a\x83\x46\x3e\x0f\x74\xe5\x92\x3c\x36\x8a\x48\xc9\xd3\x2a\xd2\x55\x8c\xa5\xd6\x20\xb2\xdd\x42\x9e\xb5\x77\x2e\x72\x67\xe1\xbc\xad\x10\xf5\x9d\x00\xaf\xd9\xe6\xb6\x8a\x62\x38\xb9\xad\x3c\x90\xde\xde\x56\xdb\x74\x6e\x96\xa8\xad\x3d\x97\x33\xa3\x3d\x61\x05\xd3\xec\x7d\x51\x1c\x42\x06\x2b\xc0\x9a\x8e\x72\xae\xff\xfa\x97\x23\x18\xa5\x73\xd2\x60\xfb\x12\x42\xdf\x19\x85\xdd\x9d\xdf\xdb\xeb\xde\x31\x2a\x30\xbf\xfd\x12\xd4\x15\x39\x17\xcb\x65\xae\x31\xbd\x6d\xa5\x9a\xa2\x6c\x2d\xcc\xa4\x28\x8a\x39\x4d\x1e\xd1\x2f\x5d\x91\x5b\xf7\xd3\x71\x40\x37\xed\x97\x7c\x7b\x25\x18\xa4\x06\x8d\x77\xb4\x28\xc6\xd0\x8a\xe2\x8d\x8c\xa5\x63\x78\xb3\x1e\xec\x6e\x89\xd6\x5e\xdc\x92\x51\xdc\x02\xaf\x2b\x92\xfa\xe8\x76\x3d\x71\x5a\x79\x8c\xad\x2b\x4b\x7b\xd3\x2a\xec\x2a\xa2\x6b\x9f\x96\x3a\x8e\x69\xb4\x55\x8e\x63\xad\x6c\x0c\x0d\x50\x47\x36\x8e\x07\x69\x0f\xd5\x63\xe6\x3a\x18\xbf\xca\x60\x27\x6e\x4c\x1e\x61\x42\x33\xfe\x3a\x9d\x9b\x38\xc7\xa7\xfb\x84\xa8\x26\x67\x03\xf3\xb0\x60\x04\x75\x75\x5c\x70\x5a\x79\x82\xf9\x72\x55\x1c\x17\xbd\x5c\xae\x8a\x81\x59\xde\xc8\x6c\xb7\x9e\x42\x5d\x7b\x28\xa7\x73\x30\x7f\x4e\x4c\xcb\xb5\x7e\xc3\x6c\xa6\x9e\x8a\x79\xc9\xd3\x82\xcd\x3c\x52\x0e\x03\x47\xfb\x8e\xfe\x77\xd8\x67\x67\x91\x18\x2f\xa1\x77\x7a\xa9\x23\xa5\x97\xfd\x1b\x28\x21\x04\x76\x6f\xa0\xde\x3a\x57\x9e\x9e\x77\xed\xfc\xc2\x6a\x2f\xdd\x5f\xbc\x63\x1b\x88\xc7\x86\xf1\x72\xd5\x1d\xed\xec\xd6\xb0\x6c\x96\x67\x28\xe4\xed\xe9\x23\x07\x51\xff\x08\x1a\xfb\x97\x8f\x1e\x39\xfa\x39\x70\x65\xb0\x9b\x01\x03\xfe\x6e\x44\x6d\xbc\x7b\x9d\xd1\x92\xd5\x49\xdf\xa0\x47\x85\xbd\x89\xad\x69\xb5\x63\x30\xad\x3d\xd8\x59\x63\x6c\x85\xbd\x11\x43\x15\x28\x6f\xfe\x58\x25\x97\xf6\x31\xfe\x26\x93\x33\x1c\xaa\x87\xfe\x69\xab\xcb\x48\xbb\x6c\x0c\x77\xc9\x03\x5b\xd2\x43\xf7\xda\xdf\x30\x1c\x3b\x7d\xf7\xe3\x15\xd4\xf5\x6f\x2f\x5b\x6a\x5b\x46\x43\x08\x31\xb4\x14\xb2\x1b\xb7\xdb\x3f\x2e\xee\x66\x6f\x8f\x3b\x86\xd9\xda\xce\x54\xff\x01\x34\xb0\x66\x76\x11\xb1\x3d\xae\x85\xa3\xcd\x74\xeb\x87\x9f\xe9\xc6\x87\x17\x92\x7d\x64\x1b\x7c\xf1\x01\x67\x34\x82\xe9\xcd\xe4\x66\x0c\x92\xf1\x94\x49\x58\x15\x34\x61\x0f\xa2\x48\x99\x54\x47\x9e\x77\x44\xa9\x71\x27\x74\x4f\x69\x59\x34\xc0\xb5\xc6\xf0\x46\xfd\xca\x71\x21\xec\x06\xbf\xf2\xc1\x10\xec\x4e\x5c\x49\xa6\xf5\x73\x84\x33\xa6\x13\xb8\xf7\x21\x51\xea\xe6\x4d\xc8\x3b\x2b\x59\x28\xac\x0a\xfc\xf2\xd9\xf3\xb7\x49\xf5\xca\xcd\xc6\xf0\xc1\xbc\x30\x45\x99\xf5\x45\xe3\x45\x15\x12\x90\x25\x67\x26\x36\x1c\xfd\x60\x3c\x8c\xb2\x21\x0c\x7e\x19\xc4\x21\x67\x95\x5e\xd3\x62\x1c\x06\x99\x90\x90\x0f\x61\x4d\x0b\x0c\xc6\x12\xf0\xaa\xe9\xb6\x39\xfc\x1d\xbe\xb3\xed\x6f\xc7\xc8\x10\x06\xae\x99\x05\x72\x6d\x34\xed\xd3\x29\xf9\x89\x16\x25\xbb\xc9\xa2\x35\x2d\x62\x6b\x44\xae\xc9\xbf\x72\x9e\x46\x31\x36\xee\x46\xec\x93\x96\xd6\xae\x15\xb8\x54\xd7\x79\xe1\xba\xfc\xde\x5a\xd7\xf7\x57\x57\x66\xb5\x00\x89\x48\xe7\xbc\x64\xf8\xa3\x06\xfc\x1b\x1d\x3f\x45\x13\x17\x05\x5b\x46\x31\xb9\x6c\x80\x6a\x4e\xfe\xcd\x91\xdb\x78\xb9\xa6\x05\x89\x10\x59\xbb\x94\x7d\x20\x31\xa5\x31\xee\x07\x99\x99\x95\xdf\x3c\x0d\x86\xb0\x8e\x1b\xc9\xf6\xaa\x74\x58\x58\xa1\x30\x71\xc9\x30\xb2\xb7\x1f\xce\xbf\xff\xfe\xfb\xbf\x5d\x53\x2e\xe2\xd6\xca\x2f\x9f\xe7\xcf\xda\x99\x10\x12\xcf\xe1\xf3\x0e\xfa\xb5\x83\x20\xcf\xe0\x95\x7b\x5a\x26\x97\xea\x93\xc1\x02\x13\x1a\xcd\xe3\x06\xa5\x7d\x07\xfe\x54\x35\xee\x7a\x50\x81\xcb\xb5\x19\xad\xc3\xe6\xaf\xe3\xa1\x7a\x87\xf4\x7d\xa9\x75\x23\x55\x1b\xc2\xde\xc9\xd4\xe7\x81\x6b\xe5\x4d\x27\xbf\x33\x9b\x57\x35\xf7\x80\xd7\x6e\x33\xb7\x3d\xb7\x6d\xc7\x89\x64\x54\x33\x6f\xfa\xdc\x0c\x58\xfd\xbe\xa8\x7d\xac\xf5\x44\xed\xdb\x8c\x27\xda\xeb\xdb\x4e\xd0\x67\x12\xef\xa8\xf1\x21\x67\x45\xda\xbd\xcd\x3b\x75\x43\x23\x53\x47\x2d\x3b\x77\x99\x03\xe7\xec\x7b\xc5\x64\x4a\x35\x35\x0b\x07\xa5\xfb\x35\x5b\x96\xfe\xb3\x7a\x3b\x8e\x54\xe8\x6f\x67\x67\xdf\x23\xb1\xa8\xe7\x77\x0c\xb3\x29\x9d\x17\xcc\x6b\x05\xe0\x28\x7b\x60\xfc\xc4\x49\xa8\xeb\x01\x38\x06\xc9\xb3\xe6\x7f\x5c\x68\x71\xc9\x15\x93\xba\x8b\xb2\xc3\xa5\x87\xf8\x11\x74\x8e\x59\xd9\xc3\xaa\x0f\xbe\x87\xd8\x21\x52\xc3\xd5\x7b\x49\x3c\xb2\xba\xc9\x2b\x06\xf7\x7f\x2c\xbc\x97\x66\x53\x42\x99\x57\x3d\xfb\x16\x5e\x27\x5a\x98\x2b\x4b\x77\x1e\x9c\xbd\x51\x03\x20\x1f\x45\xca\x0a\x23\x49\xf6\xeb\x2c\x3b\x10\x4c\x30\x53\x4c\xc3\x5c\x88\x22\x0c\x66\x6b\x64\xc6\x5e\x65\x79\x4d\xcb\xae\x59\xd7\xd1\xda\x48\x9c\x6b\x21\x0d\x93\x9a\xfc\xef\x98\xdf\xb6\x59\xfe\x58\x22\xd9\x7f\xb0\x97\xfa\x35\x9c\x1a\x5d\x6f\x30\x5a\xc7\xbd\xfb\xb7\x2b\x9b\xbe\xbd\x2d\xa0\x97\x63\xd0\xb2\x64\x43\xb0\x6e\x8e\xc1\xde\x28\xc9\x94\x3e\xb2\xf7\x69\x8a\xae\xbd\x6d\x2f\x85\x6b\xa8\xdb\x3b\x27\xb9\x2e\x8b\xc2\x55\xe0\x5e\x34\xb3\x5b\xba\x71\x11\x4d\x9b\xd3\xc8\x5e\x30\xc8\x75\xeb\x03\x6f\xe3\xbe\x1d\x5c\x24\xea\x9d\x11\x7d\xcc\xf6\x7d\x3d\xe9\x7c\x8d\x0f\xc1\xec\x0c\x1e\x70\xe6\x8b\x10\x41\xff\x7e\xec\x76\x6c\xb6\xa3\x11\x83\xc1\x31\x8a\xfd\xad\x0e\xc6\xcf\x57\x19\x31\x65\xd1\xee\x62\x8c\xbb\xfe\xa1\xf9\x95\x11\x57\x29\x3d\x36\xf0\x2d\xcf\xce\x45\x51\x2e\xf9\x31\x3e\xb0\xb3\x3e\x21\xa0\xab\xef\xfa\xdb\xa3\x79\xc1\xbe\x9f\x9e\x47\xba\x6b\x6c\xde\x73\xa0\x07\x86\x26\x28\xe6\x3f\x7c\x4f\xa8\x66\x2f\xe8\x8d\x46\xf0\xc8\xd8\x0a\xca\x15\xe8\x07\x06\xcb\x9c\x97\x9a\x01\x52\x65\x2e\x38\x28\x01\xfa\x81\x6a\xd0\x92\x72\x65\xaf\x03\x0a\xe6\x4c\x6f\x18\xe3\xc6\xce\x7f\x04\x67\x0a\x36\x79\x51\x18\x53\x6d\x27\xd3\xa2\x39\x3f\xc0\x4a\x8a\x15\x93\xc5\x33\xf1\x9c\x9c\xca\x92\x27\xc6\x31\xf4\xe5\xa3\x59\xd4\x38\x3d\x1a\x85\xa3\x11\x9e\x87\x70\x02\xdc\x5b\x13\x60\xf3\x35\xff\x9b\x8a\x10\xaa\xa7\x02\x14\xee\x9b\x25\xe3\x5a\xa1\x46\x68\xe8\xe5\xc7\x2b\xc7\xf1\x50\xb7\x86\x10\xc2\x6f\x34\xf6\xbf\x00\x00\x00\xff\xff\x63\xd1\xc8\x82\x12\x1f\x00\x00")

func golangHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangHeaderTmpl,
		"golang.header.tmpl",
	)
}

func golangHeaderTmpl() (*asset, error) {
	bytes, err := golangHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.header.tmpl", size: 7954, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangMiscTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x8e\xc1\xca\x83\x30\x10\x84\xcf\xbf\x4f\x31\x04\xff\x5b\xf5\x01\x84\x5e\x7b\x29\xf4\x24\x3d\x1b\xea\x2a\x01\x1b\xac\x89\x07\xd9\xee\xbb\x97\x35\x25\x2d\xf4\x36\x99\xf9\x66\xb2\xcc\x15\x7a\x1a\x9c\x27\x98\x10\x97\xf5\x16\x0d\x44\x8a\xb8\xcd\x04\x66\xd4\x17\x7b\x27\x88\x20\x65\xe0\x82\x19\x8b\xf5\x23\xa1\x3e\x39\x9a\xfa\xa0\xf4\x1f\x33\xdc\x90\xe1\xef\x1e\x33\xc8\xf7\x6f\xb3\xd5\xd5\x5d\x2a\xdd\xda\x31\xa0\xd2\x7a\x97\x47\x4b\x77\x40\x19\xd1\x1c\x3f\x71\xa2\x4b\xf7\xb3\x76\xa6\x0d\x22\x8d\xca\xab\x9d\x56\xc2\x13\xf3\xe2\x7c\x1c\x60\xfe\x1f\x26\x41\x89\xee\xf4\xc2\x6a\x7f\xe8\x7f\xd9\x2f\xb2\x56\xfb\x15\x00\x00\xff\xff\x8e\x34\xcf\xa7\x0b\x01\x00\x00")

func golangMiscTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangMiscTmpl,
		"golang.misc.tmpl",
	)
}

func golangMiscTmpl() (*asset, error) {
	bytes, err := golangMiscTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.misc.tmpl", size: 267, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangUpdateTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x4d\x6f\xe3\x36\x10\x3d\x4b\xbf\x62\xaa\x13\x05\x3b\x44\xd1\xe3\x02\x3e\x04\xdb\xb4\x35\xd0\x1a\x69\xb2\xdb\xcb\x62\x21\xd0\xd6\x48\x60\x42\x91\x36\x49\xd9\x09\x04\xfd\xf7\x62\x48\x39\x96\x63\x25\xdb\x6d\x2f\x3d\xf8\x40\x6a\xe6\xf1\xcd\xbc\xf9\x70\xd7\x5d\x41\x89\x95\xd4\x08\x99\x93\xb5\x16\xbe\xb5\x98\xc1\x55\xdf\xa7\x9f\xb7\xa5\xf0\x58\x74\x1d\xf0\xfb\xb6\xaa\xe4\x13\xf4\x3d\xeb\x3a\xd8\xf8\xa7\xad\xb0\xa2\x01\x7e\x6d\x6b\x07\x7d\x3f\x4f\x93\x36\xd8\x42\xb0\xf5\xb6\xdd\x78\x1e\xbd\xe3\x61\x25\x1a\x84\xbe\xcf\x81\xa5\x49\xd7\xc1\xe0\x7d\x87\xbe\xb5\x9a\xfc\x01\xad\xa5\x9f\xb1\x79\x4a\x84\x50\x97\x81\x41\x3a\x66\x27\xf5\xde\x3c\x7e\x9b\x9a\xb0\xf5\x89\x18\x44\x5e\xef\xa0\xae\x4d\xf9\x1c\x31\x89\x19\x36\x6b\x2c\xdd\x4e\x01\x5f\xea\xca\xdc\x5a\x24\xe8\xac\x28\xc2\x7d\xe1\x7c\xe3\x8b\x6d\xb8\xcc\x80\x3c\xf6\xc2\x42\x31\xbe\x86\x05\x9d\x77\x6a\xdd\xea\x52\x61\x71\x87\xba\x44\xcb\xcc\xfa\x81\x97\x52\x28\xdc\xf8\x39\x4c\x80\xcd\xcf\x9c\x56\xe6\x13\xda\x46\x6a\xe2\x0d\x33\xc8\x20\x9b\xa0\x36\x44\x7d\x4e\xcd\x85\xcb\x0b\x6a\xf1\x1a\x16\x04\x05\xb3\xef\x23\x18\x7d\xf3\x34\x02\xee\x1c\x7c\xf9\xba\x7e\xf6\x18\x8f\x7b\xa1\x5a\xa4\x2b\xa9\x3d\xda\x4a\x6c\xb0\xeb\xd3\x40\x56\x56\xc0\x6f\x8d\x93\x5e\x1a\x2d\xd4\xb5\xad\xdb\x06\xb5\x77\x81\xd9\x03\x7c\x58\x50\xa1\x28\xd4\x2f\x42\x11\x5e\xc0\x5a\x80\xd8\x6e\x51\x97\x2c\x9e\xe7\x64\x58\x49\x54\x65\x38\xbf\xd8\xe7\x31\x25\x47\x41\x13\x51\x96\xc7\x47\x08\xbd\x6a\xf5\x86\x69\x2a\x3a\xe7\xad\xd4\x75\x0e\x5d\x9a\x24\xbb\x11\xfc\xce\xcd\x81\x0c\x38\xe7\x79\x9a\x24\x54\x11\xef\x71\x4e\x1e\x66\xb3\x09\x84\x0c\x42\x24\xfc\x68\x3c\x14\x4c\xdf\x67\x03\xee\x6b\x07\xe7\xed\xc6\xe8\x3d\x5f\x7a\x23\xd8\x43\xfe\x86\x55\x36\x87\x6c\x44\x0c\x95\xc3\xc8\xe2\x1f\xbf\xff\x0a\x40\x97\xc1\xbf\x4f\x93\x82\x00\x4e\xc9\x8a\x6a\x59\xa1\x6b\x3c\x6f\x5c\xb1\x56\xf8\x0b\xe5\x3d\xc6\x2f\xab\xa1\x93\x38\x3d\x37\xb4\x33\x2f\x1c\xfa\x90\xd9\x11\x22\xcb\xc8\xe2\xa3\x51\x6d\x43\xad\x9d\x11\x87\xb7\xb4\x9d\x80\x0c\x9f\x58\x9e\x07\xb2\x83\xc4\x7d\x2c\xaa\xa8\xd0\x0a\xb1\x74\x2b\x73\x08\xb4\x8a\x42\x9b\x03\x09\x1e\x0a\x78\xcd\x7f\x33\xe6\xd1\xf1\x95\x39\xb0\x9c\x7f\xfe\xf4\x91\x9d\x97\xc9\x28\xd4\xeb\xd6\x9b\x51\x78\x17\xfc\x07\x3a\xc4\xfe\x9d\xc2\xe4\x4b\x2d\xfd\x5f\x42\x9d\x15\x64\x7f\x6a\x01\x6d\xfc\xc5\x53\xb2\xa2\xc2\x67\x3b\x97\xc3\x62\x01\x3f\x86\xf4\xd9\x38\x08\xb5\x54\x73\xc0\x66\xeb\x9f\xe3\x78\x63\x53\x59\x78\xc1\x9d\x2a\xd5\xab\xff\xd2\x49\xe1\x81\x38\x32\x28\xa5\xe7\x73\x6d\x36\x74\x12\xdb\xb9\x2f\x1f\x86\x00\xae\x7e\xfa\x9a\xc7\x79\x72\x9a\x14\x69\x42\x52\x28\x53\xdf\xfb\xc6\xb3\xf8\x69\x3e\x0c\x8a\x50\x91\x31\x06\x2d\xfd\x68\xfe\xbf\x8c\x8c\xfb\x76\xbb\x35\xd6\xbb\xf8\x45\xea\x3a\x7c\xa4\xe5\x30\x48\x6c\xe5\x1e\x2d\xff\xb3\x45\xfb\x7c\x67\x0e\x13\xf8\xfc\x7e\x23\x34\x6d\x02\x51\x96\xd6\x54\xc0\x2a\x25\xbc\xa7\x49\x13\x31\xf3\x18\xb2\xac\xc2\xca\x59\x2c\xc0\xed\x14\xbf\xb1\x76\x65\xee\xcc\xc1\x5d\xa8\xa1\xa5\x0a\x1a\x0c\xf6\x3f\x2c\xe8\xe6\xc2\x8a\xa8\x35\xe2\x11\x6f\xac\x65\x68\xed\x49\x36\x6a\xdc\xa0\x49\x11\x57\xdc\x59\x14\x37\x4f\xb8\x99\xca\xd0\xbf\x78\x6c\x62\x41\xfc\x8a\xfe\xd5\x76\xa8\xd1\x5f\xac\x86\x1a\xfd\xf7\xae\xac\x1a\x7d\x7e\xae\x72\xc6\x96\x7f\xdc\xfe\xbe\xbc\xf9\x39\x3f\xee\x97\xc1\xee\xed\x9a\xfb\xb6\xa8\xef\xfa\xff\xbf\x54\x3e\x8e\x97\xc1\x98\x68\xd1\x7f\x90\xd1\xdf\x1b\x7a\x60\xfc\x0f\xe4\xef\x00\x00\x00\xff\xff\x12\x5d\xc8\x3d\x75\x09\x00\x00")

func golangUpdateTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangUpdateTmpl,
		"golang.update.tmpl",
	)
}

func golangUpdateTmpl() (*asset, error) {
	bytes, err := golangUpdateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.update.tmpl", size: 2421, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"golang.create-raw.tmpl": golangCreateRawTmpl,
	"golang.create.tmpl": golangCreateTmpl,
	"golang.decl.tmpl": golangDeclTmpl,
	"golang.delete-all.tmpl": golangDeleteAllTmpl,
	"golang.delete-world.tmpl": golangDeleteWorldTmpl,
	"golang.delete.tmpl": golangDeleteTmpl,
	"golang.dialect-postgres.tmpl": golangDialectPostgresTmpl,
	"golang.dialect-sqlite3.tmpl": golangDialectSqlite3Tmpl,
	"golang.footer.tmpl": golangFooterTmpl,
	"golang.get-all.tmpl": golangGetAllTmpl,
	"golang.get-count.tmpl": golangGetCountTmpl,
	"golang.get-first.tmpl": golangGetFirstTmpl,
	"golang.get-has.tmpl": golangGetHasTmpl,
	"golang.get-last.tmpl": golangGetLastTmpl,
	"golang.get-limitoffset.tmpl": golangGetLimitoffsetTmpl,
	"golang.get-one-all.tmpl": golangGetOneAllTmpl,
	"golang.get-one.tmpl": golangGetOneTmpl,
	"golang.get-paged.tmpl": golangGetPagedTmpl,
	"golang.get-scalar-all.tmpl": golangGetScalarAllTmpl,
	"golang.get-scalar.tmpl": golangGetScalarTmpl,
	"golang.header.tmpl": golangHeaderTmpl,
	"golang.misc.tmpl": golangMiscTmpl,
	"golang.update.tmpl": golangUpdateTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"golang.create-raw.tmpl": &bintree{golangCreateRawTmpl, map[string]*bintree{}},
	"golang.create.tmpl": &bintree{golangCreateTmpl, map[string]*bintree{}},
	"golang.decl.tmpl": &bintree{golangDeclTmpl, map[string]*bintree{}},
	"golang.delete-all.tmpl": &bintree{golangDeleteAllTmpl, map[string]*bintree{}},
	"golang.delete-world.tmpl": &bintree{golangDeleteWorldTmpl, map[string]*bintree{}},
	"golang.delete.tmpl": &bintree{golangDeleteTmpl, map[string]*bintree{}},
	"golang.dialect-postgres.tmpl": &bintree{golangDialectPostgresTmpl, map[string]*bintree{}},
	"golang.dialect-sqlite3.tmpl": &bintree{golangDialectSqlite3Tmpl, map[string]*bintree{}},
	"golang.footer.tmpl": &bintree{golangFooterTmpl, map[string]*bintree{}},
	"golang.get-all.tmpl": &bintree{golangGetAllTmpl, map[string]*bintree{}},
	"golang.get-count.tmpl": &bintree{golangGetCountTmpl, map[string]*bintree{}},
	"golang.get-first.tmpl": &bintree{golangGetFirstTmpl, map[string]*bintree{}},
	"golang.get-has.tmpl": &bintree{golangGetHasTmpl, map[string]*bintree{}},
	"golang.get-last.tmpl": &bintree{golangGetLastTmpl, map[string]*bintree{}},
	"golang.get-limitoffset.tmpl": &bintree{golangGetLimitoffsetTmpl, map[string]*bintree{}},
	"golang.get-one-all.tmpl": &bintree{golangGetOneAllTmpl, map[string]*bintree{}},
	"golang.get-one.tmpl": &bintree{golangGetOneTmpl, map[string]*bintree{}},
	"golang.get-paged.tmpl": &bintree{golangGetPagedTmpl, map[string]*bintree{}},
	"golang.get-scalar-all.tmpl": &bintree{golangGetScalarAllTmpl, map[string]*bintree{}},
	"golang.get-scalar.tmpl": &bintree{golangGetScalarTmpl, map[string]*bintree{}},
	"golang.header.tmpl": &bintree{golangHeaderTmpl, map[string]*bintree{}},
	"golang.misc.tmpl": &bintree{golangMiscTmpl, map[string]*bintree{}},
	"golang.update.tmpl": &bintree{golangUpdateTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

