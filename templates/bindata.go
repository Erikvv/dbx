// Code generated by go-bindata.
// sources:
// golang.delete-all.tmpl
// golang.delete.tmpl
// golang.footer.tmpl
// golang.funcs.tmpl
// golang.header.tmpl
// golang.insert.tmpl
// golang.select.tmpl
// golang.update.tmpl
// postgres.tmpl
// sqlite3.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _golangDeleteAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x91\x3f\x6b\xf3\x30\x10\xc6\x67\xdf\xa7\xb8\x37\x93\x0c\x8e\x79\x87\xd2\xa1\xe0\x21\xd0\x6c\x5d\xda\x0c\x1d\x1d\xc5\x3e\x05\x15\x47\x32\x27\x99\xa6\x1c\xfa\xee\xc5\x7f\x70\x02\xdd\x22\xd0\x74\x3c\xbf\xdf\x73\x92\xc8\x16\x5b\x32\xd6\x11\x6e\x82\x3d\x3b\x1d\x07\xa6\x0d\x6e\x53\x82\x57\xea\x28\x92\x08\x96\x87\xc1\x18\x7b\xc5\x94\x94\x08\xf6\x9a\xf5\x25\x60\xb9\xe3\x73\xc0\x94\x72\x54\x8d\x1f\x5c\x44\xeb\xe2\xf3\x53\x81\xc4\x3c\x5e\xcf\x39\x8c\x6c\x72\xed\x04\x83\x7b\xd1\xc9\xb7\x3f\x93\x43\x20\x6b\xbc\x0b\x11\xeb\x3a\xc4\x4b\xac\x8e\x93\xed\xfd\x0d\x53\x3a\x42\x56\xd7\x3d\x53\xaf\x99\xda\x02\xeb\x9a\xa9\xef\x74\x43\xb3\xe1\xa5\x42\x7f\xfa\x2a\x97\xb9\x9a\xe3\x39\x64\xd6\x4c\xe3\x7f\x15\x3a\xdb\xa1\x00\x2e\x87\x29\x0e\xec\xf0\x7f\x81\x9f\xac\xfb\x3d\xb3\x22\xe6\x1c\xb2\x04\x59\x4b\x86\xf8\xc6\x57\x39\x64\x23\xba\xf3\xe7\x43\xbc\xc4\x05\x5d\xa0\x08\xea\x71\xe3\x75\x6f\x98\xe0\x63\x2e\xac\x9d\x6e\x8d\xcb\xfd\x95\x1a\xf5\x37\xf4\x48\xc3\xe9\x7d\x67\x47\x35\x0b\xcb\x0f\xff\x1d\x76\xc6\x50\x13\xa9\x55\x0f\x51\xe1\x6e\xbc\x08\x9c\xed\x20\x81\xc8\xfa\x69\xbf\x01\x00\x00\xff\xff\xba\xb4\x72\x4f\x1d\x02\x00\x00")

func golangDeleteAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteAllTmpl,
		"golang.delete-all.tmpl",
	)
}

func golangDeleteAllTmpl() (*asset, error) {
	bytes, err := golangDeleteAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete-all.tmpl", size: 541, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeleteTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x91\xb1\x6a\xc3\x30\x10\x86\x67\xdf\x53\x5c\x33\xc9\xe0\x98\xce\x85\x14\x02\xcd\xd6\xa5\xcd\xd0\x51\x51\xac\x53\x70\x71\x24\x73\x92\x69\xca\xa1\x77\x2f\x76\x4c\x62\xe8\x16\x83\xa7\xbb\xff\xfb\xfe\x43\x22\x6b\xb4\xe4\x5a\x4f\xb8\x8a\xed\xc9\x9b\x34\x30\xad\x70\x9d\x33\xbc\x51\x47\x89\x44\xb0\xde\x0f\xce\xb5\x17\xcc\x59\x89\x60\x6f\xd8\x9c\x23\xd6\x5b\x3e\x45\xcc\xb9\x44\x65\xa7\x45\x8b\xc7\x10\xba\x0a\x89\x79\xfc\x03\x97\x30\xc2\xc9\xdb\x89\x06\x4b\xd3\x31\xd8\xdf\x49\x22\x50\x34\xc1\xc7\x84\x5a\xc7\x74\x4e\x9b\xc3\xa4\xfb\x78\xc7\x9c\x0f\x50\x68\xdd\x33\xf5\x86\xc9\x56\xa8\x35\x53\xdf\x99\x86\xae\x86\x97\x0d\x86\xe3\x77\x3d\xcf\xd5\x35\x5e\x42\xd1\xba\x69\xfc\xb4\x41\xdf\x76\x28\x80\xf3\xc7\x94\x06\xf6\xe8\x4c\x17\xa9\xc2\x2f\x36\xfd\x8e\x59\x11\x73\x09\x45\x86\xc2\x92\x23\xbe\x3b\x54\x09\xc5\x88\xef\xc2\x69\x9f\xce\x69\xc6\x57\x28\x82\x66\x3c\xfb\x76\x3c\x4c\x82\x31\x17\x6f\xbd\xee\xad\xeb\xdd\x85\x1a\xf5\x3f\xf4\x68\x4b\xad\x9b\x30\xf8\xb4\x30\x31\xc5\xfa\x33\xfc\xc4\xad\x73\xd4\x24\xb2\xea\x61\x38\x2c\x56\x66\x0f\xbe\xe2\x73\x35\x42\x20\x83\xc8\xed\x25\xff\x02\x00\x00\xff\xff\x2d\x75\xe0\xbb\x33\x02\x00\x00")

func golangDeleteTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteTmpl,
		"golang.delete.tmpl",
	)
}

func golangDeleteTmpl() (*asset, error) {
	bytes, err := golangDeleteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete.tmpl", size: 563, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xce\x41\x0a\xc2\x30\x10\x85\xe1\x75\xe6\x14\x6f\xd9\x0a\xcd\x31\xdc\xb9\xd2\x0b\xa4\xc9\x98\x06\xec\xa8\x49\x84\x48\x98\xbb\x4b\xc1\xee\xba\xfb\xe1\xc1\xc7\x23\xaa\xdf\x17\x63\xe5\xba\x3c\x43\x41\x92\xca\xf9\xee\x3c\xa3\x53\xef\x13\xb2\x93\xc8\xb0\xe7\x8f\xf8\x02\x55\x02\x80\xde\x61\xb7\xde\x76\x96\x80\x49\x15\x00\xe9\x9f\x0a\xf3\xe5\x00\x33\x57\xbf\xf0\xea\x86\x11\xa5\xe6\x24\x91\xcc\xcc\x31\xc9\x50\x1b\x4e\xe5\xfd\x68\xf6\xd6\xc6\xfd\x05\x99\x3d\x94\x7e\x01\x00\x00\xff\xff\xbc\xfa\x73\x3e\xa0\x00\x00\x00")

func golangFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangFooterTmpl,
		"golang.footer.tmpl",
	)
}

func golangFooterTmpl() (*asset, error) {
	bytes, err := golangFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.footer.tmpl", size: 160, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangFuncsTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\xd6\x55\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\x49\x4d\xce\x51\x52\xa8\xad\xe5\x4a\x2b\xcd\x4b\x56\xd0\xc8\x4f\xca\x52\xd0\xaa\xae\x56\xd0\x0b\x4a\x4d\x4e\xcd\x2c\x4b\x2d\x72\x4a\x2c\x4e\x55\xa8\xad\x75\x71\xd2\x54\x00\x09\x07\x67\xa6\xe7\x25\x96\x94\x16\x81\xc4\xc0\x02\x4e\xf9\x29\x95\x20\xed\x04\xf4\x87\x54\x10\xd0\x5f\x5d\xad\x90\x9a\x97\xa2\xa0\x5b\x5b\xcb\x05\x08\x00\x00\xff\xff\xac\x94\x36\x05\x9f\x00\x00\x00")

func golangFuncsTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangFuncsTmpl,
		"golang.funcs.tmpl",
	)
}

func golangFuncsTmpl() (*asset, error) {
	bytes, err := golangFuncsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.funcs.tmpl", size: 159, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\x5f\x6f\xdb\x46\x12\x7f\xe6\x7e\x8a\xa9\xd0\x18\xa4\x23\x53\x79\x38\xdc\x83\x5a\xdf\x21\x8a\x7c\x45\x81\xd4\xee\x39\x0a\x0e\x87\xb6\x68\x57\xe4\x50\xde\x68\xb9\xab\x2c\x97\xb2\x54\x1d\xbf\xfb\x61\x76\x97\x7f\x24\xd9\x69\x7a\x87\x02\xed\x43\x45\x72\x67\x67\x7e\x33\xf3\x9b\x3f\xf1\x64\x02\xaf\xdf\x2f\xee\xbe\xb9\xb9\xbd\xb9\x7f\xbd\xb8\x99\xc3\xec\xdf\xb0\xd2\x9b\xf5\x2a\x15\x6a\x52\x6d\x78\x86\xa5\x56\x6b\xdc\xaf\xf4\x24\x5f\xee\xd2\xed\x2b\x36\x99\xc0\xfc\x0e\x6e\xef\x16\x70\x33\xff\x76\x91\x32\xb6\xe1\xd9\x9a\xaf\x10\x0e\x07\x48\xbf\x0f\xcf\x4d\xc3\x98\x28\x37\xda\x58\x88\x59\x34\xca\xb9\xe5\x4b\x5e\xe1\xa4\xfa\x28\x47\x2c\x1a\x15\xa5\x1d\xb1\x68\x32\x19\x55\xd6\x08\xb5\xaa\xe8\x5b\xb5\x57\x19\xfd\x5a\x51\xe2\x88\xb1\x68\xb4\x12\xf6\xa1\x5e\xa6\x99\x2e\x27\x1f\x4a\x2d\x8c\x56\x74\x7d\x37\x62\x87\xc3\x15\x18\xae\x56\x08\xe9\xcd\xce\x1a\xfe\xad\x33\x54\x91\x51\x00\x70\x38\x5e\xd3\x1b\x8c\x8e\x21\xf9\x9b\xa8\x72\x92\x4c\x18\x79\x22\x4d\x0d\xa2\xdc\x48\x2c\x51\x59\x6e\x85\x56\x50\x68\x03\x1b\x83\x1b\x6e\x30\x87\xca\x72\xeb\xce\x2a\x66\xf7\x1b\x74\xf2\x95\x35\x75\x66\xe1\xc0\xa2\xb2\x06\xff\x1f\x61\x4f\xbf\xab\x2d\xee\x58\x94\x2f\xc3\xc7\x4b\x42\x9b\xce\x67\x2c\xca\xf8\x86\x67\xc2\xee\x41\x28\xcb\x22\xa3\xb5\x75\x02\xa8\xac\xd9\xb3\x48\xa8\x1c\x77\xf4\x5e\xf2\xcd\x0f\x3e\x20\x3f\x5d\xfa\xb3\xc6\x81\x54\xf8\xf8\xf6\xfe\x3d\x18\xb4\xb5\x51\x15\x70\x05\x42\x09\x2b\xb8\x14\xbf\x62\x4e\x90\x52\x56\xd4\x2a\x0b\x72\x71\xbe\xec\x4c\x8f\x61\x68\x3a\x81\x4b\xc2\x7f\x60\x91\x84\xe9\x35\x5c\x48\x53\x1f\x58\x14\xe5\xcb\x69\x40\x9c\x2f\xc7\x2c\xea\xd0\x4e\xbb\xcb\xf4\xd5\xa1\x9c\x7a\x98\x6b\x8c\xcf\xb0\x26\x63\x16\x35\x2c\x92\x29\xb9\x97\x2a\xdc\x59\x20\x13\xee\xb5\xfb\xbc\x31\xb8\x1d\x7e\xf6\x2e\x81\x0c\x8e\x0a\x55\xa1\xb1\xe1\xa7\x02\x04\x5e\x58\x34\xc0\xed\x18\x84\xca\x8c\x4f\x04\xc8\x54\xa2\x0a\x2e\xc7\xd2\xf9\x94\x84\x3b\x31\x8e\x81\x5b\x08\x88\xc8\x53\x45\x9e\x72\x0f\x88\x45\xbc\x43\x86\x2c\xc2\x16\x0e\xb7\xf4\x12\x0e\x14\x8b\x54\x7b\x80\x01\x97\xc1\x52\x6f\x31\xfc\x10\xae\xc2\xe8\x12\x04\x61\x11\x95\x1d\x43\x8e\xc7\xe0\x4e\xb0\xf9\x7b\x31\x0e\x71\x79\xe3\x1d\x9a\x80\xcf\xff\x76\xe6\xdd\xc3\x10\x9b\x90\x30\x99\x00\xdf\x6a\x91\x43\x89\xa5\x36\x7b\x90\xc8\xd7\xd5\xc0\x99\xe7\x65\x1a\x76\x82\x0b\xb7\x22\xb3\xf1\x31\x43\x0e\x2c\x12\x45\xcf\x9a\xaf\xe1\x15\x7d\x0a\x89\xa2\x0c\xb3\xc8\xea\x9f\xdd\x4d\x8a\xac\x44\x15\xcb\xd4\x71\x23\x81\xab\xee\x1e\x8b\xb2\xda\x18\x54\xd6\xf3\x2c\x64\x9b\x2a\x4b\xd0\x97\x57\x5f\x81\x80\xaf\xa1\x55\xf4\x15\x88\x97\x2f\x9d\x99\xf6\xd6\x35\x84\xa7\x10\x01\x87\xa9\x3d\xeb\x34\xba\x2b\xd1\x86\x2b\x91\xc5\x23\x5f\x45\xba\xb6\xa0\x0b\x78\x7c\xe0\xd9\x3a\x05\xc3\x33\x84\x4c\xab\x5c\x50\x65\x57\x7f\x1f\x25\x2c\x22\x92\x0e\xd4\xa5\x06\x8b\x0a\xfe\x16\xdc\x8c\x32\xad\xac\x50\x35\x06\xb9\xc9\x04\x1e\x1f\x34\x87\xa5\xde\x83\xa8\xc0\x3e\x88\x0a\xaa\x7a\x69\x25\xa6\x20\xd3\x40\x8b\xa5\xd4\x8f\x15\xf0\x47\xbe\xef\x94\xba\x7c\x71\x95\x7b\x15\x43\x5f\x52\x58\xd6\xf6\x48\xce\x27\xee\x51\x48\x09\x4b\x84\xb2\xa6\x8e\x93\x83\xd5\xb0\xc4\xf3\xeb\xae\x3b\xd9\x07\x04\x67\x41\x58\x34\xae\x69\x7d\xc1\xa2\x88\xbe\xfc\x3c\x08\xfb\xd0\x06\x63\x51\xd4\xe2\x8d\xc3\x01\xc5\x22\x47\x89\x16\xdb\x0c\x8e\xbb\x3b\x6b\xdc\xd3\xb1\xd4\xab\x4e\x3c\x7d\x67\x4b\x9b\xbe\x91\xba\xc2\x38\x49\xd8\x51\xb2\x86\xa6\x89\x23\x67\x4c\xfb\x06\x6d\xbc\xc6\x3d\xf8\x8e\x91\x40\xec\x2b\x61\x0c\x68\x8c\x36\x8e\x75\x32\x2d\xeb\xf4\xad\xce\xd6\x71\xc2\xa2\x1c\x0b\x34\xe0\x3e\xbd\x57\xd2\x7f\x64\x11\x8e\x41\xaf\x1d\xeb\x3c\xde\x1f\xd6\xb8\xff\xc9\xf1\x55\xaf\x5d\xfa\x3a\x17\xd1\xa1\x4f\xfb\xa6\x10\x18\x43\x9f\xd1\xa5\xfc\xe5\x4b\xd6\xd1\x1a\x70\x4c\x65\xe3\xd9\x5d\xd9\xd2\x3a\x5c\xde\x50\xbe\x4c\xbf\xf7\xc3\x60\x17\xbb\xb7\x7b\x5c\x0a\x95\x93\x37\x49\xe2\x6c\x93\xe8\x17\xbe\xee\xfa\x4a\xa1\xd7\x31\xfc\xcb\xf0\xcd\x8d\x31\x31\x1a\x93\x78\xed\x48\xdd\xcf\xf9\x4e\xb2\x14\xd2\x29\x38\x8b\x2c\x8a\xd6\xb8\xa7\xfe\xba\xc6\x7d\xdb\x4a\x9f\xc2\x3f\xf4\xbd\xed\x63\x9d\x43\xc7\xfe\x9c\xa5\xe1\x1e\x37\x92\x67\x27\x9d\xe8\x73\x02\xef\x2c\x5c\x5d\x91\xb0\x6f\x1a\x32\x6d\x4b\x3d\x39\x37\xf3\x7d\x6d\x56\x18\x7f\xae\xf2\x56\xe5\x2b\xa7\xc9\x4d\x59\x07\x6e\x30\x67\x29\x4e\x61\xa6\xd1\x23\x63\x8e\xec\x63\x70\x15\x11\x46\x25\x85\x0f\xda\x71\xec\x68\x46\xe1\x28\xaa\xf0\x89\x26\x6f\xc3\xd8\x96\x9b\x36\x2b\x70\x0d\x04\x9b\x92\xd3\xd2\xd0\xfd\xc0\xa1\x8d\xa2\x31\x8d\xbb\xf0\x56\xaf\x56\x68\xbc\x74\xa1\x4d\xc9\x6d\xb0\x30\x06\x6e\x56\x15\xa4\x69\x2a\x94\x45\x53\xf0\x0c\x0f\x4d\xe2\xee\xdc\xea\x47\xb8\x06\xda\x65\xd2\x5b\xfd\x18\x22\xe4\xea\x69\x60\xcf\x37\xdb\xa0\x3e\x70\xe8\xe2\xe2\x94\x51\xfe\x3c\x1e\x79\x74\x99\xd4\x95\x50\xab\x7e\x33\x99\xc2\x8b\xed\xc8\x31\x36\x09\xb5\xe7\x62\x38\x9f\x0d\x02\xd8\xad\x22\x14\x0a\xda\x01\x28\x51\xcc\x8f\xfc\xef\xd0\x3e\xe8\xbc\x1f\x0f\x77\x1b\x54\x71\x6e\xc4\x16\xcd\x18\x2a\x5d\x9b\x0c\x3b\x77\xa5\xa9\x7f\xae\xc4\xaf\xe8\x67\x45\x7c\x49\x1b\x46\xef\x4b\xbe\xec\x0a\xc7\xd9\x7b\xa3\x95\xc2\xcc\x9e\x28\xfb\xdd\x55\x13\x75\xa8\xa7\xd7\xfd\x8e\xd3\x83\x49\x98\x13\xa0\xa8\xd3\x2a\x37\x70\xc9\x71\xe1\x51\xd8\xec\x01\x3c\x06\x38\x0c\x97\xc7\xb9\xe0\x12\xb3\x7e\x71\xcc\x78\xe5\xb7\xd8\x5b\x5e\x22\xfc\x07\x36\x46\x28\x5b\xc0\xe8\xc5\xc7\x11\x34\xcd\x94\xe6\x06\xe9\xbf\x86\x8b\x4e\xa8\x69\xe6\xb3\x83\x34\xf5\x94\xd0\x34\xc3\xfd\xd2\x05\x17\x0b\x5e\x4b\x3b\x65\x2d\x31\x9f\x72\xb3\x28\x6d\x7a\x43\x31\x2c\xe2\x51\xad\xaa\x7a\x43\xcb\x2c\xe6\x2d\xe2\x17\xd5\x68\x1c\x9e\x93\xc4\x29\x6a\xfa\x42\xbf\x98\xcf\x28\x7a\xf3\xd9\x34\xec\x6e\x2d\x94\x71\x67\xb2\x8b\xc6\xd4\x45\x87\x5a\xcb\x49\x77\xd0\xcb\x0f\x70\x39\x9f\x25\x10\x9a\x3b\x9c\x50\x54\x2f\x3f\xa4\xb4\x64\x86\xb2\xee\x8c\xb7\x0e\xd0\xf9\x7c\xd6\x8f\x86\x73\xc5\x73\x37\x66\x5e\x4b\x49\xca\xad\xb6\x5c\x12\x81\xfe\xfa\x17\x4f\x97\xce\xd2\x20\x35\xef\x1c\x75\xab\x7b\xdc\xa2\xa9\xb0\x8d\xa7\x28\x40\x75\x14\x73\x66\x9d\xe2\xc3\x01\x36\xb2\x36\x6e\x1f\xee\xf2\x12\x27\x5f\x39\xc9\xeb\x96\x64\x6d\x40\xbc\xfd\x97\xb4\xe9\xb9\x68\x02\x4a\x4a\xfb\x69\x8e\x9c\xd8\x09\x19\x7d\xf4\x4f\x92\x7c\x2c\xff\x74\x64\x5d\x4d\x51\xc1\x2c\x76\xc3\x82\xb1\xbb\x63\x6f\x66\xe9\x0c\x57\x42\xed\xe2\xdf\x3f\x59\x06\x48\x2e\x16\xbb\xc3\x62\x37\x05\xd2\x5e\xb6\xb9\x27\xfd\x4b\x52\x1e\xdb\x5d\xd2\x33\xc0\xb5\x8a\xc5\xee\xac\x55\x2c\x76\x4e\x63\x79\xd2\x1b\x62\xbb\x83\xcb\xc5\x2e\x81\x37\xba\x2c\x85\x3d\xe7\xca\x09\x35\x2c\x69\x4a\x5b\xe1\xe4\x5c\xcf\xbd\x96\x72\xc9\x69\x12\x7c\x96\xa6\x5e\xfc\x09\x5d\x7f\x08\xcb\xec\xee\xcf\x4b\xb2\x67\x5a\x19\x3b\x1c\xe0\xcb\x7c\xe9\x52\x3b\xbd\x3e\xef\x66\xd5\x7c\x46\xfd\xcc\x89\xd9\xdd\xf3\x62\x8b\x9d\x13\xf3\x1c\x19\xe8\x6c\x9a\x01\x5d\xba\x61\x72\x4c\xfa\x23\xf1\x04\xde\x65\x0f\x58\xf2\x38\x09\x83\x04\x0e\x2c\x38\xf4\x8b\x73\x22\xf5\xe7\xef\xfe\xf9\x16\xae\x9a\x86\xfd\xf2\x69\x65\xe1\x1f\xe7\x31\xed\x4d\xfd\x46\xd9\xfd\x93\xbd\xdf\x13\xc6\x60\xfc\xc2\xe3\x47\x77\x72\x42\x84\xa8\xdf\x41\xdb\x0a\xa4\x36\x47\xbb\x2a\xa9\xfe\xcd\x1a\x74\xff\x43\x63\xdc\x8c\x6a\x77\x06\x52\x19\x8c\x7b\xa3\x70\xe8\x34\x77\xeb\x97\xdf\xbd\x9e\xec\xc3\x27\xbe\x4a\xbd\x22\x65\x43\x5f\xfd\xd2\x91\xa6\x29\x0c\x97\x0e\x42\x37\x98\x4a\x6f\x07\xf7\xba\x0b\xa7\xad\xf9\xc4\x56\xdb\x1e\xa0\x6d\x01\x49\x5b\xff\x83\x7a\xbc\x18\xb0\xa6\x69\x28\x24\xd6\xb7\x9a\x76\xf8\x04\x67\xc7\xc3\x5d\xe4\xe8\xce\x80\x3c\x03\x5b\x9f\x64\x52\x77\xf7\xcf\x9d\x7c\x52\x62\xbd\xf5\x5d\xdc\x33\x21\xf9\x3f\xa8\x30\xf0\xfc\x0f\xa2\xc2\x33\x92\x9f\xdc\x70\xc9\xc2\x64\x02\x8b\xbb\xf9\xdd\x14\x0c\xaa\x1c\x0d\x38\x7f\x1e\xb4\xcc\xd1\x54\x4f\xac\xb5\xc3\x45\xb6\xfa\x28\xa7\x3f\xaa\x17\xd5\x8f\x8a\x94\xd3\x23\x2d\xb0\x3d\xbe\x76\x8f\x1d\xf4\x40\x6a\x56\xc7\x4d\xbb\xed\x60\x81\x4d\x5d\x07\x3b\xea\x58\xe1\x70\x48\xba\x41\xd3\xfc\x87\x40\x99\x3b\x45\xc3\x78\xb9\x88\x2c\x7c\xd4\x87\x10\x02\x20\x51\x40\xfa\x7e\xe3\xfe\xa0\x29\xb1\xd7\xe0\x6d\xba\x03\xfc\x6d\xcb\x4f\x28\xa0\xd3\x2f\x8b\xde\x9b\xbe\x0f\xbf\xa8\x9c\xd4\xa8\x53\xda\x39\x7a\x04\xdb\xf1\xa5\xe8\xec\x1e\x43\x3f\x0e\xe5\x13\x11\xf8\x5f\xcc\xf7\x71\x2e\xce\xdd\x85\xed\x30\x90\xd0\x74\x6c\xeb\x43\x33\x40\x1f\x1f\x49\x27\xf4\x42\x81\xbe\xad\xa5\xa4\x30\x41\xd3\x90\x7b\xde\x83\x13\x83\x87\x76\x38\x9e\xdf\xb9\x78\xe6\xce\x61\x3b\x85\x6d\x87\x29\xae\x4f\x7c\x48\x20\xd3\xb2\x2e\x15\x61\x1b\xcc\xac\xd6\x8e\xfb\xab\xf2\x1b\x27\x01\x4d\x33\xfa\x84\x9a\x2d\x97\x35\x69\x18\xd4\x4e\xaf\xa6\x4e\xb7\x61\xce\xd3\xc2\xa1\xed\x11\xf2\x67\x55\xde\x63\x11\x27\xa7\xb9\xee\x95\x5e\xd4\x70\x9e\x6c\x7a\xbe\x3a\x66\xc4\x7f\x03\x00\x00\xff\xff\x46\x56\x29\x68\xf7\x17\x00\x00")

func golangHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangHeaderTmpl,
		"golang.header.tmpl",
	)
}

func golangHeaderTmpl() (*asset, error) {
	bytes, err := golangHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.header.tmpl", size: 6135, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangInsertTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x53\x4f\x6f\xdb\x3e\x0c\x3d\x4b\x9f\x82\xbf\x1c\x7e\xb0\x83\xc4\xbd\x17\xf0\xa1\x1d\xba\xa2\x40\x11\xac\xcd\x61\xc7\x55\xb5\xe9\xc0\x8b\x23\x19\x14\x8d\x24\x10\xf4\xdd\x07\xc9\x7f\x16\x07\xb9\x6c\x98\x01\x1f\x28\x4a\x8f\xef\x3d\x92\xce\xad\xa1\xc4\xaa\xd6\x08\x0b\x5b\xef\xb4\xe2\x8e\x70\x01\x6b\xef\xe5\x17\x42\xc5\xe8\x1c\x64\xdb\xae\xaa\xea\x13\x78\x9f\x38\x07\xad\x22\x75\xb0\x90\x3d\xd0\xce\x82\xf7\x29\x24\x84\xb6\x6b\x18\x96\xf1\x2a\x53\x57\x30\x78\xbf\x02\x24\x0a\xbf\xa1\x54\x86\x2a\xa8\xcb\x08\x2b\x2f\x4b\x7e\x9a\xf2\xdc\x57\x0b\xa7\x75\x05\xd9\x43\xc7\xe6\x6b\x8d\x4d\x19\xc0\x25\x00\xc0\x98\xd9\x20\x96\x76\x63\x8e\xe3\xb9\x36\x47\xb8\xcf\x61\x63\x8e\x49\x3a\x5d\x1c\xab\xf4\x31\xd4\xba\x66\x7b\x0d\x3a\x63\x23\x0a\xa3\x2d\x83\xe5\x03\xe7\x1f\x51\xc1\xdb\x2b\x78\xff\x21\x45\x4b\xd8\x2a\xc2\x72\x05\x84\x6d\xa3\x0a\xec\x25\xdd\xe7\x60\x3e\x7f\x66\x43\x36\x09\x0f\x53\x29\xea\x2a\x26\xff\xcb\x41\xd7\x0d\x38\x29\x44\x08\x73\xf8\x4e\xaa\x7d\x22\x4a\x90\x28\x95\x42\x10\x72\x47\x5a\x0a\x2f\x45\x89\x15\xd2\x08\x9d\xa4\x52\x04\xd4\xc6\xec\xb6\x7c\xe0\x88\xba\x0a\x02\x54\x70\x39\x9b\xb8\xa7\x32\xd0\xbf\xf4\xf2\x6e\x39\x5a\xa7\x0d\x43\xf6\x1e\x0b\x3c\x9e\x83\x4e\x31\x34\x26\x87\xff\x67\xad\x71\x1e\xfe\xc9\x17\x4d\xee\x65\x8e\x5e\x65\x6f\x1d\xd2\xf9\xdd\x1c\x4f\xc9\x0d\xf2\x03\x85\x6d\xa1\xf4\x30\x34\x37\x9d\xeb\x4d\x0a\xe1\xea\xca\xbf\xa8\x29\x26\xfb\xe7\xab\x70\xa9\xef\x67\x63\x71\x1c\x0c\x42\x3b\xb5\x6a\x22\xf6\x74\xc2\xe2\x16\xa7\x3f\x25\x10\x86\xaa\xfa\xed\x73\xf6\x6d\x1f\xad\x6e\xf7\x53\x49\x42\x9b\xbd\x2a\xcb\x2f\xda\x22\xf1\x4b\x99\xfc\xb5\xc8\x30\x11\xcf\xc8\xb3\xe6\x3d\x9e\x43\x38\x2f\x9f\xb4\xfb\x34\x8e\xc5\x60\x82\xf8\x01\x91\xc6\x0c\xc8\x39\x60\x3c\xb4\x8d\xe2\xb0\xea\xd8\x60\xc1\xeb\xaa\xd3\xc5\x5a\xab\x03\x2e\x2e\x20\x9f\x91\x19\x69\xd8\xf6\xde\xae\xab\xdc\xb4\xfb\x97\xb3\x78\xb9\x55\xcb\x3b\xef\xe5\xaf\x00\x00\x00\xff\xff\x1c\x30\xbf\x05\x5b\x04\x00\x00")

func golangInsertTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangInsertTmpl,
		"golang.insert.tmpl",
	)
}

func golangInsertTmpl() (*asset, error) {
	bytes, err := golangInsertTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.insert.tmpl", size: 1115, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangSelectTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x57\x5d\x6f\xdb\x36\x17\xbe\x16\x7f\xc5\x79\x8d\xa0\xb0\x03\x5b\xcd\x7b\x3b\x40\x03\xb2\xc4\x6d\x06\x64\x4d\x1b\x7b\xd8\x45\x51\xa0\x8c\x4d\x39\xec\x68\xca\xa3\x28\x34\x9b\xc0\xff\x3e\x1c\x92\x92\xf5\x65\x5b\x76\x66\x6c\x01\x12\x44\xe4\xf9\x78\xce\xe1\x79\x1e\x51\x79\x3e\x81\x25\x8b\xb9\x64\x30\x48\x99\x60\x0b\x3d\x89\x33\xb9\x98\x48\xba\x66\x03\x98\x18\x43\xde\x33\x9d\xe7\x10\xbe\xcb\xe4\x62\x96\xc5\x31\x7f\x01\x63\x08\xba\x31\xb9\xb4\x06\x64\x57\x8c\x94\xaf\x5c\x88\x3c\x07\xcd\xd6\x1b\x41\x75\x67\x96\x10\x8c\x19\xa2\xd1\x86\x2a\xba\x4e\x21\xbc\x56\xab\x14\x8c\x19\x41\x6d\xf5\x91\xe9\x4c\x49\xdc\x18\x03\x53\x0a\x7f\x13\x35\xea\x05\xa5\x80\x31\xd9\x81\xc3\x22\x45\x18\x90\x13\x12\x2c\x12\x99\x6a\x48\xf5\x5a\x47\x5f\xb1\xf4\xd9\xa7\x7b\x30\xe6\x2b\x09\x36\x8a\x6d\xa8\x62\xcb\x31\x28\xb6\x11\x74\xc1\x1c\x90\x1f\x22\x48\x9e\xbe\x85\x7e\x77\x88\x8e\x23\x12\xf0\xd8\x6e\xfe\x2f\x02\xc9\x05\xe4\x24\x08\xf0\x31\x82\xdf\x14\xdd\x4c\x95\x1a\x32\xa5\x46\x24\x08\x94\xad\x8a\x04\x86\x04\x4b\x16\x33\x55\x84\x1e\x8e\x48\x80\x51\x45\xb2\x9a\xe9\xb5\xb6\x51\xc7\x90\xe7\x40\xb1\x39\x65\x8b\xb0\x64\x50\x54\xae\x58\xb5\x41\x04\x00\xd0\x16\xcd\xb0\xaa\xc8\x3e\xfc\x2c\xb9\xae\x1e\x9e\x31\xc4\x41\x2a\xea\x0a\x3f\x65\x4c\xfd\xf9\x98\x7c\x7f\x19\xb6\x12\x85\xb3\x05\x95\x43\x1f\x78\xe2\x53\x5e\x70\x35\x86\x0b\x57\x02\xb6\xa1\x84\x30\xf1\x18\x9a\xe6\xf1\x18\x2e\x62\xce\xc4\x12\xad\xbd\x63\xf8\x0e\x17\xea\x3e\x1e\x3f\x8f\x21\x51\x98\x05\x5d\xed\xc1\xe7\xb9\x87\xfe\x26\xcf\x7d\x28\x5f\x64\x2d\x5f\x31\x10\x5d\xcf\xdb\xb3\x89\x22\x48\xff\x10\xe1\x54\xa9\x0f\xc9\x63\xf2\x3d\xb5\xa7\xe4\xab\x91\x5c\x8c\xf1\x8f\x3d\x99\xf6\x59\x56\xad\xea\x27\xea\x92\xf8\xfd\xb2\x8d\xd5\xe1\xc5\xa8\x2d\x0a\xbd\xbd\x24\xd1\x2b\x7f\x08\xc0\x6c\x7a\x3f\xbd\x99\xc3\xf5\xfd\x3d\xfc\x32\x9d\xdf\x3d\xdc\xbe\x3e\xe8\xe5\x5b\xc7\xe0\x06\xad\xa8\x10\x03\xec\x3a\xf2\x07\x86\xc9\xd3\x37\xb8\xc4\x19\xbb\xe5\x14\xb7\xc1\x98\xdb\x9f\x46\xd0\x45\x7c\x2a\x84\xe7\x24\x12\x8e\xec\x0e\x30\x7f\xe9\x15\xa0\x9c\x88\x4e\xf6\x17\xc6\x2d\x41\xdb\x88\x4c\x51\xc1\xff\x62\x10\xce\xb4\xca\x6c\xc6\xe3\x75\xae\x0c\xbf\x57\xeb\x1a\x20\xf6\xe9\x9d\x9b\x9d\x34\x13\x1a\x3e\x7f\xb1\x0d\x29\xd1\xd5\x54\x0f\xed\x9e\x21\x59\xcd\x7b\x43\xdc\xa3\x81\xf5\x2a\xbc\x0e\x9e\x4d\x06\xf7\x51\xe7\x44\x0d\xc4\x6e\x34\xa4\x6c\x66\x4b\x1b\xbe\x71\xcd\xec\xf2\x3a\x16\x9a\xdf\x2c\x02\x9e\x9f\xc5\x1f\xaf\xdf\x4f\x6f\xcf\xcd\xe3\x0d\x5d\xb1\xe5\x69\x4c\xb6\xae\xaf\xe3\x72\x2b\xc4\x7e\x36\x6f\xcd\x2b\x7c\xfe\x88\x8b\xff\x24\xa9\x2b\x59\xf6\xd2\xba\x85\x66\x17\xb1\xdd\x9b\xac\x78\x1a\x17\x45\x16\x2f\xa4\x85\x4e\x7e\x67\x12\x52\xad\xb8\x5c\x8d\x41\xf0\x35\xd7\xc0\xa5\x3e\xa8\x07\xce\x31\xc9\x74\xe9\x7b\xc4\xbd\xa8\xda\xfa\x9d\xca\xd0\x6c\xc5\x7f\xee\x8e\x84\xfd\xe9\x94\x88\x4a\xc3\x9b\xd4\xc7\x7d\x26\x97\xc6\xb8\xfe\xf9\x8e\x7b\x19\xe1\x71\x71\x1e\x51\x04\x83\x01\xe4\xe5\xbd\xa2\x58\x86\xc1\xd5\xc0\x2e\x1a\x42\x82\xc3\xaa\xd3\x07\x08\x34\x90\x1c\x90\xa6\xc1\xa0\x2d\x4f\x05\x78\x37\x3d\x3f\xc2\x55\x05\x39\x2e\x33\x39\x74\xa0\x46\x58\x98\xb3\xca\x6b\xf7\xad\xed\x34\x45\x10\xaf\x75\x38\xdb\x28\x2e\xb5\xf7\xfa\x6c\x3d\x26\xff\xff\x12\xe2\x69\x5b\xca\x3d\x48\x2b\xa3\x85\xbb\x9b\x65\x03\x4c\xa4\xac\xd5\x35\x17\xd5\xfd\x5f\xf4\xee\xd0\x35\xa9\xf4\x3c\xab\xd6\xde\x3c\xfc\xfa\x61\x7e\x36\x91\x5d\x24\x99\xd4\x47\xaa\xab\xf5\x39\x51\x56\x5b\xbe\x3b\xf4\x74\x6b\x57\x11\xd2\x1b\x5c\xac\x49\xcc\x11\xda\x59\x89\xd8\x2d\x9a\xad\x94\x61\xaf\x5b\x10\x97\xba\x9f\xac\x55\x4b\x6f\xeb\x59\x13\xde\xb9\x2f\x39\xe7\xf9\xd6\xeb\xb8\xe7\x1c\xfc\x64\xf3\x5a\xb4\x4f\x54\xae\xfe\xd5\xdb\xce\xdd\xf5\xec\x6c\xfc\x7b\xa6\xe9\x91\xec\x7b\xa6\xe9\x89\xdc\x6b\x78\xee\x60\x5e\x61\x55\xe1\xdd\x1d\x4d\x4f\x65\x5d\x19\xad\x9b\x73\x8d\x64\x3d\x3f\x3c\x9e\x92\x44\xf4\xe3\xdc\xb6\xe4\x36\xe3\xea\xd0\x3c\xdf\x2c\x0d\x4b\x26\x59\x2a\xf5\x50\x9d\xf6\x68\xef\x19\xe6\x98\x8a\xd4\x91\xb5\x3a\xc7\x36\x31\xbe\x16\x3b\x47\xf9\xef\x00\x00\x00\xff\xff\x53\x0a\xb4\xbd\x06\x13\x00\x00")

func golangSelectTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangSelectTmpl,
		"golang.select.tmpl",
	)
}

func golangSelectTmpl() (*asset, error) {
	bytes, err := golangSelectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.select.tmpl", size: 4870, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangUpdateTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x55\x51\x6f\xdb\x36\x10\x7e\x26\x7f\xc5\x4d\x0f\x83\x94\xc9\x2c\xf6\x9a\x41\x18\xba\x35\x05\x36\x0c\x1e\x12\x6f\xd8\x43\x10\xb4\x8c\x74\x32\xd4\xca\xa4\x4c\x4a\xb5\x0b\x9a\xff\x7d\x38\x52\xb2\xe5\xb8\x2d\x96\x45\x40\x02\x8b\x77\xf7\xdd\xc7\xef\x3e\x52\xce\x2d\xa0\xc2\xba\x51\x08\x89\x6d\xd6\x4a\xf6\x83\xc1\x04\x16\xde\xf3\xbf\xbb\x4a\xf6\xe8\x1c\x88\xd5\x50\xd7\xcd\x1e\xbc\x4f\x9d\x83\x4e\x1a\xb9\xb1\x20\x5e\x9b\xb5\x05\xef\x87\x90\x05\xb3\xe4\xde\x0c\x65\x2f\x96\x72\x83\xe0\x7d\x06\xa9\x41\x3b\xb4\x3d\x5c\x5d\x06\x73\x40\x63\xe8\x4f\x9b\x8c\x13\x13\x54\x55\x68\xcd\xe7\xb4\x1e\x75\xf5\x39\x30\x72\x9c\x19\xec\x07\xa3\x40\x35\x6d\x4e\xff\xb8\x3f\x2f\xe3\xf5\xa0\x4a\x48\xf5\xe3\x87\xd8\xee\x4d\x23\x5b\x2c\x7b\xf0\xfe\xcd\x2f\x19\x38\x07\x3d\x6e\xba\x96\xf8\xce\x37\x2b\xc0\xfb\xf3\x60\x6c\x49\xeb\xdf\x80\xfc\x6b\xff\x7f\x21\xb9\x73\xaf\xae\x78\xf1\xc2\x87\x03\xfc\xd9\x56\x10\x07\xf0\x72\xb4\x67\x68\x17\x5b\x2e\xa8\xe0\xf9\x2a\x7d\xa1\x78\x3e\xed\x59\x78\xa1\xe4\xe6\xd2\x8b\xc1\x41\xe0\x3d\xbd\xbc\x1d\x54\x79\x34\xe7\xd7\x1d\x34\xc7\xb4\xcd\x3a\x42\x7e\x8d\xd4\xd8\x95\x98\xa5\xfc\xd2\xef\x39\x07\x80\x51\x74\x0b\x42\x88\x33\x52\x91\x67\x06\x69\xc8\xba\x74\xfe\x7f\x36\xfd\x99\x4a\xdf\xa4\x1b\x36\x14\xfd\xc6\x39\xfb\x24\x0d\x6c\x2d\xdc\x3f\xd8\xde\x34\x6a\x1d\x17\x3e\xc9\x76\x40\x5a\x6c\x54\x8f\xa6\x96\x25\x3a\xcf\x99\x45\x54\x70\x5d\xc0\x46\x76\xf7\x31\x9b\xe2\x14\x91\x55\x15\x4a\x28\x4a\x3d\x52\x92\x04\x62\x4e\x1e\xd1\x60\x06\x95\x81\xe3\x8c\x35\x35\x34\xd5\x3e\x07\xfd\x91\xca\x08\xfc\x9e\xca\x1e\x7e\x02\xfd\x91\xe2\x2c\xb2\xb8\x6f\xaa\xfd\x03\x14\x11\x85\x33\xe6\x39\x63\xa7\x64\x28\xa0\x45\x95\xc6\xd4\x2c\x88\x48\xcf\xd6\x42\x01\xb2\xeb\x50\x55\xe9\xd6\xe6\x10\xf8\xfc\x00\x09\x14\xf0\x73\x92\xf1\x09\xfb\x94\x14\xdf\x47\xae\x19\x67\xd1\x1c\x4d\x0d\x62\x89\x58\xd9\xa5\xde\x91\x61\x98\xd2\x3b\x22\xbb\xd4\xbb\xf4\x7c\x16\xf4\xdb\x48\xb5\x46\x10\xaf\x87\x5e\xbf\x6d\xb0\xad\x6c\x28\x99\xb4\x49\x13\x9a\xea\xaf\xba\x1d\x36\x0a\xbc\x4f\x72\x72\xb9\xf8\x4d\x35\x34\xe3\x13\x18\x95\xd4\xda\xc0\xbb\x7c\xf4\x0c\xf5\x8b\xc8\x93\x87\x48\x9c\x23\x6a\x5c\x14\x65\xc0\xa5\x6b\x32\xcd\xa6\x4a\x11\x33\xb2\xb0\x9d\x20\x8d\xed\x37\x7d\x10\x3b\x4c\xc6\x8a\x3b\xec\x5a\x59\x62\xfa\xde\x39\xb1\xba\xfd\xc3\xfb\xf7\xf9\x51\xc2\xe4\x70\x38\xdc\xae\x0e\x87\x43\x72\x5a\x9b\xea\x7e\xd7\x8d\x0a\xba\x26\x39\x24\x59\x0e\x3f\x66\x9c\x75\x06\x3b\x69\xb0\xca\xc1\x44\xd4\xe8\xdb\xeb\x02\xf4\xe3\x07\x31\x46\x53\x62\x90\x71\x9a\x3d\x05\xbf\x2b\xe8\x52\x0e\x1b\xa2\xd7\x02\xfe\x31\xb2\xbb\x31\x26\x45\x63\x68\x4a\xf1\xf6\x26\xfa\xac\xc2\x1a\xcd\x04\x9d\x66\x9c\x49\x3a\x5e\xd7\x17\x03\x24\x1d\x43\x28\x9e\xbf\x85\xf7\x19\xe3\x8c\x28\xb4\x7a\xbd\xea\x37\x7d\xa0\x90\x87\x1c\x21\x44\xc6\x8f\x83\x5e\x0d\x5d\xa7\x4d\x6f\xef\x42\xd3\x46\xad\x69\x16\xb3\x53\x59\xc0\xf7\xe7\xf7\x49\x8c\x46\xe2\xd3\xee\xc5\xed\x80\xe6\xf3\x9d\xde\xed\xd3\xa9\xc3\x58\xb1\x2a\xa5\x1a\x3f\x6d\xd1\xa7\xa3\x06\x45\x01\x76\xdb\x8a\x1b\x63\x96\xfa\x4e\xef\x68\xbc\x93\xdc\x4f\x3f\x5e\xb4\xe6\xe7\xb5\x47\xfd\xbe\x54\x71\xa6\xe5\xa9\x74\x4c\x89\x4c\x22\x6e\xf0\x5e\x6b\x71\xda\xf0\xbb\xfc\xe9\xae\x6e\xf6\x58\x1e\x37\xf4\x12\x06\xd3\x07\x99\x06\x72\xfe\x2d\x44\xba\xff\x2f\x2e\x54\xe7\xe6\xd3\x9c\x1f\x14\x3a\x75\x4f\xae\xf0\xab\x57\xde\xff\x1b\x00\x00\xff\xff\xb7\xea\xbc\xe6\xa0\x08\x00\x00")

func golangUpdateTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangUpdateTmpl,
		"golang.update.tmpl",
	)
}

func golangUpdateTmpl() (*asset, error) {
	bytes, err := golangUpdateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.update.tmpl", size: 2208, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x4d\x8f\xda\x38\x18\x3e\xc3\xaf\x78\x55\x71\x60\xd0\x90\xde\x77\x55\x8d\x32\xe0\xe9\xa6\x0d\x0e\x93\x98\xad\xe6\x98\x12\x53\xbc\x4a\x1c\x36\x18\x8d\x90\xf1\x7f\x5f\xd9\xce\x27\x4d\xd8\xe9\x6a\x0e\x7b\x73\xec\xc7\xcf\xfb\xbc\x9f\x8e\x94\x1f\x67\xb0\x0e\x22\xf2\x39\x44\xd1\xb3\x0f\x11\x71\x09\x5a\x21\x4c\x80\xa0\xd5\xda\x77\x09\x8a\x00\x66\x1f\x95\x1a\x8f\xa5\x9c\x43\x42\x77\x8c\x53\xf8\x70\xdc\xee\x69\x16\x7f\x80\xb9\x52\x66\xbf\x88\xf9\x0f\x0a\x0e\x89\xbf\xa7\xf4\x08\x4a\x8d\x17\x21\x72\x09\x02\xe2\x3e\xfa\x08\xa4\x04\x07\xc7\x19\x05\xa5\x60\xda\xc2\x4f\xd8\x3d\x4c\xb6\x79\x0a\xbf\x7d\x02\x67\x91\xa7\xa7\x8c\x9b\xcb\x52\xb2\x1d\x4c\x98\x52\xf7\x52\x52\x9e\x28\x35\x92\x12\x5e\x99\xd8\x5b\xb4\x36\x3a\x6a\x73\xea\x35\x39\x1f\x68\x75\x32\x07\xb6\x03\x07\xe7\x02\x9f\xd2\x54\x03\x70\x40\x00\x6f\x7c\x1f\xf4\x19\xe5\x49\x17\x18\xd2\x1d\x2d\x28\xdf\x1a\xae\x10\x3d\xa1\x10\xe1\x05\x8a\x0c\x6d\x7d\x66\x7d\x03\xa5\xa6\xdd\x6d\x2b\x1b\x94\xba\x83\x00\xc3\x12\xf9\x88\xa0\xab\x9b\x01\x5f\xd2\x94\x0a\x7d\xb9\x6d\x7f\x78\x6d\x54\xad\x0b\x96\xc5\xc5\xf9\x2b\x3d\xeb\x90\xdc\x8f\xd6\xa1\xb7\x72\xc3\x17\xf8\x8a\x5e\x60\x3a\x10\xc3\xce\x9d\x26\x8a\x50\x86\x51\x4a\x0b\x35\x2b\x6d\x4e\xa9\xbb\x6b\xd3\x65\x26\x37\x9c\xfd\x7d\xa2\xd6\xf2\x06\x7b\xcf\x1b\x34\x68\xf4\x97\x4d\x29\x35\xbe\xfb\x7d\x5c\xef\xb7\x56\x9d\x1a\x4b\x72\xc1\xe3\x8c\x56\x45\x06\x75\x06\x1c\xfd\x51\xc7\xbd\xe3\x40\x87\x20\xa5\x3b\xf1\x57\xce\xb8\x65\xf0\xd1\x13\x81\x2f\x81\x87\x6d\x76\xd8\x8f\xbd\xa8\x19\x75\xea\xa4\x04\x41\xb3\x43\x1a\x8b\xb6\x6d\xc7\xa7\x3b\xa1\x11\x9f\x86\x00\x86\xe9\xa6\x8e\x6d\xce\x13\x26\x58\xce\x9b\x7e\xd1\x09\xb6\x1e\x2c\xb2\x43\x5d\xd0\x7d\xf4\x35\xaa\x56\xd2\x78\xaf\x77\x83\x03\x2d\x62\x91\x17\xfa\xe4\xe1\xa7\x9a\xea\xd8\x29\x43\xf6\x26\x6b\x76\xd1\x6f\xb3\x3c\x6b\x5b\x7e\x23\x5d\x6f\xac\xba\x3a\xbd\xb7\x08\xf4\x1a\x65\x1e\xd6\x85\xd9\xc2\x1e\x69\x4a\xb7\xa2\x0d\xf5\x78\x4f\xa1\x0f\xe4\xea\x75\x4f\x0b\x7a\x3d\xd7\xca\x72\xe7\x89\xad\xf7\x4a\x1f\xdb\x01\xcf\x05\x4c\x18\x28\xf5\xed\x0f\x14\x9a\xbe\xa7\xe9\xd1\x54\x94\x8b\x97\x50\x17\x76\x47\x60\xab\x1c\x2c\xe9\xad\x61\xd0\x9d\xba\xc6\xb5\xf9\xeb\x3e\x16\x75\x57\x4c\x84\xa9\x61\x2d\xac\xaa\xe6\x2a\xa2\x29\xe5\xe0\x7c\xdb\xc7\xa2\x56\xdc\x72\x47\x93\x98\x5b\x06\x60\x24\x9a\x1e\x06\xdb\xc4\x8d\xf0\xd2\x80\x6d\x3b\x7b\xad\xd5\xd4\x56\xac\xf6\xb9\xb2\xd1\xe0\x67\xbf\xe2\x95\x75\x28\x42\x3e\x5a\x10\xe8\x49\x68\xe9\xb5\xa3\x14\x3c\x85\xc1\x0a\xda\x03\xc1\x8e\xf2\x72\x72\xe9\xc2\xf8\x92\x33\xfb\x92\x8c\xba\x75\xd4\x4c\x04\xa7\xbe\xf6\xd3\x73\xb0\xa8\xf2\xd3\xc7\x50\xd6\xc7\x35\xa8\x97\x28\x28\x12\x5a\x3c\x9e\x2d\x4b\x10\x2e\x51\x08\x8f\x2f\x43\xad\x52\x82\x9b\xb9\x06\x6e\xb4\x18\x20\xf6\x59\xc6\x84\xa5\xf5\xbd\x95\x47\xe0\xa1\x0b\xbc\x31\x89\x4e\xbc\x1b\x69\xb3\x33\x9d\xdd\xfd\xdf\x83\xfa\x6f\x3d\xf1\x3d\x3e\xb6\xda\xb6\x17\x99\x98\x47\xd8\x82\xca\x77\x7a\xc0\xe9\x7e\xc1\xef\xa3\x97\xf1\x23\x2d\xca\x1c\x78\x38\x42\x21\x01\x0f\x93\x60\x50\x85\xfd\x29\x32\xb1\x1c\x0d\xbd\xc0\xcd\xaf\xd3\x70\x17\x5f\x3f\xc6\xf0\xa7\xeb\x6f\x50\x34\x35\xae\xfd\x27\xd6\x87\xd6\xcb\x5e\xfb\x6e\xfe\xa0\xc8\x26\xc4\x1e\xfe\x0c\xb3\xe1\x30\x9c\x0e\x49\x5c\x25\x63\xb3\x5e\xba\xe5\x4f\x53\xfd\x20\x47\x88\xc0\xe5\x72\x79\x8e\x2e\x97\xcb\xbb\x24\xe5\x86\xb0\x7f\x02\x00\x00\xff\xff\x5f\xa3\x67\x2b\x04\x0b\x00\x00")

func postgresTmplBytes() ([]byte, error) {
	return bindataRead(
		_postgresTmpl,
		"postgres.tmpl",
	)
}

func postgresTmpl() (*asset, error) {
	bytes, err := postgresTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.tmpl", size: 2820, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlite3Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x4d\x6f\xea\x38\x14\x5d\xc3\xaf\xb8\x7a\x62\x01\xa8\xe4\x2d\x66\x37\xa3\xa7\x2a\x05\x57\x93\xd7\x90\xd0\xc4\x4c\xd5\x65\x4a\x4c\xf1\x28\x71\x98\x60\x54\x21\xe3\xff\x3e\xb2\x9d\x4f\x9a\x30\xed\xa8\x8b\xb7\x73\xec\xe3\x73\xcf\xfd\x74\x84\xf8\x3e\x85\xf0\xd1\x75\x30\xfa\x0d\x42\x6c\x63\xb4\x44\x1e\x06\x8c\x96\x2b\xd7\xc6\x28\x04\x98\x7e\x97\x72\x38\x14\x62\x06\x31\xd9\x52\x46\xe0\xdb\x61\xb3\x23\x69\xf4\x0d\x66\x52\xea\xfd\x3c\x62\xaf\x04\x2c\x1c\xbd\x24\xe4\x00\x52\x0e\xe7\x01\xb2\x31\x02\x6c\xdf\xb9\x08\x84\x00\xcb\x8b\x52\x02\x52\xc2\xb8\x81\x1f\xd1\x1b\x18\x6d\xb2\x04\x7e\xff\x01\xd6\x3c\x4b\x8e\x29\xd3\x97\x85\xa0\x5b\x18\x51\x29\x6f\x84\x20\x2c\x96\x72\x20\x04\xbc\x51\xbe\x33\x68\x65\x74\xd0\xe4\x54\x6b\x7c\xda\x93\xf2\x64\x06\x74\x0b\x96\x97\x71\xef\x98\x24\x0a\xe0\xf9\x18\xbc\xb5\xeb\x82\x3a\x23\x2c\x6e\x03\x03\xb2\x25\x39\x61\x1b\xcd\x15\xa0\x7b\x14\x20\x6f\x8e\x42\x4d\x5b\x9d\x19\xdf\x40\xca\x71\x7b\xdb\xc8\x06\x29\x27\xe0\x7b\xb0\x40\x2e\xc2\xe8\xe2\xa6\xcf\x16\x24\x21\x5c\x5d\x6e\xda\xef\x5f\x6b\x55\xab\x9c\xa6\x51\x7e\x7a\x20\x27\x15\x92\x9b\xc1\x2a\x70\x96\x76\xf0\x0c\x0f\xe8\x19\xc6\x3d\x31\x6c\xdd\xa9\xa3\x08\x45\x18\x85\x30\x50\xbd\x52\xe6\xa4\x9c\x5c\x9a\x2e\x32\xb9\x66\xf4\x9f\x23\x31\x96\xd7\x9e\xf3\xb8\x46\xbd\x46\x3f\x6d\x4a\xca\xe1\xe4\x8f\x61\xb5\xdf\x58\xb5\x6a\x2c\xce\x38\x8b\x52\x52\x16\x19\x54\x19\xb0\xd4\x47\x15\xf7\x96\x03\x2d\x82\x84\x6c\xf9\xdf\x19\x65\x86\xc1\x45\xf7\x18\x7e\xfa\x8e\x67\xb2\x43\x5f\x77\xbc\x62\x54\xa9\x13\x02\x38\x49\xf7\x49\xc4\x9b\xb6\x2d\x97\x6c\xb9\x42\xfc\xe8\x03\x68\xa6\xab\x3a\x36\x19\x8b\x29\xa7\x19\xab\xfb\x45\x25\xd8\x78\x30\x4f\xf7\x55\x41\x77\xd1\x57\xa8\x4a\x49\xed\xbd\xda\xf5\xf7\x24\x8f\x78\x96\xab\x93\xdb\x77\x35\xd5\xb2\x53\x84\xec\x43\xd6\xcc\xa2\xdb\x66\x71\xd6\xb4\xfc\x41\xba\xce\x58\xb5\x75\x3a\x1f\x11\xe8\xd4\xca\x1c\x4f\x15\x66\x03\x7b\x20\x09\xd9\xf0\x26\xd4\x61\x1d\x85\xde\x93\xab\xb7\x1d\xc9\xc9\xe5\x5c\x2b\xca\x9d\xc5\xa6\xde\x4b\x7d\x74\x0b\x2c\xe3\x30\xa2\x20\xe5\xd3\x9f\x28\xd0\x7d\x4f\x92\x83\xae\x28\xdb\x5b\x40\x55\xd8\x2d\x81\x8d\x72\x30\xa4\xd7\x86\x41\x7b\xea\x6a\xd7\x66\x6f\xbb\x88\x57\x5d\x31\xe2\xba\x86\x95\xb0\xb2\x9a\xcb\x88\x26\x84\x81\xf5\xb4\x8b\x78\xa5\xb8\xe1\x8e\x22\xd1\xb7\x34\x40\x4b\xd4\x3d\x0c\xa6\x89\x6b\xe1\x85\x01\xd3\x76\xe6\x5a\xa3\xa9\x8d\x58\xe5\x73\x69\xa3\xc6\x4f\x3f\xe3\x95\x71\x28\x44\x2e\x9a\x63\xe8\x48\x68\xe1\xb5\x25\x25\xdc\x07\xfe\x12\x9a\x03\xc1\x8c\xf2\x62\x72\xa9\xc2\xf8\x99\x51\xf3\x92\x0c\xda\x75\x54\x4f\x04\xab\xba\xf6\xee\x39\x98\x97\xf9\xe9\x62\x28\xea\xe3\x12\xd4\x49\xe4\xe7\x31\xc9\xef\x4e\x86\xc5\x0f\x16\x28\x80\xbb\xe7\xbe\x56\x29\xc0\xf5\x5c\x03\x3b\x9c\xf7\x10\xbb\x34\xa5\xdc\xd0\xba\xce\xd2\xc1\x70\xdb\x06\x5e\x99\x44\x47\xd6\x8e\xb4\xde\x19\x4f\x27\xbf\x7a\x50\xff\xab\x27\x5e\xa2\x43\xa3\x6d\x3b\x91\xb1\x7e\x84\x0d\xa8\x78\xa7\x7b\x9c\xee\x16\xfc\x35\x7a\x29\x3b\x90\xbc\xc8\x81\xe3\x85\x28\xc0\xe0\x78\xd8\xef\x55\x61\x7e\x8a\x74\x2c\x07\x7d\x2f\x70\xfd\xeb\xd4\xdf\xc5\x97\x8f\x31\xfc\x65\xbb\x6b\x14\x8e\xb5\x6b\xff\x8b\xf5\xb6\xf1\xb2\x57\xbe\x5f\x73\xfd\xb8\x8f\xa3\x32\x01\xeb\xd5\xc2\x2e\x7e\x94\xaa\x47\x38\x44\x18\xce\xe7\xf3\x63\x78\x3e\x9f\xbf\x24\x11\x17\x62\xfe\x0d\x00\x00\xff\xff\x98\xb8\x02\x49\xe9\x0a\x00\x00")

func sqlite3TmplBytes() ([]byte, error) {
	return bindataRead(
		_sqlite3Tmpl,
		"sqlite3.tmpl",
	)
}

func sqlite3Tmpl() (*asset, error) {
	bytes, err := sqlite3TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sqlite3.tmpl", size: 2793, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"golang.delete-all.tmpl": golangDeleteAllTmpl,
	"golang.delete.tmpl": golangDeleteTmpl,
	"golang.footer.tmpl": golangFooterTmpl,
	"golang.funcs.tmpl": golangFuncsTmpl,
	"golang.header.tmpl": golangHeaderTmpl,
	"golang.insert.tmpl": golangInsertTmpl,
	"golang.select.tmpl": golangSelectTmpl,
	"golang.update.tmpl": golangUpdateTmpl,
	"postgres.tmpl": postgresTmpl,
	"sqlite3.tmpl": sqlite3Tmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"golang.delete-all.tmpl": &bintree{golangDeleteAllTmpl, map[string]*bintree{}},
	"golang.delete.tmpl": &bintree{golangDeleteTmpl, map[string]*bintree{}},
	"golang.footer.tmpl": &bintree{golangFooterTmpl, map[string]*bintree{}},
	"golang.funcs.tmpl": &bintree{golangFuncsTmpl, map[string]*bintree{}},
	"golang.header.tmpl": &bintree{golangHeaderTmpl, map[string]*bintree{}},
	"golang.insert.tmpl": &bintree{golangInsertTmpl, map[string]*bintree{}},
	"golang.select.tmpl": &bintree{golangSelectTmpl, map[string]*bintree{}},
	"golang.update.tmpl": &bintree{golangUpdateTmpl, map[string]*bintree{}},
	"postgres.tmpl": &bintree{postgresTmpl, map[string]*bintree{}},
	"sqlite3.tmpl": &bintree{sqlite3Tmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

