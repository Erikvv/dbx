// Code generated by go-bindata.
// sources:
// golang.tmpl
// postgres.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _golangTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x59\x51\x6f\xdc\xb8\x11\x7e\x5e\xfd\x8a\x39\xc1\x67\x68\x9d\xb5\x36\x07\x14\x7d\xf0\x9d\x5b\xd8\xb1\x9b\x1e\xe0\xb3\x7d\xb1\x83\xa2\x08\x82\x84\x92\x66\xd7\xec\x52\xd4\x86\xa2\x6c\x6f\x75\xfa\xef\xc5\x90\x14\x25\xad\xbd\xce\xa6\x97\xa4\x97\xfa\x21\x2b\x51\xc3\x99\x6f\x66\x3e\x0e\x87\x4c\x5d\x4f\xf7\xe0\xe5\xc5\xd9\xd1\xf9\x4b\xf8\xdb\xeb\xf3\x17\xd7\x3f\x5f\x9c\xc3\xf5\xe9\x2f\x97\x67\x47\xd7\xa7\x57\xb0\x37\x6d\x9a\x20\xa8\xeb\x7d\xc8\x70\xc6\x25\x42\xa8\x57\x4b\x2c\x66\x21\x34\x8d\x19\xe6\x33\xc0\x0f\x10\x5f\xaf\x96\xf4\x0d\xef\x75\x08\xfb\x4d\x03\xfe\xaf\xd4\x8a\xcb\xb9\x11\x45\x51\xe2\x50\x9e\xcb\xbe\x38\x97\x7a\xb3\xdc\x9f\xff\xe4\x25\xcd\xdb\x06\xc9\x12\x15\x67\xa2\x15\xdd\xac\xd1\xca\xb5\x4a\x9f\xd2\x98\x88\x22\xe9\x40\xbe\x79\x9b\xac\x34\x76\xa2\x03\x5f\x87\x7f\xaf\xcf\xff\x7e\x74\x7e\x72\x76\x7a\x02\xd7\xff\xbc\x3c\x85\xba\x36\x0a\x5d\xd8\x50\x66\x34\x77\xf0\x3c\x08\xf3\xac\x92\xa9\x64\x39\x32\x35\x2f\x43\x2f\x6a\x91\x45\x02\x25\xc4\x47\x6a\x5e\x8e\xe1\x07\xfa\x76\xbc\x0a\xc8\x22\x49\xec\x30\x35\x87\x83\x43\xe0\x32\xc3\x7b\x2b\x04\xcf\xcd\xfc\x56\xc2\xea\x20\xb9\xf8\x9a\x25\x02\xe3\x73\x96\x23\xf4\x9f\x5b\x69\x3b\x23\x65\x39\x0a\xfe\x6f\xb4\x53\x48\xa0\xa7\xac\x0d\xc2\x46\xf9\x4e\x6d\xd3\x7c\x4c\xd7\x23\x31\xa9\x6b\xc2\x3b\xd7\x8f\xfa\x4c\x82\x8a\xc9\x39\x3a\x3f\xf7\x07\x26\x36\x99\xf6\x23\x9b\x2c\x6e\xc8\x08\x53\x73\x4a\x48\x9b\x8c\xa5\xe2\x52\xcf\x20\xfc\xbe\x7c\xf7\x7d\x19\x0e\xe2\x67\xff\xfd\x0d\x2a\x99\xa1\x2a\xd3\x42\x21\x6c\xa1\xd8\xa7\xd9\xf9\xb4\xc3\x27\xb0\x83\x94\xcb\x18\x08\x2e\x9f\xc1\x0e\x6f\x9a\x09\xd4\x35\xca\x8c\x46\x40\x63\xbe\x14\x4c\xf7\xc1\xed\xa0\x11\x36\x12\x4f\x9a\x14\xbc\xd4\x9f\xcf\x22\xd4\x75\xf7\xa9\x2d\x11\x3b\xb8\x05\x14\x4d\x71\xa3\x19\xa1\xcd\x1f\x94\x5c\xce\x2b\xc1\x94\xcf\x15\xfc\x06\x3e\x79\xc3\xbc\x0d\x57\x0c\x47\x91\x51\x5d\x1a\xd5\x35\x0c\xb3\xed\x06\x1f\x22\x24\x3f\x01\xe0\x7d\x96\x1c\x84\x75\xdd\x4f\x98\x63\x49\xf8\x7e\xa3\x3d\xa1\x2a\x53\x05\x49\x17\xa0\xd4\x6a\x45\xc5\xae\x4a\x35\xd4\x86\xd2\x57\x3a\xd7\xb0\x57\x7e\x10\xf7\x31\x3d\x06\x66\x50\xe2\xbd\x9e\xc0\x52\xe1\x2d\xec\x99\x39\x66\x74\x81\xab\xb5\x7a\x49\x8f\x0a\x67\x25\x74\xa5\xb1\x09\xac\x29\xa1\xaa\xa1\xa1\xbc\x6a\xe7\xae\x64\x1a\xff\x52\x69\xbc\x37\xe3\x59\xe2\xc6\x2d\x88\x93\x63\x33\x9a\xb2\x25\x4b\xb9\x5e\x19\x9d\xc6\x4c\x51\x68\x23\xd6\xe1\xb1\xc5\x83\x54\xb3\xe5\x1b\x8b\xe8\xad\x83\xdb\x04\xc1\x74\x0a\x12\xef\xce\x5e\xbd\x06\x85\xba\x52\xb2\x04\x26\x81\x4b\xae\x39\xa3\x90\x67\x84\x30\x0e\xa8\x80\x39\xb9\x28\x4b\x3c\x86\xc9\x00\xc0\x18\xf6\xc8\x1d\xeb\x87\x20\xe6\xed\x0a\x55\xd5\xbe\x9a\x64\xc9\x81\x7f\x9a\xf8\xd1\x56\xc3\x81\x7f\xea\xbe\x19\xe8\x07\x16\xfb\x02\xa3\x07\x0e\x8c\xad\xa8\xad\x3a\x22\x26\xe7\x63\x4a\x0a\x90\x69\xf3\xda\xff\x62\x12\x35\xfc\x62\x7d\x06\xe1\x22\xc1\x65\x89\x4a\xbb\x9f\x12\x10\xd8\x4c\xa3\x02\xa6\x27\xc0\x65\xaa\x30\x47\xa9\x4b\x10\xb1\x40\xe9\x62\x12\x09\xe3\xf4\xd8\xcd\x89\x70\x02\x4c\x3b\x36\x8c\x5d\x28\x24\x85\x82\x59\x64\x66\x80\x79\x94\x68\xde\xb1\x85\xc6\xb4\x7b\x77\x9f\xa5\x9d\xdf\x7e\x46\x07\x53\x61\x5e\xdc\xa2\xfb\x21\x98\x33\x55\xe4\xc0\x09\x1a\x2f\xf5\x04\x32\x1c\x62\x5d\x83\x6a\xe7\x45\xb8\x06\xd3\xa2\xf0\xc8\x3a\xb8\xf6\xd1\x83\x30\x0f\x6b\x38\xb9\x80\xe9\x14\xd8\x6d\xc1\x33\xc8\x31\x2f\xd4\x0a\x04\xb2\x45\x39\x74\x6f\xb3\x58\x13\xac\x61\xc4\x5b\x9e\xea\x68\xc8\x2e\x0b\x93\xcf\x3a\xd2\xfd\x04\xcf\xa1\xe3\x97\x4d\xa6\x63\x84\xf9\xd1\xc5\x3b\xa3\x88\x12\x20\x50\x46\x22\x36\x8c\x1a\xc3\xbe\xd7\x61\x97\x51\xa5\x14\x4a\x6d\x29\xdb\xb1\x63\x56\x28\xe0\x34\xf8\xfc\x47\xe0\xf0\x93\x57\xf7\x23\xf0\x67\xcf\x7a\x86\xdb\xe9\x87\xed\x53\x17\xa2\x16\x71\x2b\xe1\x0d\xf4\xa6\xd3\xdf\x92\x49\x9e\x46\xa1\x5d\xab\x45\xa5\xa1\x98\xc1\xdd\x0d\x4b\x17\x31\x28\x96\x22\xa4\x85\xcc\xb8\xe6\x85\x2c\xff\x1a\x8e\xfd\xcc\xe6\x11\x1b\xb1\xa9\x34\x7f\x19\x44\xc6\x80\x2c\xa4\xe6\xb2\xc2\x47\x26\x4f\xa7\x70\x77\x53\x30\x48\x8a\x15\xf0\x12\xf4\x0d\x2f\xa1\xac\x12\x2d\x30\xa6\xb5\x63\xd9\x96\x88\xe2\xae\x04\x76\xc7\x56\xde\x92\xc9\x3e\x93\x59\x5f\x51\x3f\x02\x31\x24\x95\x1e\x48\x5b\x26\xdc\x71\x21\x20\x41\xc8\x2b\xcd\x34\x66\xa0\x0b\x48\x70\x93\x12\x93\x05\x7d\x83\xa6\xda\x02\xd7\xa8\x18\xc5\xe1\x3b\x2f\x4f\xe3\xef\x7a\x19\xec\xdb\x0b\xbc\x54\xeb\x47\xe4\x3e\x77\x41\xcc\x50\xa0\xc6\x96\x1b\x13\x3f\x7f\x81\xab\x4e\x48\x14\x73\x3f\xd5\xec\x00\xf1\x0b\x51\x94\x18\x8d\xc7\xc1\x23\x34\xe8\x43\x72\x7c\x7c\xc0\xf0\x97\xa8\x23\xda\x2a\x6c\x41\x1b\x43\x64\x57\xe3\x04\x50\xa9\x42\xb5\x6c\x17\x71\x5e\xc5\x67\x45\xba\x88\x2c\x96\x0c\x67\xa8\xec\xe8\x6b\x29\xec\xb8\x5d\x64\x13\x28\x16\x86\xe7\xd6\x8f\x37\x0b\x5c\xbd\x6d\x17\x4c\xb1\xe8\x91\xc1\x47\x02\x7b\xee\xc5\x5d\xfd\x72\x04\xed\x3e\xa2\xa1\xd4\xb3\x67\xc1\xda\x4a\x23\x9b\x92\x8b\xfe\x82\x2b\x75\xae\x8d\x07\x16\x49\x96\xc4\x97\x0a\x97\x4c\xe1\x7d\xe4\xc3\x49\x2d\xab\x52\xf0\x9d\xad\x07\xeb\xcb\x97\x06\x27\xf0\x0f\xc5\x96\xa7\x4a\x45\xa8\xd4\xb8\xaf\x1f\xa9\x7e\x9b\x38\x75\xf3\x28\x1b\x07\xd6\xb2\x1f\x5b\xe0\xea\xc0\xfe\x0c\x77\x88\x0d\x5e\xf6\x63\xd6\xab\xca\x7d\xb7\x87\x2e\x3f\xc8\xe6\x2b\x5c\x0a\x96\x3e\x2c\xaa\xdb\xe7\xcf\x58\xdb\xdf\x77\xb3\x6c\xfd\x13\x71\x5b\xa6\xc6\x0f\x4d\x5e\x56\x6a\x8e\xd1\x27\x1b\x6a\x75\x3f\x27\x95\x6b\xfd\x50\xdb\x0d\xd9\x8e\x24\x6c\xfb\xa1\x61\xb7\xd5\xb5\x78\xa6\xe1\xf2\xdd\x8b\xef\x3c\xe3\x17\x85\xa8\x72\x59\xc2\x5a\x93\xe9\x7a\xba\xd8\xf6\xcf\xde\x2e\xbd\xd8\xb6\x72\xd0\x91\xdd\x20\xcb\x50\xd9\xa6\x76\xc9\xd2\x05\x9b\x1b\x20\xf1\xa5\x7b\x26\x79\x9e\x2f\x0b\xa5\x21\x32\x8e\x85\xb3\x5c\x87\xc1\x28\xa4\xc6\x29\xb4\x23\x19\xd3\x2c\x61\x25\x4e\xcb\x0f\x22\x0c\x82\x51\x38\xe7\xfa\xa6\x4a\xe2\xb4\xc8\xa7\xff\xca\x0b\xae\x0a\x49\x9f\xee\xc3\x60\x1c\xf4\xf0\x5f\xa5\x37\x98\x33\x7b\x08\xb0\x5e\x74\x4e\xb8\xd0\x40\xdc\x75\xc3\x36\x2f\xa6\x42\x10\xb1\x07\xeb\x97\xcf\xe0\xac\x98\xcf\xd1\xf3\x7d\x77\xf7\x71\xf6\x5b\xa9\x28\x34\xb3\x21\x15\x05\x75\xce\x50\x52\x81\xa4\x9d\xfc\x00\xbe\xbf\x0d\xcd\xca\x1a\x77\x05\x65\x10\xdd\xb6\x83\xb5\x29\x3b\x39\xee\x12\x33\xf2\x2d\x63\x30\xa2\x06\x8d\xe8\x43\xd3\x6f\x99\x6a\x17\x1a\x1c\x02\x39\xd1\xc7\x6f\x81\xd4\x2d\xef\x95\x6a\xcc\x04\xe7\x8d\x91\x9e\x15\x2a\x67\xda\x55\xb0\x09\xd0\xe9\x16\xe2\x38\xe6\x52\xa3\x9a\xb1\x14\xeb\x66\xec\x82\x73\xb1\x44\x19\x95\x45\xa5\x52\xf4\xe2\x42\x55\xef\x4a\xea\xea\xcd\xe6\x1e\xed\x51\x3b\xe9\x63\x37\xca\x12\x5f\x47\x0c\xfa\x17\x85\x94\x98\xea\x88\x28\x70\xc2\x99\xc0\x54\xc3\x6f\xe0\xcf\x6d\x1f\xc8\xf7\x09\x58\x13\xe3\x60\xb4\x5e\x64\x46\xa3\x8d\xe5\x65\xd4\x04\x41\xfb\x75\xf7\xe4\x98\x64\x4f\x8e\x0f\x4c\x8f\x3a\xa2\x78\x1d\x74\x8d\x6f\x07\x7a\x3c\x09\x46\xcd\x5a\x2d\xa0\xc6\xf8\xe4\x78\x0c\x6e\x67\x80\x21\x1b\x46\x59\x12\x53\x2f\xed\x96\xad\x37\xd9\x62\xc9\x92\xf8\xe4\xb8\xdb\x55\x1e\x68\x5d\xda\x42\x1a\x51\xa1\xeb\x36\x0d\x37\x9a\xf5\xce\x26\x13\x50\xb6\x18\xd9\x24\x8d\x6d\x1c\x3b\x1c\xdd\x36\x43\xc1\x75\xa8\x68\x37\x22\xcd\xdb\x97\x68\xf3\x0f\x2a\xd5\xab\xaf\x2d\x57\xc8\x80\x83\x62\x21\x40\xdd\xda\xf1\x75\xd2\x16\xc9\x4d\x21\x14\xc5\x9c\xe6\xf7\x9d\xb5\xfc\x8a\xe3\x18\xfa\xfc\x22\x87\xa6\x53\xb8\xbe\x38\xb9\x38\x00\x85\x74\xe4\x03\x63\xe1\xa6\x10\x74\xfc\x33\x4c\x18\xae\x40\x4a\xb0\x5b\x6d\x76\xbb\x22\xbd\x86\x06\xae\x02\x3d\x7a\x40\x2c\x91\x28\x67\x56\xd8\x74\x0a\x57\xe6\x6d\x0d\xf4\x4b\xd4\x34\x63\x70\xe4\xed\x5d\x24\xf4\x0e\xbe\xfb\xc3\x9a\x32\xbc\x1e\x8a\x9b\x26\x72\xd7\x28\x83\x03\xba\x3d\xe3\x9b\xcb\x91\xa6\x19\xbb\xa2\xa7\xb0\xac\x84\x86\xbd\xc1\x89\xbd\x57\xa1\x8d\x7d\xb2\xb7\xc6\x82\xc0\xb5\x84\xa5\x36\x3b\xe7\xe1\x7b\x5a\x57\x57\xbf\x9e\x41\xd3\xbc\xb7\x1f\x5b\x66\x79\x3a\xf5\x29\xd3\x27\xe3\x66\xca\x6c\x5e\x73\x1d\x67\xec\x3e\xe5\x4c\xb4\x7b\x57\x12\xf7\x09\x30\x59\x8f\x84\xbb\x60\x69\x43\x11\xf4\x23\x71\x08\xbb\x4f\xc7\xa2\x69\x6a\x6b\x19\x4d\xd9\x6b\xdd\x8c\x7f\xad\x50\xad\x5e\x15\x77\xf7\x5b\xd9\x8c\xaf\x4c\x75\xbd\x4a\x99\x8c\xac\xe5\xa7\x57\x8e\x1b\x3f\x34\xd5\x2c\x3e\x55\xea\xbc\x78\x45\xfd\xf4\xb0\x47\x5f\x5b\x5f\x8f\xb4\xea\x5b\x44\xd4\x89\x58\x54\xed\xfa\xfa\x08\xaf\xf7\x99\x10\x43\x6e\x03\x13\xe2\x71\x7e\x2f\x45\xa5\xd8\xfa\xa5\xdc\x17\x65\xf7\x9b\xb7\x9f\xcc\x6f\x9a\xfd\x24\xc7\xbd\xc0\xb7\xc6\xf3\x35\xda\xda\x6c\x45\xbb\x6d\xba\xb7\x52\xf4\x3b\xda\xf0\xff\x9a\x61\x4b\x36\xc7\xec\x21\xc7\xe0\x96\x33\x58\xb2\x39\x97\xf3\x2f\x44\xb7\x4b\x32\x7c\xbc\xea\x5f\x1a\x5f\x1a\x7b\x17\xd2\xdd\x0b\x7e\x9c\x90\xe6\xfa\xd4\x3d\xfb\x1b\xd4\x54\x17\x0b\x94\x5d\x3f\xc3\x73\xae\x5d\x33\xf3\xe9\xec\xb5\xca\xe8\xe4\xdf\xea\xfb\x83\xf0\x39\x0c\xbf\x3c\xa7\x4d\xe8\xdc\xff\x75\x84\x47\x67\x67\x61\x0b\xcd\xc6\xb4\x7f\x99\xe1\x45\x0f\x61\x96\xeb\xf8\xca\x74\x80\x91\x19\x1d\x9e\x14\x7f\xf7\x32\x79\x22\xe7\x13\x0f\x63\xfb\xb5\xb4\x21\x8e\xde\x53\xf4\x1b\x09\xed\x12\xd6\xf1\xde\x15\x93\xa7\xc7\xc0\x6f\x3b\xe3\x8d\x91\xde\xff\xe1\x6d\xfc\x04\xc9\x07\x06\xd7\x56\xb0\xd7\xfe\xd1\xc5\x6c\x2f\x4b\xda\x65\x7c\x62\xde\xd6\xd6\xad\x1d\xfc\x9a\x9d\x90\x05\x95\x41\x52\x14\xe2\x7f\xd9\xe7\xcc\x98\x28\xf1\x6b\x75\x3a\x1e\xa6\xe7\xf8\xe9\x3d\xa6\xdb\xa9\xd9\x82\xb3\x9b\x7d\x31\x3f\x6c\x36\xc3\x54\x53\xd4\x1c\x0a\x0b\x2a\xa6\xa6\xe6\xc8\x7d\x8b\x3e\x87\x21\x27\xd5\xda\xa3\x5a\xb0\x25\x49\xfb\x3d\x8d\xe5\xe4\x23\x3d\x4d\x47\xd6\xaf\xd8\xd6\xb4\x7c\x35\xff\x53\xfd\x47\x28\xf4\xcf\xff\x4f\x48\xfb\xb8\x1f\x9f\x99\xb0\x4f\x18\x59\x23\xeb\x47\x89\x6a\xaf\x23\x5b\x92\xfe\x6c\xde\xd6\x08\x6a\x07\xb7\xaf\xa6\x4f\xb1\xd0\xdd\xcb\x7d\x23\xa7\xc7\x5e\x40\xbf\x00\x39\xbb\x58\x7c\x0b\xc7\xc7\xcf\xd0\x94\xff\x27\x00\x00\xff\xff\xcb\x53\xe6\x4e\x1c\x24\x00\x00")

func golangTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangTmpl,
		"golang.tmpl",
	)
}

func golangTmpl() (*asset, error) {
	bytes, err := golangTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.tmpl", size: 9244, mode: os.FileMode(420), modTime: time.Unix(1475019294, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x51\x93\xda\x36\x10\x7e\x3e\x7e\xc5\x0e\x73\x0f\xc7\xcd\x9d\xf3\xd2\xe9\x43\x32\xe9\x8d\x03\xba\x84\xc4\xc8\xc4\x16\xcd\xdc\xa3\xc1\x0b\xa7\x8e\x90\x89\x6d\x9a\x52\x57\xff\xbd\x23\x5b\x18\x8b\xb3\x48\x66\xd2\x87\xf2\x64\x5b\xdf\xae\xbe\xdd\xfd\x76\x97\xaa\x7a\x75\x0b\xf3\x30\x66\xef\x23\x12\x7f\x0e\x20\x66\x3e\x23\x33\x42\x19\x30\x32\x9b\x07\x3e\x23\x31\xc0\xed\x2b\xa5\x06\x83\xaa\xba\x87\x14\xd7\x5c\x22\x0c\xcb\xc3\x0e\xb3\xf5\x10\x94\xaa\x3f\xf3\x35\xe0\x57\xf0\xd8\x61\xa7\xcf\xf0\xaf\x72\x08\xf7\x4a\x41\xfb\xd3\x9f\x6a\x20\x8a\x02\x6d\x34\x97\x5d\x30\x97\x25\x6e\x30\x77\x63\x7f\xfd\xa5\x45\x2f\xf9\x86\x4b\x97\xdb\x02\x73\x9e\x88\x23\xb6\x79\xbb\x08\x3d\x3a\x5e\xf2\xcd\x45\xf4\x52\x64\xcb\x13\x61\xfd\x76\x02\x5a\x31\xdb\xbf\x05\xfd\xe0\xd3\x49\x40\x26\xc0\x9e\xe6\x04\xaa\xaa\x76\x67\xd2\x87\x32\xd5\xb6\xd6\xb3\x95\xee\x62\xf5\x8c\xdb\x64\xd8\x82\xf2\x44\x6e\x10\x3c\x96\x2c\x05\x16\xba\x08\xe3\x88\xf8\x8c\x00\xf3\xdf\x05\xda\x39\xec\xc4\x3e\x4f\x04\xff\x1b\xc1\xa3\xc9\x16\xe1\x1f\xd8\xcb\x14\xf3\x62\x95\xe5\x08\x4a\xc1\x4d\xc7\xcd\x35\xbf\x83\xeb\x55\x26\xe0\xf5\x5b\xf0\xc6\x99\xd8\x6f\x65\xd1\x14\x96\xaf\xe1\x9a\x2b\x75\x57\x55\x28\x53\xa5\xae\xaa\x0a\xbe\xf1\xf2\xb9\x41\x6b\x2e\xfa\x4b\xc7\x71\x73\x97\x52\x9a\x41\x89\xdb\x9d\x48\xca\x8e\x56\xbc\xa3\x49\xad\x17\x8f\x66\x25\xdd\x0b\xa1\xe1\x34\x64\x40\x17\x41\x00\xdd\x04\xb4\xc0\x08\x45\x52\xf2\x4c\x6a\x64\x44\x1e\x49\x44\xe8\x98\xc4\x67\x77\xc8\x64\x8b\x43\x0b\x7b\x63\x01\x56\x67\x00\xa5\x46\x10\x52\x98\x90\x80\x30\x02\x63\x3f\x1e\xfb\x13\x02\xae\x62\xd8\xcf\x35\xab\x79\xce\xb7\x49\x7e\xf8\x84\x07\x9d\xab\xbb\xab\x79\x34\x9d\xf9\xd1\x13\x7c\x22\x4f\x70\xe3\x48\xae\x65\x73\x4a\x2f\x98\xfc\xf6\x11\xae\x6d\xeb\x23\x7d\xbf\x52\xa3\x73\x2e\x46\x0a\x0b\xc9\xbf\xee\xb1\xa1\xb2\xa0\xd3\xcf\x0b\xe2\x64\xf1\xf3\x77\x2b\x35\x18\xbd\x19\xb4\xdf\x3b\x4f\x96\x6a\x8d\x9b\xfb\x46\x10\xfd\x3a\xb1\x73\xdc\x8e\x97\xd6\xd2\xd6\x72\x2d\xf8\x5e\x45\xbb\x3c\xa5\xd9\xc9\xd7\xa0\x57\x32\x4a\x79\xbd\x4a\xb9\xd4\x8f\x02\xd7\xe5\x1f\x19\x97\x8d\xdb\x80\x3c\x32\xf8\x18\x4e\xa9\x43\x93\x7c\xf3\x5c\xea\x68\x43\x07\x20\xc0\x75\xe9\x62\xd1\x9c\xc1\xdb\x0b\xae\x5d\xa6\xc7\x7b\xdd\x61\xac\x32\x99\x72\xdd\x0d\x3d\xe9\x69\x13\x77\xa4\x50\x55\x5e\xb8\xc3\x3c\x29\xb3\xbc\x7e\xab\x5b\xb3\xb9\xdf\x61\xd8\x9e\xea\xe1\xa8\xd4\x83\x91\x9a\x9b\xcf\xb7\x67\xcc\x4d\xa9\xbe\x7c\x20\x91\xee\x47\x4b\xbf\x32\x35\x33\xca\xd0\x2e\x6a\xe8\x71\xc4\xb6\xa2\x06\x9f\x4e\x4e\xba\xee\x24\xe6\x14\x6e\xe3\xac\xaf\xcd\xeb\xde\x4e\x36\x5c\x6e\x42\xd9\xba\x6f\xa2\x3d\xdd\x7b\xe1\x0e\x13\xfb\xd1\x85\x52\xf0\x1b\x3c\x40\x18\x4d\x48\x04\xef\x9e\xe0\x3b\x58\x3f\x1e\x43\x30\x9d\x4d\x19\x3c\xfc\xe0\x66\x40\x81\xab\x66\x83\x0e\x62\x12\x90\x31\xeb\x57\x0a\x28\xe5\xdd\xc2\x63\x14\xce\x9c\xe7\xcd\xc4\x35\xf3\x44\x17\xfd\x63\xc6\x9b\x4d\x70\x75\xd5\xa5\x7d\x12\xbf\x77\x34\xb2\x66\x76\xbd\x22\xbc\x2f\xba\x96\x2f\x6c\x4d\x85\x5f\x1a\xbe\x71\x87\x98\xa2\xc0\xd2\xc8\xc2\xcc\x6b\x13\x47\x5f\x33\xff\x9f\xa2\x38\x6b\x36\xbd\x59\xef\x35\xd1\xe2\x7c\x93\xf7\xae\xe0\x8e\x22\xaf\xb9\x7e\x33\xc3\xda\x8c\xc5\xef\x4e\xac\x0b\x6d\x5f\x33\xf9\x33\x11\xfb\xff\x80\xca\xeb\x9f\xe2\xc2\x65\x81\xb9\xd1\xef\x94\xc6\x24\x62\x30\xa5\x2c\x74\x8a\x14\xce\xd6\xba\x95\x54\x0d\x18\xc1\xef\x7e\xb0\x20\xf1\xcb\xbf\x38\x7b\xb9\x2f\x30\xfd\xe1\xb8\xac\x06\x1c\x41\x44\xd8\x22\xa2\x53\xfa\xfe\x42\x7f\x59\xe5\xff\x37\x00\x00\xff\xff\x34\x0c\xb5\xa2\x5a\x0b\x00\x00")

func postgresTmplBytes() ([]byte, error) {
	return bindataRead(
		_postgresTmpl,
		"postgres.tmpl",
	)
}

func postgresTmpl() (*asset, error) {
	bytes, err := postgresTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.tmpl", size: 2906, mode: os.FileMode(420), modTime: time.Unix(1475020312, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"golang.tmpl": golangTmpl,
	"postgres.tmpl": postgresTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"golang.tmpl": &bintree{golangTmpl, map[string]*bintree{}},
	"postgres.tmpl": &bintree{postgresTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

