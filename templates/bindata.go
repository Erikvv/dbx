// Code generated by go-bindata.
// sources:
// golang.header.tmpl
// golang.tmpl
// postgres.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _golangHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\xdf\x6f\xdb\xba\x15\x7e\x16\xff\x8a\x73\x0d\xdc\x40\x4a\x14\xba\xcf\xbe\x37\x1b\xae\xeb\xec\x62\x40\x97\x14\xb9\x2e\x86\xa1\x28\x0a\x4a\x3a\x76\x38\x53\xa4\x4b\x51\xb1\x5c\xcf\xff\xfb\x70\x48\x4a\x56\xe2\x14\xeb\xba\xf9\xc1\x92\xc8\xf3\xe3\x3b\x1f\x3f\x1e\x72\x3a\x85\xdf\x3e\x2c\xef\x7f\xbf\xbd\xbb\x7d\xf8\x6d\x79\xbb\x80\xf9\x3f\x60\x2d\xdd\x63\x5b\xf0\xd2\xd4\xd3\x66\x2b\x4a\xac\x8d\xde\xe0\x7e\x6d\xa6\x55\xd1\xb1\xe9\x14\x16\xf7\x70\x77\xbf\x84\xdb\xc5\x5f\x97\x9c\xb1\xad\x28\x37\x62\x8d\x70\x38\x00\x7f\x1f\xdf\x8f\x47\xc6\x64\xbd\x35\xd6\x41\xca\x92\x49\x25\x9c\x28\x44\x83\xd3\xe6\x8b\x9a\xb0\x64\xb2\xaa\x1d\x3d\x9a\xbd\x2e\xe9\xe9\x64\x8d\x13\xc6\x92\xc9\x28\xf1\x3f\x6b\x23\xad\xd1\xe4\xd1\x4d\x58\xc6\xd8\x93\xb0\xf0\x77\x2b\xb6\xb7\xd6\xc2\x0d\xac\x5a\x5d\xa6\x68\x2d\xa0\xb5\xc6\x66\xe1\x01\x07\x8b\xae\xb5\x9a\xbe\x8e\xde\xe1\x9d\x59\xaf\xd1\x06\xeb\x95\xb1\xb5\x70\xd0\x38\x2b\xf5\x3a\x07\x61\xd7\x0d\x70\xce\xa5\x76\x68\x57\xa2\xc4\xc3\x31\xf3\x3e\x77\x66\x07\x37\x40\x98\xf8\x9d\xd9\x31\x46\xce\xa0\xcc\x1a\xc7\xf9\x0e\x2c\x91\xab\x3e\xfc\x4f\x37\xa0\xa5\x82\x8b\x0b\x9a\xed\xbf\x0e\x2c\x49\xc2\x7c\x3a\x09\xe8\x4a\x65\x1a\xa9\xd7\xd0\x38\xe1\xb0\x46\xed\x66\xf0\xf3\xd3\x24\x27\xa7\x8c\x25\x47\x76\x64\xec\x70\x00\x2b\xf4\x1a\x81\xff\xe1\x6c\x5b\xba\x86\x98\x74\xfb\x6d\x60\xf7\x4e\xd4\x44\x2d\x95\xd0\x96\x0e\x0e\xec\x70\xb8\xee\xed\xff\x22\x51\x55\xde\x3c\x19\x9b\xd2\xfb\x92\xfc\xfb\x77\xb1\x26\x1b\x72\x44\x5d\xd1\x2b\x7d\xa0\xae\x68\xc5\x7c\xa2\xc5\xfc\x14\x3f\xb9\x24\xfa\xf9\x62\xce\x58\xa2\x6c\x0b\x97\xca\xb6\x04\xd3\x53\x72\xbf\x45\x9d\x36\xa6\xb5\x25\x0e\xa4\x2a\xdb\x7e\x6e\xe4\x57\x04\xa9\x5d\x06\xe9\xe5\x62\x9e\x8f\x18\xab\x0a\xff\x05\xb3\x1b\xf0\x71\xdf\x1a\xad\xb1\x74\x29\x01\x5b\x48\xa1\xb0\x74\xf0\x2f\xd8\x5a\xa9\xdd\x0a\x26\x3f\x7f\x99\xc0\xf1\x98\x43\x48\x91\x79\xc2\x5f\xf0\x1b\x97\x5b\x4b\x95\xf7\xda\x48\x7b\x36\x59\x3f\x7b\xb1\x98\x93\xed\x62\x3e\x83\xaa\xc8\x59\x42\x95\xcc\x40\xe3\xee\xdd\xc3\x87\x94\x20\xf5\xa0\xb3\x9c\x25\xc7\x9c\xa2\x0d\x35\xa6\x55\x01\x97\x8b\x79\x06\x6f\x95\x69\x30\xcd\xe0\x85\x06\xaa\x82\x2b\xdb\xf2\xf7\xad\x5d\x63\x9a\x0d\x29\x7b\x2c\x55\xc1\x17\x73\x1e\x7d\xb3\xf3\xa8\x5b\x8b\x5b\x61\x31\x6d\x5c\xdd\x0b\x33\x83\x34\x8e\x56\x10\xd8\xff\xc3\xd5\x2e\x07\x8b\x5b\x25\x4a\x0c\x52\xce\x02\x8f\x27\x1c\xa8\x9d\xdd\x0f\xe4\x46\x54\xbf\xa3\xf3\x91\xff\x23\x75\xfe\x0f\xad\x25\xda\xfa\x09\x1f\x31\xe6\x0e\x39\xe1\xd0\x07\x7e\x08\x58\x52\x6f\x93\xc1\xb7\x38\x53\x66\x4d\xfe\xe3\xea\xc2\xb6\xe3\x9c\xc3\x78\xdb\x11\xa0\xe9\x14\x96\xf7\x8b\xfb\x19\x58\xd4\x15\x5a\xf0\x19\x1e\x8d\xaa\xd0\x36\xaf\xec\xb5\xf1\xee\x6a\xbe\xa8\x19\x4c\xe0\x0a\x7c\xa2\x2b\x98\xf8\x24\x37\x7e\x6f\xd1\x5b\xbf\xb9\xbc\xbc\x97\xdd\x99\xbc\x97\x1d\x2d\x24\x61\x3e\xaf\xc1\x8b\x9c\x94\xbc\xec\xc6\x4a\x76\xdd\x98\xec\xc5\x9c\xcf\x71\x2d\x75\x97\xfe\x0f\x2a\x5d\x76\x64\xbb\xec\x66\xe0\x3a\x52\x69\x55\x44\xbd\xbe\xa4\xd7\x75\x70\xb9\xec\x32\x78\x6b\xea\x5a\xba\x73\x4d\xbe\xd0\xa0\xa3\x02\x79\x6f\x9c\x9d\xc7\x79\x30\x4a\x15\xa2\xdc\x7c\x67\xa4\x93\xf9\x2b\xb1\xfe\x6f\x82\xee\x5d\x06\xbb\x60\x70\x03\xae\xe3\x55\xc1\xc7\x79\x7e\x48\xde\x2e\xc0\xe8\x06\x6c\xd9\x28\xd3\xab\x74\xff\x57\x6a\x0e\x28\xc7\x2e\x83\x6d\x36\x48\xd1\x6f\x9f\x91\x1a\xc9\x76\x44\x11\x63\x89\xc6\xce\xe5\x44\xea\x13\x5c\x7a\x6b\x96\x6c\x70\x0f\xf1\x17\x40\x50\x49\xab\x26\x0e\x49\xed\x86\xf0\xd4\xb0\x4f\xc1\xeb\xb6\xf7\xda\xeb\x92\xff\xad\x75\x18\x54\x1f\x7e\x43\x9f\x4f\x4a\xb1\x15\xa5\x74\x7b\x1f\x2a\xb1\xc6\x38\x6f\x10\xb3\x4b\x5d\x61\x47\xdf\xb5\xd8\x7e\x0c\xf9\x3f\x45\x64\x47\x46\x57\x83\xd0\x56\x21\xb0\xdc\x80\xd0\x20\xb5\x74\x52\x28\xf9\x15\x2b\x82\xc4\x03\xad\x43\xfb\x1d\x52\xe7\x30\x4e\x9d\xf9\xb3\x86\x80\x2b\xda\x64\x17\xca\xb6\x87\xb8\x29\xc2\x2f\xb4\xf2\xde\x65\x36\x38\xd3\xa8\x47\x39\x0b\x30\x37\x98\x9e\x61\xf5\x8d\x9e\x25\x8a\x53\x79\x9c\x48\x06\x4a\xe1\x3f\x87\x61\xcf\xfa\x68\x38\x0a\x47\xc5\x42\xa5\x6e\xd0\xba\xf8\x68\x00\x41\xac\x1c\x5a\x10\x2e\x07\xa9\x4b\xeb\xcf\xf7\x06\x14\x57\xa8\x63\xc9\xa9\xf2\x35\x65\xd1\x27\xc5\x1c\x84\x8b\xeb\xea\x45\xa3\xa9\x52\x11\x00\xb1\x44\x0c\xc8\x90\x25\xd8\xc3\x11\x8e\x3e\xe2\x84\x66\x89\xee\x27\x30\xe2\xb2\x58\x9b\x27\x8c\x0f\xc2\xb5\xb2\xa6\x06\x49\x58\x64\xe3\x72\xa8\xf0\x39\xb8\x17\xd8\x82\x5f\x8a\x63\x5c\x21\xf9\x80\x26\xe2\x0b\xcf\x21\xbd\x7f\x19\x63\x93\x0a\xa6\x53\x10\x4f\x46\x56\x50\x63\x6d\xec\x1e\x14\x8a\x4d\x33\x2a\xe6\xdb\x36\xc3\xee\xeb\x71\xe1\x93\x2c\x5d\xfa\x5c\x21\xe1\x0e\x36\x8c\xfd\x0a\x6f\x46\x5b\x3f\x34\x57\x67\x3e\x7b\x4f\x62\x56\xa1\x4e\x15\xf7\xda\xc8\xe0\x7a\xf0\x63\x49\xd9\x5a\x8b\xda\x05\x9d\xc5\xd5\x5e\x19\x0b\x92\x46\xde\xfc\x02\x12\x7e\x85\x3e\xd0\x2f\x20\xaf\xae\x7c\x9a\xde\xeb\x06\xe2\x5b\x64\xc0\x63\xea\xe7\x86\x88\xde\x25\xd9\x0a\x2d\xcb\x74\x12\x76\x91\x69\x1d\x98\x15\xec\x1e\x45\xb9\xe1\x60\xa9\x17\x96\x46\x57\xd2\x49\xa3\x9b\x3f\x4f\x32\x96\x90\x48\x47\xe1\xb8\xdf\xe8\x7f\x8a\x65\x26\xa5\xd1\x4e\xea\x16\xa3\xdd\x74\x0a\xbb\x47\x23\xa0\x30\x7b\x90\x0d\xb8\x47\xd9\x40\xd3\x16\x4e\x21\x07\xc5\xa3\x2c\x0a\x65\x76\x0d\x88\x9d\xd8\x0f\x41\xfd\x7a\x09\x5d\x85\x10\xe3\x5a\x38\x14\xad\x7b\x66\x17\x16\x6e\x27\x95\x82\x02\xa1\x6e\xe9\x22\x5b\x81\x33\x50\xe0\xb9\x3b\x10\x87\xee\x11\xc1\x67\x90\x0e\xad\xa0\xd2\x7e\x62\x89\xef\x6b\x9f\x47\xb4\x8f\x73\x30\xba\xa1\x45\xbc\x69\x9c\x20\x2e\x2a\x54\xe8\xb0\x5f\xc1\x7c\xf0\xd9\xe0\x9e\xa6\xfd\x05\xbd\x1f\xa3\xf6\x79\xba\x76\x3d\x5b\xac\x71\xea\x78\x2f\x78\xae\x34\xba\x35\x51\x93\x1d\x4e\xaf\xcb\xd3\xe5\x2a\x1e\x4e\x8a\xd7\x2d\x7f\x67\xe8\x0c\x64\x49\x85\x2b\xb4\xe0\x87\x3e\x68\x15\x06\x59\x82\x39\x98\x8d\x57\x5d\xc0\xfb\x71\x83\xfb\x4f\x5e\xaf\x66\xe3\x97\x6f\x28\x11\x3d\x7a\x7e\x6a\x0a\x51\x31\x34\x8c\x7e\xc9\xaf\xae\xd8\xe9\x44\x8b\xc7\x93\x57\x77\x38\x57\xe2\x3d\x44\xd1\x89\xf3\x3e\x9c\x66\x5d\xea\xbf\x1e\xb0\x90\xba\xa2\x6a\xb2\x1f\xb8\x98\x20\x75\x3f\x5f\x3b\xd9\x12\xa5\x33\x7f\xc3\xa2\x0e\xbb\xc1\x3d\xf5\xd7\x0d\xee\xfb\x56\xfa\x1a\xfe\x71\xed\x7d\x1f\x1b\x0a\x7a\x5e\xcf\xd9\x32\x0c\x77\xcc\x71\x27\xfa\x1e\xe2\x7d\x86\xeb\x6b\x32\x0e\x4d\x43\xf1\x7e\xab\x67\xe7\x69\xe2\xcd\xfd\x3b\x83\xf7\x21\xdf\xf8\x48\xec\xdf\x01\x00\x00\xff\xff\xb0\xe6\x8a\x71\x3c\x0f\x00\x00")

func golangHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangHeaderTmpl,
		"golang.header.tmpl",
	)
}

func golangHeaderTmpl() (*asset, error) {
	bytes, err := golangHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.header.tmpl", size: 3900, mode: os.FileMode(420), modTime: time.Unix(1475352431, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x98\x51\x6f\x9b\x48\x10\x80\x9f\xe1\x57\xcc\x59\x55\x84\x23\x9b\xf4\x5e\x2b\xf9\x24\x27\xa1\xb9\x48\x2e\x49\x63\x57\xf7\x50\x55\xd7\x0d\x0c\xee\x36\x78\xe1\x96\x45\x49\x0e\xf1\xdf\x4f\xbb\x8b\xb1\x81\x18\x83\xed\xde\x4b\x14\xcc\xec\xcc\xec\xcc\x37\x3b\xc3\x66\xd9\xc5\x39\xdc\xdc\xcd\xa6\xee\x0d\x7c\xfc\xe2\x5e\x2d\x6e\xef\x5c\x58\x38\x9f\xee\x67\xd3\x85\x33\x87\xf3\x8b\x3c\x37\xcd\x2c\x1b\x83\x8f\x01\x65\x08\x83\x98\x70\xb2\x4a\x06\x30\xce\x73\xf5\x3b\x27\x6c\x89\xf0\x8e\x8e\xe0\x1d\xe1\x4b\xf8\x30\x01\x5b\xbd\x33\xb2\x0c\x68\x00\xef\x28\xe4\xf9\x08\xb2\x0c\x99\x9f\xe7\x59\xa6\xa4\x6c\x97\xac\x10\xf2\x1c\xd6\xcf\x8b\xd7\x58\x3e\x2b\x85\xc8\xfc\x52\xf9\xfa\xff\x8a\x07\x84\x2f\x0f\xb0\xaf\x74\x35\x3c\xe8\x66\x91\xd1\x70\x7c\x94\x55\x46\xc3\x6e\x96\x82\x94\x79\xe3\x1f\x48\x7c\xe4\x03\xe9\x9e\xe1\x45\x2c\x11\x90\x88\x95\x98\x7c\xcf\x32\xb0\xe7\x9f\x67\x90\xe7\xdf\x4d\xd3\x88\x39\xc6\x84\xa3\x3f\x02\x8e\x71\x48\x3c\x1c\x01\x72\x2e\x5d\x89\x1e\x7f\xda\xc5\x5b\x4b\xae\x1c\x9a\x06\x0d\xd4\xcb\xdf\x26\xc0\x68\x08\x99\x69\x18\xf2\x71\x02\x7f\x71\x12\x3b\x9c\x5b\xc8\xf9\xd0\x34\x0c\x8e\x22\xe5\xcc\x34\x72\xd3\xf0\x31\x40\xbe\x56\x6d\x0d\x4d\x43\x6a\x0d\xa3\xe5\x5c\xac\x84\xd2\xaa\xb6\x27\x70\x15\x87\x44\x94\x59\xb1\xa7\x7c\x99\x40\x9e\x0f\xcd\x62\xef\xc5\x0e\x2f\xce\x61\xee\xcc\x9c\xab\x05\xcc\x17\xd3\x85\xf3\xc9\x71\x17\x9a\xad\x2c\x2b\xf7\x9e\x60\x88\x9e\x50\xdb\x96\x61\x00\x2b\x7a\xfc\x09\xe7\xd7\x97\xc3\xaa\x21\x2d\x36\x96\x22\x03\xb0\xa5\xf4\xb6\xf8\xe2\x65\xaf\x78\x99\x95\x6a\xe8\x2b\x82\xd2\xed\x1b\x14\x2a\xe2\x82\xa7\x9e\xd0\xe8\xd8\x1f\x53\xe6\xcd\xd3\x20\xa0\x2f\x90\xe7\x96\x5a\xbf\x31\xb5\x2e\x8d\x32\x08\x60\x71\x4c\xd2\x50\xc0\x79\x45\x91\x4e\x14\x72\x1e\xf1\x21\x64\x35\x25\x15\x02\x94\xbf\x46\xa1\x64\x02\x67\x55\x7f\x72\xb3\xc8\xe2\x1a\x05\xfb\x73\x8a\xfc\xf5\x21\x7a\x7e\xb1\xb2\x6c\x67\x6a\x0a\x0d\x73\x8f\xb0\xc2\xbf\x0d\x20\x93\x09\x24\xff\x84\xb6\xc3\xb9\x1b\x3d\x44\xcf\x89\x42\x45\x53\x21\xc9\x19\xc9\x3f\x0a\x8f\x26\x50\xdb\x52\x55\xac\xd4\x16\xd4\x4b\x6d\x4e\x6b\x69\x54\xc1\x86\x91\xe9\x6c\x56\xe7\xa4\x09\xca\x98\x84\x61\x57\x58\x48\x18\xf6\x05\xa6\xb6\xa4\x1d\x9a\x8d\xf0\x06\x9c\x38\x4c\x39\x09\xe9\xbf\x78\x1a\x84\xbe\x7e\x3b\x0e\xa2\x1a\x29\x73\xe5\xb8\x75\xb6\xce\x48\x0b\x2f\xbf\x38\xd9\xf7\xd3\x1b\xe7\xba\x43\xba\x63\xb2\x44\xbf\x6b\xc2\x95\x70\xdf\x94\x37\x16\xb5\x27\x7d\x5b\x5c\xee\xea\x5e\x3e\xf7\xce\x3d\x0d\xca\x48\xb7\xa3\x50\xb6\x13\x69\x0b\x00\xc0\x13\xd1\x13\x32\x48\x04\xa7\x6c\x39\x82\x90\xae\xa8\x00\xca\x44\x1b\x33\x7a\x4d\x94\x8a\x72\x59\x2f\x8a\x4c\x43\x59\x29\x5a\xde\x60\x3a\x9b\x0d\x14\x1d\xda\xf6\x1f\xf0\x5e\xc1\x51\xca\x4c\x20\x58\x09\x7b\x1e\x73\xca\x84\xa5\x7e\x55\x80\x74\x80\xb1\x1a\x96\x9d\x6d\xa6\x1c\x2c\x8a\x8d\x15\x51\x20\x7c\xb9\x97\xda\xc1\xa0\x49\xae\xde\x0b\x96\xc7\xa2\x3c\x0e\xf5\xd6\xe4\xea\x4d\xec\x2a\xfb\xd2\xb2\x5f\x95\xdc\xf8\xf7\x6f\xb6\x8c\xb8\x42\xe1\x8e\xe9\xea\x91\x7a\x6b\x25\x21\x8d\xef\x2a\x8b\xab\xbb\x2f\x6e\xa3\x4d\x6e\xd7\x83\x17\xa5\x6c\x7f\x9b\x54\x52\x9d\x2b\xa0\x55\xba\xa1\xfb\x07\x49\x3a\x6b\xae\xc9\xee\x28\xa9\x6d\xfb\x32\x14\x57\xf2\xf9\x54\xdd\x97\x32\x71\xe4\x69\xd9\xb1\xaf\xca\x8e\x7a\x56\x6f\xa9\x4d\xfe\xde\x1f\x78\x66\x6e\xc2\xb5\x09\xaa\x7c\xf5\x27\x49\x4e\x15\xaa\xc7\x28\x0a\x6b\xb1\x32\x54\x6e\xca\xe1\x52\x4d\x97\x5d\xd2\x73\x58\x47\x09\x48\x98\xe8\x49\x76\x3b\x2c\xca\x05\x79\xbe\xec\x2e\x9b\x6b\x67\xe6\x2c\x9c\x96\xf1\xd2\xc7\x10\x05\xee\xad\x1b\x2d\xd6\x19\xef\xa6\xf8\x0e\xc2\x2b\x82\xd2\xed\x6b\xf5\xc3\xd1\x89\xd3\x7a\xfd\xb7\x32\xd7\x65\xb0\x2c\xf3\x5a\xb2\xee\xbc\xa0\x77\x5c\xf2\x1a\x70\x57\x09\xe2\x98\xd8\x72\xb6\x9c\x06\x01\x7a\x02\x7d\xeb\x10\x95\xdd\xc1\xe8\x36\x53\x16\xe9\xe9\x32\x53\x6e\x44\xfb\x52\xd2\x6d\xa6\x6c\x08\x57\x68\x39\xd5\x58\xa9\x23\x77\xc0\xd1\x78\x6a\x68\xde\x3a\x0d\xb7\x80\xe9\xc9\x4b\xcb\xd9\x5a\x28\xdd\xc5\xc9\xad\x3b\x77\x1e\xda\xbe\x4f\x29\x4b\x90\xef\x6f\xbc\x5a\xac\x33\x1a\x4d\xf1\x1d\x58\x54\x04\x55\x8f\xe4\x48\x6a\x07\xc8\xff\xf4\x45\x5a\x7d\x5f\x38\x46\x52\x11\x8d\x29\xa3\xa2\x9c\x15\x77\x7f\xb7\x16\x83\x2f\x8b\x04\xd8\x0f\x2a\x3b\x97\xaf\xbd\xfb\xee\xad\xb2\x9b\xec\xf9\xa2\x3d\xe2\xa3\x45\x31\x12\x26\xd8\x1f\xfb\x8d\x6b\xbd\xfd\x88\x9f\x2a\x07\xe5\x8c\x24\x42\x6b\xbb\x6d\x07\xbf\x75\x57\xb2\x67\xd7\xaf\x33\x2e\x5f\xe5\xe3\x56\xf4\xad\xf8\x69\x58\xa9\x8b\x46\x95\xd4\x59\x64\xd1\x58\x1b\xe8\x5a\x14\xe5\x82\xbe\xe5\xf1\xe6\xc2\xf6\x42\xa9\x2f\x39\xbc\x64\x7e\x45\x6d\xfc\xbd\x3e\xdd\x7a\xb1\x54\xa4\xb3\x92\xe6\x96\x31\xb1\x69\x7d\x7d\xf9\x28\x3f\xaf\x5c\x44\x3f\x71\xa3\x67\x85\x37\x8b\x9e\x25\x72\x6e\xf4\x6c\x0d\x1b\x57\x95\xfa\xb6\xd3\x9e\xa6\x22\x4a\xa0\xb8\xe5\x2c\xef\x70\x3f\x4c\x64\xc6\xec\x5b\x46\x45\xdb\x85\xea\x7f\x01\x00\x00\xff\xff\x2b\x09\xf1\xb6\x69\x16\x00\x00")

func golangTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangTmpl,
		"golang.tmpl",
	)
}

func golangTmpl() (*asset, error) {
	bytes, err := golangTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.tmpl", size: 5737, mode: os.FileMode(420), modTime: time.Unix(1475352381, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x4d\x6f\xea\x38\x14\x5d\xc3\xaf\xb8\x7a\x62\x01\xa8\xe4\xed\xdf\xa8\xaa\x52\x70\x3b\x69\x83\x43\x13\x33\x55\x97\x29\x31\xc5\xa3\xc4\x61\x82\x51\x85\x2c\xff\xf7\x91\xed\x90\x0f\x9a\x74\xda\xd1\x2c\x66\xe7\xd8\xc7\xe7\x9e\xfb\xe9\x48\xf9\x73\x0a\xab\x20\x22\xf7\x21\x8a\x9e\x7c\x88\x88\x4b\xd0\x12\x61\x02\x04\x2d\x57\xbe\x4b\x50\x04\x30\xfd\xa9\xd4\x70\x28\xe5\x0c\x12\xba\x65\x9c\xc2\x8f\xc3\x66\x47\xb3\xf8\x07\xcc\x94\x32\xfb\x45\xcc\xdf\x28\x38\x24\x7e\x4d\xe9\x01\x94\x1a\xce\x43\xe4\x12\x04\xc4\xbd\xf5\x11\x48\x09\x0e\x8e\x33\x0a\x4a\xc1\xb8\x81\x1f\xb1\x2b\x18\x6d\xf2\x14\x7e\x5d\x83\x33\xcf\xd3\x63\xc6\xcd\x65\x29\xd9\x16\x46\x4c\xa9\x2b\x29\x29\x4f\x94\x1a\x48\x09\xef\x4c\xec\x2c\x5a\x1b\x1d\x34\x39\xf5\x9a\x9c\xf6\xf4\x7c\x32\x03\xb6\x05\x07\xe7\x02\x1f\xd3\x54\x03\x70\x40\x00\xaf\x7d\x1f\xf4\x19\xe5\x49\x1b\x18\xd2\x2d\x2d\x28\xdf\x18\xae\x10\xdd\xa1\x10\xe1\x39\x8a\x0c\x6d\x75\x66\x7d\x03\xa5\xc6\xed\x6d\x2b\x1b\x94\x9a\x40\x80\x61\x81\x7c\x44\xd0\xc5\xcd\x80\x2f\x68\x4a\x85\xbe\xdc\xb4\xdf\xbf\x36\xaa\x56\x05\xcb\xe2\xe2\xf4\x48\x4f\x3a\x24\x57\x83\x55\xe8\x2d\xdd\xf0\x05\x1e\xd1\x0b\x8c\x7b\x62\xd8\xba\x53\x47\x11\xca\x30\x4a\x69\xa1\x66\xa5\xcd\x29\x35\xb9\x34\x5d\x66\x72\xcd\xd9\x5f\x47\x6a\x2d\xaf\xb1\xf7\xb4\x46\xbd\x46\xbf\x6d\x4a\xa9\xe1\xe4\xb7\x61\xb5\xdf\x58\xb5\x6a\x2c\xc9\x05\x8f\x33\x7a\x2e\x32\xa8\x32\xe0\xe8\x8f\x2a\xee\x2d\x07\x5a\x04\x29\xdd\x8a\x3f\x73\xc6\x2d\x83\x8f\xee\x08\x3c\x04\x1e\xb6\xd9\x61\x6f\x3b\x51\x31\xea\xd4\x49\x09\x82\x66\xfb\x34\x16\x4d\xdb\x8e\x4f\xb7\x42\x23\xae\xfb\x00\x86\xe9\x53\x1d\x9b\x9c\x27\x4c\xb0\x9c\xd7\xfd\xa2\x13\x6c\x3d\x98\x67\xfb\xaa\xa0\xbb\xe8\x2b\x54\xa5\xa4\xf6\x5e\xef\x06\x7b\x5a\xc4\x22\x2f\xf4\xc9\xcd\x87\x9a\x6a\xd9\x29\x43\xf6\x25\x6b\x76\xd1\x6d\xb3\x3c\x6b\x5a\xfe\x22\x5d\x67\xac\xda\x3a\xbd\xaf\x08\xf4\x6a\x65\x1e\xd6\x85\xd9\xc0\x1e\x68\x4a\x37\xa2\x09\xf5\x78\x47\xa1\xf7\xe4\xea\x7d\x47\x0b\x7a\x39\xd7\xca\x72\xe7\x89\xad\xf7\xb3\x3e\xb6\x05\x9e\x0b\x18\x31\x50\xea\xf9\x77\x14\x9a\xbe\xa7\xe9\xc1\x54\x94\x8b\x17\x50\x15\x76\x4b\x60\xa3\x1c\x2c\xe9\x67\xc3\xa0\x3d\x75\x8d\x6b\xb3\xf7\x5d\x2c\xaa\xae\x18\x09\x53\xc3\x5a\xd8\xb9\x9a\xcf\x11\x4d\x29\x07\xe7\x79\x17\x8b\x4a\x71\xc3\x1d\x4d\x62\x6e\x19\x80\x91\x68\x7a\x18\x6c\x13\xd7\xc2\x4b\x03\xb6\xed\xec\xb5\x46\x53\x5b\xb1\xda\xe7\xb3\x8d\x1a\x3f\xfd\x8e\x57\xd6\xa1\x08\xf9\x68\x4e\xa0\x23\xa1\xa5\xd7\x8e\x52\x70\x17\x06\x4b\x68\x0e\x04\x3b\xca\xcb\xc9\xa5\x0b\xe3\x21\x67\xf6\x25\x19\xb4\xeb\xa8\x9e\x08\x4e\x75\xed\xc3\x73\x30\x3f\xe7\xa7\x8b\xa1\xac\x8f\x4b\x50\x27\x51\x50\x24\xb4\xb8\x3d\x59\x96\x20\x5c\xa0\x10\x6e\x5f\xfa\x5a\xa5\x04\xd7\x73\x0d\xdc\x68\xde\x43\xec\xb3\x8c\x09\x4b\xeb\x7b\x4b\x8f\xc0\x4d\x1b\xf8\xc9\x24\x3a\xf2\x76\xa4\xcd\xce\x78\x3a\xf9\xbf\x07\xf5\x9f\x7a\xe2\x35\x3e\x34\xda\xb6\x13\x99\x98\x47\xd8\x82\xca\x77\xba\xc7\xe9\x6e\xc1\xff\x8d\x5e\xc6\x0f\xb4\x28\x73\xe0\xe1\x08\x85\x04\x3c\x4c\x82\x5e\x15\xf6\xa7\xc8\xc4\x72\xd0\xf7\x02\xd7\xbf\x4e\xfd\x5d\x7c\xf9\x18\xc3\x1f\xae\xbf\x46\xd1\xd8\xb8\xf6\xaf\x58\x7f\x75\xbe\xf1\x55\x14\xcc\xbf\x14\x59\x87\xd8\xc3\xf7\xd0\x1e\x05\x7f\x07\x00\x00\xff\xff\x39\x47\xa2\xf1\x75\x0a\x00\x00")

func postgresTmplBytes() ([]byte, error) {
	return bindataRead(
		_postgresTmpl,
		"postgres.tmpl",
	)
}

func postgresTmpl() (*asset, error) {
	bytes, err := postgresTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.tmpl", size: 2677, mode: os.FileMode(420), modTime: time.Unix(1475352472, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"golang.header.tmpl": golangHeaderTmpl,
	"golang.tmpl": golangTmpl,
	"postgres.tmpl": postgresTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"golang.header.tmpl": &bintree{golangHeaderTmpl, map[string]*bintree{}},
	"golang.tmpl": &bintree{golangTmpl, map[string]*bintree{}},
	"postgres.tmpl": &bintree{postgresTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

