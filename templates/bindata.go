// Code generated by go-bindata.
// sources:
// golang.funcs.tmpl
// golang.header.tmpl
// postgres.tmpl
// sqlite3.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _golangFuncsTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x59\xdd\x6f\xdb\x38\x12\x7f\x96\xfe\x8a\x39\xa1\x28\xec\x9c\xad\xb6\xc0\xe1\x1e\x7a\xd0\x1d\xdc\xc4\xcd\xe5\xe0\x3a\x69\xec\xe0\x1e\x82\x60\xc3\x5a\x54\xaa\x46\xa6\x14\x8a\x6a\x92\x55\xf4\xbf\x2f\x86\x94\x64\x7d\x58\xb2\xe4\xa4\x5d\xec\x62\x5f\x82\x58\x9c\x2f\xce\xfc\xe6\x83\x64\x1c\xbf\x39\x80\xe3\xd3\xd9\x64\x7e\x0c\x1f\x2f\xe6\x87\xcb\x93\xd3\x39\x2c\xa7\x9f\xce\x66\x93\xe5\x74\x01\x07\x6f\x92\x44\xd7\xe3\x78\x0c\x36\x75\x5c\x46\xc1\x08\x08\x27\xeb\xd0\x80\x71\x92\xc8\xef\x9c\xb0\x1b\x0a\xaf\xdc\x11\xbc\x22\xfc\x06\xde\x5b\x60\xca\x35\x2d\x8e\xc1\x75\xe0\x95\x0b\x49\x32\xd2\x01\x00\xe2\x98\x32\x3b\x49\xe2\x58\x52\x9a\x73\xb2\xa6\x90\x24\x90\xfd\x5e\x3e\x06\xf8\x5b\x0a\xa5\xcc\xce\x15\x64\xff\x97\xac\x20\xfc\xa6\xaf\x0d\xa8\x08\x65\xd5\x2c\xe8\xa6\x91\xb9\xde\xf8\x59\x5a\x99\xeb\x75\xd3\xe4\x44\x6c\x35\xfe\x4a\x89\x4d\xb9\x81\xe6\x69\x2b\x9f\x85\x02\x42\xb1\x16\xd6\x75\x1c\x83\xb9\xf8\x3c\x83\x24\xb9\xd6\xb5\x80\xd3\x80\x70\x6a\x8f\x80\xd3\xc0\x23\x2b\x3a\x02\xca\x39\x5a\xe2\x7f\xf9\x66\xa6\xab\x03\x64\x1c\xea\x9a\xeb\xc8\xc5\xbf\x59\xc0\x5c\x0f\x62\x5d\xd3\xf0\xa7\x05\xff\xe7\x24\x98\x72\x3e\xa0\x9c\x0f\x75\x4d\xe3\x54\x44\x9c\xe9\x5a\xa2\x6b\x36\x75\x28\xcf\x44\x0f\x86\xba\x86\x52\x3d\xff\x66\x21\xd6\x42\x4a\x95\xbb\x13\x74\x1d\x78\x44\xe4\x41\x31\x27\xfc\x26\x84\x24\x19\xea\xe9\xd6\xd3\x0d\xbe\x39\x80\xc5\x74\x36\x3d\x5c\xc2\x62\x39\x59\x4e\x3f\x4d\xe7\x4b\x05\xaf\x38\xce\xb7\x1e\x52\x8f\xae\x84\xdc\x35\x7a\x01\x06\xfe\x97\x6f\x70\x70\xf4\x61\x58\x56\xa4\xc8\xc6\x48\x62\x80\x89\xd4\x45\xf2\xe5\xc3\x4e\xf2\x3c\x28\x65\xcf\x97\x08\xd1\xec\x63\x2a\xa4\xc3\x05\x8f\x56\x42\x21\xc7\xfc\x18\xb1\xd5\x22\x72\x1c\xf7\x01\x92\x64\xa0\x97\x34\x65\xc9\x91\xfb\x00\x06\x9c\x86\x91\x27\xe0\xa0\x24\x47\xc5\x89\x72\xee\xf3\x21\xc4\x7a\x59\x48\x29\xfe\xd2\x5c\x2d\x15\x62\xc1\xeb\xb2\x39\x89\x9e\x06\x31\x43\x82\xf9\x39\xa2\xfc\xf1\xdc\xbf\x7f\x18\xc4\x71\x63\x64\x52\x09\x8b\x15\x61\xa9\x7d\x1b\x7c\x58\x16\x84\x77\x9e\x39\xe5\x7c\xee\x9f\xfb\xf7\xa1\x44\x8a\x02\x05\x02\x67\x84\x7f\x24\x3a\xea\x78\x2a\x52\x95\x51\x25\xb7\x20\x17\x95\x3a\x25\xa5\x96\x03\x1b\x88\x4c\x66\xb3\x2a\x4c\xea\x38\x19\x13\xcf\xeb\x8a\x15\xe2\x79\x7d\xf1\x52\x61\x69\xc7\xcc\x86\x78\x83\x9b\xc0\x8b\x38\xf1\xdc\x5f\xe9\x8b\x20\xe8\xf2\xea\x79\x18\xaa\x00\x65\x21\xed\x1e\xbc\xce\x02\xd2\x02\x97\x1f\x1c\xeb\xb3\xc9\xf1\xf4\xa8\x43\xb4\x03\x72\x43\xed\xae\xf1\x96\xc4\x7d\x23\x5e\x63\x6a\x8f\x79\x91\x1c\x77\x75\x86\xbf\xfb\x86\xde\x75\x72\x47\xa3\x8a\x66\x24\xe4\xad\x04\x55\x61\x3f\x5d\x09\xff\x96\x32\x08\x05\x77\xd9\xcd\x08\x3c\x77\xed\x0a\x70\x99\x68\x83\x8c\xe2\xf1\x23\x91\xb3\xf5\x02\x91\xd4\xeb\x3a\x99\x6a\xcb\x02\xc3\x80\x58\x7e\x2d\x58\x64\x81\xf1\xd6\x90\x1f\x13\xbd\x03\xee\xca\x2e\x68\xec\x27\xa3\x6c\x80\x48\xd5\xa4\x3b\xde\x89\x4e\xc3\xa8\x23\x54\xf2\x78\x34\xaf\x7e\xb8\x13\xe5\x3f\xe4\xde\x38\xc9\x02\x67\x2d\xcc\x45\xc0\x5d\x26\x52\xda\x4b\x49\x37\x7e\x77\x65\xa2\x6b\x65\xc8\x4f\x99\xca\x12\x94\x5b\x81\x7e\x2e\xaa\x39\x0b\x0e\x4f\x2f\xe6\xb5\x9e\x58\x84\xff\xca\x8f\xd8\xee\x9e\x28\xa9\x3a\x03\xbe\x95\xba\x26\xfb\x2b\x09\x3b\x4b\xae\xd0\x36\x64\x50\x51\x3f\xba\xe2\x10\x7f\xbf\x50\xab\x75\x99\x78\x66\x6d\xec\xd8\x44\xb1\x7d\xbe\xae\xf6\xcf\x3a\x0a\xdf\xee\x59\x21\x37\xde\xda\xf8\x14\x97\xfe\x4b\xc2\x17\xf2\xd4\x17\xdf\xf7\xaa\xae\xd2\x64\x68\xf2\x41\x52\x4e\x92\x5d\xa2\xb3\x5f\xff\x70\x88\x17\xaa\xa9\xb5\xe8\x16\x69\x02\xfc\x1b\x3d\xd7\x94\x35\x47\xd3\xd9\x74\x39\x6d\x19\x25\x6d\xea\x51\x41\x77\xa6\x8d\x22\xeb\x8c\xee\x3a\x79\x03\xc0\x4b\x84\x68\xf6\x91\xfc\xf0\xdc\xc0\x29\xb1\xf6\xd6\xc8\x75\x18\x22\xf3\xb0\xe6\x50\x9f\x3e\xd0\xd5\xf3\x62\x57\xc3\x76\x19\x40\x9c\x86\x26\xce\x91\x13\xc7\xa1\x2b\x41\xed\xc1\x3e\x22\xbb\xe3\xa2\xdb\xfc\x98\x46\xa7\xcb\xfc\xb8\x21\xed\x0b\x92\x6e\xf3\x63\x8d\xb8\x04\x96\x17\x1a\x21\x95\xe3\x5c\x26\xfe\xf9\x8f\xdf\x1b\x35\xdb\xaa\x61\x01\x31\x3d\x01\xd3\x52\x5b\x53\xa1\x4d\x40\x39\x99\x2f\xa6\xe7\x6d\x67\x51\x97\x85\x94\xef\xee\xbb\x8a\xac\x33\x36\xda\xc9\x6b\xd2\x39\xb9\x1f\xf7\xd4\xb0\x9d\xa5\x01\x7d\x25\x42\xd9\x88\x39\x25\x95\x32\xf5\x23\xce\xb8\xa9\x5e\x12\x09\x7f\xec\x32\x57\xe4\x56\x8e\xdb\xe7\xcf\x96\x93\x30\xf2\xba\x0e\x30\x5f\x80\x79\x2e\x21\xf0\xe1\xb1\x77\x73\x3f\x91\x76\x85\x3b\xce\xc8\xcf\x38\x07\x49\x20\x7a\x21\xed\x9f\x5b\x1b\xd3\x7a\xdb\x11\xdc\x96\xca\xf1\x8c\x84\x42\x49\x3b\x69\xcf\xae\xd6\x5d\xe1\x60\x50\xbd\x1f\xf9\xf0\x88\x3f\x0b\xde\x1f\x04\xb7\xc3\x52\xf2\xd5\x52\xb1\x0a\x45\xe6\x8f\x95\x82\xae\x99\x97\x33\xf4\xcd\xc1\x9d\x8c\x6d\xd9\xd8\x5f\xeb\x2e\xe6\xf6\x0c\xad\xb2\xec\x9d\xab\x3f\x22\x29\x7f\xc9\x6a\x77\x2f\x10\xa7\x38\x2a\xe1\xab\x65\x08\xae\x5b\x97\xdd\xa2\xe2\xf9\x71\x4e\xa9\x1d\xce\xfd\x7b\x99\x57\xcc\xbf\x47\xac\xcf\xfd\xfb\xc1\xb0\x76\xe7\xaa\xae\x6d\xcd\x49\x24\xfc\x10\xd2\xeb\xda\xfc\x32\xfa\xbd\x85\x41\x33\x4f\x98\x2b\x3a\xdf\x0c\xd7\x0a\xee\x26\x36\xe7\xe4\xbe\x53\x78\x52\xb7\xf4\xaa\xa6\xe3\x0a\xb6\xfe\xaa\x96\x7f\xfa\x6a\xd9\x04\xbb\xe6\xe2\xb0\x17\x00\xf7\x41\xda\x4f\x29\x01\x35\xe5\x7f\xc0\xd7\x91\x82\xa7\x4b\x0f\x24\xe9\x58\x7a\x71\x76\x34\x69\x3d\xd7\x46\x81\x4d\x3a\x9c\x6b\x15\x59\xe7\xe6\x54\x27\x6f\x68\x47\x25\x42\x34\xfc\x42\x7e\x78\xd6\xb9\x76\x04\x4a\x6a\x08\xa6\x69\x96\x24\x29\xe1\x7b\x4d\x98\x05\x43\x0b\x58\x1d\x67\x97\x98\xfd\x2b\x23\x72\x35\x16\x47\x0c\xae\x69\x9a\x5b\xeb\x60\x7a\x67\xda\xf0\xb8\x92\xdd\x9d\x56\x9f\x58\xd4\xf5\x69\x81\x37\x87\xe6\x36\x8e\x12\x4c\x37\xac\x3b\x4a\x2a\x92\x34\x24\x6e\xb6\xa1\x17\xb2\x60\x5b\xf9\xdb\x76\x87\xb4\xfd\xf6\x57\xe5\x4a\x97\x21\x32\x8d\x7a\xf7\x21\xb2\xca\xd0\x37\x63\xfa\x8c\x72\x0d\x2c\x3f\x2f\x8b\xf6\x4a\x97\xae\x20\xe9\x59\xcb\xb7\x29\x94\xaf\xe7\xdf\x09\x87\xbb\x10\x2e\xaf\xd4\x0b\x85\xfa\xf0\x9d\x78\x11\xc5\x8f\x2e\x13\x94\x3b\x64\x45\xe3\x44\xd7\x42\x4a\x19\xd6\xf3\x35\x09\x2e\x15\x35\xae\xe3\x0a\xb1\x6d\xc9\x82\xab\xa8\x62\xc0\x70\xc0\xcb\xde\x3c\xd4\x52\x41\xd4\x50\x56\x7c\xd7\x01\xd7\x7e\x18\x81\x7f\x8b\x6c\x28\xfc\x12\xd9\xae\xfe\x05\xfe\x2d\xae\x6b\xca\x8a\x4b\xd7\x7e\xb8\x02\x4b\x49\xd1\x35\xec\x05\xda\x86\x18\x2c\xf9\xb0\xa0\x48\x87\x79\xaa\xdc\x85\x60\x01\x09\x02\xca\xec\xc1\x5d\x38\x02\x69\xcf\xdf\xc1\x00\x0b\xfe\x63\x60\x67\x49\x77\x98\x13\xa9\xdf\xa9\xad\x72\x94\x78\x81\x51\x37\x73\xcb\xc0\x40\x80\x1c\xfa\x5e\xb4\x66\x90\x24\xc6\xa8\x38\xf5\x6e\xe4\x20\x8b\xe3\x73\x0c\xbf\x0a\x97\x9c\x89\xa4\xd0\x0c\x6b\xe8\x97\x5c\xaa\xfa\x68\xae\xa4\x5c\x1c\xa9\x07\xc3\x8c\xd3\x54\x14\x43\xf5\x4c\x82\x1e\xc1\x16\x29\xfd\x2c\x83\x12\x9a\xe7\x69\x27\xbd\x8e\x63\xec\xe1\x49\x72\x3d\xca\xbd\x67\x3c\x3d\x3d\x7d\x5e\x3c\x3d\x3d\x19\x9b\x6f\x19\xdf\xff\x7c\x97\x49\x97\x1a\x23\x30\x86\x23\x78\x37\xfc\xf9\xad\x1f\x13\x01\xa5\x57\x62\x57\x1e\x9d\x8a\x77\x64\xe3\x24\x19\x6a\xdb\x46\x86\x3c\xa5\x0a\xb3\xc1\x6f\x01\x00\x00\xff\xff\x7d\xf4\x8c\xc1\xa4\x23\x00\x00")

func golangFuncsTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangFuncsTmpl,
		"golang.funcs.tmpl",
	)
}

func golangFuncsTmpl() (*asset, error) {
	bytes, err := golangFuncsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.funcs.tmpl", size: 9124, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\x5d\x8f\xdb\xb8\xd5\xbe\x16\x7f\xc5\x59\xe3\x4d\x20\xcd\x78\xe8\x5c\xbc\xe8\x85\xb3\xd3\x22\x8e\xd3\x45\x81\x74\x26\x9d\x71\x50\x14\x41\x90\xd0\xd2\xb1\x87\x35\x45\x3a\x14\xe5\xb1\xeb\xea\xbf\x17\x87\xa4\x64\xf9\x63\xb7\xe9\xb6\x05\xea\x8b\x91\x48\x9e\x8f\xe7\x7c\xf0\x21\x35\xa3\x11\xbc\xf9\x38\xbb\xff\xe9\xdd\xdd\xbb\x87\x37\xb3\x77\x53\x98\xfc\x05\x96\x66\xbd\x5a\x72\xa9\x47\xd5\x5a\xe4\x58\x1a\xbd\xc2\xdd\xd2\x8c\x8a\xf9\x96\x6f\x5e\xb1\xd1\x08\xa6\xf7\x70\x77\x3f\x83\x77\xd3\x3f\xcc\x38\x63\x6b\x91\xaf\xc4\x12\x61\xbf\x07\xfe\x21\xbe\x37\x0d\x63\xb2\x5c\x1b\xeb\x20\x65\xc9\xa0\x10\x4e\xcc\x45\x85\xa3\xea\x9b\x1a\xb0\x64\xb0\x28\x1d\x3d\x2a\x67\xa5\x5e\x56\xfe\x75\xa7\x73\x7a\x3a\x59\xe2\x80\xb1\x64\xb0\x94\xee\xa9\x9e\xf3\xdc\x94\xa3\xbf\x96\x46\x5a\xa3\x49\x79\x4b\x6b\x5f\x60\x40\xbe\xa6\x56\x6e\xd0\x42\xd3\x0c\x58\xc6\xd8\x46\x58\xf8\xb3\x15\xeb\x77\xd6\xc2\x2d\x2c\x6a\x9d\xa7\x68\x2d\xa0\xb5\xc6\x66\xe1\x01\x7b\x8b\xae\xb6\x9a\x46\x8d\x57\x78\x6f\x96\x4b\xb4\x41\x7a\x61\x6c\x29\x1c\x04\x4c\x43\x10\x76\x59\x01\xe7\x5c\x6a\x87\x76\x21\x72\xdc\x37\x99\xd7\xb9\x33\xcf\x70\x0b\x84\x93\xdf\x99\x67\xc6\x48\x19\x94\x59\x62\xdf\xdf\x9e\x25\x72\xd1\x9a\xff\xe1\x16\xb4\x54\xf0\xf2\x25\xad\xb6\xa3\x3d\x4b\x92\xb0\x9e\x0e\x02\xba\x5c\x99\x4a\xea\x25\x54\x4e\x38\x2c\x51\xbb\x31\xbc\xd8\x0c\x86\xa4\x94\xb1\xa4\x61\x0d\x63\xb9\xd1\x95\x83\xc7\xfc\x09\x4b\x01\xb7\xf0\x95\xed\xf7\x37\xc0\xe3\xf8\xa6\x69\xd8\x57\xc6\xf6\x7b\xb0\x42\x2f\x11\xf8\xa3\xb3\x75\xee\x2a\x2a\x86\xdb\xad\x43\x81\xee\x44\x49\xd5\xa1\x30\xeb\xdc\xc1\xde\x5b\x88\xf2\xbf\x97\xa8\x0a\x2f\x9e\xf4\x45\xe9\x7d\x46\xfa\xed\xbb\x58\x92\x0c\x29\xa2\x2e\xe8\xb5\x61\x7e\x24\x17\xc0\x3f\xae\x7d\xad\x15\x06\x11\xf8\xbf\xe8\x68\x7c\xdb\x19\xec\xc0\xb4\x6b\x4d\xe3\xb5\x10\xba\x5c\x53\x76\x72\xa3\xea\x52\x93\x4e\x9a\xc5\xaa\xb0\x64\x23\x54\x4d\xe3\x5e\x55\x58\xb2\xb6\x72\x23\x1c\x1e\x59\x4c\x33\xd6\xf4\x52\xd1\xc1\x3a\xc4\x48\xe2\xf5\xfa\x00\x6f\x6d\xa5\x76\x0b\x18\xbc\xa8\x5e\x54\x03\x48\x73\x51\xa2\x2a\xcc\xb3\x6e\x8d\x66\x17\x02\xe8\xf4\x8f\xd3\x14\x7a\xe2\x08\x4f\x2f\xa1\xe9\xa6\x2f\x9b\x5d\xcc\xc4\x1e\x62\xab\x9e\x78\x49\x37\x19\x44\xf3\x69\x7d\xba\x98\xc1\x85\x9c\x1d\x4c\xf9\x4d\xf3\xd6\x4b\xd0\xa6\xf9\x25\x3b\x17\xd2\x7c\x04\xa9\x05\x9f\xd6\xbf\x08\xe7\x72\x61\x60\x7f\x68\x9e\x9b\xe6\xf2\x3b\xf1\x87\xcf\xf2\x74\x72\x68\xd5\xe4\x8a\x18\x80\x4f\x27\x8c\x25\xca\xd6\x70\xa5\x6c\x4d\xbd\xe7\xfd\xdf\xaf\x51\xa7\x95\xa9\x6d\x8e\xdd\x1e\x56\xb6\xfe\x52\xc9\xbf\xf9\xc6\xca\x20\xbd\x9a\x4e\x86\xbd\x0d\x5a\xcc\xfd\x88\x6a\xef\xed\xbe\x35\x5a\x63\xee\x52\xcf\x2d\x52\x28\xcc\x1d\xfc\xfd\xd0\x16\xdf\x06\xd0\x34\x43\x08\x2e\x32\xbf\xbf\x4f\xb6\x73\xcc\x8f\x96\x6a\xd8\x52\x51\xda\x6e\x5e\xd6\xae\xbe\x9c\x4e\x48\x76\x3a\x19\x43\x31\x1f\xb2\x84\x22\x19\x83\xc6\xe7\xf7\x0f\x1f\x53\x82\xd4\x82\xce\x86\x2c\x69\x86\x64\xad\x8b\x31\x2d\xe6\x70\x35\x9d\x64\xf0\x56\x99\x8a\xea\x73\x42\x39\xc5\x9c\x2b\x5b\xf3\x0f\xb5\x5d\x62\x9a\x75\x2e\x5b\x2c\xc5\x9c\x4f\x27\x3c\xea\x66\xe7\x56\xd7\x16\xd7\xc2\x62\x5a\xb9\xb2\xe5\xc1\x0c\xd2\x38\x5b\x40\xc8\xfe\xa3\x2b\xdd\x10\x2c\xae\x15\xed\x53\xcf\x9c\x59\xc8\xe3\x01\x07\x6a\x67\x77\x5d\x72\x23\xaa\x9f\xd0\x79\xcb\xff\x34\x75\xfe\x0f\x5a\x4b\x69\x6b\x17\xbc\xc5\xe8\x3b\xf8\x84\x7d\x6b\xf8\x21\x60\x49\xbd\x4c\x06\x3f\x97\x33\x65\x96\xa4\xdf\x8f\x2e\xb0\x3c\xe7\xbc\xdf\xe8\x3e\x82\xd1\x08\x66\xf7\xd3\xfb\x31\x58\xd4\x05\x5a\xf0\x1e\x9e\x8c\x2a\xd0\x56\x17\xa8\xbd\x4f\xe6\xd5\x37\x35\x86\x01\x5c\x83\x77\x74\x0d\x03\xef\xe4\xd6\x53\x39\xbd\xb5\x5c\x7e\x8c\xee\xbd\xac\xdc\x8c\x08\xaa\xa2\xb2\x7a\xaa\xaa\xe0\xd3\xe7\x16\xe7\x51\x7e\x01\xc0\x4f\xf8\xd4\x3e\x22\x35\x6a\xfa\x32\xa8\x0c\xe1\x2b\xb5\xef\xc1\xda\xe3\x9f\xde\x43\xd3\x7c\xcd\xbc\x52\x4c\x66\x2b\x7a\xd4\xa3\x0d\x3b\x85\x34\x45\x85\x0e\xdf\x28\xe5\x11\x19\x27\x14\xa5\xe9\x37\xff\x7f\x82\xa6\x77\x80\xc4\x03\xe7\x01\x37\x68\x2b\x4f\x84\xe4\x55\x2e\x40\xf7\x9b\x21\xd8\xdd\xef\x61\xad\x6a\x2b\x14\xed\xcf\x8e\x1a\xb3\xd7\x21\xb2\x36\xad\x10\x7f\xc1\xfd\xf5\x2d\x68\x3f\xd5\x00\xaa\x0a\x7b\xeb\x6d\x64\x24\x76\x12\x98\x97\xef\x13\xcb\xb9\x7c\xec\x17\x4f\x38\xb3\xed\x19\xe1\xcc\xb6\xb4\xb5\x28\x29\xe7\x75\xf3\xb4\x43\xdc\x32\xdb\xf6\xb9\xc5\x6d\x8f\x22\x9e\xf0\x09\x2e\xa5\xde\xa6\xff\x06\x6f\xcc\xb6\x24\x3b\xdb\x8e\xc1\x6d\x89\x37\x8a\x79\x64\x90\xd3\x86\x77\x5b\xb8\x9a\x6d\x33\x78\x6b\xca\x52\xba\x73\x96\x38\x61\x05\x47\x01\xf2\x56\x38\x3b\xb7\xf3\x60\x94\x9a\x8b\x7c\xf5\x9d\x96\x0e\xe2\x17\x6c\xfd\x57\x7a\xca\x6d\xff\x77\x7b\xea\x38\xfc\xff\x18\xc3\xb6\x2a\x9d\xdc\x30\x32\x82\xdb\xf2\x62\xce\xfb\x7e\x7e\x15\xdf\xba\x00\x63\xdb\x61\xcb\x7a\x9e\x2e\x86\xf6\x2f\xd1\x6b\x40\xd9\x57\xe9\x64\xb3\x6e\x27\x7a\x3e\xef\x6d\x46\x92\xed\xa5\x88\xb1\x44\xe3\xd6\x0d\x29\xa9\x1b\xb8\xf2\xd2\x2c\x59\xe1\xae\xad\x5f\x7b\x67\xb4\xb8\xa8\xe2\x94\xd4\xae\x33\x4f\x37\x88\x83\xf1\xb2\x6e\xb5\x76\x3a\xe7\x7f\xac\x1d\x86\x4d\x1f\x7e\xdd\xc5\x23\xc9\xc5\x5a\xe4\xd2\xed\xbc\xa9\xc4\x1a\xe3\xbc\x40\xf4\x2e\x75\x81\x5b\x1a\x97\x62\xfd\x29\xf8\xff\x1c\x91\x35\x8c\xbe\x9c\xc2\x39\x1f\x5b\xa5\x02\xa1\x41\x6a\xe9\xa4\xef\xd8\x82\x20\xf1\x90\xd6\xee\x3e\xd0\xb9\x1e\x42\xdf\x75\xe6\x2f\x3f\x04\x5c\xd1\x0e\x78\xa9\x6c\xbd\x8f\x9c\x10\x7e\xe1\x6e\xd1\xaa\x8c\x3b\x65\x9a\xf5\x28\xc7\x01\xe6\x0a\xd3\x33\xac\xfe\xe6\xc1\x12\xc5\x29\x3c\x4e\x49\x06\x72\xe1\x87\xdd\xb4\xcf\x7a\x6f\x3a\x36\x8e\x8a\x81\x4a\x5d\xa1\x75\xf1\x51\x01\x82\x58\x38\xb4\x20\xdc\x10\xa4\xce\xad\xff\xbe\xa9\x40\x71\x85\x3a\x86\x9c\x2a\x1f\x53\x16\x75\x52\x1c\x82\x70\xb1\xae\xbe\x69\x34\x45\x2a\x02\x20\x96\x88\x0e\x19\xb2\x04\x5b\x38\xc2\xd1\x20\x2e\x68\x96\xe8\x76\x01\x23\x2e\x8b\xa5\xd9\x60\x7c\x10\xae\x85\x35\x25\x48\xc2\x22\x2b\x37\x84\x02\x8f\xc1\x9d\x60\x0b\x7a\x29\xf6\x71\x05\xe7\x1d\x9a\x88\x2f\x3c\x3b\xf7\xfe\xa5\x8f\x4d\x2a\x18\x8d\x40\x6c\x8c\x2c\xa0\xc4\xd2\xd8\x1d\x28\x14\xab\xaa\x17\xcc\xcf\xcb\x74\xbb\xaf\xc5\x85\x1b\x99\xbb\xf4\xb8\x43\xc2\x37\x68\x37\xf7\x23\xbc\xea\x6d\xfd\x70\xb6\x38\xf3\xc5\x6b\x52\x66\x15\xea\x54\x71\xdf\x1b\x19\xdc\x74\x7a\x2c\xc9\x6b\x6b\x51\xbb\xd0\x67\xb1\xda\x0b\x63\x41\xd2\xcc\xab\xd7\x20\xe1\x47\x68\x0d\xbd\x06\x79\x7d\xed\xdd\xb4\x5a\xb7\x10\xdf\x62\x06\x3c\xa6\x76\xad\xb3\xe8\x55\x92\xb5\xd0\x32\x4f\x07\x61\x17\x99\xda\x81\x59\xc0\xf3\x93\xc8\x57\x1c\x2c\x71\x61\x6e\x74\x21\x9d\x34\xba\xfa\xdd\x20\x63\x09\x35\x69\xcf\x1c\xf7\x1b\xfd\xb7\x31\xcc\x24\x37\xda\x49\x5d\x63\x94\x1b\x8d\xe0\xf9\xc9\x08\x98\x9b\x1d\xc8\x0a\xdc\x93\xac\xa0\xaa\xe7\x4e\x21\x07\xc5\x63\x5b\xcc\x95\x79\xae\x40\x3c\x8b\x5d\x67\xd4\xd7\x4b\xe8\x22\x98\xe8\xc7\xc2\x61\x5e\xbb\x23\xb9\x50\xb8\x67\xa9\x14\xcc\x11\xca\x9a\x3e\xe4\x0b\x70\x06\xe6\x78\xae\x0e\x94\x43\xf7\x84\xe0\x3d\x48\x87\x56\x50\x68\x3f\xb0\xc4\xf3\xda\x97\x5e\xda\xfb\x3e\x18\x7d\x32\x44\xbc\x69\x5c\xa0\x5c\x14\xfe\x04\x6c\x2b\x38\xec\x74\x56\xb8\xa3\x65\xff\x0f\x8a\x76\x8e\xe8\xf3\xf0\x1d\x70\x54\xac\xbe\xeb\xa3\x8b\x6a\xdb\x69\x74\x8d\x27\x92\xed\x4e\xaf\xab\xc3\x6d\x3f\x1e\x4e\x8a\x97\x35\x7f\x6f\xe8\x0a\xc0\x92\x02\x17\x68\xc1\x4f\x7d\xd4\x2a\x4c\xb2\x04\x87\x60\x56\xbe\xeb\x02\xde\x4f\x2b\xdc\x7d\xf6\xfd\x6a\x56\xbe\x7c\x5d\x88\xe8\xd1\xf3\x03\x29\xc4\x8e\xa1\x69\xf4\x25\xbf\xbe\x66\x87\x13\x2d\x1e\x4f\xbe\xbb\xc3\xb9\x12\x2f\x09\x8a\x4e\x9c\x0f\xe1\x34\xdb\xa6\x7e\xf4\x80\x73\xa9\x0b\x8a\x26\xfb\x15\xf7\x32\x24\xf6\xf3\xb1\x93\x2c\xa5\x74\xec\xaf\xfc\xc4\xb0\x2b\xdc\x11\xbf\xae\x70\xd7\x52\xe9\x25\xfc\xfd\xd8\x5b\x1e\xeb\x02\x3a\x8e\xe7\xac\x0c\xdd\x47\x4f\x9f\x89\xbe\x27\xf1\xde\xc3\xcd\x0d\x09\x07\xd2\x50\xbc\xdd\xea\xd9\xb9\x9b\xf8\x29\xf9\x9d\xc6\x5b\x93\xaf\xc2\xe7\xc4\x3f\x02\x00\x00\xff\xff\xb4\x4b\x83\x65\x5c\x14\x00\x00")

func golangHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangHeaderTmpl,
		"golang.header.tmpl",
	)
}

func golangHeaderTmpl() (*asset, error) {
	bytes, err := golangHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.header.tmpl", size: 5212, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x4d\x8f\xda\x38\x18\x3e\xc3\xaf\x78\x55\x71\x60\xd0\x90\xde\x77\x55\x8d\x32\xe0\xe9\xa6\x0d\x0e\x93\x98\xad\xe6\x98\x12\x53\xbc\x4a\x1c\x36\x18\x8d\x90\xf1\x7f\x5f\xd9\xce\x27\x4d\xd8\xe9\x6a\x0e\x7b\x73\xec\xc7\xcf\xfb\xbc\x9f\x8e\x94\x1f\x67\xb0\x0e\x22\xf2\x39\x44\xd1\xb3\x0f\x11\x71\x09\x5a\x21\x4c\x80\xa0\xd5\xda\x77\x09\x8a\x00\x66\x1f\x95\x1a\x8f\xa5\x9c\x43\x42\x77\x8c\x53\xf8\x70\xdc\xee\x69\x16\x7f\x80\xb9\x52\x66\xbf\x88\xf9\x0f\x0a\x0e\x89\xbf\xa7\xf4\x08\x4a\x8d\x17\x21\x72\x09\x02\xe2\x3e\xfa\x08\xa4\x04\x07\xc7\x19\x05\xa5\x60\xda\xc2\x4f\xd8\x3d\x4c\xb6\x79\x0a\xbf\x7d\x02\x67\x91\xa7\xa7\x8c\x9b\xcb\x52\xb2\x1d\x4c\x98\x52\xf7\x52\x52\x9e\x28\x35\x92\x12\x5e\x99\xd8\x5b\xb4\x36\x3a\x6a\x73\xea\x35\x39\x1f\x68\x75\x32\x07\xb6\x03\x07\xe7\x02\x9f\xd2\x54\x03\x70\x40\x00\x6f\x7c\x1f\xf4\x19\xe5\x49\x17\x18\xd2\x1d\x2d\x28\xdf\x1a\xae\x10\x3d\xa1\x10\xe1\x05\x8a\x0c\x6d\x7d\x66\x7d\x03\xa5\xa6\xdd\x6d\x2b\x1b\x94\xba\x83\x00\xc3\x12\xf9\x88\xa0\xab\x9b\x01\x5f\xd2\x94\x0a\x7d\xb9\x6d\x7f\x78\x6d\x54\xad\x0b\x96\xc5\xc5\xf9\x2b\x3d\xeb\x90\xdc\x8f\xd6\xa1\xb7\x72\xc3\x17\xf8\x8a\x5e\x60\x3a\x10\xc3\xce\x9d\x26\x8a\x50\x86\x51\x4a\x0b\x35\x2b\x6d\x4e\xa9\xbb\x6b\xd3\x65\x26\x37\x9c\xfd\x7d\xa2\xd6\xf2\x06\x7b\xcf\x1b\x34\x68\xf4\x97\x4d\x29\x35\xbe\xfb\x7d\x5c\xef\xb7\x56\x9d\x1a\x4b\x72\xc1\xe3\x8c\x56\x45\x06\x75\x06\x1c\xfd\x51\xc7\xbd\xe3\x40\x87\x20\xa5\x3b\xf1\x57\xce\xb8\x65\xf0\xd1\x13\x81\x2f\x81\x87\x6d\x76\xd8\x8f\xbd\xa8\x19\x75\xea\xa4\x04\x41\xb3\x43\x1a\x8b\xb6\x6d\xc7\xa7\x3b\xa1\x11\x9f\x86\x00\x86\xe9\xa6\x8e\x6d\xce\x13\x26\x58\xce\x9b\x7e\xd1\x09\xb6\x1e\x2c\xb2\x43\x5d\xd0\x7d\xf4\x35\xaa\x56\xd2\x78\xaf\x77\x83\x03\x2d\x62\x91\x17\xfa\xe4\xe1\xa7\x9a\xea\xd8\x29\x43\xf6\x26\x6b\x76\xd1\x6f\xb3\x3c\x6b\x5b\x7e\x23\x5d\x6f\xac\xba\x3a\xbd\xb7\x08\xf4\x1a\x65\x1e\xd6\x85\xd9\xc2\x1e\x69\x4a\xb7\xa2\x0d\xf5\x78\x4f\xa1\x0f\xe4\xea\x75\x4f\x0b\x7a\x3d\xd7\xca\x72\xe7\x89\xad\xf7\x4a\x1f\xdb\x01\xcf\x05\x4c\x18\x28\xf5\xed\x0f\x14\x9a\xbe\xa7\xe9\xd1\x54\x94\x8b\x97\x50\x17\x76\x47\x60\xab\x1c\x2c\xe9\xad\x61\xd0\x9d\xba\xc6\xb5\xf9\xeb\x3e\x16\x75\x57\x4c\x84\xa9\x61\x2d\xac\xaa\xe6\x2a\xa2\x29\xe5\xe0\x7c\xdb\xc7\xa2\x56\xdc\x72\x47\x93\x98\x5b\x06\x60\x24\x9a\x1e\x06\xdb\xc4\x8d\xf0\xd2\x80\x6d\x3b\x7b\xad\xd5\xd4\x56\xac\xf6\xb9\xb2\xd1\xe0\x67\xbf\xe2\x95\x75\x28\x42\x3e\x5a\x10\xe8\x49\x68\xe9\xb5\xa3\x14\x3c\x85\xc1\x0a\xda\x03\xc1\x8e\xf2\x72\x72\xe9\xc2\xf8\x92\x33\xfb\x92\x8c\xba\x75\xd4\x4c\x04\xa7\xbe\xf6\xd3\x73\xb0\xa8\xf2\xd3\xc7\x50\xd6\xc7\x35\xa8\x97\x28\x28\x12\x5a\x3c\x9e\x2d\x4b\x10\x2e\x51\x08\x8f\x2f\x43\xad\x52\x82\x9b\xb9\x06\x6e\xb4\x18\x20\xf6\x59\xc6\x84\xa5\xf5\xbd\x95\x47\xe0\xa1\x0b\xbc\x31\x89\x4e\xbc\x1b\x69\xb3\x33\x9d\xdd\xfd\xdf\x83\xfa\x6f\x3d\xf1\x3d\x3e\xb6\xda\xb6\x17\x99\x98\x47\xd8\x82\xca\x77\x7a\xc0\xe9\x7e\xc1\xef\xa3\x97\xf1\x23\x2d\xca\x1c\x78\x38\x42\x21\x01\x0f\x93\x60\x50\x85\xfd\x29\x32\xb1\x1c\x0d\xbd\xc0\xcd\xaf\xd3\x70\x17\x5f\x3f\xc6\xf0\xa7\xeb\x6f\x50\x34\x35\xae\xfd\x27\xd6\x87\xd6\xcb\x5e\xfb\x6e\xfe\xa0\xc8\x26\xc4\x1e\xfe\x0c\xb3\xe1\x30\x9c\x0e\x49\x5c\x25\x63\xb3\x5e\xba\xe5\x4f\x53\xfd\x20\x47\x88\xc0\xe5\x72\x79\x8e\x2e\x97\xcb\xbb\x24\xe5\x86\xb0\x7f\x02\x00\x00\xff\xff\x5f\xa3\x67\x2b\x04\x0b\x00\x00")

func postgresTmplBytes() ([]byte, error) {
	return bindataRead(
		_postgresTmpl,
		"postgres.tmpl",
	)
}

func postgresTmpl() (*asset, error) {
	bytes, err := postgresTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.tmpl", size: 2820, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlite3Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x4d\x6f\xea\x38\x14\x5d\xc3\xaf\xb8\x7a\x62\x01\xa8\xe4\x2d\x66\x37\xa3\xa7\x2a\x05\x57\x93\xd7\x90\xd0\xc4\x4c\xd5\x65\x4a\x4c\xf1\x28\x71\x98\x60\x54\x21\xe3\xff\x3e\xb2\x9d\x4f\x9a\x30\xed\xa8\x8b\xb7\x73\xec\xe3\x73\xcf\xfd\x74\x84\xf8\x3e\x85\xf0\xd1\x75\x30\xfa\x0d\x42\x6c\x63\xb4\x44\x1e\x06\x8c\x96\x2b\xd7\xc6\x28\x04\x98\x7e\x97\x72\x38\x14\x62\x06\x31\xd9\x52\x46\xe0\xdb\x61\xb3\x23\x69\xf4\x0d\x66\x52\xea\xfd\x3c\x62\xaf\x04\x2c\x1c\xbd\x24\xe4\x00\x52\x0e\xe7\x01\xb2\x31\x02\x6c\xdf\xb9\x08\x84\x00\xcb\x8b\x52\x02\x52\xc2\xb8\x81\x1f\xd1\x1b\x18\x6d\xb2\x04\x7e\xff\x01\xd6\x3c\x4b\x8e\x29\xd3\x97\x85\xa0\x5b\x18\x51\x29\x6f\x84\x20\x2c\x96\x72\x20\x04\xbc\x51\xbe\x33\x68\x65\x74\xd0\xe4\x54\x6b\x7c\xda\x93\xf2\x64\x06\x74\x0b\x96\x97\x71\xef\x98\x24\x0a\xe0\xf9\x18\xbc\xb5\xeb\x82\x3a\x23\x2c\x6e\x03\x03\xb2\x25\x39\x61\x1b\xcd\x15\xa0\x7b\x14\x20\x6f\x8e\x42\x4d\x5b\x9d\x19\xdf\x40\xca\x71\x7b\xdb\xc8\x06\x29\x27\xe0\x7b\xb0\x40\x2e\xc2\xe8\xe2\xa6\xcf\x16\x24\x21\x5c\x5d\x6e\xda\xef\x5f\x6b\x55\xab\x9c\xa6\x51\x7e\x7a\x20\x27\x15\x92\x9b\xc1\x2a\x70\x96\x76\xf0\x0c\x0f\xe8\x19\xc6\x3d\x31\x6c\xdd\xa9\xa3\x08\x45\x18\x85\x30\x50\xbd\x52\xe6\xa4\x9c\x5c\x9a\x2e\x32\xb9\x66\xf4\x9f\x23\x31\x96\xd7\x9e\xf3\xb8\x46\xbd\x46\x3f\x6d\x4a\xca\xe1\xe4\x8f\x61\xb5\xdf\x58\xb5\x6a\x2c\xce\x38\x8b\x52\x52\x16\x19\x54\x19\xb0\xd4\x47\x15\xf7\x96\x03\x2d\x82\x84\x6c\xf9\xdf\x19\x65\x86\xc1\x45\xf7\x18\x7e\xfa\x8e\x67\xb2\x43\x5f\x77\xbc\x62\x54\xa9\x13\x02\x38\x49\xf7\x49\xc4\x9b\xb6\x2d\x97\x6c\xb9\x42\xfc\xe8\x03\x68\xa6\xab\x3a\x36\x19\x8b\x29\xa7\x19\xab\xfb\x45\x25\xd8\x78\x30\x4f\xf7\x55\x41\x77\xd1\x57\xa8\x4a\x49\xed\xbd\xda\xf5\xf7\x24\x8f\x78\x96\xab\x93\xdb\x77\x35\xd5\xb2\x53\x84\xec\x43\xd6\xcc\xa2\xdb\x66\x71\xd6\xb4\xfc\x41\xba\xce\x58\xb5\x75\x3a\x1f\x11\xe8\xd4\xca\x1c\x4f\x15\x66\x03\x7b\x20\x09\xd9\xf0\x26\xd4\x61\x1d\x85\xde\x93\xab\xb7\x1d\xc9\xc9\xe5\x5c\x2b\xca\x9d\xc5\xa6\xde\x4b\x7d\x74\x0b\x2c\xe3\x30\xa2\x20\xe5\xd3\x9f\x28\xd0\x7d\x4f\x92\x83\xae\x28\xdb\x5b\x40\x55\xd8\x2d\x81\x8d\x72\x30\xa4\xd7\x86\x41\x7b\xea\x6a\xd7\x66\x6f\xbb\x88\x57\x5d\x31\xe2\xba\x86\x95\xb0\xb2\x9a\xcb\x88\x26\x84\x81\xf5\xb4\x8b\x78\xa5\xb8\xe1\x8e\x22\xd1\xb7\x34\x40\x4b\xd4\x3d\x0c\xa6\x89\x6b\xe1\x85\x01\xd3\x76\xe6\x5a\xa3\xa9\x8d\x58\xe5\x73\x69\xa3\xc6\x4f\x3f\xe3\x95\x71\x28\x44\x2e\x9a\x63\xe8\x48\x68\xe1\xb5\x25\x25\xdc\x07\xfe\x12\x9a\x03\xc1\x8c\xf2\x62\x72\xa9\xc2\xf8\x99\x51\xf3\x92\x0c\xda\x75\x54\x4f\x04\xab\xba\xf6\xee\x39\x98\x97\xf9\xe9\x62\x28\xea\xe3\x12\xd4\x49\xe4\xe7\x31\xc9\xef\x4e\x86\xc5\x0f\x16\x28\x80\xbb\xe7\xbe\x56\x29\xc0\xf5\x5c\x03\x3b\x9c\xf7\x10\xbb\x34\xa5\xdc\xd0\xba\xce\xd2\xc1\x70\xdb\x06\x5e\x99\x44\x47\xd6\x8e\xb4\xde\x19\x4f\x27\xbf\x7a\x50\xff\xab\x27\x5e\xa2\x43\xa3\x6d\x3b\x91\xb1\x7e\x84\x0d\xa8\x78\xa7\x7b\x9c\xee\x16\xfc\x35\x7a\x29\x3b\x90\xbc\xc8\x81\xe3\x85\x28\xc0\xe0\x78\xd8\xef\x55\x61\x7e\x8a\x74\x2c\x07\x7d\x2f\x70\xfd\xeb\xd4\xdf\xc5\x97\x8f\x31\xfc\x65\xbb\x6b\x14\x8e\xb5\x6b\xff\x8b\xf5\xb6\xf1\xb2\x57\xbe\x5f\x73\xfd\xb8\x8f\xa3\x32\x01\xeb\xd5\xc2\x2e\x7e\x94\xaa\x47\x38\x44\x18\xce\xe7\xf3\x63\x78\x3e\x9f\xbf\x24\x11\x17\x62\xfe\x0d\x00\x00\xff\xff\x98\xb8\x02\x49\xe9\x0a\x00\x00")

func sqlite3TmplBytes() ([]byte, error) {
	return bindataRead(
		_sqlite3Tmpl,
		"sqlite3.tmpl",
	)
}

func sqlite3Tmpl() (*asset, error) {
	bytes, err := sqlite3TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sqlite3.tmpl", size: 2793, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"golang.funcs.tmpl": golangFuncsTmpl,
	"golang.header.tmpl": golangHeaderTmpl,
	"postgres.tmpl": postgresTmpl,
	"sqlite3.tmpl": sqlite3Tmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"golang.funcs.tmpl": &bintree{golangFuncsTmpl, map[string]*bintree{}},
	"golang.header.tmpl": &bintree{golangHeaderTmpl, map[string]*bintree{}},
	"postgres.tmpl": &bintree{postgresTmpl, map[string]*bintree{}},
	"sqlite3.tmpl": &bintree{sqlite3Tmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

