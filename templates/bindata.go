// Code generated by go-bindata.
// sources:
// golang.tmpl
// postgres.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _golangTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x58\x6d\x6f\xe3\xb8\x11\xfe\x6c\xfd\x8a\xa9\x90\x5b\xc8\x81\x43\xef\x01\x45\x3f\x04\x48\x81\x78\x9d\xa6\x05\x7c\x4e\x2e\x4e\x70\x28\x16\x8b\x0d\x2d\x8d\x15\x35\x14\xa5\xa5\xa8\x6c\x5c\xad\xfe\x7b\x31\xa4\x5e\x1d\xdb\xf1\x15\xd9\xdb\x36\x1f\x12\x89\x7c\x38\xaf\xcf\x0c\x47\x29\x8a\xf1\x31\x5c\x5e\xcd\xce\xe7\x97\xf0\xb7\xbb\xf9\x87\xdb\x7f\x5c\xcd\xe1\xf6\xe2\x97\xeb\xd9\xf9\xed\xc5\x02\x8e\xc7\x65\xe9\x38\x45\x71\x02\x01\xae\x22\x89\xe0\xea\x75\x8a\xc9\xca\x85\xb2\x34\xcb\xd1\x0a\xf0\x0b\xb0\xdb\x75\x4a\x7b\xf8\xac\x5d\x38\x29\x4b\x68\x7e\x32\xad\x22\x19\x1a\x28\x8a\x0c\xfb\xf8\x48\x76\xe1\x91\xd4\xbb\x71\x7f\xf9\x73\x83\x34\x6f\x3b\x90\x19\xaa\x88\x8b\x1a\xba\x5b\xa2\xc5\xd5\x42\xf7\x49\x5c\x8a\x64\xd9\x1a\xf9\xf1\xd3\x72\xad\xb1\x85\xf6\x7c\xed\xff\xdc\xcd\xff\x7e\x3e\x9f\xce\x2e\xa6\x70\xfb\xcf\xeb\x0b\x28\x0a\x23\xb0\x0a\x1b\xca\x80\xce\xf6\x9e\x7b\x61\x5e\xe5\xd2\x97\x3c\x46\xae\xc2\xcc\x6d\xa0\xd6\x32\x4f\xa0\x04\x76\xae\xc2\x6c\x08\x3f\xd3\xde\x64\xed\x90\x46\x42\x1c\x71\x15\xc2\xe9\x19\x44\x32\xc0\x67\x0b\x82\xf7\xe6\x7c\x8d\xb0\x32\x08\xc7\x6e\xf9\x52\x20\x9b\xf3\x18\xa1\xfb\x5c\xa3\xed\x09\x9f\xc7\x28\xa2\x7f\xa3\x3d\x42\x80\x8e\xb0\x3a\x08\x3b\xf1\xad\xd8\xb2\x7c\x4d\xd6\x96\x98\x14\x05\xd9\x1b\xea\xad\x3e\x13\x50\x71\x19\x62\xe5\xe7\x49\x4f\xc5\x2e\xd5\xcd\xca\x2e\x8d\x3b\x32\xc2\x55\x48\x09\xa9\x93\x91\xaa\x48\xea\x15\xb8\x3f\x65\x9f\x7f\xca\xdc\x5e\xfc\xec\xef\x6f\x90\xcb\x00\x55\xe6\x27\x0a\xe1\x00\xc1\x4d\x9a\x2b\x9f\x8e\xa2\x11\x1c\x21\xe5\x92\x01\x99\x1b\xad\xe0\x28\x2a\xcb\x11\x14\x05\xca\x80\x56\x40\x63\x9c\x0a\xae\xbb\xc6\x1d\xa1\x01\x1b\xc4\x5e\x95\x22\xca\xf4\xdb\x69\x84\xa2\x68\xb7\xea\x16\x71\x84\x07\x98\xa2\x29\x6e\x74\xc2\xb5\xf9\x83\x2c\x92\x61\x2e\xb8\x6a\x72\x05\xdf\xa0\x49\x5e\x3f\x6f\xfd\x8a\x89\x50\x04\xd4\x97\x06\x45\x01\xfd\x6c\x57\x8b\x2f\x2d\x24\x3f\x01\xe0\x3e\x58\x9e\xba\x45\xd1\x4d\x58\xc5\x12\xf7\x7e\x43\x5f\xad\x2d\xd3\x2a\xf7\xb5\x5b\x96\x0e\xc9\x82\xbe\xf4\xd6\x25\xa3\xc0\x62\xa1\x68\x23\xcd\x3e\x24\x22\x8f\x65\x06\x1b\x41\xad\x7c\x60\x96\x2f\x8d\x5e\x7a\xb1\x61\xec\x79\xfc\x80\x3c\x40\x65\x93\x98\x72\xff\x91\x87\xc6\x10\x76\x5d\x3d\x13\x3e\x8a\xd3\x44\x69\xf0\x4c\x95\xb9\xab\x58\xbb\xce\xc0\xcd\xd6\xd2\x77\x1d\x67\xe0\x86\x91\x7e\xc8\x97\xcc\x4f\xe2\xf1\xbf\xe2\x24\x52\x89\x1c\x67\x5f\xc4\xb3\xdb\xdf\x7a\xe0\xd9\x43\xe4\x27\x2a\x1d\x87\x89\xe0\x32\x3c\x11\x2a\x1f\x67\x51\x9c\x0a\x14\x2a\x77\x9d\xa1\xd3\xf1\x6c\xe1\x3f\x60\xcc\x6d\x39\x58\xff\x5a\xf7\xaa\xa0\x01\x6b\x79\x61\xc3\x37\x9d\xb4\x41\x1a\x1c\x93\x09\x6c\x3a\x71\x9c\x81\x50\xf9\xe7\x38\x07\xb2\x97\xdd\xfc\xf6\x4b\xae\xf1\xd9\x2c\xc2\x71\xa3\x9e\xcd\x6e\xee\x9c\xd2\x71\x9e\xb8\x82\xdf\x14\x4f\x2f\x94\x82\x33\xa0\xf6\xe9\xa1\x52\x80\x4a\x25\x6a\x68\xff\x40\xa1\x50\xe7\x4a\xd2\x5b\x69\x0e\xcc\x92\x30\x44\x65\xd1\xab\x44\xc5\x5c\x57\x17\xd6\x08\xa8\xf1\x02\x63\x2c\x92\x1a\xd5\x8a\xfb\x58\x94\x43\xc7\x21\x24\x5c\xa5\x28\xbd\x2c\xc9\x95\x8f\x0d\x9c\x2c\xcd\x88\x70\x91\xd4\x43\xf0\x8e\xa7\x93\x51\xad\xbb\x30\x26\x9b\x57\xaa\xad\xd6\xf2\x39\x7e\x9d\xdd\xdc\x79\xf5\xd1\x11\xe0\x53\xe4\xeb\x85\x8e\xf5\xd0\x19\x50\x9b\x56\x0a\xfe\x74\x06\x32\x12\x24\x63\x50\x19\x2f\x23\x31\xaa\x3d\x25\x17\x87\xce\xa0\x74\x9c\x41\xb0\x6c\x35\x50\xfc\x3e\x24\x52\xa2\xaf\x3d\x22\xc4\x34\xe2\x02\x7d\x0d\xdf\xa0\xe9\x5a\x5f\xa8\x52\x46\x60\xbd\xf8\x2f\xd4\x55\xbb\xef\xa6\x13\xc2\x4e\x27\xa7\x10\x2c\x47\xce\x80\x3c\x3d\xa5\x60\x8c\x9c\x41\x39\xa2\xc3\x94\x1b\x13\x35\x2f\x58\xc2\xf1\x74\x32\x84\x0f\x22\xc9\xd0\x1b\x42\x37\x3f\x05\x39\xc0\x28\x28\xd7\xb9\x0a\xd1\x1b\x36\x1a\x6a\xd5\xc1\x92\x4d\x27\xac\x3a\x3b\x6c\xa4\x36\x21\xf3\x1e\x71\x3d\x82\x27\x2e\x72\x93\x83\x26\x67\x24\xda\xac\x32\x8f\x88\xc5\x4c\x78\x6b\x39\x2f\x8d\x4b\x15\xa6\x5c\xa1\x97\xe9\xb8\xe6\xc2\x10\xbc\x24\xd7\x60\x69\x49\xc7\x6d\xa0\x37\x2d\xff\x1c\xe7\xec\x66\x96\xf8\x8f\x64\x7c\x80\x2b\x54\xd0\xd9\xb8\x93\xa2\xda\x42\xa9\xd5\x7a\x04\xc9\x23\xa5\xaa\x72\xfa\x12\xb5\xd1\x68\x13\x91\x3c\x76\x13\x90\xe4\xda\x06\x72\x50\x3a\xbd\xa4\x6c\x0d\xae\x48\xc2\xae\xed\x96\xc7\x8c\xb1\x17\x31\x19\x8f\xe1\xf6\x6a\x7a\x75\x0a\x0a\xa9\xeb\x41\x2a\xb8\x8f\x0f\x89\xa0\x0e\x68\xac\xa8\x6a\xa3\xc3\x08\xbb\x62\xc4\x5b\xb9\x86\x0b\x55\x53\xda\xda\x93\x33\x24\xde\x99\x61\x71\x3c\x86\x85\x79\xdb\x30\xf8\x12\x35\x9d\xe8\x75\xfd\xce\x5d\xda\xe9\xfd\x27\xfd\x66\xd2\x9f\x90\x58\x59\x7a\xd5\x24\xd1\xbb\xa3\xec\x35\x67\xe6\x83\xb2\x1c\x56\x7d\x50\x61\x96\x0b\x0d\xc7\xbd\x4b\xab\xd3\xb4\x8d\x7e\xd2\xb7\x91\x69\x73\xd8\x4f\x64\x46\xe1\x8d\xf5\xd9\x3d\x15\xd7\xe2\xd7\x19\x94\xe5\xbd\xdd\xac\xe8\x13\x34\xb5\x18\x2c\x59\x97\x52\x43\x83\xda\x2c\x36\x5a\xdb\x5d\x6f\xb4\x6b\xa7\x24\x62\x4b\x95\xdf\xd1\xa6\xa3\xd5\x08\x51\x7b\xea\x74\x1d\x3d\x83\x77\xfb\x5d\x2d\xcb\xc2\x6a\x40\xd3\x3d\x6b\x2f\xd8\xaf\x39\xaa\xf5\x4d\xf2\xf5\xf9\x20\x9d\x6c\x61\x7a\xf8\xc2\xe7\xd2\xb3\x9a\x77\xbb\xdb\x59\x3f\x33\x1d\x8b\x5d\x28\x35\x4f\x6e\x92\xaf\x59\x07\x61\x7d\xe8\x53\xbe\x5e\x6f\x67\xce\x03\x22\x57\x41\xac\x55\x75\xe9\xbc\x42\xdb\x13\x2e\x44\x9f\xba\xc0\x85\xd8\x4e\xdf\x54\xe4\x8a\x6f\x8e\x9d\xdf\x95\xbc\x1f\x3f\xfd\x6e\xfa\xd2\xe9\xbd\x14\x6e\x00\xff\x63\x34\xde\x60\xa5\x4d\x86\xf7\xae\xce\xe6\x41\x82\xf6\x11\xf1\x7b\x11\x28\xe5\x21\x06\x2f\x29\x04\x4f\x11\x87\x94\x87\xf4\x61\xfc\x7d\xd8\x74\x4d\x8a\x27\xeb\xee\x57\xcf\xb5\xd1\x77\x25\xab\xc1\xf6\x75\xbe\x99\xf9\xbf\x7a\x6e\x3e\x01\x7c\x9d\x3c\xa2\x6c\xa7\x9e\x28\x8e\x74\x35\xf2\xfc\x7e\x72\x5a\x61\x74\xb7\xd6\xf2\x7e\x2c\x5d\x5d\xf7\xed\x28\x6b\x22\x53\x7d\x8b\xbb\xe7\xb3\x99\x5b\x9b\x60\x43\xf6\x57\x78\xdf\xf0\xaf\x81\x9e\xc1\x2a\xd6\x6c\x61\x66\x34\xcf\xac\xd6\x26\xbc\x51\x15\xec\x49\xe9\xa8\x31\xe3\xf0\x52\xd9\x11\xaf\xc6\x53\x6c\xae\x01\xea\xf1\xd6\xf1\x56\x52\x9b\xfd\x9e\xdf\xf6\xc4\x47\x83\x3e\xf9\xf9\x13\xdb\xc3\xe1\x9e\xc2\x8d\x02\x6d\xa4\xbf\x5a\xab\x01\x0a\xd4\x58\x57\xe9\xd4\xbc\x6d\x94\xa5\x5d\xfc\x23\xc7\x14\x6b\x54\x00\xcb\x24\x11\x3f\x60\x08\x59\x71\x91\xe1\x5b\x8f\x21\x8d\x39\x0d\x85\x2f\x9e\xd1\x3f\x4c\xcc\x01\x94\xdc\x6d\xb3\xf9\xc3\x57\x2b\xf4\x75\x27\x28\xd6\x28\x46\x13\xc7\x79\xb5\xe7\xbd\x85\xa2\x0a\x55\xeb\xa3\x52\x3f\x90\x83\xdd\x81\xc3\x52\x6e\xcb\xc0\xd1\x72\xf1\x0f\x9c\x39\x6a\x3a\x9a\x7f\x94\xfe\xc0\x36\xfd\xfe\xff\x8c\x93\xdb\xed\x7d\x63\x3e\xee\x51\xb2\xc1\xc5\xad\x3c\xec\x11\x11\x9f\xd1\x77\x37\xff\x5b\xf9\x9f\x00\x00\x00\xff\xff\x99\xf6\x77\x4a\x24\x18\x00\x00")

func golangTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangTmpl,
		"golang.tmpl",
	)
}

func golangTmpl() (*asset, error) {
	bytes, err := golangTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.tmpl", size: 6180, mode: os.FileMode(420), modTime: time.Unix(1475003948, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x54\x4d\x8f\xda\x30\x14\x3c\x6f\x7e\xc5\x68\xc5\x09\x95\xec\xbd\xd5\x16\xd1\xc5\xdb\xb2\x0a\x84\x26\x96\x56\x3d\xa6\xc9\x4b\x70\x15\x1c\x94\xb8\xda\x83\xe5\xff\x5e\xc5\xf9\x82\x25\xa1\xea\xad\x9c\xb0\x9f\x67\xde\xcc\xbc\x07\x5a\x3f\xcc\xb1\xf7\x43\xfe\x35\x60\xe1\x77\x0f\x21\x5f\x71\xb6\x65\x3b\x0e\xce\xb6\x7b\x6f\xc5\x59\x08\xcc\x1f\x8c\x71\x1c\xad\x17\x48\x28\x15\x92\x70\x1f\xcb\xe8\x48\xf7\x58\x18\x03\xad\xf1\x5b\x26\x54\x56\x71\x51\x12\xdc\x5d\x74\x24\xd8\xeb\x05\x48\x26\xf5\x93\x0b\xa4\xea\x91\xef\x80\x3c\xfa\x99\x53\x07\x9f\x42\x27\xc5\x80\x77\xb4\x86\xa2\xe3\x29\x8f\xd4\xc0\xeb\x1a\xe3\x5e\xdc\xc7\xfd\xbd\x73\x4e\x7a\xc1\x9a\x53\xaa\x7e\x15\x42\x36\xb4\x1e\x7b\xe6\x78\xf1\x37\x3b\x8c\x36\x08\x44\x76\x50\xb5\x43\x7f\xe2\x81\x47\xa9\x9a\x52\xd1\xd4\xf0\x88\xd1\x6a\x47\x3d\xad\x34\x2e\x64\x22\x94\x28\xe4\x48\x02\x7d\x36\x5d\x17\xad\x5d\xff\x44\x65\xa4\x8a\xd2\x9e\x44\xda\xb6\xb0\xd9\x8f\x01\xfb\x2a\xe5\x15\x19\xb3\xd4\x9a\x64\x72\x4b\xcf\xdb\x81\xca\x76\x1a\xaf\xdf\x58\xc0\xa0\x75\x19\xc9\x8c\x30\x13\x1f\x30\xab\xd5\xe2\xe3\x23\xdc\xa7\x4e\x76\x65\x9f\xa2\xfd\x58\x49\x33\x61\x0c\x56\xbb\x35\xda\x66\x5a\x9f\x05\x33\xd8\x6d\xc8\x16\xef\xc4\xd4\xdf\x6b\x5b\xfb\x28\x13\x32\xf3\x65\x4f\xdf\xb8\x1d\xfa\xde\xe8\xd1\x7a\xef\x28\x8c\xc1\x67\x2c\xe1\x07\x6b\x16\xe0\xcb\x0f\xfc\xe5\xad\xb7\xd9\x6e\x38\x96\x57\xaa\x46\xe3\x3a\x45\x19\x9d\xcd\xce\x15\x29\x64\xa1\xe0\xbe\xd6\x31\xc2\x98\x5b\x19\xd6\xaa\xff\x31\x2e\x3b\xc9\xdb\x03\xac\x28\xa7\x58\x35\x8a\x42\xe6\xb1\x27\x3e\xbe\xd4\x30\xc6\x9d\xe3\x39\xf0\xb7\x93\x75\xe7\xae\x26\x6e\xa4\xdb\x15\x7c\x29\x84\xac\x6c\xe1\xee\x5c\xe5\xf0\x6b\x73\x3b\x50\x27\xcd\x1e\xde\x84\x3a\xb4\x91\x5c\x61\xdb\x7d\xbb\x06\x7e\x9a\xb6\x98\x50\x4e\xaa\x5d\xd2\x35\xf3\x18\x67\x9d\x8f\xb1\x7f\x8f\xff\xc8\xc5\x9f\x00\x00\x00\xff\xff\xe5\xd2\xbd\xf7\x9c\x05\x00\x00")

func postgresTmplBytes() ([]byte, error) {
	return bindataRead(
		_postgresTmpl,
		"postgres.tmpl",
	)
}

func postgresTmpl() (*asset, error) {
	bytes, err := postgresTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.tmpl", size: 1436, mode: os.FileMode(420), modTime: time.Unix(1475003849, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"golang.tmpl": golangTmpl,
	"postgres.tmpl": postgresTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"golang.tmpl": &bintree{golangTmpl, map[string]*bintree{}},
	"postgres.tmpl": &bintree{postgresTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

