// Code generated by go-bindata.
// sources:
// golang.create.tmpl
// golang.delete-all.tmpl
// golang.delete-world.tmpl
// golang.delete.tmpl
// golang.dialect-postgres.tmpl
// golang.dialect-sqlite3.tmpl
// golang.footer.tmpl
// golang.get-all.tmpl
// golang.get-count.tmpl
// golang.get-first.tmpl
// golang.get-has.tmpl
// golang.get-last.tmpl
// golang.get-limitoffset.tmpl
// golang.get-one-all.tmpl
// golang.get-one.tmpl
// golang.get-paged.tmpl
// golang.get-scalar-all.tmpl
// golang.get-scalar.tmpl
// golang.header.tmpl
// golang.misc.tmpl
// golang.update.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _golangCreateTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x92\x51\x6b\xdb\x30\x14\x85\x9f\xad\x5f\x71\x17\x18\xd8\x90\xea\x07\x14\xf2\x30\x4a\x07\x85\x12\x68\xd2\x3d\x1b\xd5\xba\x32\x5a\x1c\xc9\xbb\xba\xa9\x13\x84\xfe\xfb\x90\xbc\x74\x2e\x6c\x7b\x58\x1f\x0c\xc6\x96\xcf\x77\xce\xf1\x89\xf1\x06\x34\x1a\xeb\x10\x56\xc1\xf6\x4e\xf1\x89\x70\x05\x37\x29\x89\x3b\x42\xc5\x18\x23\x58\x03\x72\xa7\x26\x48\x69\xa7\xa6\xfc\x01\x3a\x9d\x4f\xc4\x08\x72\x7f\x32\xc6\x9e\x21\xa5\x3a\x46\xe8\xf8\x3c\x2a\x52\x47\x90\x5f\xa8\x0f\x90\x52\x03\xb5\xa8\x62\x84\x5f\x4f\x77\xc8\x27\x72\x90\xd2\x1a\x90\x28\x5f\x9e\x1a\xb1\x50\x14\x62\xe9\xc7\xba\x57\x7f\xf8\x88\x19\x45\xfd\x6f\x2b\x22\xc6\x3f\x63\x5e\xbc\xbe\x14\x48\xcc\x5e\x6f\x0a\x61\x8b\xa8\xc3\xd6\x67\x8c\xa8\xda\xd6\xf9\x09\x6e\x37\xb0\xf5\x53\xdd\xc8\x6f\xcf\x77\x75\x53\x62\x5d\xe5\xf2\xbd\x75\x96\x1d\x4e\x20\xbf\x5a\x1c\x74\x26\x0a\x51\x75\xde\x05\x86\xb6\x0d\x7c\xe4\x4d\xee\x81\xac\x63\x03\xab\xcf\x3f\x56\x20\xf7\x4f\x8f\x45\xde\xbf\x7c\x97\x83\xef\xf7\x7c\xe4\x7a\x3e\xba\x86\x18\xa1\x98\x7f\x13\x6b\xc4\x4c\x31\x39\xe5\x38\x7a\xe2\x30\xb7\x69\x5d\x0f\x0b\x0b\x8b\x92\x45\x95\x4b\xde\x40\xd6\xd7\x64\x5f\x91\xe4\xd3\x09\xe9\xb2\xf3\xd3\x3f\x38\x72\xdf\x29\x97\xfb\x53\x5a\x93\x37\x50\x9b\x41\x31\xa3\xbb\x0a\x37\xc5\x4c\x65\x4d\xf9\x85\x9f\x36\xe0\xec\x00\x51\x54\x15\xcd\x5c\x67\x87\x75\x41\x1e\xd5\x01\xef\x89\x6a\x24\x6a\x44\x95\xc4\xf5\xc0\x15\xb9\x18\x83\xb3\xc3\xdc\xe7\x10\x70\x2e\xb4\x6d\x09\xc3\xbc\x92\xdb\x77\x09\xee\xcf\xd8\xfd\xc5\xfd\xff\xfa\x6a\xdb\xf1\xf0\x86\x2a\x60\xf9\xa8\x02\x3f\xb8\x80\xc4\x0f\xba\xfe\x50\xda\xfc\xae\x47\xce\x82\x79\xa1\x73\x68\xf9\x7c\x19\x31\xcf\xb4\xe3\xf3\x1a\x32\xff\xfd\x9e\xd2\x72\xab\x3f\x03\x00\x00\xff\xff\xf3\xda\xe3\xbc\xa2\x03\x00\x00")

func golangCreateTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangCreateTmpl,
		"golang.create.tmpl",
	)
}

func golangCreateTmpl() (*asset, error) {
	bytes, err := golangCreateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.create.tmpl", size: 930, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeleteAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x90\xb1\x6a\xc3\x30\x10\x86\x67\xe9\x29\xae\x86\x82\x03\x89\xe9\x50\x3a\x14\x3c\x04\x9a\xad\x4b\x9b\x07\x30\x8e\x75\x32\x6a\x64\x29\x3d\x9d\xd3\x94\x43\xef\x5e\xec\x04\x9a\xa1\x10\xe8\xa0\x49\xf7\x7f\xdf\xdd\x2f\xb2\x02\x83\xd6\x05\x84\x22\xb9\x3e\xb4\x3c\x12\x16\xb0\xca\x59\xbf\xa0\x47\x46\x11\xa8\xb6\xa3\xb5\xee\x04\x39\x97\x22\xd0\xf1\xe9\xd0\x52\x3b\x40\xb5\xa6\x3e\x41\xce\x0b\x28\xb5\xea\xe2\x18\x18\x5c\xe0\xa7\xc7\x25\x20\xd1\xf4\x22\x2d\xf4\xc4\xc7\x60\x66\xa0\xbe\x96\xb9\x70\x8c\xfb\x9b\xa6\x96\xfa\x5f\x8f\x16\xf9\x9b\xb5\x8b\xe6\x7b\x26\xc9\xb4\x48\x48\x0c\x4d\x93\x78\xe0\x5a\x04\x0e\xe4\x02\x5b\x28\xee\x3f\x0b\xa8\xb6\x6f\xaf\x90\xb3\x56\x71\xf7\x51\xf9\xd8\x6f\x79\xe0\xf2\x3c\xba\x04\x11\xb0\x0e\xbd\x39\xb6\x7e\xc4\x2b\xa9\x56\x4d\x43\x98\xce\x57\x3d\xd7\x30\x65\x0d\xb9\x23\x52\xb5\x39\x61\x77\x33\xaf\x9c\x9d\xa3\x77\x35\x04\xe7\x41\xb4\x52\x84\x3c\x52\x80\x87\xe5\x0c\x1b\xda\x3d\x6e\x88\x4a\x24\x5a\x68\x95\xf5\xa5\xcc\xb3\xb0\x86\xd9\x5e\xbd\xc7\xaf\xb4\xb6\x16\x3b\x46\x53\xfe\x0b\x7a\xf9\xbf\xb0\x83\xf3\x3a\x5f\x17\xfa\x13\x00\x00\xff\xff\xc4\x1e\xd2\xef\x09\x02\x00\x00")

func golangDeleteAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteAllTmpl,
		"golang.delete-all.tmpl",
	)
}

func golangDeleteAllTmpl() (*asset, error) {
	bytes, err := golangDeleteAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete-all.tmpl", size: 521, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeleteWorldTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x90\xc1\x6a\xeb\x30\x10\x45\xd7\xd2\x57\xcc\x33\x3c\xb0\x69\x22\xba\x28\xdd\x65\x11\x4a\x76\xdd\x34\xfd\x80\xe0\x58\xe3\xa0\x56\x1d\x35\xa3\x71\xea\x22\xf4\xef\xc5\x72\x1d\xb2\xee\x42\x08\x84\xe6\x9c\xb9\x37\xa5\x35\x58\xec\x1d\x21\x54\xd1\x9d\xa8\x95\x81\xb1\x82\x75\xce\xda\xa2\x47\xc1\xad\xf7\x75\x27\x23\x74\x81\x04\x47\x31\x4f\xf3\xdd\x40\xdd\x85\x81\x04\x1c\xc9\xe3\xc3\x0a\x90\x79\x3a\x81\x1b\x3d\x21\x91\x6c\x61\xe8\x5b\xfe\x31\xd8\xef\x82\x4e\x5a\x5d\x5a\x86\xc3\x81\x31\x42\x3c\x7b\xb3\xc7\x38\x78\x59\x5e\x6f\xc0\x33\x80\x5b\x3a\x21\x98\xd7\x97\xe7\x08\x39\x6b\x55\x06\x67\xe7\x06\xc2\xf1\xcd\x58\x76\x17\x64\xb3\x1b\xb1\xab\x53\x82\x4f\x76\x24\x3d\x54\xff\xcf\x15\x18\xc8\xb9\xd1\xca\xf5\xe5\xfb\xbf\x0d\x90\xf3\x90\xb4\x52\x8c\x32\x30\xc1\xfd\xaa\x10\x3e\xda\x77\xdc\x31\xd7\xc8\xdc\x68\x95\xf5\x24\x29\x7b\x2c\x9a\xe2\x34\xfb\xf0\x15\xb7\x7d\x8f\x9d\xa0\xad\xff\x80\x55\x73\xb6\xbb\xcd\x12\xf3\xda\xd6\x54\xd6\x32\xfc\x2b\x26\xe7\x75\xd6\x29\x5d\xdb\xfc\x09\x00\x00\xff\xff\x2e\xc5\xd2\x56\xad\x01\x00\x00")

func golangDeleteWorldTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteWorldTmpl,
		"golang.delete-world.tmpl",
	)
}

func golangDeleteWorldTmpl() (*asset, error) {
	bytes, err := golangDeleteWorldTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete-world.tmpl", size: 429, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeleteTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x90\xc1\x4a\x33\x31\x14\x46\xd7\xc9\x53\xdc\x7f\xe0\x87\x29\x4c\x07\xd7\x42\x85\x82\xdd\xb9\xd1\x3e\xc0\x90\x4e\x6e\x86\xd8\x4c\x52\x6f\x32\xb5\x72\xc9\xbb\xcb\xa4\xa5\xea\x42\x0a\x2e\xb2\xfb\xce\x39\x49\x98\x97\xa0\xd1\x58\x8f\x50\x45\x3b\x78\x95\x26\xc2\x0a\x96\x39\xcb\x47\x74\x98\x90\x19\xda\xed\x64\x8c\x3d\x41\xce\x35\x33\xf4\xe9\x74\x50\xa4\x46\x68\xd7\x34\x44\xc8\x79\x01\xb5\x14\xba\x8c\x35\xec\x42\x70\x0d\x20\xd1\x7c\x02\x2d\xe4\x1c\x40\xaf\x8b\x51\x7e\xaf\x59\x7f\x0c\xfb\x9b\x29\x45\xc3\x8f\xd0\xaf\xba\x5d\xd0\x1f\x45\xc6\x52\xf4\xc1\xc7\x04\x5d\x17\xd3\x98\x56\xcc\x70\x20\xeb\x93\x81\xea\xff\x5b\x05\xed\xf6\xf9\x09\x72\x96\x22\xec\x5e\x5b\x17\x86\x6d\x1a\x53\x7d\x9e\x36\xc0\x0c\xc6\xa2\xd3\x47\xe5\x26\xfc\xea\x4a\x29\xba\x8e\x30\x9e\x1f\x76\xbf\x82\x99\xd5\x64\x8f\x48\xed\xe6\x84\xfd\x4d\x5e\x58\x53\xd0\x7f\x2b\xf0\xd6\x01\x4b\x21\x08\xd3\x44\x1e\x8c\x72\x11\x9b\x22\x1c\xd5\x1e\x37\x44\x35\x12\x2d\xa4\xc8\x25\xda\x87\xc9\xa7\x6b\xb6\x5c\xa2\x7d\x09\xef\x71\x6d\x0c\xf6\x09\x75\xfd\x67\xf7\x65\x73\x49\xc0\x03\xdc\x35\x33\x2f\xb3\x64\xbe\xfe\xf0\x67\x00\x00\x00\xff\xff\xeb\x7c\x34\xce\x1e\x02\x00\x00")

func golangDeleteTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteTmpl,
		"golang.delete.tmpl",
	)
}

func golangDeleteTmpl() (*asset, error) {
	bytes, err := golangDeleteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete.tmpl", size: 542, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDialectPostgresTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x90\x4b\x6e\x84\x30\x10\x44\xd7\xf6\x29\x4a\x5e\x41\x04\x1e\x29\xd9\x25\x62\x85\x72\x81\xdc\x80\x4f\x33\x69\x05\x6c\xa6\x6d\xb2\xb1\x7c\xf7\x08\xe7\x2f\x79\x55\x55\xef\x59\xea\x94\x5a\xcc\xb4\xb0\x23\x18\xde\x76\x2f\xd1\x20\x67\xad\xcc\x95\xe3\xeb\x31\xda\xc9\x6f\x97\x95\xc7\xcb\x7e\x33\x3a\x25\x90\x9b\xd1\xe6\xac\xf5\x3f\x2e\xb4\x93\x77\x21\xca\xc0\x2e\xb6\x24\xe2\xa5\x48\x96\xc3\x4d\xa8\x78\xdb\x57\xa4\x04\xfb\x42\x13\xf1\x3b\x09\x72\xae\xc1\xa1\xff\x41\x9e\x4f\xa2\x22\x11\x14\xb6\x46\xa5\xd5\xaf\x10\x21\x0a\xbb\x6b\x03\xff\x86\xd1\xfb\xb5\x46\xd2\x8a\x17\x50\x49\x1e\xbb\x13\xb2\xd5\xdd\x7e\xb3\xc5\x53\x3f\x9d\x71\xd2\x4a\x95\x91\xed\xfd\x4c\xb6\x5f\x87\x10\xaa\x1a\x5d\x07\x73\xff\x60\x3e\x6b\x25\x14\x0f\x71\x65\xf3\xfd\x59\x83\x28\x07\x9d\x6d\xd6\xe7\xfb\x9a\x18\xd3\x60\x19\xd6\x40\x3a\xff\xbd\xc2\x47\x00\x00\x00\xff\xff\x28\x4c\xe9\xcf\x3d\x01\x00\x00")

func golangDialectPostgresTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDialectPostgresTmpl,
		"golang.dialect-postgres.tmpl",
	)
}

func golangDialectPostgresTmpl() (*asset, error) {
	bytes, err := golangDialectPostgresTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.dialect-postgres.tmpl", size: 317, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDialectSqlite3Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x91\x41\x4b\xc4\x30\x10\x85\xcf\xc9\xaf\x18\x73\x6a\x61\xdb\x45\xbc\xad\xf4\xb4\x78\x10\x3c\xa9\x37\xf1\xd0\x6d\xa7\x75\xb0\x49\xd6\x49\x2a\x42\xc8\x7f\x97\xa4\xeb\xb6\x42\x4f\xf3\xde\xf7\xf5\x41\x42\xa8\xa0\xc7\x81\x0c\x82\x22\x7d\xb6\xec\x15\xc4\x28\x85\x1a\xc9\x7f\xcc\xa7\xba\xb3\x7a\xaf\x5b\xef\xcd\x7e\xb4\x95\xfb\x9a\xc8\xe3\x9d\x92\x21\x00\x9a\x1e\xaa\x18\xa5\xfc\x67\x70\x55\x67\x8d\xf3\xdc\x92\xf1\x15\x32\x5b\xce\xba\x61\x36\x1d\x14\xa4\xcf\x13\x84\x00\xf5\x33\x76\x48\xdf\xc8\x10\x63\x09\xe4\x8e\x57\xe4\x21\x11\x05\x32\x43\x66\x4b\x28\xa4\x58\x85\xe0\x3c\x93\x19\x77\x60\x3f\xe1\x64\xed\x54\x42\x90\x82\x06\xc0\x7c\x39\x34\x09\xaa\x8b\xcb\xc8\x3a\xbb\xca\xfb\x14\x05\x29\x44\x2e\xd6\x47\xdb\x23\x34\x0d\x6c\x4a\xeb\xdf\x97\x9e\xd0\x6e\xfc\x93\x2d\x7b\xca\x7c\xee\xec\x64\x4d\x0a\x96\x15\xae\x7e\x6a\x9d\x7f\x34\x3d\xfe\x14\xda\x8d\x3b\x50\x07\xb5\x14\x69\x80\xa5\x7b\xd3\x40\x75\x7b\x91\x0a\x46\x3f\xb3\xb9\xc2\xaf\x4c\xfa\xe5\xdc\x76\x98\xe0\xb7\xdc\x3f\xbc\x97\x3b\xf0\x3c\x63\x06\xa2\xdc\x50\x4a\xad\x49\x94\xe9\xdb\x04\x43\x3b\x39\x94\x71\xfb\x28\xbf\x01\x00\x00\xff\xff\xf2\xcb\x38\xa5\xd6\x01\x00\x00")

func golangDialectSqlite3TmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDialectSqlite3Tmpl,
		"golang.dialect-sqlite3.tmpl",
	)
}

func golangDialectSqlite3Tmpl() (*asset, error) {
	bytes, err := golangDialectSqlite3TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.dialect-sqlite3.tmpl", size: 470, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x93\xcf\x8e\xd3\x30\x10\xc6\xcf\x9e\xa7\x18\x6e\x49\xb5\xf8\x84\xb8\xa0\x1e\xd8\x5d\x0e\x1c\x10\x52\x9b\x17\x70\x93\x69\xd7\xaa\xeb\x14\x77\xba\x0c\xb2\xf2\xee\xc8\xf9\x5f\x9a\x05\x21\xb5\x8a\x3d\xf2\x7c\xdf\xcf\xfe\xec\x18\xd1\xee\xd1\xd7\x8c\x7a\x7b\xb4\xe7\x8d\x60\xd3\x00\xff\x3a\x13\x6e\x04\x2f\x1c\xae\x25\x63\x04\x55\xed\x70\xf5\xfc\x08\x8a\x05\x57\x85\x40\x03\xb0\xbf\xfa\x12\xb3\x20\xb8\xda\x48\x8e\x07\xe2\x42\xb2\x92\x05\xcb\xda\x33\x09\xeb\xa7\xee\x9b\x63\xd6\xf5\x3c\x20\x85\x90\xfe\x75\xc8\x93\xa2\xdd\x63\x10\xcd\x82\xeb\x35\x7a\xeb\x52\x69\xac\x75\x6b\xd7\x69\x52\xed\xf4\xf7\x33\xf9\x24\x9d\x7f\x6a\xcb\xef\xa6\xf5\x2a\x10\x5f\x83\x4f\xf3\xb6\x05\x94\x6a\x20\xfd\xfa\x7a\x2f\xe6\xad\xbb\x27\x7e\xaa\x4f\x27\xcb\x59\x8e\xd9\x1b\x5c\x33\x9f\x91\x86\x45\x0f\x7d\xa0\x54\xcf\xdf\xea\xcf\x5c\x13\xc8\x9d\xdd\xa6\x76\x6e\x67\xca\xe3\xff\x1b\x4e\x9d\xff\xb2\x8c\x11\x83\xf1\x07\x42\xfd\x8d\xf8\xa5\xae\x2e\x29\xcb\x5b\x8c\x18\x51\x6f\xed\xc1\x1b\xbe\x06\xc2\xa6\x49\x6e\xaf\x26\x60\x9f\x6b\x82\xb9\x39\xfe\x31\xd7\xfb\xc3\xef\xad\xe7\x18\x2c\x3a\x19\x7c\xf5\xaf\xf5\x31\xa9\x77\x4c\xe4\xab\x34\x9e\x46\xdd\xfd\x1a\x18\xad\x67\x0a\x7b\x53\x12\x46\x88\xf1\xfd\xc2\x16\xd4\x9f\xd4\x33\xad\x41\xad\x90\x25\x3d\xd5\x17\x01\xd4\x98\x77\x7b\xf2\xa0\x66\x81\x74\x95\x41\x89\x97\x95\x46\x03\x00\x55\x91\x23\xa6\xcf\xce\xbd\x71\xe3\xad\xe7\x8f\x1f\x1e\xfa\x8c\x41\x9d\xcc\x91\xbe\x84\x30\xcf\xfd\xd6\xf2\xf9\x71\xd1\x72\x5b\xbe\xd0\xc9\x64\x79\x7a\x87\xd6\x1f\xa6\xdd\x0c\x7d\xd5\x6e\xb1\x6f\x94\x03\x50\x3f\x83\x39\x17\xd2\xbe\xc1\xcb\x0f\xa7\x0b\xc9\xa7\x0d\xfe\x95\xec\x77\x00\x00\x00\xff\xff\x2b\xbb\x02\x51\x19\x04\x00\x00")

func golangFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangFooterTmpl,
		"golang.footer.tmpl",
	)
}

func golangFooterTmpl() (*asset, error) {
	bytes, err := golangFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.footer.tmpl", size: 1049, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\xc1\x6a\xdc\x30\x10\x86\xcf\xd2\x53\x4c\x0d\x05\x19\x36\x7e\x80\x14\x1f\x42\xe9\xad\x14\xd2\x7d\x00\xa3\x58\x23\xa3\x46\x96\xdc\xb1\xbc\xbb\x61\xd0\xbb\x17\x59\xc9\x36\x87\x76\x4b\x0f\x3e\xd8\x8c\xbe\xef\xff\xc7\x62\xbe\x03\x83\xd6\x05\x84\x66\x75\x53\xd0\x69\x23\x6c\xe0\x2e\x67\xf9\xe0\x3d\x33\x74\xc7\xcd\x5a\x77\x81\x9c\x15\x33\x8c\xe9\xb2\x68\xd2\x33\x74\x0f\x34\xad\x90\x73\x0b\x4a\x0a\x8a\xe7\x15\x98\x61\xf5\x6e\xc4\x68\xa1\xfb\x1e\xcf\x90\xf3\x01\x90\xa8\x3c\x91\x5a\x59\x44\x18\xcc\x4e\x96\xef\xad\x2e\x9c\xe2\xf3\x6d\xa5\xa6\xe9\xb7\xf0\xef\xa4\xa7\x68\x5e\x1a\xc8\x99\xa5\x18\x63\x58\x13\x0c\xc3\x9a\xe6\xd4\x33\xc3\x42\x2e\x24\x0b\xcd\xc7\x9f\x0d\x74\xc7\xc7\xaf\x90\xb3\x14\xf1\xe9\x47\xe7\xe3\x74\x4c\x73\x52\x75\xf4\x50\x5a\x58\x87\xde\x9c\xb4\xdf\xf0\x9d\x54\x8a\x61\x28\x35\x6b\xa7\xfb\x1e\xca\x61\x43\xee\x84\xd4\x3d\x6e\x48\x2f\xb7\x08\x05\x20\x9c\xdd\x8f\x7e\xe8\x21\x38\x0f\x2c\x85\x20\x4c\x1b\x85\xf2\x7a\xd8\x71\xb3\x7e\xc6\x2f\x44\x0a\x89\x5a\x29\xb2\x14\x06\x2d\x12\x54\x71\xf7\xd9\xc7\x15\x55\x49\x62\xe3\xf5\xe3\x37\xbc\x24\xd5\xee\x34\x66\x70\xc1\xa5\x80\xe7\xb7\xfd\x4b\x21\x8a\xb1\x7f\x1b\x3e\x8e\x3a\x94\x8d\x6a\x63\x28\x5a\x50\xd6\xeb\x94\x30\xec\xe3\xed\xde\x52\xfc\x21\xe5\x3f\x62\x96\x9c\xf5\x02\xf4\xa0\x97\x05\x83\x51\x75\x4f\x45\x54\xfe\x5b\xcd\x52\x0b\xbd\xd2\xef\xaf\x91\x0a\xa7\xfd\xf4\xdf\x8b\x79\x1d\xa8\xa2\xe0\xbc\xcc\x92\xf9\x7a\x29\x7e\x05\x00\x00\xff\xff\x40\x27\xb7\x7f\xd4\x02\x00\x00")

func golangGetAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetAllTmpl,
		"golang.get-all.tmpl",
	)
}

func golangGetAllTmpl() (*asset, error) {
	bytes, err := golangGetAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-all.tmpl", size: 724, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetCountTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x90\xb1\x4e\xc3\x30\x10\x86\x67\xdf\x53\x1c\x91\x40\x89\x94\x46\x0c\x88\xad\x03\x42\x6c\x2c\x25\x0f\x50\xb9\xcd\x25\x32\x4d\xec\x72\x71\x42\xab\xd3\xbd\x3b\x72\x10\xd0\x05\x75\xf0\xe4\xff\xff\x3e\xfb\x17\x59\x61\x43\xad\xf3\x84\xd9\xe8\x3a\x6f\xe3\xc4\x94\xe1\x4a\x15\x9e\xc3\xe4\xa3\x08\x56\xf5\xd4\xb6\xee\x84\xaa\xb9\x08\xee\xe3\xe9\x68\xd9\x0e\x58\x3d\x71\x37\xa2\x6a\x81\x39\x98\x7d\xca\xa2\xf3\xf1\xf1\xa1\x44\x62\x4e\x27\x70\x01\x09\x4f\xbe\x59\x78\x70\xe9\x72\x7e\x0e\x87\x6b\x22\xcb\xdd\x9f\xe6\x7f\xd6\x2e\x34\xe7\x0c\x55\x25\xbd\xc3\x8f\x11\xb7\xdb\x31\x0e\x71\x2d\x82\x47\x76\x3e\xb6\x98\xdd\x7e\x64\x58\xd5\x9b\x57\x54\x05\x13\x76\xef\x55\x1f\xba\x3a\x0e\x31\xff\x8e\x96\x28\x82\xad\xa3\xbe\x99\x6d\x3f\xd1\x85\x14\x4c\xfa\xcd\x1a\x53\xa7\x61\x37\x13\x57\x9b\x89\xf8\xfc\x16\x3e\xaf\x75\xab\x7a\x6f\x7d\x7e\xb7\x4c\x53\x80\x71\xed\x32\xcc\xcd\x1a\xbd\xeb\x51\xc0\x18\xa6\x38\xb1\xc7\xfb\x72\xa1\x0f\xf6\x40\x2f\xcc\x39\x31\x17\x60\x14\xe0\xe7\x7e\x01\x94\xa9\x05\x0a\x22\xbf\x1b\x7c\x05\x00\x00\xff\xff\x5a\x7f\x81\x65\xbb\x01\x00\x00")

func golangGetCountTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetCountTmpl,
		"golang.get-count.tmpl",
	)
}

func golangGetCountTmpl() (*asset, error) {
	bytes, err := golangGetCountTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-count.tmpl", size: 443, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetFirstTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\xcf\x8a\xdb\x30\x10\x87\xcf\xd2\x53\x4c\x0c\x05\x1b\x12\x3f\x40\x8a\x0f\xa5\xb4\xa7\x52\x48\xfd\x00\x46\x89\x46\x46\x8d\x2d\xed\x8e\xe5\xfc\x41\xe8\xdd\x97\x71\xe2\x6c\x76\x61\x37\xb0\x07\x1f\x3c\xcc\x7c\xdf\xcf\x9e\x89\x71\x05\x1a\x8d\x75\x08\xd9\x60\x5b\xa7\xc2\x48\x98\xc1\x2a\x25\xf9\xdb\xd2\x10\x62\x84\xb2\x1e\x8d\xb1\x27\x48\x29\x8f\x11\x76\xe1\xf4\xa4\x48\xf5\x50\xfe\xa0\x76\x80\x94\x0a\xc8\xa5\x88\x11\xae\xd5\x7f\xfe\x08\x29\x2d\x01\x89\xf8\xf1\x54\x48\x76\xa0\xd3\x13\x54\xde\x0b\xad\x3b\xf8\xfd\x23\x9b\xa2\xf6\xd5\xf5\x31\x6b\xeb\xf5\x39\x83\x94\xa2\x14\x3b\xef\x86\x00\x4d\x33\x84\x3e\x54\x9c\x8c\xac\x0b\x06\xb2\x6f\xcf\x19\x94\xf5\xe6\x0f\xa4\x24\x85\xdf\xfe\x2f\x3b\xdf\xd6\xa1\x0f\xf9\xa5\x75\x09\x31\x82\xb1\xd8\xe9\x83\xea\x46\xbc\x93\x4a\xd1\x34\xe4\x8f\xc3\xe5\xab\xd6\x15\xf0\xb0\x26\x7b\x40\x2a\x37\x23\xd2\xf9\x33\x02\x03\x84\x35\xd3\xe8\xa2\x02\x67\x3b\x88\x52\x08\xc2\x30\x92\xe3\xd7\xe5\x84\xeb\xd5\x1e\x7f\x11\xe5\x48\x54\x48\x91\xa4\xd0\x68\x90\xe0\x22\x2e\x7f\x76\x7e\xc0\x9c\x93\x58\x03\x8b\x6b\xf1\x2f\x9e\x42\x5e\x4c\xb4\x2b\x7f\x5d\xcd\x03\x8c\x2a\xbe\xbf\x97\x3e\xb0\xb2\xf6\x4d\x8b\xb3\x1d\x67\x99\xf6\x6b\x9d\x0d\xf3\x7a\xa5\x60\xf0\x4d\x56\xef\x94\xe3\x6d\x29\xad\xc9\x1b\xc8\x4d\xa7\x42\x40\x37\x75\x17\xf0\xc5\x1f\x20\xe7\x0e\x06\xf3\x0d\xcc\x97\xc5\xa1\x92\x8c\xf1\x76\x07\x2f\x01\x00\x00\xff\xff\x0c\x48\x09\xa1\xc4\x02\x00\x00")

func golangGetFirstTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetFirstTmpl,
		"golang.get-first.tmpl",
	)
}

func golangGetFirstTmpl() (*asset, error) {
	bytes, err := golangGetFirstTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-first.tmpl", size: 708, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetHasTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x90\x31\x4e\xf3\x40\x10\x85\xeb\x9d\x53\xcc\x6f\xe9\x47\xb6\xe4\xf8\x06\x29\x28\x90\x28\x68\x82\x0f\x10\x6d\xe2\x59\x67\x89\xbd\x1b\x66\xd7\x21\xd1\x68\xee\x8e\x6c\x04\xa4\x01\x8a\xe9\xde\xfb\x3e\xcd\x13\x59\x61\x47\xce\x07\xc2\x22\xf9\x3e\xd8\x3c\x31\x15\xb8\x52\x85\x47\x9b\x44\xb0\x69\x27\xe7\xfc\x05\x55\x4b\x11\xdc\xe7\xcb\xc9\xb2\x1d\xb1\xb9\xe7\x3e\xa1\x6a\x85\x25\x98\x83\x4d\xb8\x8b\x71\xa8\x91\x98\xe7\x8b\x5c\xc1\x4c\xa6\xd0\x2d\x28\xb8\xd5\xf8\x70\x8e\xc7\xdf\x1d\x96\xfb\x6f\xc3\xcf\xa4\x5d\xec\xae\x05\xaa\x0a\x98\x7d\x0c\x29\xe3\x76\x9b\xf2\x98\xd7\x22\x78\x62\x1f\xb2\xc3\xe2\xff\x6b\x81\x4d\xbb\x79\x42\x55\x30\x71\xf7\xd2\x0c\xb1\x6f\xf3\x98\xcb\x8f\x68\x8d\x22\xe8\x3c\x0d\xdd\xd9\x0e\x13\xdd\x48\xc1\xcc\xbf\xac\x71\xee\x74\xec\xcf\xc4\xcd\x66\x22\xbe\x3e\xc7\xb7\xbf\xba\x4d\xbb\xb7\xa1\xbc\x3b\xd8\x54\x81\xf1\x6e\x19\xe5\xdf\x1a\x83\x1f\x50\xc0\x18\xa6\x3c\x71\x40\x67\x87\x44\xf5\xc2\x1f\xed\x91\x1e\x98\x4b\x62\xae\xc0\x28\x7c\x46\x0e\x36\xd5\x73\x0d\x14\x44\xbe\x26\x78\x0f\x00\x00\xff\xff\x08\xf6\x81\x71\xb3\x01\x00\x00")

func golangGetHasTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetHasTmpl,
		"golang.get-has.tmpl",
	)
}

func golangGetHasTmpl() (*asset, error) {
	bytes, err := golangGetHasTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-has.tmpl", size: 435, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetLastTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x90\xb1\x6e\xc2\x30\x10\x86\x67\xdf\x53\x5c\x23\x55\x4a\x24\xf0\x54\x75\x63\xaa\xba\xb1\x00\xdd\x91\x49\x2e\x91\x4b\x62\xa7\x97\xa3\x85\x9e\xfc\xee\x55\x12\x51\x85\xc1\xf2\xf2\xff\xf7\x7d\x77\xaa\x6b\xac\xa8\xf6\x81\x30\x1b\x7c\x13\x9c\x5c\x98\x32\x5c\xa7\x04\x0d\xc9\xd6\x0d\xa2\x8a\x76\x4f\x72\xe1\x60\x3f\x6e\x3d\x61\x4a\x79\x29\x57\x2c\x63\x10\xba\x8a\x7d\x9b\xff\x15\x98\xfe\x8c\x3e\xc8\xeb\x4b\x81\x39\x18\x55\xec\x1d\xbb\xee\xde\xc5\x94\x56\x48\xcc\xe3\x8b\x5c\xc0\xc8\xa5\x50\x4d\x20\x58\x4a\x9c\x62\x75\x9b\xf8\x0a\xa6\x8c\x61\x10\x3c\x1e\x07\xe9\x64\x33\x4e\x64\x1f\xa4\xc6\xec\xf9\x2b\x43\x7b\xd8\x6d\x31\x25\x30\xf1\xf4\x69\xdb\xd8\x1c\xa4\x93\x7c\x8e\xae\xb0\x3f\x17\x30\x39\xf8\xe0\x65\xa1\x00\x66\x54\xd8\xe0\xd8\xa9\xd8\x7f\x13\xdb\xdd\x85\xf8\xb6\x8f\x3f\xcb\xae\x3d\x94\x2e\xe4\xaa\xe8\xaa\x8a\x63\x8d\x79\xdd\x3a\x11\x0a\xf7\x49\x05\xa6\x54\x80\xf1\xf5\xb4\xd1\xd3\x06\x83\x6f\x51\xc1\x18\x9e\x41\xaa\xf8\x4b\x1c\x1f\x76\x1f\x91\x9d\x3b\xd3\x3b\x73\x4e\xcc\x05\x98\x04\x8b\xbc\xe3\xe6\x21\x1e\x7c\x0b\x09\x54\xff\x8f\xf4\x17\x00\x00\xff\xff\x91\x64\x56\x53\xa9\x01\x00\x00")

func golangGetLastTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetLastTmpl,
		"golang.get-last.tmpl",
	)
}

func golangGetLastTmpl() (*asset, error) {
	bytes, err := golangGetLastTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-last.tmpl", size: 425, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetLimitoffsetTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\xcf\x6a\xdc\x30\x10\xc6\xcf\xd2\x53\x4c\x0d\x05\x1b\x1c\x9f\x4a\x0f\x29\x3e\x94\xd2\x5b\x28\xa4\xfb\x00\x8b\x62\x8d\x16\x35\xb2\xb4\x1d\xc9\xbb\x1b\xd4\x79\xf7\x22\x2b\x6b\x42\x28\x84\xe6\x20\x90\xc4\xc7\xf7\xfd\xe6\x4f\xce\x37\xa0\xd1\x58\x8f\xd0\x44\x7b\xf0\x2a\x2d\x84\x0d\xdc\x30\xcb\x3b\x3b\xdb\x84\x3a\x67\x18\x76\x8b\x31\xf6\x02\xcc\x6d\xce\x30\xa5\xcb\x51\x91\x9a\x61\xf8\x4a\x87\xc8\xdc\x4b\xe1\x8a\x14\xac\x4f\x3d\x04\x63\x22\xae\xf7\xcf\x9f\x3a\x68\xa5\xa0\x70\x8e\x90\x33\x44\x67\x27\x0c\x06\x86\x9f\xe1\x0c\xcc\x3d\x20\x51\x39\x81\x3a\x59\x28\xd0\xeb\x35\x56\xca\x97\x4c\xd6\x9f\xc2\xe3\xdb\x40\x8a\x0e\x1b\x0e\xac\x34\x57\x92\x57\xe6\x2f\xbd\x1f\x82\x7e\x6a\x80\x39\x4b\x31\x05\x1f\x13\xec\xf7\x31\xcd\x69\xcc\x19\x8e\x64\x7d\x32\xd0\x7c\xfc\xdd\xc0\xb0\xbb\xbf\x03\x66\x29\xc2\xc3\xaf\xc1\x85\xc3\x2e\xcd\xa9\xad\xd2\xbe\x14\x66\x2c\x3a\x7d\x52\x6e\xc1\x8a\x00\x7f\x60\x0a\xf3\xac\x80\xf9\x15\x89\x14\xfb\x7d\x69\x47\xad\xfd\x76\x84\xe2\xa8\xc9\x9e\x90\x86\xfb\x05\xe9\xe9\x7d\xb6\xc2\x9a\xd5\xf0\xc3\x08\xde\x3a\xc8\x52\x08\xc2\xb4\x90\x2f\xcf\x7e\x0d\x99\xd5\x23\x7e\x27\x6a\x91\xa8\x93\x82\xa5\xd0\x68\x90\xa0\xe2\x0c\xdf\x5c\x88\xd8\x16\x3e\x13\xb6\xcf\x1f\x78\x49\x6d\xb7\xba\xe5\x0c\xd6\xdb\xe4\xf1\x7c\x9d\x9e\x14\xa2\x24\x8e\x57\xf1\x6e\x52\xbe\x8c\x42\x69\x4d\xc1\x40\x6b\x9c\x4a\x09\xfd\x2a\xef\x80\xb9\x93\xe2\x1f\x94\x6f\x60\x16\xce\xba\x3e\x23\xa8\xe3\x11\xbd\x6e\x6b\xf7\x4a\x50\x19\x78\x65\xa9\x05\x3d\xbb\xdf\x6e\x48\xc5\xa7\xfb\xf2\xdf\x8d\x79\x16\xd4\x20\x6f\x9d\x64\x99\xf3\xb6\x3f\x7f\x03\x00\x00\xff\xff\xed\x1c\x74\x66\x2f\x03\x00\x00")

func golangGetLimitoffsetTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetLimitoffsetTmpl,
		"golang.get-limitoffset.tmpl",
	)
}

func golangGetLimitoffsetTmpl() (*asset, error) {
	bytes, err := golangGetLimitoffsetTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-limitoffset.tmpl", size: 815, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetOneAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\xcf\x6e\xdc\x20\x10\xc6\xcf\xf0\x14\x13\x4b\x95\xb0\xb4\xf1\x03\xa4\xda\x43\x55\x55\xbd\xb4\x91\x12\x3f\x80\x45\x96\xc1\xa2\xc1\xd0\x0c\x78\xff\x08\xf1\xee\x15\xac\x9d\x6c\x5b\x35\xa9\x72\xf0\xc1\x30\xdf\xf7\xfb\x86\x99\x94\xae\x41\xa1\x36\x0e\xa1\x09\x66\x74\x32\xce\x84\x0d\x5c\xe7\xcc\xbf\x62\x4c\x09\xba\x7e\xd6\xda\x1c\x21\x67\x91\x12\xec\xe2\xf1\xa7\x24\x39\x41\xf7\x89\xc6\x00\x39\xb7\x20\x38\x4b\x09\x96\xd3\x7b\x7f\x80\x9c\x37\x80\x44\xe5\xf3\xd4\xf2\x42\x40\xa7\xaa\x25\xbf\xc4\x19\xb7\xf7\x8f\xaf\xb3\x24\x8d\x2f\xa4\x7f\x3b\x3d\x78\x75\x6a\x20\xe7\xc4\xd9\xce\xbb\x10\x61\x18\x42\x9c\xe2\xb6\xe4\x22\xe3\xa2\x86\xe6\xc3\x53\x03\x5d\x7f\xf7\x0d\x72\xe6\xcc\x3f\xfc\xe8\xac\x1f\xfb\x38\x45\x71\x2e\xdd\x40\x4a\xa0\x0d\x5a\xb5\x97\x76\xc6\x0b\x28\x67\xc3\x40\xfe\x10\xce\x3d\xdd\x6c\xa1\x88\x15\x99\x3d\x52\x77\x37\x23\x9d\x5e\x73\x28\x06\xcc\xe8\x2a\xbd\xda\x82\x33\x16\x12\x67\x8c\x30\xce\xe4\xca\xef\xa6\xda\x4d\xf2\x11\xbf\x10\x09\x24\x6a\x39\xcb\x9c\x29\xd4\x48\x70\x06\x77\x9f\xad\x0f\x28\x4a\x12\xa3\xe1\x6a\x39\xbc\xc5\x63\x14\x6d\x75\x5b\xfc\x6f\xb6\xab\xa0\x58\xb5\x1f\xff\x84\xbe\x41\x2d\xd8\xdf\x4a\xd6\xeb\xf0\x64\x8b\xe3\xad\xbf\xf7\x87\x50\xe3\xd5\x81\x1b\x67\xe2\x3a\x6f\xce\x0a\xeb\x99\xdf\xef\xa4\x2b\x03\x94\x4a\x91\xd7\x20\xb4\x95\x31\xa2\xab\xd5\x2d\xbc\xf3\x4d\xaa\xe6\xef\xe6\x2f\x65\xd1\xfb\xef\xd2\x9d\x4a\x4e\xf1\xa2\xf9\x9f\xb7\x79\x1b\xbe\x54\x94\xae\xca\x4e\xae\x7b\xee\x8c\xe5\x99\xa7\xf4\xbc\x97\xbf\x02\x00\x00\xff\xff\x82\x85\xcf\x09\x50\x03\x00\x00")

func golangGetOneAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetOneAllTmpl,
		"golang.get-one-all.tmpl",
	)
}

func golangGetOneAllTmpl() (*asset, error) {
	bytes, err := golangGetOneAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-one-all.tmpl", size: 848, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetOneTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x90\xcd\x4e\xeb\x30\x10\x85\xd7\xf6\x53\xcc\x8d\x74\xa5\x44\x6a\xf3\x06\x5d\xb0\x40\x6c\xd8\xb4\x79\x80\xca\x6d\xc6\x91\x69\x62\xc3\x64\xd2\x1f\x46\xf3\xee\xc8\x81\xd2\x6e\x80\x85\x37\xd6\xd1\xf7\xcd\x39\x22\x4b\x68\xd1\x87\x88\x50\x8c\xa1\x8b\x8e\x27\xc2\x02\x96\xaa\xf6\x09\x59\x04\xea\x66\xf2\x3e\x9c\x41\xb5\x14\x81\x3d\x9f\x5f\x1d\xb9\x01\xea\x07\xea\x46\x50\xad\xa0\xb4\x46\x04\xbe\x7e\x37\xe9\x04\xaa\x0b\x40\xa2\xfc\x12\x55\x36\x1b\x30\xb6\x33\xd2\xde\xeb\x42\x3c\xa6\xc3\xef\x2e\x47\xdd\xcd\xf4\x33\x69\x97\xda\x4b\x01\xaa\x62\xcd\x3e\xc5\x91\x61\xbb\x1d\x79\xe0\x55\xbe\x8b\x42\x64\x0f\xc5\xff\xb7\x02\xea\x66\xfd\x0c\xaa\xd6\xa4\xdd\x4b\xdd\xa7\xae\xe1\x81\xcb\xcf\xe8\x02\x44\xc0\x07\xec\xdb\xa3\xeb\x27\xbc\x93\xce\xed\x42\x0c\x7c\x2d\x67\x4d\x2e\xb7\x82\x0c\x69\x29\x1c\x91\xea\xf5\x84\x74\xd9\xa4\xd3\x5f\xb0\xba\xd9\xbb\x98\xab\xb9\xb6\xa5\xe4\xa1\xf4\xbd\x63\xc6\x38\xa3\xab\x59\x67\x82\x9f\xc7\xfb\xb7\x82\x18\x7a\x10\x6b\x0c\x21\x4f\x14\x33\xf3\x1d\x29\xdd\x36\xce\x07\x0c\xee\x80\x8f\x44\x25\x12\x55\xd6\xa8\xbd\x0b\xcf\xdb\x5d\xb3\x31\xf4\x56\xad\xc8\xf7\x7e\x1f\x01\x00\x00\xff\xff\x05\x5b\x62\x4c\xf8\x01\x00\x00")

func golangGetOneTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetOneTmpl,
		"golang.get-one.tmpl",
	)
}

func golangGetOneTmpl() (*asset, error) {
	bytes, err := golangGetOneTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-one.tmpl", size: 504, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetPagedTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x93\xdf\x8a\xdb\x3c\x10\xc5\xaf\xa5\xa7\x98\x4f\xf0\x81\x0d\x5e\xb3\xd7\x5b\x5c\x28\xa5\x77\x4b\xd9\x6d\x1e\x20\x68\xed\x91\x51\x63\x4b\xe9\x48\x4e\xb2\xa8\x7a\xf7\x22\xc9\xf9\x53\x5a\xda\xa5\x17\x81\xc4\x39\x9a\xf3\x3b\xc7\xa3\x10\xee\x60\x40\xa5\x0d\x82\x70\x7a\x34\xd2\x2f\x84\x02\xee\x62\xe4\x4f\x72\xc4\x21\x04\x68\x37\x8b\x52\xfa\x04\x31\x56\x21\x40\xef\x4f\x7b\x49\x72\x86\xf6\x03\x8d\x0e\x62\x6c\x38\x9b\xf4\xac\x3d\x68\xe3\x1b\xe8\xbd\xdd\xa1\x01\xe7\x49\x9b\xb1\x86\x8a\x33\xb2\x47\x07\x21\x80\x9b\x74\x8f\x56\x41\xfb\xc5\x1e\xd3\xb1\x55\x6a\x17\xbf\xaa\x1b\x40\xa2\xf4\xb1\x54\xf3\xc4\x85\x66\xc8\x20\xfc\x16\x52\x9b\x83\xdd\xfd\x8d\x50\xd2\x78\xe5\x83\x8c\x77\xf6\xfb\xc3\xe8\x17\x3b\xbc\x0a\x88\x31\x70\xa6\xd5\x39\x49\xd7\x81\x10\x10\x38\x63\xe7\x07\x20\xee\x05\x67\x91\x73\xd6\x5b\xe3\x3c\x6c\xb7\xce\xcf\xbe\x0b\x01\xf6\xa4\x8d\x57\x20\xfe\xff\x26\xa0\xdd\x3c\x3f\x42\x8c\x9c\xd9\x97\xaf\xed\x64\xc7\x8d\x9f\x7d\x55\xa4\x4d\xaa\x43\x69\x9c\x86\x83\x9c\x16\x5c\x49\xbf\x43\x6f\xe7\x59\x42\x8c\xc5\x68\xe5\xae\x39\x67\xdb\x6d\x2a\xb1\xf4\xf3\xd0\x41\x9a\x38\x90\x3e\x20\xb5\xcf\x0b\xd2\xeb\x5b\xc6\xfe\x32\x35\x45\x4c\xf3\xfe\xeb\xc0\xe8\x29\x07\x24\xf4\x0b\x99\xf4\xb3\x01\x21\x9a\xec\x33\xcb\x1d\x7e\x22\xaa\x90\xa8\x4e\xa1\xd9\x80\x0a\x09\x0a\x51\xfb\x71\xb2\x0e\xab\x84\x18\x02\x68\xa3\xbd\xc1\x23\xb4\x8f\xd2\xf9\xa7\x5d\x0e\xaf\xec\x45\xfb\x19\x4f\xbe\xaa\xb3\xd1\xad\xb8\x6c\x03\x67\x2c\xc1\x74\x67\xf1\xa6\x97\x26\xbd\x4b\x39\x0c\x64\x15\x54\x6a\x92\xde\xa3\xc9\xf2\xfa\xa6\xaa\xab\xe4\xea\x5a\x73\xf6\x9b\x70\x6f\x48\x97\xe2\x95\x75\xed\x40\xee\xf7\x68\x86\xaa\xf4\x9e\x5c\xd2\x46\x15\xd6\xd2\xc3\xea\xf0\x70\x41\x4e\x73\xea\x77\xff\xd2\x69\x1e\x56\xee\xd0\x7b\xb8\xcf\xc7\xd2\x03\x34\xd9\xbe\x4e\x2b\x58\xfe\xcd\x39\xae\xd7\xa6\x03\x35\xfb\x76\x93\xb7\xae\x3a\x33\xfe\x54\x43\xe4\x2c\x02\x4e\x0e\x6f\x16\xb8\x9c\x2c\xdf\x8b\xfb\xca\x58\xb2\x5e\x44\x4d\x82\xe6\x91\x87\x70\xb9\x2d\x3f\x02\x00\x00\xff\xff\x16\xec\x34\x25\x2d\x04\x00\x00")

func golangGetPagedTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetPagedTmpl,
		"golang.get-paged.tmpl",
	)
}

func golangGetPagedTmpl() (*asset, error) {
	bytes, err := golangGetPagedTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-paged.tmpl", size: 1069, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetScalarAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\xcb\x8a\xdb\x30\x14\x86\xd7\xd2\x53\x9c\x18\x0a\x32\x24\x7e\x80\x14\x2f\x4a\x69\x57\x6d\x21\xf1\x03\x18\x25\x3a\x32\x6a\x6c\xa9\x3d\x96\x73\x41\xe8\xdd\x07\x39\xce\x65\x66\x98\xc9\x30\x0b\x2f\x2c\xfe\xff\xff\xce\x2d\x84\x05\x28\xd4\xc6\x22\x64\xbd\x69\xac\xf4\x03\x61\x06\x8b\x18\xf9\x4f\x63\x55\x08\x50\x54\x83\xd6\xe6\x08\x31\x8a\x10\x60\xeb\x8f\xff\x24\xc9\x0e\x8a\x6f\xd4\xf4\x10\x63\x0e\x82\xb3\x10\x60\x7a\x5d\xbb\x03\xc4\x38\x07\x24\x4a\x9f\xa3\x9c\x27\x04\x5a\x35\x66\xf2\x7b\x9e\xb1\x7b\xb7\x7b\x00\x93\xd4\xdc\x50\x6f\x47\x6d\x9c\x3a\x65\x10\x63\xe0\x6c\xeb\x6c\xef\xa1\xae\x7b\xdf\xf9\x32\x15\x46\xc6\x7a\x0d\xd9\x97\xff\x19\x14\xd5\xea\x17\xc4\xc8\x99\xdb\xfc\x2d\x5a\xd7\x54\xbe\xf3\xe2\x2c\x9d\x43\x08\xa0\x0d\xb6\x6a\x2f\xdb\x01\xef\xa0\x9c\xd5\x35\xb9\x43\x7f\x6e\x6a\x59\x42\x32\x2b\x32\x7b\xa4\x62\x35\x20\x9d\xde\x4b\x48\x01\xcc\xe8\xd1\x3a\x2b\xc1\x9a\x16\x02\x67\x8c\xd0\x0f\x64\xd3\xef\x7c\x8c\xeb\xe4\x0e\x7f\x10\x09\x24\xca\x39\x8b\x9c\x29\xd4\x48\x70\x06\x17\xdf\x5b\xd7\xa3\x48\x95\x18\x0d\xb3\xe9\xf1\x0f\x1e\xbd\xc8\xc7\xb4\x29\x7f\x59\x5e\x0c\x29\x2a\xff\xfa\x12\xfa\x80\x9a\xb0\xcf\x24\xd6\xb4\xa9\x96\x71\xbd\xc6\x1a\x7f\xd9\x2e\x67\x29\xf8\x0a\xab\xb6\xd2\xa6\x6d\x49\xa5\xc8\x69\x10\xba\x95\xde\xa3\x1d\xd5\x39\x7c\x72\x00\xa3\xe7\x75\xa7\xf7\x36\xef\xdc\x6f\x69\x4f\x6b\x77\xe8\xc5\xcd\xf3\x91\x41\x3c\x86\x4f\x8a\xd4\x55\x3a\xc0\xcb\x55\xa7\x89\x44\x1e\xc2\xf5\x08\x9f\x02\x00\x00\xff\xff\xc7\xc2\x3c\xfc\x3f\x03\x00\x00")

func golangGetScalarAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetScalarAllTmpl,
		"golang.get-scalar-all.tmpl",
	)
}

func golangGetScalarAllTmpl() (*asset, error) {
	bytes, err := golangGetScalarAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-scalar-all.tmpl", size: 831, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetScalarTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x90\x4d\x6e\xe3\x30\x0c\x85\xd7\xd2\x29\x38\x06\x06\xb0\x81\xc4\x37\xf0\x62\x16\x99\xd5\x60\x80\xc4\x07\x08\x94\x88\x32\xd4\xd8\x52\x43\xcb\xf9\x29\xc1\xbb\x17\x72\xdb\x24\x9b\x36\x0b\x6d\x04\xf2\xfb\xf8\x1e\xf3\x12\x2c\x3a\x1f\x10\x8a\xd1\x77\xc1\xa4\x89\xb0\x80\xa5\x88\xfe\xeb\x83\x65\x86\xba\x9d\x9c\xf3\x17\x10\x29\x99\x61\x9f\x2e\xaf\x86\xcc\x00\xf5\x1f\xea\x46\x10\xa9\xa0\xd4\x8a\x19\x3e\x7f\x37\xf1\x0c\x22\x0b\x40\xa2\xfc\x22\x55\x3a\x2b\x30\xd8\x99\xa9\x1f\x7d\x3e\x9c\xe2\xe1\x89\xcc\x50\x77\x57\x7d\x8f\xda\x45\x7b\x2d\x40\x84\xb5\xda\xc7\x30\x26\xd8\x6e\xc7\x34\xa4\x26\x1f\x46\x3e\x24\x07\xc5\xef\x63\x01\x75\xbb\xfe\x07\x22\x5a\xc5\xdd\x4b\xdd\xc7\xae\x4d\x43\x2a\x3f\x46\x17\xc0\x0c\xce\x63\x6f\x4f\xa6\x9f\xf0\x41\x3a\xc7\xf3\xc1\xa7\xaf\x74\x5a\xe5\x74\x0d\x64\x88\x25\x7f\x42\xaa\xd7\x13\xd2\x75\x13\xcf\xcf\x60\x75\xbb\x37\x21\x47\x33\xd6\x52\x74\x50\xba\xde\xa4\x84\x61\x46\x57\xb3\x4e\x79\x37\xb7\xd7\x34\x30\x1e\xfb\x7a\x45\xf4\x3f\x6e\xe2\x79\x04\xd6\x4a\x11\xa6\x89\x42\xa6\xbf\x21\xc5\x7b\xdd\xc1\xf7\x5a\xc9\x6d\xf7\x57\x93\x7f\x7e\xdc\xc8\xc7\x0f\xe6\x80\x2b\xa2\x12\x89\xaa\x79\xfd\x3e\x3c\xf7\xfe\x48\x17\xcd\x7c\xeb\xfe\x3d\x00\x00\xff\xff\x27\x88\x90\x50\x36\x02\x00\x00")

func golangGetScalarTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetScalarTmpl,
		"golang.get-scalar.tmpl",
	)
}

func golangGetScalarTmpl() (*asset, error) {
	bytes, err := golangGetScalarTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-scalar.tmpl", size: 566, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x58\x5f\x8f\xe2\x38\x12\x7f\x8e\x3f\x45\x2d\x9a\x19\x25\x2d\x26\x7d\x27\x9d\xee\x21\x2b\x1e\xa6\x81\x3d\xb5\x34\xd3\x3d\x4b\xd3\xbb\x3a\x69\x25\xd6\x24\x86\xc9\x92\xd8\xb4\x63\x20\xad\x5c\xbe\xfb\xa9\x1c\xc7\x71\x02\xf4\xee\xdc\x3d\x11\xec\xfa\xfb\xab\xaa\x9f\x9d\xdc\xde\xc2\xa7\xe7\xe5\xe3\xbf\xe6\x0f\xf3\xc5\xa7\xe5\x7c\x06\x77\xff\x86\xad\xd8\xef\xb6\x61\xca\x6f\x8b\x3d\x8d\x59\x2e\xf8\x8e\xbd\x6e\xc5\x6d\xb2\x2e\xc3\xe3\xdf\xc9\xed\x2d\xcc\x1e\xe1\xe1\x71\x09\xf3\xd9\xfd\x32\x24\x64\x4f\xe3\x1d\xdd\x32\xa8\x2a\x08\xbf\x9a\xe7\xba\x26\x24\xcd\xf7\x42\x2a\xf0\x89\x37\x8a\x05\x57\xac\x54\x23\xe2\x8d\x12\xaa\xe8\x9a\x16\xec\xb6\x78\xc9\xf0\x3f\x93\x52\xc8\x02\x9f\x36\xb9\x16\x50\x69\xce\xf0\xb7\x50\x32\x16\xfc\x68\x1e\x53\xbe\x2d\x46\x84\x54\xd5\x47\x90\x94\x6f\x19\x84\xf3\x52\x49\x7a\xaf\x7d\x14\xe8\xcf\x43\xff\xf8\x80\x32\x8c\x27\xf8\x18\x10\x0c\xf7\xab\x64\x47\xc6\x15\xc4\x82\x27\xa9\x4a\x05\xa7\x19\xa4\x46\x71\x23\x45\x0e\x31\x3d\x14\x29\xdf\xc2\xfa\x90\x66\x09\x6c\x68\x9a\x1d\x24\x2b\xc8\x91\x4a\x58\xc1\x04\x4c\x24\xe1\xbd\x12\xd4\x5d\xc4\x98\xc2\xcf\xb4\x50\xf7\x3c\x61\xa5\xdd\xd9\xe4\x2a\x7c\xda\xcb\x94\x2b\xa2\xd7\x7c\xe2\xfd\x2a\xe9\x7e\x2e\x25\x6e\x1e\x78\xec\x33\x29\xe1\x66\x8e\x89\x07\xa0\xf3\x87\x4a\x32\x75\x90\x1c\xff\xd5\xc4\x7b\x10\x27\xcf\x9b\x00\x22\x11\x3e\x88\x13\xf1\x3e\x8b\xed\x96\xc9\x46\x79\x23\x64\x4e\x95\xf1\x3f\x06\x2a\xb7\x05\x84\x61\x98\x72\xc5\xe4\x86\xc6\xac\xaa\x03\x42\x3c\x26\xe5\x52\x88\x2f\x94\xbf\x2e\xc4\xa9\x80\x49\xe3\xa7\x08\x1f\xd8\xc9\x1f\x29\x21\x20\xa7\xfc\x15\xa4\x38\x15\xa3\x40\x4b\x3f\xf3\xe2\xb0\x47\x4c\x58\x32\x93\xe9\x91\xc9\x81\xce\xa1\xdb\x87\x44\x0b\x18\xc5\x79\xbe\x57\xaf\xcf\xfb\x84\x2a\x36\x50\x61\xb8\x03\x07\xbd\x35\x0a\xb0\x18\xea\x75\xcf\x40\x27\x3e\x15\x09\x03\x0d\x51\x2c\x78\xa1\xbb\xc4\xae\xaf\x9e\xf9\x8e\x8b\x13\x77\x24\x27\x90\x0a\x45\xfb\x32\x83\x78\xdd\xcd\x07\x81\x59\xbb\x2b\xcb\x72\x26\x38\xeb\xad\x74\xf0\xb8\xcb\x53\x0c\x47\xd2\x94\xab\x5f\x52\x91\x51\x6c\x17\x77\xdb\xc9\xb6\x9f\x10\x16\xe4\x10\x2b\xa8\xb4\x74\x83\x03\xf1\x74\xf0\x56\x9b\x78\x06\xda\xa6\x78\xb8\xdd\x3a\x6b\x97\x6a\x42\xb0\xca\xe0\x33\xdb\x21\xfa\xc7\x0f\x8c\x04\x3a\x68\x9b\x25\x9c\x4b\x19\x9a\x6d\xab\x79\x6a\x7a\xcd\x31\x60\x5a\x8c\x78\xe9\x06\x6c\x27\x4e\x80\xa7\x19\x2e\x5a\x6b\xc4\xab\xad\xe9\x5f\x5b\x23\x9d\xdd\x9c\xee\x98\x5e\x6a\xb3\xeb\x1b\x66\x17\x8d\xf2\x34\xd3\x66\x19\x44\x13\xf8\xa0\xe3\xa9\xe6\x52\x46\xa6\xd1\x8b\x53\xaa\xe2\x6f\x5a\xb7\x22\x5e\x4c\x0b\x06\xc5\x4b\x86\x29\x35\x15\x8c\x88\xe7\xb1\xd0\x74\xc0\x79\x79\x5d\x85\xa6\xc0\x57\x14\xda\xea\x77\x09\x9e\xce\x13\x3c\x0c\x3b\xca\x4f\xdc\x6a\x39\xe9\x0e\x6c\x98\xbc\x88\xe7\xb5\xa9\x9d\x35\xe7\x98\x78\xba\x17\x22\x78\xa3\x83\x51\xa8\x79\x8a\xcc\x88\x8d\x89\x57\x77\x01\xb2\xae\xf7\xfc\xef\x89\xc6\xe9\xd9\x4b\x71\xf4\xb7\x1d\x7f\xaa\x9b\x90\xef\xf2\xe7\x4c\xd6\x25\x7f\xfd\x6d\xc7\x5f\x7c\x3e\x7a\x5d\xb7\x8d\x9d\xed\xff\xa1\x22\x97\x02\xb9\x30\xea\x8d\x58\xbb\x1c\x39\x3e\x6d\xa8\x7a\xe4\x4d\x67\x58\xd2\xd5\x63\x5f\xb2\xd8\x7f\x39\x30\xf9\xfa\x26\x39\x83\x8f\x1d\xbb\x60\xc5\x21\x53\x63\x33\x49\xc4\xfb\x19\xf5\xfe\x92\xf6\x8d\x56\x47\xf0\xfa\xca\x0b\x71\xfa\x2b\xfa\xad\x3a\xa6\x62\x4e\x27\x2e\xd4\xa7\xaf\x42\x4b\x0d\x18\x3c\x61\x85\x4a\xb9\x46\x06\xb8\x50\x40\x61\xdf\xc8\x21\xf7\x67\xa2\x28\x5e\xa7\x82\x1f\x99\x2c\x50\xa0\xaf\xaa\x77\x11\x3f\xb3\xed\x1c\x00\xb3\x3b\x87\x2c\x75\x3c\xb3\x3b\xe2\x25\xeb\x2f\x4c\x7d\x13\x49\x61\xfb\xe1\x71\xcf\xb8\x99\xc1\x31\x14\xe2\x20\x63\x66\x2b\xef\x27\x6b\xb8\x99\xdd\x69\x0c\x5a\x3a\xaa\x88\x57\xbc\x64\xab\x64\xdd\xac\x46\x13\xcd\x0d\x17\xac\x04\x96\xb1\x7e\xb8\xc4\x58\x63\x97\xeb\x02\xcd\x1a\x09\xdb\xb4\xe7\x6f\xe3\x02\x4c\xdc\xda\xeb\x05\x6b\x26\x92\x70\x9a\x89\x82\xf9\x01\xf1\xd0\x4a\x6d\x94\xf1\x80\x36\x2a\x4d\x90\x28\xf9\x35\xe5\x5b\x3f\xf8\xf1\x7b\xc2\x22\x1e\x56\x30\xcd\xf7\x19\x74\xe8\xb5\xa4\x6a\x5a\xb4\x72\xef\x4c\xb3\x94\x66\x2c\x36\xf7\x25\xcd\x9e\x78\x69\x7a\xa0\x39\x83\xff\x80\xbe\xb2\x6c\x60\xf4\xfe\x65\x04\x75\x8d\x4c\xaa\x2d\x4f\x80\xb3\x93\x15\xab\xbb\x1c\x7a\x77\x31\x16\x3f\x72\x44\x5a\x5b\xc6\xe4\x56\x63\x18\x24\xa8\xe7\xa3\xaa\x7a\x7e\xf0\xc2\x76\x9e\x73\x2f\x69\x0c\x22\xec\x67\xee\xf5\x2e\x79\xce\x23\xd6\x89\x1e\x32\x15\x0d\x80\xbb\x46\xed\x06\x45\x23\xfa\x61\x76\x87\xde\x67\x77\x91\x09\x19\xd9\xc0\x02\x1b\xe9\x48\x90\x06\xc6\xfa\x58\xb3\x27\xb5\x58\xff\x81\xad\x18\x80\xa9\x35\xf8\xfd\x9e\x34\xd6\xc5\xfa\x0f\x9b\x06\x3e\xcf\xee\xda\xe6\x08\x2e\xd8\xd2\x5d\x1b\xab\x12\xcc\xd5\x39\x9c\x36\xbf\x48\x00\xcb\x72\xec\x98\x57\xa5\x6d\x77\x63\xf6\x8e\x6d\x53\xee\xff\x69\x93\xbb\x01\x75\x1d\xd5\x62\xb1\x2c\x51\x5e\x95\x11\xa8\x72\xac\x9f\x2c\x0e\xa8\x88\x4c\xbb\x2c\x7d\x55\x06\x2e\x22\x55\x05\xe9\x46\x33\x45\xf8\xb4\x4b\xf7\x8b\x12\x8b\x32\xc8\xec\x81\x9d\x16\xa5\x1f\xc0\xcd\xa2\x74\xd0\xf9\xb0\x28\xab\x64\xad\x6d\xd7\x8d\x21\x53\x52\xad\x3d\x63\x19\x53\xec\x53\x96\x5d\x82\x64\x0c\x0d\x17\x04\xe0\xa7\x5c\xfd\xf3\x1f\x57\xc0\x49\xd6\x61\x0b\xea\x5b\xd0\xfc\x4d\x2b\x0c\x87\xbe\x37\xe6\xce\x35\xc7\xd3\xff\xd1\x76\x8b\xa4\x2a\xc3\xa9\xc8\xf3\x54\x61\x5d\x6d\x2b\xeb\x9e\xb5\x16\x56\x52\x64\xd9\x9a\xc6\x3b\x8c\x4b\x95\xe1\xc2\xfc\x35\xe3\xdf\x6d\xbb\x33\x91\x6e\xc0\xbc\x06\xb8\xab\xe6\xd5\x00\xa9\x1a\x21\xfa\x48\xb3\x2c\x02\xab\x8f\xaf\x32\x2c\x89\xe0\xfd\x71\x34\x76\x83\x74\x9d\x34\x61\xd6\x2d\x43\x05\xb6\x24\xaa\x0c\x13\x17\xf7\xee\xf4\x5b\x96\x0e\x81\xab\xb2\xe1\xc2\x65\x49\xba\x26\xe9\x0e\xca\x86\x71\xae\x69\xd8\xc6\xc7\x35\x2b\x1b\x40\x0b\xe1\x95\x59\x72\xc0\xee\xe1\x7d\xcd\x5c\x07\xf0\x5f\x32\xd8\x89\x6b\x93\x57\x08\x54\xaf\xbf\x4b\xd6\x3a\xcf\x68\x72\xce\xa3\xc5\xec\x6e\x04\x1f\x0d\x43\xbd\x53\xe5\x75\xc1\x65\xe9\x08\x22\xcd\x5c\x17\xbd\xcf\xf7\xd9\x48\xbb\xd7\x32\x55\xe5\x28\xd4\xb5\x83\xb2\xe1\xff\xe6\x67\xc0\x30\x03\xad\x00\x32\xb1\x7d\x52\xb9\xf2\x0b\x95\xf7\x5f\x2d\xc3\x30\x84\xde\xfd\xa1\x6a\x5e\xb4\xcd\x61\xf0\xd9\xd1\xb3\x0a\x43\x3e\x3b\xf3\xf6\xd6\xab\x84\x7b\xe5\x02\xb1\x6b\x69\x2d\x2d\xba\x6b\x59\xf3\xc6\xd3\x50\x16\xf2\x8d\xd8\xe9\x59\x00\x53\xcb\x2b\xd7\x48\xf7\x02\x89\x8a\x35\xb1\x1a\x3d\x16\x74\x91\x35\xc5\xed\xe3\x6a\xcf\x7e\xe2\x0d\x53\xb3\x89\x0f\x8e\x4c\xf7\xbe\x70\xd3\x37\xec\x50\x60\x6f\xa3\xd2\x67\x4f\x04\xcd\x29\x34\xf0\x13\x35\xc2\xce\x8a\x26\x83\xa4\x7d\x79\xd0\x3a\x35\x32\xf3\x85\x52\x58\x17\x01\x3c\xc5\xdf\x58\x4e\x2f\xbd\x5b\xfe\x8e\xe1\x37\xdb\x4f\x3f\x7f\x86\xba\xfe\xfd\x6d\x4b\xf6\x3c\x68\x47\x3b\x00\x4b\x06\xc3\x1c\xcd\x24\x98\x1c\xdb\x29\x8d\x3a\xae\xa8\x9a\x63\xa7\xfe\xfe\xcc\x9b\xb3\xca\x66\x6e\x0b\x69\x5d\xba\x85\x6c\xdd\xbd\x51\xc7\x2b\xad\xfe\xf6\x15\xbb\x22\xde\xed\x2d\x2c\x1f\x67\x8f\x11\x48\xc6\x13\x26\x61\x9f\xd1\x98\x7d\x13\x59\xc2\x64\x41\x2e\x53\x79\x4b\xe4\xc5\x4b\x16\xfd\xc6\xdf\x17\xbf\x71\x34\x8e\x8f\x2f\xa3\x31\x74\x03\x16\x98\xdc\x9c\x6b\x0f\x1e\x97\x86\xa0\x9e\x74\x7a\x45\x7b\x2f\x7a\x67\xd2\xb5\x54\x62\x59\x26\x96\x8c\x2a\xe6\x6c\x4f\xf5\x42\xa3\xdf\x17\x6d\xbe\xe0\x38\xa2\xcd\xcb\xa2\x23\xda\xa3\x23\x23\xe8\x62\xed\x30\xe8\x4f\x29\xcb\x92\xee\x83\x9d\x51\xd7\x40\x2f\x0d\xf8\x4e\x66\xb6\xe7\x7a\x86\x03\x58\x2d\xe9\x3a\x63\x4e\xe3\xb6\xa3\x3c\xd2\x86\x70\x13\xea\x7a\x04\x06\xa7\x74\x03\xe1\xe3\xbe\xf9\xf4\x77\xcf\x0b\x26\x55\x17\x46\x17\x78\x0f\x92\x2b\xe1\x5f\xb3\x72\x96\x4c\x1f\x9d\x7e\x4a\x6e\xe9\xac\xf7\x1e\xca\x57\xbc\x6b\xe0\x31\xb9\xff\xc3\xf1\x59\x1d\x74\x8d\x37\x4e\x79\xcf\x2d\xbc\x8b\x95\xd0\x97\xa8\xee\x1c\x5a\xbd\x2f\x46\x10\x7e\x11\x09\xcb\xb4\x64\x78\xde\x08\x9b\x0b\xc9\x78\xab\x82\x29\x58\x0b\x91\x11\x6f\x75\xa4\xd9\x81\xf5\x4a\xef\xcc\x5d\xe3\xb3\xae\xfd\xa3\x96\x98\x2a\x21\x7f\xd1\xf2\x58\xff\x81\xf9\xca\x56\xf9\xcb\x41\x51\xc5\x7e\x6a\xde\x43\x8e\x30\xd1\xba\xce\xa2\x7f\x0c\x7a\x2f\x0c\xa6\x6d\xfa\xf6\x2a\xc0\x28\x23\x50\xf2\xc0\xc6\xd0\x84\x19\x41\x73\xb9\x0d\x97\x74\xc7\x3e\x25\x09\x86\xf6\xc1\x5e\x53\x8f\x50\xdb\xeb\x6f\xf8\x70\xc8\x32\xd3\x81\x67\xd9\xac\x16\xf4\x64\x32\x5a\xb6\xdc\x79\x96\x0c\x12\xc4\xf1\xc2\xd7\x34\xd7\x0e\x3a\xf1\x03\xf7\x93\x96\x8b\xd9\x79\xac\x37\x5d\xac\xc1\x25\x98\x8d\xc1\x0b\xc1\xfc\x29\x44\xd0\xbf\xb1\x9b\x89\xdd\x0c\x34\x02\xd0\x38\xfa\x81\x7b\x9f\x00\x1d\xe7\x0f\x9b\x50\xb7\x85\x9d\x62\xcc\xbb\xfe\xb1\xfd\xb7\x09\x4d\xa7\xf4\xd8\xc0\xb5\xbc\x9a\x8a\xec\x90\xf3\x6b\x7c\xd0\xec\xba\x84\x80\xa1\x7e\xec\x8f\x47\xfb\xcd\xeb\x79\x39\xf5\x55\xf3\xed\x7d\x99\xe6\x2c\xe8\x1e\x1d\x30\x54\x88\x62\x08\xe4\x7f\x03\x00\x00\xff\xff\xca\x3e\x68\xd7\x41\x19\x00\x00")

func golangHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangHeaderTmpl,
		"golang.header.tmpl",
	)
}

func golangHeaderTmpl() (*asset, error) {
	bytes, err := golangHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.header.tmpl", size: 6465, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangMiscTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\x41\x4b\xc3\x40\x10\x85\xcf\xcd\xaf\x78\x84\x08\x2a\xa6\x3f\xa0\xe0\xa5\x07\x41\x04\x0f\x5a\x3c\x77\xcd\x4e\xc2\x48\xba\x8d\x9b\x8d\x50\xc6\xfd\xef\x32\xbb\xb2\x56\x7a\x5b\xde\x7c\xef\xbd\x99\x15\x69\x61\xa9\x67\x47\xa8\x2d\x75\x63\x8d\x18\xab\x7e\x71\x1d\xae\x8f\xef\x1f\xb8\x15\xc1\xfa\x85\x3a\xe2\x2f\xf2\x5b\x33\x13\x62\x7c\x3c\x4c\xe3\x0d\x74\xf0\xca\x83\x33\x61\xf1\xaa\x26\x61\x7b\xb4\x27\x0d\x10\x01\x39\x8b\x36\xc6\xaa\x3a\x6f\x98\x83\x5f\xba\x90\x3a\xc2\x69\xa2\xe4\x79\x36\x87\xe4\xcf\x33\x88\x9a\xbd\x71\x03\x61\xfd\xc0\x34\xda\x59\xe9\x95\x08\xb8\x2f\xf0\xb9\xef\xb7\x2b\x8b\x3b\x4d\x4d\x4f\xa5\x77\x66\x98\xd3\x12\xab\x7d\x09\x6d\xf8\x0e\x4d\xc0\xe6\xfe\x6f\x9c\xe9\x86\x2f\xd2\x9e\x48\xaf\xd9\xe8\xf3\xcd\x8c\x0b\xe1\x1b\x93\x67\x17\x7a\xd4\x57\x9f\x75\x86\x32\xbd\xd7\x0d\xdb\x72\x74\xd1\xab\x7f\x7f\xf1\x13\x00\x00\xff\xff\x1b\x36\x80\x57\x6d\x01\x00\x00")

func golangMiscTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangMiscTmpl,
		"golang.misc.tmpl",
	)
}

func golangMiscTmpl() (*asset, error) {
	bytes, err := golangMiscTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.misc.tmpl", size: 365, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangUpdateTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x55\xc1\x6e\xe3\x36\x10\x3d\x4b\x5f\x31\x15\x50\x80\x42\x1c\xa2\xe8\x71\x01\x1d\x82\x6d\x5a\x04\x48\x8d\x24\xee\xf6\xb2\x58\x08\x8c\x34\x12\x98\x95\x48\x99\xa4\xec\x04\x82\xfe\xbd\x18\x52\x76\xe4\xd8\x71\x8a\xf6\xb2\x07\x1f\x64\xce\xbc\x79\x33\x6f\xf8\x38\x0c\x97\x50\x62\x25\x15\x42\x62\x65\xad\x84\xeb\x0d\x26\x70\x39\x8e\xf1\x97\xae\x14\x0e\x87\x01\xf8\xaa\xaf\x2a\xf9\x0c\xe3\xc8\x86\x01\x0a\xf7\xdc\x09\x23\x5a\xe0\x57\xa6\xb6\x30\x8e\x8b\x38\xea\x7d\x28\xf8\x58\x67\xfa\xc2\xf1\x90\x1c\x3e\x96\xa2\x45\x18\xc7\x14\x58\x1c\x0d\x03\x4c\xd9\x0f\xe8\x7a\xa3\x28\x1f\xd0\x18\xfa\x69\x93\xc6\xc4\x07\x55\xe9\x09\xc4\x73\x72\x52\x6d\xf4\xf7\x0f\x99\x09\x53\xbf\xf2\x82\x40\xeb\x0c\xe8\xa3\x2e\x5f\x3c\xe4\x10\x47\x85\x56\xd6\x41\x9e\x5b\xd7\xba\xbc\x33\x58\xc9\xe7\x8c\xd8\x1a\xa9\x5c\x05\xc9\xcf\xeb\x04\xf8\xea\xfe\xf6\xce\x9f\xc0\x38\xbe\xc9\xb0\x9e\xc9\xa9\x8c\x3d\xc7\x38\x8e\x36\xc2\xc0\xda\xc2\xd7\x6f\x8f\x2f\x0e\xc3\xe7\x46\x34\x3d\xd2\x5f\x52\x39\x34\x95\x28\x70\xa0\xc8\x61\x00\x59\x01\xbf\xd3\x56\x3a\xa9\x95\x68\xae\x4c\xdd\xb7\xa8\x9c\xf5\xb5\x9f\xe0\x53\x46\xf3\x6e\x50\xed\x1b\x26\x3c\x8f\x95\x81\xe8\x3a\x54\x25\x0b\xdf\x0b\x0a\xac\x24\x36\xa5\xff\xde\xc7\xa7\xbe\xca\x7e\x30\x91\x28\xcb\x5d\x11\x42\xaf\x7a\x55\x30\x45\xda\x59\x67\xa4\xaa\x53\x18\xe2\x28\x5a\xcf\xe0\xd7\x76\x01\x14\xc0\x39\x4f\xe3\x28\xa2\xc9\x9e\xe3\x1c\x3d\x5d\x5c\x9c\x40\x48\xc0\x77\xc2\x77\xc1\xfb\x09\x27\x13\xee\xdb\x04\xeb\x4c\xa1\xd5\x86\xdf\x38\x2d\xd8\x53\xfa\x4e\x54\xb2\x80\x64\x46\x0c\x1b\x8b\x81\xc5\xbf\xae\xff\x06\x40\x95\x3e\x7f\x8c\xa3\x9c\x00\x5e\x87\x15\xd4\x32\x42\xd5\x78\xb8\xff\xe2\xb1\xc1\xdf\x69\xee\xa1\x7f\x59\x4d\x1b\xc9\xa9\xdc\x74\x2b\x78\x6e\xd1\xf9\xc9\xce\x10\x59\x42\x11\x9f\x75\xd3\xb7\x74\x43\x12\xe2\xf0\x9e\xb6\x27\x20\xfd\x11\x4b\x53\x4f\x76\x92\x78\x0c\x4b\x15\x14\x5a\x22\x96\x76\xa9\xb7\x9e\x56\x9e\x2b\xbd\x25\xc1\x97\x7a\xcb\x52\xfe\xe5\xaf\xcf\xec\x70\x33\x66\xdd\x5d\xf5\x4e\xcf\x3a\x3a\xa2\x3c\x31\x20\xc2\x67\x76\x91\xdf\x28\xe9\xfe\x16\xcd\xc1\x0e\x8e\xaf\x5b\xaf\xb4\x3b\x2a\x25\x2b\xda\x75\xb6\xb6\x29\x64\x19\xfc\xe2\x27\x66\x82\x85\x28\xd9\x2c\x00\xdb\xce\xbd\x04\x63\x60\xa7\x1a\xdf\xe3\x9e\xda\xce\xcb\xff\x73\x79\x7c\x81\xe0\x02\x34\xc5\x03\x07\x81\x8b\xe9\xf2\xb0\xb5\xfd\xfa\x69\x6a\xe0\xf2\xd7\x6f\x29\x5c\x1c\x1a\x47\x1c\xe9\xc7\x27\xde\xe8\x7a\xe5\x5a\xc7\xc2\xd1\x62\xf2\x06\xbf\x84\xa1\x07\x25\xdd\xcc\x39\xf7\x2e\xb1\xea\xbb\x4e\x1b\x67\xc3\x89\x54\xb5\x3f\x24\x5b\xcd\x80\x70\x4b\x23\x37\x68\xf8\x7d\x8f\xe6\xe5\x41\x6f\x4f\xe0\xf3\x55\x21\x14\x99\xa8\x28\x4b\xa3\x2b\x60\x55\x23\x9c\x23\x73\x09\x98\x69\x68\x59\x56\xde\xac\xb3\x0c\xec\xba\xe1\xd7\xc6\x2c\xf5\x83\xde\xda\x23\x35\x94\x6c\xbc\x06\x53\xfc\x4f\x19\xfd\x73\x14\x45\xd4\x5a\xf1\x1d\xaf\x8d\x61\x68\xcc\xab\x6c\x74\x57\xbd\x26\x79\x78\x1c\x0e\xba\xb8\x7e\xc6\xe2\xd4\x84\xfe\x4b\xb1\x9d\x85\xd7\xe8\x3c\xe0\x91\x7f\xff\x81\x6e\x75\x7f\xeb\xc7\x39\x17\x28\x61\x37\x7f\xde\xdd\xde\x5c\xff\x96\x42\xe2\xa5\xdc\x01\xbc\xbf\x2e\xe7\xf5\xf8\x30\xff\xc7\x12\x68\xe7\x0c\x53\x30\xd1\xa2\x97\x77\xf6\xa6\x53\x81\xf1\xe0\xe5\xfd\x27\x00\x00\xff\xff\xcc\xec\x53\xbd\x6b\x08\x00\x00")

func golangUpdateTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangUpdateTmpl,
		"golang.update.tmpl",
	)
}

func golangUpdateTmpl() (*asset, error) {
	bytes, err := golangUpdateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.update.tmpl", size: 2155, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"golang.create.tmpl": golangCreateTmpl,
	"golang.delete-all.tmpl": golangDeleteAllTmpl,
	"golang.delete-world.tmpl": golangDeleteWorldTmpl,
	"golang.delete.tmpl": golangDeleteTmpl,
	"golang.dialect-postgres.tmpl": golangDialectPostgresTmpl,
	"golang.dialect-sqlite3.tmpl": golangDialectSqlite3Tmpl,
	"golang.footer.tmpl": golangFooterTmpl,
	"golang.get-all.tmpl": golangGetAllTmpl,
	"golang.get-count.tmpl": golangGetCountTmpl,
	"golang.get-first.tmpl": golangGetFirstTmpl,
	"golang.get-has.tmpl": golangGetHasTmpl,
	"golang.get-last.tmpl": golangGetLastTmpl,
	"golang.get-limitoffset.tmpl": golangGetLimitoffsetTmpl,
	"golang.get-one-all.tmpl": golangGetOneAllTmpl,
	"golang.get-one.tmpl": golangGetOneTmpl,
	"golang.get-paged.tmpl": golangGetPagedTmpl,
	"golang.get-scalar-all.tmpl": golangGetScalarAllTmpl,
	"golang.get-scalar.tmpl": golangGetScalarTmpl,
	"golang.header.tmpl": golangHeaderTmpl,
	"golang.misc.tmpl": golangMiscTmpl,
	"golang.update.tmpl": golangUpdateTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"golang.create.tmpl": &bintree{golangCreateTmpl, map[string]*bintree{}},
	"golang.delete-all.tmpl": &bintree{golangDeleteAllTmpl, map[string]*bintree{}},
	"golang.delete-world.tmpl": &bintree{golangDeleteWorldTmpl, map[string]*bintree{}},
	"golang.delete.tmpl": &bintree{golangDeleteTmpl, map[string]*bintree{}},
	"golang.dialect-postgres.tmpl": &bintree{golangDialectPostgresTmpl, map[string]*bintree{}},
	"golang.dialect-sqlite3.tmpl": &bintree{golangDialectSqlite3Tmpl, map[string]*bintree{}},
	"golang.footer.tmpl": &bintree{golangFooterTmpl, map[string]*bintree{}},
	"golang.get-all.tmpl": &bintree{golangGetAllTmpl, map[string]*bintree{}},
	"golang.get-count.tmpl": &bintree{golangGetCountTmpl, map[string]*bintree{}},
	"golang.get-first.tmpl": &bintree{golangGetFirstTmpl, map[string]*bintree{}},
	"golang.get-has.tmpl": &bintree{golangGetHasTmpl, map[string]*bintree{}},
	"golang.get-last.tmpl": &bintree{golangGetLastTmpl, map[string]*bintree{}},
	"golang.get-limitoffset.tmpl": &bintree{golangGetLimitoffsetTmpl, map[string]*bintree{}},
	"golang.get-one-all.tmpl": &bintree{golangGetOneAllTmpl, map[string]*bintree{}},
	"golang.get-one.tmpl": &bintree{golangGetOneTmpl, map[string]*bintree{}},
	"golang.get-paged.tmpl": &bintree{golangGetPagedTmpl, map[string]*bintree{}},
	"golang.get-scalar-all.tmpl": &bintree{golangGetScalarAllTmpl, map[string]*bintree{}},
	"golang.get-scalar.tmpl": &bintree{golangGetScalarTmpl, map[string]*bintree{}},
	"golang.header.tmpl": &bintree{golangHeaderTmpl, map[string]*bintree{}},
	"golang.misc.tmpl": &bintree{golangMiscTmpl, map[string]*bintree{}},
	"golang.update.tmpl": &bintree{golangUpdateTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

