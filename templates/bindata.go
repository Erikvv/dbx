// Code generated by go-bindata.
// sources:
// golang.funcs.tmpl
// golang.header.tmpl
// postgres.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _golangFuncsTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\xdb\x6f\xdb\x36\x17\x7f\x96\xfe\x8a\xf3\x09\x45\x61\xe5\xb3\x95\x16\xf8\xf0\x3d\x74\xd0\x06\x37\x71\xb3\x0c\xae\x73\xb1\x83\x3d\x04\xc1\xc2\x5a\x54\xca\x46\xa6\x14\x8a\x6a\x92\x29\xfa\xdf\x07\x92\xba\x5a\x96\x2c\xc5\x49\xf7\xb0\xbd\x04\x11\x79\x6e\x3c\xe7\x77\x2e\x12\x1d\xc7\xfb\x7b\x70\x74\x32\x1d\xcf\x8e\xe0\xd3\xc5\xec\x60\x71\x7c\x32\x83\xc5\xe4\xf3\xe9\x74\xbc\x98\xcc\x61\x6f\x3f\x49\x74\x3d\x8e\x47\xe0\x60\x97\x50\x0c\x46\x80\x18\x5a\x85\x06\x8c\x92\x44\xae\x33\x44\x6f\x30\xbc\x21\x43\x78\x83\xd8\x0d\x7c\xb0\xc1\x92\x7b\x5a\x1c\x03\x71\xe1\x0d\x81\x24\x19\xea\x00\x00\x71\x8c\xa9\x93\x24\x71\x2c\x29\xad\x19\x5a\x61\x48\x12\xc8\x9e\x17\x8f\x81\x78\x96\x42\x31\x75\x72\x05\xd9\xff\x15\x2b\x10\xbb\xe9\x6b\x83\x50\x24\x64\xd5\x2c\xe8\xa6\x91\x12\x6f\xb4\x93\x56\x4a\xbc\x6e\x9a\xdc\x88\x2e\x47\x5f\x31\x72\x30\x33\x84\x79\xda\xd2\xa7\x21\x87\x90\xaf\xb8\x7d\x1d\xc7\x60\xcd\xcf\xa6\x90\x24\xd7\xba\x16\x30\x1c\x20\x86\x9d\x21\x30\x1c\x78\x68\x89\x87\x80\x19\x13\x96\xf8\x5f\xbe\x59\xe9\xee\x40\x30\x9a\xba\x46\x5c\xb9\xf9\x1f\x1b\x28\xf1\x20\xd6\x35\x4d\x3c\xda\xf0\x3b\x43\xc1\x84\xb1\x01\x66\xcc\xd4\x35\x8d\x61\x1e\x31\xaa\x6b\x89\xae\x39\xd8\xc5\x2c\x13\x3d\x30\x75\x4d\x48\xf5\xfc\x9b\x39\x5f\x71\x29\x55\x9e\x8e\xe3\x55\xe0\x21\x9e\x07\xc5\x1a\xb3\x9b\x10\x92\xc4\xd4\xd3\xa3\xa7\x07\xdc\xdf\x83\xf9\x64\x3a\x39\x58\xc0\x7c\x31\x5e\x4c\x3e\x4f\x66\x0b\x05\xaf\x38\xce\x8f\x1e\x62\x0f\x2f\xb9\x3c\xb5\xf0\x02\x0c\xfc\x2f\xdf\x60\xef\xf0\xa3\x59\x55\xa4\xc8\x46\x82\xc4\x00\x4b\x50\x97\xc9\x17\x0f\x5b\xc9\xf3\xa0\x54\x3d\x5f\x21\x14\x66\x1f\x61\x2e\x1d\xce\x59\xb4\xe4\x0a\x39\xd6\xa7\x88\x2e\xe7\x91\xeb\x92\x07\x48\x92\x81\x5e\xd1\x94\x25\x47\xee\x03\x18\x30\x1c\x46\x1e\x87\xbd\x8a\x1c\x15\x27\xcc\x98\xcf\x4c\x88\xf5\xaa\x90\x4a\xfc\xa5\xb9\x5a\x2a\xc4\x86\xb7\x55\x73\x12\x3d\x0d\x62\x86\x04\xeb\x2c\xc2\xec\xf1\xdc\xbf\x7f\x18\xc4\x71\x63\x64\x52\x09\xf3\x25\xa2\xa9\x7d\x05\x3e\x6c\x1b\xc2\x3b\xcf\x9a\x30\x36\xf3\xcf\xfd\xfb\x50\x22\x45\x81\x42\x00\x67\x28\xfe\x48\x74\xd4\xf1\x54\xa6\xaa\xa2\x4a\x1e\x41\x6e\x2a\x75\x4a\x4a\x2d\x07\x0a\x88\x8c\xa7\xd3\x75\x98\xd4\x71\x32\x42\x9e\xd7\x15\x2b\xc8\xf3\xfa\xe2\x65\x8d\xa5\x1d\x33\x05\x71\x81\x9b\xc0\x8b\x18\xf2\xc8\x9f\xf8\x45\x10\x74\x79\xb5\x1b\x86\xd6\x80\x32\x97\x76\x0f\xde\x66\x01\x69\x81\xcb\x2b\xc7\xfa\x74\x7c\x34\x39\xec\x10\xed\x00\xdd\x60\xa7\x6b\xbc\x25\x71\xdf\x88\xd7\x98\xda\x63\x5e\x26\x17\xa7\x3a\x15\xcf\x7d\x43\x4f\xdc\xdc\xd1\x42\x45\x33\x12\xf2\x56\x22\x54\x89\x7e\xba\xe4\xfe\x2d\xa6\x10\x72\x46\xe8\xcd\x10\x3c\xb2\x22\x1c\x08\xe5\x6d\x90\x51\x3c\x7e\xc4\x73\xb6\x5e\x20\x92\x7a\x89\x9b\xa9\xb6\x6d\x30\x0c\x88\xe5\x6a\xc9\x22\x1b\x8c\x77\x86\x5c\x4c\xf4\x0e\xb8\xab\xba\xa0\xb1\x9f\x0c\xb3\x01\x22\x55\x93\x9e\x78\x2b\x3a\x0d\xa3\x8e\x50\xc9\xe3\xe1\xbc\xfa\x89\x93\x28\xff\x09\xee\xc2\x49\x36\xb8\x2b\x6e\xcd\x03\x46\x28\x4f\x69\x2f\x25\xdd\xe8\xfd\x95\x25\x5c\x2b\x43\x7e\x42\x55\x96\x08\xb9\x6b\xd0\xcf\x45\x35\x67\xc1\xc1\xc9\xc5\xac\xd6\x13\xcb\xf0\x5f\xfa\x11\xdd\xde\x13\x25\x55\x67\xc0\xb7\x52\xd7\x64\x7f\x45\x61\x67\xc9\x6b\xb4\x0d\x19\x54\xd6\x2f\x5c\x71\x20\x9e\x5f\xa8\xd5\x12\xca\x77\xac\x8d\x1d\x9b\xa8\x68\x9f\x6f\xd7\xfb\x67\x1d\x85\xef\x9e\x59\x21\x0b\x6f\x15\x3e\x15\x5b\xbf\xa2\xf0\x85\x3c\xf5\xc5\xf7\xbd\x75\x57\x69\x32\x34\xf9\x20\x29\x27\xc9\x2e\xd1\x79\x5e\xff\x70\x91\x17\xaa\xa9\xb5\xec\x16\x69\x02\xfc\x2c\x3c\xd7\x94\x35\x87\x93\xe9\x64\x31\x69\x19\x25\x1d\xec\x61\x8e\xb7\xa6\x8d\x22\xeb\x8c\xee\x3a\x79\x03\xc0\x2b\x84\xc2\xec\x43\xb9\xb0\x6b\xe0\x94\x58\x67\x63\xe4\x3a\x0c\x91\x79\x58\x73\xa8\x4f\x1e\xf0\x72\xb7\xd8\xd5\xb0\x5d\x05\x10\xc3\xa1\x25\xe6\xc8\xb1\xeb\xe2\x25\xc7\xce\xe0\x39\x22\xbb\xe3\xa2\xdb\xfc\x98\x46\xa7\xcb\xfc\x58\x90\xf6\x05\x49\xb7\xf9\xb1\x46\x5c\x01\xcb\x0b\x8d\x90\xca\x71\x84\xf2\xff\xff\xef\xef\x46\xcd\xa6\x6a\x58\x42\x4c\x4f\xc0\xb4\xd4\xd6\x54\x68\x13\x50\x8e\x67\xf3\xc9\x79\xdb\xbb\x28\xa1\x21\x66\xdb\xfb\xae\x22\xeb\x8c\x8d\x76\xf2\x9a\x74\x86\xee\x47\x3d\x35\x6c\x66\x69\x40\x5f\x85\x50\x36\x62\x86\xd1\x5a\x99\x7a\x8d\x77\xdc\x54\x2f\x8a\xb8\x3f\x22\x94\xf0\xdc\xca\x51\xfb\xfc\xd9\xf2\x26\x2c\x78\x89\x0b\xd4\xe7\x60\x9d\x4b\x08\x7c\x7c\xec\xdd\xdc\x8f\xa5\x5d\xe1\x96\x77\xe4\x1d\xde\x83\x24\x10\xbd\x10\xf7\xcf\xad\xc2\xb4\xde\x76\x04\xb7\x95\x72\x3c\x45\x21\x57\xd2\x8e\xdb\xb3\xab\xf5\x54\x62\x30\x58\xff\x3e\xf2\xf1\x51\x3c\x96\xbc\x3f\x08\x6e\xcd\x4a\xf2\xd5\x52\x71\x1d\x8a\xd4\x1f\x29\x05\x5d\x33\x2f\x67\xe8\x9b\x83\x5b\x19\xdb\xb2\xb1\xbf\xd6\x6d\xcc\xed\x19\xba\xce\xf2\xec\x5c\x7d\x8d\xa4\xfc\x23\xab\xdd\xbd\x40\x9c\xe2\xa8\x82\xaf\x96\x21\xb8\x56\xd7\x0a\x17\x9c\xa3\xfb\x4e\x5e\x48\xb5\xf7\x2a\x5a\xff\x16\xa4\x7f\x54\x41\x6a\x82\x5c\x73\xfe\x3d\x0b\x7c\x7d\x51\xf6\x6a\x19\xb6\xa9\xd6\x94\x0a\x40\x76\x51\x41\x5c\xb0\x66\x18\x3b\xe1\xcc\xbf\x97\x48\xa1\xfe\xbd\x88\xde\xcc\xbf\x1f\x98\xb5\x6b\x0d\x75\x33\x62\x8d\x23\xee\x87\x90\xde\x88\xe4\xf7\x3d\x1f\x6c\x51\x17\xad\x63\x4a\xf8\x96\xcb\x97\xfd\x3d\xb8\x38\x3d\x1c\xb7\xbe\xe6\x45\x81\x83\x3a\xbc\xe6\x29\xb2\xce\xb5\xba\x4e\xde\x50\x9d\x2b\x84\xc2\xec\x0b\xb9\xb0\xd3\x6b\xde\x10\x94\xd4\x10\x2c\xcb\xaa\x48\x52\xc2\x9f\x35\x70\x95\x0c\x2d\x61\x6b\x94\x7d\xd3\xeb\x5f\xc5\x04\x57\x63\x21\x13\x58\xb4\x2c\x6b\x63\xcd\x4a\x3f\x21\x36\xdc\x35\x64\x9f\x12\xd7\x6f\x1c\xd4\xd7\xc4\x12\x6f\x5e\x1c\x36\x71\x54\x10\x5f\xb0\x6e\x29\x7f\xa9\x23\x1a\x2a\x60\x76\xa6\x5d\x8d\x68\xaf\x7d\x2f\x73\xc2\x97\x9e\xcd\x52\xf4\x74\x9f\xcd\xd6\x19\xfa\x66\x5e\x9f\x09\xa9\x81\xe5\xc7\x65\xe3\xb3\xd2\x4e\x44\xab\xa1\xaa\x57\x90\xd6\x73\x4a\xda\xa4\x50\x5e\x4a\x7f\x47\x0c\xee\x42\xb8\xbc\x52\x1f\xfe\xd5\xc2\x77\xe4\x45\x58\x2c\x12\xca\x31\x73\xd1\x12\xc7\x89\xae\x85\x18\x53\x01\xcf\x15\x0a\x2e\x15\xb5\xd8\x17\x3b\xc8\x71\x24\x8b\xd8\x15\x2a\x06\x54\x14\xf5\xec\x2a\x41\x6d\x95\x44\x99\xb2\x77\x13\x17\x88\xf3\x30\x04\xff\x56\xb0\x09\xe1\x97\x82\xed\xea\x27\xf0\x6f\xc5\xbe\xa6\xac\xb8\x24\xce\xc3\x15\xd8\x4a\x8a\xae\x89\xc6\xae\x15\xc4\x60\xcb\xef\xf5\x8a\xd4\xcc\x53\xe2\x2e\x04\x1b\x50\x10\x60\xea\x0c\xee\xc2\x21\x48\x7b\xfe\x0b\x06\xd8\xf0\x8b\x61\xea\x99\xec\x82\x48\x3d\xa7\xb6\xca\xf1\xe1\x05\xda\x5b\xe6\x96\x81\x21\x00\x72\xe0\x7b\xd1\x8a\x42\x92\x18\xc3\x72\xa7\x2b\xe4\x08\x16\xd7\x67\x22\xfc\x2a\x5c\xb2\x16\x48\xa1\x19\xd6\x84\x5f\x72\xa9\x6a\xd1\x5a\x4a\xb9\xa2\x8d\x0e\xcc\x8c\xd3\x52\x14\xa6\xba\x7d\x10\x1e\x09\xf9\x8a\x4b\x3f\xcb\xa0\x84\xd6\x79\x7a\x7d\x7f\x1d\xc7\xd6\xfc\x6c\x9a\x24\xd7\xc3\xdc\x7b\xc6\xd3\xd3\xd3\xd9\xfc\xe9\xe9\xc9\x28\xd6\x32\xbe\xdf\x7c\x42\xa5\x4b\x8d\x21\x18\xe6\x10\xde\x9b\x3f\xfe\xf7\x06\x22\x11\x84\xf4\xb5\xd8\x55\xc7\xa5\xf2\xa7\xa7\x51\x92\x98\xda\xa6\xdf\x29\xe4\x29\x55\xba\x43\xfb\x2b\x00\x00\xff\xff\xd8\x3a\xc6\xd2\xfb\x22\x00\x00")

func golangFuncsTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangFuncsTmpl,
		"golang.funcs.tmpl",
	)
}

func golangFuncsTmpl() (*asset, error) {
	bytes, err := golangFuncsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.funcs.tmpl", size: 8955, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\x5d\x8f\xdb\xb8\xd5\xbe\x16\x7f\xc5\x59\xe3\x4d\x20\xcd\x78\xe8\x5c\xbc\xe8\x85\xb3\xd3\x22\x8e\xd3\x45\x81\x74\x26\x9d\x71\x50\x14\x41\x90\xd0\xd2\xb1\x87\x35\x45\x3a\x14\xe5\xb1\xeb\xea\xbf\x17\x87\xa4\x64\xf9\x63\xb7\xe9\xb6\x05\xea\x8b\x91\x48\x9e\x8f\xe7\x7c\xf0\x21\x35\xa3\x11\xbc\xf9\x38\xbb\xff\xe9\xdd\xdd\xbb\x87\x37\xb3\x77\x53\x98\xfc\x05\x96\x66\xbd\x5a\x72\xa9\x47\xd5\x5a\xe4\x58\x1a\xbd\xc2\xdd\xd2\x8c\x8a\xf9\x96\x6f\x5e\xb1\xd1\x08\xa6\xf7\x70\x77\x3f\x83\x77\xd3\x3f\xcc\x38\x63\x6b\x91\xaf\xc4\x12\x61\xbf\x07\xfe\x21\xbe\x37\x0d\x63\xb2\x5c\x1b\xeb\x20\x65\xc9\xa0\x10\x4e\xcc\x45\x85\xa3\xea\x9b\x1a\xb0\x64\xb0\x28\x1d\x3d\x2a\x67\xa5\x5e\x56\xfe\x75\xa7\x73\x7a\x3a\x59\xe2\x80\xb1\x64\xb0\x94\xee\xa9\x9e\xf3\xdc\x94\xa3\xbf\x96\x46\x5a\xa3\x49\x79\x3b\x60\x19\x63\x1b\x61\xe1\xcf\x56\xac\xdf\x59\x0b\xb7\xb0\xa8\x75\x9e\xa2\xb5\x80\xd6\x1a\x9b\x85\x07\xec\x2d\xba\xda\x6a\x1a\x35\x5e\xe1\xbd\x59\x2e\xd1\x06\xe9\x85\xb1\xa5\x70\x10\xfc\x0f\x41\xd8\x65\x05\x9c\x73\xa9\x1d\xda\x85\xc8\x71\xdf\x64\x5e\xe7\xce\x3c\xc3\x2d\x10\x26\x7e\x67\x9e\x19\x23\x65\x50\x66\x89\x7d\x7f\x7b\x96\xc8\x45\x6b\xfe\x87\x5b\xd0\x52\xc1\xcb\x97\xb4\xda\x8e\xf6\x2c\x49\xc2\x7a\x3a\x08\xe8\x72\x65\x2a\xa9\x97\x50\x39\xe1\xb0\x44\xed\xc6\xf0\x62\x33\x18\x92\x52\xc6\x92\x86\x35\x8c\xe5\x46\x57\x0e\x1e\xf3\x27\x2c\x05\xdc\xc2\x57\xb6\xdf\xdf\x00\x8f\xe3\x9b\xa6\x61\x5f\x19\xdb\xef\xc1\x0a\xbd\x44\xe0\x8f\xce\xd6\xb9\xab\x28\xf1\x6e\xb7\x0e\xc5\xb8\x13\x25\x55\x82\xc2\xac\x73\x07\x7b\x6f\x21\xca\xff\x5e\xa2\x2a\xbc\x78\xd2\x17\xa5\xf7\x19\xe9\xb7\xef\x62\x49\x32\xa4\x88\xba\xa0\xd7\x86\xf9\x91\x5c\x00\xff\xb8\xf6\x75\x55\x18\x44\xe0\xff\xa2\xa3\xf1\x6d\x67\xb0\x03\xd3\xae\x35\x8d\xd7\x42\xe8\x72\x4d\xd9\xc9\x8d\xaa\x4b\x4d\x3a\x69\x16\xab\xc2\x92\x8d\x50\x35\x8d\x7b\x55\x61\xc9\xda\xca\x8d\x70\x78\x64\x31\xcd\x58\xd3\x4b\x45\x07\xeb\x10\x23\x89\xd7\xeb\x03\xbc\xb5\x95\xda\x2d\x60\xf0\xa2\x7a\x51\x0d\x20\xcd\x45\x89\xaa\x30\xcf\xba\x35\x9a\x5d\x08\xa0\xd3\x3f\x4e\x53\xe8\x89\x23\x3c\xbd\x84\xa6\x9b\xbe\x6c\x76\x31\x13\x7b\x88\xad\x7a\xe2\x25\xdd\x64\x10\xcd\xa7\xf5\xe9\x62\x06\x17\x72\x76\x30\x35\x20\xaf\x6f\xbd\x04\x34\xcd\xe0\x97\xec\x5c\x48\xf3\x11\xa4\x16\x7c\x5a\xff\x22\x9c\xcb\x85\x81\xfd\xa1\x79\x6e\x9a\xcb\xef\xc4\x15\x3e\xcb\xd3\xc9\xa1\x55\x93\x2b\xda\xed\x7c\x3a\x61\x2c\x51\xb6\x86\x2b\x65\x6b\xea\x3d\xef\xff\x7e\x8d\x3a\xad\x4c\x6d\x73\xec\xf6\xb0\xb2\xf5\x97\x4a\xfe\xcd\x37\x56\x06\xe9\xd5\x74\x32\xec\x6d\xd0\x62\xee\x47\x54\x7b\x6f\xf7\xad\xd1\x1a\x73\x97\x52\x7c\x53\x29\x14\xe6\x0e\xfe\x7e\x68\x8b\x6f\x03\x68\x9a\x21\x04\x17\x99\xdf\xdf\x27\xdb\x39\xe6\x47\x4b\x35\x6c\xa9\x28\x6d\x37\x2f\x6b\x57\x5f\x4e\x27\x24\x3b\x9d\x8c\xa1\x98\x0f\x59\x42\x91\x8c\x41\xe3\xf3\xfb\x87\x8f\x29\x41\x6a\x41\x67\x43\x96\x34\x43\xb2\xd6\xc5\x98\x16\x73\xb8\x9a\x4e\x32\x78\xab\x4c\x45\xf5\x39\xa1\x9c\x62\xce\x95\xad\xf9\x87\xda\x2e\x31\xcd\x3a\x97\x2d\x96\x62\xce\xa7\x13\x1e\x75\xb3\x73\xab\x6b\x8b\x6b\x61\x31\xad\x5c\xd9\xf2\x60\x06\x69\x9c\x2d\x20\x64\xff\xd1\x95\x6e\x08\x16\xd7\x8a\xf6\xa9\x67\xce\x2c\xe4\xf1\x80\x03\xb5\xb3\xbb\x2e\xb9\x11\xd5\x4f\xe8\xbc\xe5\x7f\x9a\x3a\xff\x07\xad\xa5\xb4\xb5\x0b\xde\x62\xf4\x1d\x7c\xc2\xbe\x35\xfc\x10\xb0\xa4\x5e\x26\x83\x9f\xcb\x99\x32\x4b\xd2\xef\x47\x17\x58\x9e\x73\xde\x6f\x74\x1f\xc1\x68\x04\xb3\xfb\xe9\xfd\x18\x2c\xea\x02\x2d\x78\x0f\x4f\x46\x15\x68\xab\x0b\xd4\xde\x27\xf3\xea\x9b\x1a\xc3\x00\xae\xc1\x3b\xba\x86\x81\x77\x72\xeb\xa9\x9c\xde\x5a\x2e\x3f\x46\xf7\x5e\x56\x6e\x46\x04\x55\x51\x59\x3d\x55\x55\xf0\xe9\x73\x8b\xf3\x28\xbf\x00\xe0\x27\x7c\x6a\x1f\x91\x1a\x35\x7d\x19\x54\x86\xf0\x95\xda\xf7\x60\xed\xf1\x4f\xef\xa1\x69\xbe\x66\x5e\x29\x26\xb3\x15\x3d\xea\xd1\x86\x9d\x42\x9a\xa2\x42\x87\x6f\x94\xf2\x88\x8c\x13\x8a\xd2\xf4\x9b\xff\x3f\x41\xd3\x3b\x40\xe2\x81\xf3\x80\x1b\xb4\x95\x27\x42\xf2\x2a\x17\xa0\xfb\xcd\x10\xec\xee\xf7\xb0\x56\xb5\x15\x8a\xf6\x67\x47\x8d\xd9\xeb\x10\x59\x9b\x56\x88\xbf\xe0\xfe\xfa\x16\xb4\x9f\x6a\x00\x55\x85\xbd\xf5\x36\x32\x12\x3b\x09\xcc\xcb\xf7\x89\xe5\x5c\x3e\xf6\x8b\x27\x9c\xd9\xf6\x8c\x70\x66\x5b\xda\x5a\x94\x94\xf3\xba\x79\xda\x21\x6e\x99\x6d\xfb\xdc\xe2\xb6\x47\x11\x4f\xf8\x04\x97\x52\x6f\xd3\x7f\x83\x37\x66\x5b\x92\x9d\x6d\xc7\xe0\xb6\xc4\x1b\xc5\x3c\x32\xc8\x69\xc3\xbb\x2d\x5c\xcd\xb6\x19\xbc\x35\x65\x29\xdd\x39\x4b\x9c\xb0\x82\xa3\x00\x79\x2b\x9c\x9d\xdb\x79\x30\x4a\xcd\x45\xbe\xfa\x4e\x4b\x07\xf1\x0b\xb6\xfe\x2b\x3d\xe5\xb6\xff\xbb\x3d\x75\x1c\xfe\x7f\x8c\x61\x5b\x95\x4e\x6e\x18\x19\xc1\x6d\x79\x31\xe7\x7d\x3f\xbf\x8a\x6f\x5d\x80\xb1\xed\xb0\x65\x3d\x4f\x17\x43\xfb\x97\xe8\x35\xa0\xec\xab\x74\xb2\x59\xb7\x13\x3d\x9f\xf7\x36\x23\xc9\xf6\x52\xc4\x58\xa2\x71\xeb\x86\x94\xd4\x0d\x5c\x79\x69\x96\xac\x70\xd7\xd6\xaf\xbd\x33\x5a\x5c\x54\x71\x4a\x6a\xd7\x99\xa7\x1b\xc4\xc1\x78\x59\xb7\x5a\x3b\x9d\xf3\x3f\xd6\x0e\xc3\xa6\x0f\xbf\xee\xe2\x91\xe4\x62\x2d\x72\xe9\x76\xde\x54\x62\x8d\x71\x5e\x20\x7a\x97\xba\xc0\x2d\x8d\x4b\xb1\xfe\x14\xfc\x7f\x8e\xc8\x1a\x46\x5f\x49\xe1\x9c\x8f\xad\x52\x81\xd0\x20\xb5\x74\xd2\x77\x6c\x41\x90\x78\x48\x6b\x77\x1f\xe8\x5c\x0f\xa1\xef\x3a\xf3\x97\x1f\x02\xae\x68\x07\xbc\x54\xb6\xde\x47\x4e\x08\xbf\x70\xb7\x68\x55\xc6\x9d\x32\xcd\x7a\x94\xe3\x00\x73\x85\xe9\x19\x56\x7f\xf3\x60\x89\xe2\x14\x1e\xa7\x24\x03\xb9\xf0\xc3\x6e\xda\x67\xbd\x37\x1d\x1b\x47\xc5\x40\xa5\xae\xd0\xba\xf8\xa8\x00\x41\x2c\x1c\x5a\x10\x6e\x08\x52\xe7\xd6\x7f\xdf\x54\xa0\xb8\x42\x1d\x43\x4e\x95\x8f\x29\x8b\x3a\x29\x0e\x41\xb8\x58\x57\xdf\x34\x9a\x22\x15\x01\x10\x4b\x44\x87\x0c\x59\x82\x2d\x1c\xe1\x68\x10\x17\x34\x4b\x74\xbb\x80\x11\x97\xc5\xd2\x6c\x30\x3e\x08\xd7\xc2\x9a\x12\x24\x61\x91\x95\x1b\x42\x81\xc7\xe0\x4e\xb0\x05\xbd\x14\xfb\xb8\x82\xf3\x0e\x4d\xc4\x17\x9e\x9d\x7b\xff\xd2\xc7\x26\x15\x8c\x46\x20\x36\x46\x16\x50\x62\x69\xec\x0e\x14\x8a\x55\xd5\x0b\xe6\xe7\x65\xba\xdd\xd7\xe2\xc2\x8d\xcc\x5d\x7a\xdc\x21\xe1\x1b\xb4\x9b\xfb\x11\x5e\xf5\xb6\x7e\x38\x5b\x9c\xf9\xe2\x35\x29\xb3\x0a\x75\xaa\xb8\xef\x8d\x0c\x6e\x3a\x3d\x96\xe4\xb5\xb5\xa8\x5d\xe8\xb3\x58\xed\x85\xb1\x20\x69\xe6\xd5\x6b\x90\xf0\x23\xb4\x86\x5e\x83\xbc\xbe\xf6\x6e\x5a\xad\x5b\x88\x6f\x31\x03\x1e\x53\xbb\xd6\x59\xf4\x2a\xc9\x5a\x68\x99\xa7\x83\xb0\x8b\x4c\xed\xc0\x2c\xe0\xf9\x49\xe4\x2b\x0e\x96\xb8\x30\x37\xba\x90\x4e\x1a\x5d\xfd\x6e\x90\xb1\x84\x9a\xb4\x67\x8e\xfb\x8d\xfe\xdb\x18\x66\x92\x1b\xed\xa4\xae\x31\xca\x8d\x46\xf0\xfc\x64\x04\xcc\xcd\x0e\x64\x05\xee\x49\x56\x50\xd5\x73\xa7\x90\x83\xe2\xb1\x2d\xe6\xca\x3c\x57\x20\x9e\xc5\xae\x33\xea\xeb\x25\x74\x11\x4c\xf4\x63\xe1\x30\xaf\xdd\x91\x5c\x28\xdc\xb3\x54\x0a\xe6\x08\x65\x4d\x1f\xf2\x05\x38\x03\x73\x3c\x57\x07\xca\xa1\x7b\x42\xf0\x1e\xa4\x43\x2b\x28\xb4\x1f\x58\xe2\x79\xed\x4b\x2f\xed\x7d\x1f\x8c\x3e\x19\x22\xde\x34\x2e\x50\x2e\x0a\x7f\x02\xb6\x15\x1c\x76\x3a\x2b\xdc\xd1\xb2\xff\x07\x45\x3b\x47\xf4\x79\xf8\x0e\x38\x2a\x56\xdf\xf5\xd1\x45\xb5\xed\x34\xba\xc6\x13\xc9\x76\xa7\xd7\xd5\xe1\xb6\x1f\x0f\x27\xc5\xcb\x9a\xbf\x37\x74\x05\x60\x49\x81\x0b\xb4\xe0\xa7\x3e\x6a\x15\x26\x59\x82\x43\x30\x2b\xdf\x75\x01\xef\xa7\x15\xee\x3e\xfb\x7e\x35\x2b\x5f\xbe\x2e\x44\xf4\xe8\xf9\x81\x14\x62\xc7\xd0\x34\xfa\x92\x5f\x5f\xb3\xc3\x89\x16\x8f\x27\xdf\xdd\xe1\x5c\x89\x97\x04\x45\x27\xce\x87\x70\x9a\x6d\x53\x3f\x7a\xc0\xb9\xd4\x05\x45\x93\xfd\x8a\x7b\x19\x12\xfb\xf9\xd8\x49\x96\x52\x3a\xf6\x57\x7e\x62\xd8\x15\xee\x88\x5f\x57\xb8\x6b\xa9\xf4\x12\xfe\x7e\xec\x2d\x8f\x75\x01\x1d\xc7\x73\x56\x86\xee\xa3\xa7\xcf\x44\xdf\x93\x78\xef\xe1\xe6\x86\x84\x03\x69\x28\xde\x6e\xf5\xec\xdc\x4d\xfc\x94\xfc\x4e\xe3\xad\xc9\x57\xe1\x73\xe2\x1f\x01\x00\x00\xff\xff\x7b\x2d\x93\xf1\x48\x14\x00\x00")

func golangHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangHeaderTmpl,
		"golang.header.tmpl",
	)
}

func golangHeaderTmpl() (*asset, error) {
	bytes, err := golangHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.header.tmpl", size: 5192, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x4d\x8f\xda\x38\x18\x3e\xc3\xaf\x78\x55\x71\x60\xd0\x90\xde\x77\x55\x8d\x32\xe0\xe9\xa6\x0d\x0e\x93\x98\xad\xe6\x98\x12\x53\xbc\x4a\x1c\x36\x18\x8d\x90\xf1\x7f\x5f\xd9\xce\x27\x4d\xd8\xe9\x6a\x0e\x7b\x73\xec\xc7\xcf\xfb\xbc\x9f\x8e\x94\x1f\x67\xb0\x0e\x22\xf2\x39\x44\xd1\xb3\x0f\x11\x71\x09\x5a\x21\x4c\x80\xa0\xd5\xda\x77\x09\x8a\x00\x66\x1f\x95\x1a\x8f\xa5\x9c\x43\x42\x77\x8c\x53\xf8\x70\xdc\xee\x69\x16\x7f\x80\xb9\x52\x66\xbf\x88\xf9\x0f\x0a\x0e\x89\xbf\xa7\xf4\x08\x4a\x8d\x17\x21\x72\x09\x02\xe2\x3e\xfa\x08\xa4\x04\x07\xc7\x19\x05\xa5\x60\xda\xc2\x4f\xd8\x3d\x4c\xb6\x79\x0a\xbf\x7d\x02\x67\x91\xa7\xa7\x8c\x9b\xcb\x52\xb2\x1d\x4c\x98\x52\xf7\x52\x52\x9e\x28\x35\x92\x12\x5e\x99\xd8\x5b\xb4\x36\x3a\x6a\x73\xea\x35\x39\x1f\x68\x75\x32\x07\xb6\x03\x07\xe7\x02\x9f\xd2\x54\x03\x70\x40\x00\x6f\x7c\x1f\xf4\x19\xe5\x49\x17\x18\xd2\x1d\x2d\x28\xdf\x1a\xae\x10\x3d\xa1\x10\xe1\x05\x8a\x0c\x6d\x7d\x66\x7d\x03\xa5\xa6\xdd\x6d\x2b\x1b\x94\xba\x83\x00\xc3\x12\xf9\x88\xa0\xab\x9b\x01\x5f\xd2\x94\x0a\x7d\xb9\x6d\x7f\x78\x6d\x54\xad\x0b\x96\xc5\xc5\xf9\x2b\x3d\xeb\x90\xdc\x8f\xd6\xa1\xb7\x72\xc3\x17\xf8\x8a\x5e\x60\x3a\x10\xc3\xce\x9d\x26\x8a\x50\x86\x51\x4a\x0b\x35\x2b\x6d\x4e\xa9\xbb\x6b\xd3\x65\x26\x37\x9c\xfd\x7d\xa2\xd6\xf2\x06\x7b\xcf\x1b\x34\x68\xf4\x97\x4d\x29\x35\xbe\xfb\x7d\x5c\xef\xb7\x56\x9d\x1a\x4b\x72\xc1\xe3\x8c\x56\x45\x06\x75\x06\x1c\xfd\x51\xc7\xbd\xe3\x40\x87\x20\xa5\x3b\xf1\x57\xce\xb8\x65\xf0\xd1\x13\x81\x2f\x81\x87\x6d\x76\xd8\x8f\xbd\xa8\x19\x75\xea\xa4\x04\x41\xb3\x43\x1a\x8b\xb6\x6d\xc7\xa7\x3b\xa1\x11\x9f\x86\x00\x86\xe9\xa6\x8e\x6d\xce\x13\x26\x58\xce\x9b\x7e\xd1\x09\xb6\x1e\x2c\xb2\x43\x5d\xd0\x7d\xf4\x35\xaa\x56\xd2\x78\xaf\x77\x83\x03\x2d\x62\x91\x17\xfa\xe4\xe1\xa7\x9a\xea\xd8\x29\x43\xf6\x26\x6b\x76\xd1\x6f\xb3\x3c\x6b\x5b\x7e\x23\x5d\x6f\xac\xba\x3a\xbd\xb7\x08\xf4\x1a\x65\x1e\xd6\x85\xd9\xc2\x1e\x69\x4a\xb7\xa2\x0d\xf5\x78\x4f\xa1\x0f\xe4\xea\x75\x4f\x0b\x7a\x3d\xd7\xca\x72\xe7\x89\xad\xf7\x4a\x1f\xdb\x01\xcf\x05\x4c\x18\x28\xf5\xed\x0f\x14\x9a\xbe\xa7\xe9\xd1\x54\x94\x8b\x97\x50\x17\x76\x47\x60\xab\x1c\x2c\xe9\xad\x61\xd0\x9d\xba\xc6\xb5\xf9\xeb\x3e\x16\x75\x57\x4c\x84\xa9\x61\x2d\xac\xaa\xe6\x2a\xa2\x29\xe5\xe0\x7c\xdb\xc7\xa2\x56\xdc\x72\x47\x93\x98\x5b\x06\x60\x24\x9a\x1e\x06\xdb\xc4\x8d\xf0\xd2\x80\x6d\x3b\x7b\xad\xd5\xd4\x56\xac\xf6\xb9\xb2\xd1\xe0\x67\xbf\xe2\x95\x75\x28\x42\x3e\x5a\x10\xe8\x49\x68\xe9\xb5\xa3\x14\x3c\x85\xc1\x0a\xda\x03\xc1\x8e\xf2\x72\x72\xe9\xc2\xf8\x92\x33\xfb\x92\x8c\xba\x75\xd4\x4c\x04\xa7\xbe\xf6\xd3\x73\xb0\xa8\xf2\xd3\xc7\x50\xd6\xc7\x35\xa8\x97\x28\x28\x12\x5a\x3c\x9e\x2d\x4b\x10\x2e\x51\x08\x8f\x2f\x43\xad\x52\x82\x9b\xb9\x06\x6e\xb4\x18\x20\xf6\x59\xc6\x84\xa5\xf5\xbd\x95\x47\xe0\xa1\x0b\xbc\x31\x89\x4e\xbc\x1b\x69\xb3\x33\x9d\xdd\xfd\xdf\x83\xfa\x6f\x3d\xf1\x3d\x3e\xb6\xda\xb6\x17\x99\x98\x47\xd8\x82\xca\x77\x7a\xc0\xe9\x7e\xc1\xef\xa3\x97\xf1\x23\x2d\xca\x1c\x78\x38\x42\x21\x01\x0f\x93\x60\x50\x85\xfd\x29\x32\xb1\x1c\x0d\xbd\xc0\xcd\xaf\xd3\x70\x17\x5f\x3f\xc6\xf0\xa7\xeb\x6f\x50\x34\x35\xae\xfd\x27\xd6\x87\xd6\xcb\x5e\xfb\x6e\xfe\xa0\xc8\x26\xc4\x1e\xfe\x0c\xb3\xe1\x30\x9c\x0e\x49\x5c\x25\x63\xb3\x5e\xba\xe5\x4f\x53\xfd\x20\x47\x88\xc0\xe5\x72\x79\x8e\x2e\x97\xcb\xbb\x24\xe5\x86\xb0\x7f\x02\x00\x00\xff\xff\x5f\xa3\x67\x2b\x04\x0b\x00\x00")

func postgresTmplBytes() ([]byte, error) {
	return bindataRead(
		_postgresTmpl,
		"postgres.tmpl",
	)
}

func postgresTmpl() (*asset, error) {
	bytes, err := postgresTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.tmpl", size: 2820, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"golang.funcs.tmpl": golangFuncsTmpl,
	"golang.header.tmpl": golangHeaderTmpl,
	"postgres.tmpl": postgresTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"golang.funcs.tmpl": &bintree{golangFuncsTmpl, map[string]*bintree{}},
	"golang.header.tmpl": &bintree{golangHeaderTmpl, map[string]*bintree{}},
	"postgres.tmpl": &bintree{postgresTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

