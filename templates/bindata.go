// Code generated by go-bindata.
// sources:
// golang.count.tmpl
// golang.delete-all.tmpl
// golang.delete.tmpl
// golang.footer.tmpl
// golang.get-last.tmpl
// golang.has.tmpl
// golang.header.tmpl
// golang.insert.tmpl
// golang.misc.tmpl
// golang.select-all.tmpl
// golang.select-paged.tmpl
// golang.select.tmpl
// golang.update.tmpl
// postgres.tmpl
// sqlite3.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _golangCountTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x90\x31\x4f\xc3\x30\x10\x85\x67\xdf\xaf\x78\x74\x40\x8e\x94\x46\x0c\x88\x01\x29\x03\x42\x6c\x2c\xa5\x03\x63\xea\x26\x97\x28\xa8\xb5\xa3\x8b\x23\xa8\xac\xfb\xef\x28\x69\x45\x11\x1b\x83\xa7\x77\xef\xfb\xce\x97\xd2\x1a\x0d\xb7\xbd\x67\xac\xc6\xbe\xf3\x2e\x4e\xc2\x2b\xac\x55\xe9\x39\x4c\x3e\xa6\x84\x62\x3b\xb5\x6d\xff\x05\x55\x9b\x12\x06\x27\xee\x88\xe2\x49\xba\x11\xaa\x19\x6c\x3d\x8f\xa1\xf7\xf1\xe1\x3e\x07\x8b\xcc\x2f\x48\x46\x33\x99\x7d\xb3\xa0\xe8\xb7\x66\x1f\x9a\xd3\x0a\xaa\x89\x4c\x1d\xfc\x18\x51\x55\x63\x3c\xc6\x72\xb7\xb8\x36\xaf\x50\xdd\x91\xa9\xaa\x41\x78\x70\xc2\x4d\x8e\xaa\x12\x1e\x0e\xae\xe6\xb3\xe0\xb1\x44\xd8\x7f\x14\x97\xdc\x9e\xeb\x19\x99\xbe\x5d\xe2\x9b\x12\xbe\x3f\x20\x91\x31\xc2\x71\x12\x8f\xbb\x1c\xef\xe2\x86\x17\x11\xcb\x22\x19\x19\x25\xd3\x70\xcb\x72\x25\xdb\x8c\xcc\x0c\x3d\x84\x6e\x1b\x8f\xf1\x02\xcd\x91\x12\x9c\x74\xd7\xff\x12\x01\x58\x34\x25\xae\x2b\x16\x9b\x89\xe5\xf4\x16\x3e\xed\xdf\xf9\x62\x5b\x3b\x6f\x6f\x97\x23\xfd\x73\xc5\x59\x74\x49\x97\x7a\x3e\x77\x48\x29\xa5\x9f\xbb\x7e\x07\x00\x00\xff\xff\xe4\x94\x1b\x5e\xbe\x01\x00\x00")

func golangCountTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangCountTmpl,
		"golang.count.tmpl",
	)
}

func golangCountTmpl() (*asset, error) {
	bytes, err := golangCountTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.count.tmpl", size: 446, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeleteAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x91\x31\x6b\xf3\x30\x10\x86\x67\xdf\xaf\xb8\x2f\x93\x0c\x8e\xf9\x86\xd2\xa1\xe0\x21\xd0\x6c\x5d\xda\x0c\x1d\x1d\xc5\x3e\x19\x15\x47\x32\x67\x99\xa6\x1c\xfa\xef\xc5\xb2\x49\x02\xdd\x62\xf0\xf4\xf2\x3e\xcf\x2b\x49\x64\x8b\x2d\x19\xeb\x08\x37\xa3\xed\x9c\x0e\x13\xd3\x06\xb7\x31\xc2\x2b\xf5\x14\x48\x04\xcb\xc3\x64\x8c\xbd\x60\x8c\x4a\x04\x07\xcd\xfa\x8c\xe5\x8e\xbb\x11\x63\xcc\x51\x35\x7e\x72\x01\xad\x0b\xcf\x4f\x05\x12\xf3\xfc\x7b\xce\x61\x46\x93\x6b\x13\x0b\xee\x3d\x27\xdf\xfe\x24\x85\x40\xd6\x78\x37\x06\xac\xeb\x31\x9c\x43\x75\x4c\xb2\xf7\x37\x8c\xf1\x08\x59\x5d\x0f\x4c\x83\x66\x6a\x0b\xac\x6b\xa6\xa1\xd7\x0d\x2d\x86\x97\x0a\xfd\xe9\xab\x5c\x73\xb5\xd4\x73\xc8\xac\x49\xf1\xbf\x0a\x9d\xed\x51\x00\xd7\x8f\x29\x4c\xec\xf0\x7f\x81\x9f\xac\x87\x3d\xb3\x22\xe6\x1c\xb2\x08\x59\x4b\x86\xf8\xc6\x57\x39\x64\x33\xba\xf7\xdd\x21\x9c\xc3\x8a\x2e\x50\x04\x35\x77\xb7\x63\x43\x62\xcf\xb5\xf1\x3a\xe9\x36\xb8\xdc\x5f\xa8\x51\x7f\x3a\x8f\xec\x4b\xb7\xbb\x28\xaa\xc5\x57\x7e\xf8\xef\x71\x67\x0c\x35\x81\x5a\xf5\x10\x15\xee\xe2\x55\xe0\x6c\x0f\x11\x44\xae\x4f\xf6\x1b\x00\x00\xff\xff\xb5\xbc\xf4\xac\x1a\x02\x00\x00")

func golangDeleteAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteAllTmpl,
		"golang.delete-all.tmpl",
	)
}

func golangDeleteAllTmpl() (*asset, error) {
	bytes, err := golangDeleteAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete-all.tmpl", size: 538, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeleteTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x91\xb1\x6a\xc3\x30\x10\x86\x67\xdf\x53\x5c\x33\xc9\xe0\x98\xce\x85\x14\x02\xcd\xd6\xa5\xcd\xd0\x51\x51\xac\x93\x71\x71\x24\x73\x92\x69\xca\xa1\x77\x2f\x76\x4c\x12\xe8\x16\x81\xa6\xbb\xff\xfb\x7e\x21\x91\x35\x5a\x72\x9d\x27\x5c\xc5\xae\xf5\x26\x8d\x4c\x2b\x5c\xe7\x0c\x6f\xd4\x53\x22\x11\xac\xf7\xa3\x73\xdd\x19\x73\x56\x22\x38\x18\x36\x27\xac\xb7\xdc\x46\xcc\xb9\x44\x65\xe7\x3d\x8b\xc7\x10\xfa\x0a\x89\x79\xba\x81\x4b\x98\xd8\xe4\xed\x0c\x83\x7b\xd1\x31\xd8\xdf\xd9\x21\x50\x34\xc1\xc7\x84\x5a\xc7\x74\x4a\x9b\xc3\x6c\xfb\x78\xc7\x9c\x0f\x50\x68\x3d\x30\x0d\x86\xc9\x56\xa8\x35\xd3\xd0\x9b\x86\x2e\x86\x97\x0d\x86\xe3\x77\xbd\xcc\xd5\x25\x5e\x42\xd1\xb9\x79\xfc\xb4\x41\xdf\xf5\x28\x80\xcb\x61\x4a\x23\x7b\x74\xa6\x8f\x54\xe1\x17\x9b\x61\xc7\xac\x88\xb9\x84\x22\x43\x61\xc9\x11\xdf\x1c\xaa\x84\x62\xc2\xf7\xa1\xdd\xa7\x53\x5a\xf0\x15\x8a\xa0\xe1\xf6\xf6\x76\x98\xf9\x53\x2c\x5e\x6b\xdd\x4a\xd7\xbb\x33\x35\xea\x5f\xe6\xd1\x8e\x5a\x37\x61\xf4\xe9\x4e\xc4\x14\xeb\xcf\xf0\x13\xb7\xce\x51\x93\xc8\xaa\x87\xe1\x70\xb7\xb2\x78\xf0\x15\x9f\xab\x09\x02\x19\x44\xae\xff\xf8\x17\x00\x00\xff\xff\x7c\xd0\xa9\x1e\x30\x02\x00\x00")

func golangDeleteTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteTmpl,
		"golang.delete.tmpl",
	)
}

func golangDeleteTmpl() (*asset, error) {
	bytes, err := golangDeleteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete.tmpl", size: 560, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xce\x41\x0a\xc2\x30\x10\x85\xe1\x75\xe6\x14\x6f\xd9\x0a\xcd\x31\xdc\xb9\xd2\x0b\xa4\xc9\x98\x06\xec\xa8\x49\x84\x48\x98\xbb\x4b\xc1\xee\xba\xfb\xe1\xc1\xc7\x23\xaa\xdf\x17\x63\xe5\xba\x3c\x43\x41\x92\xca\xf9\xee\x3c\xa3\x53\xef\x13\xb2\x93\xc8\xb0\xe7\x8f\xf8\x02\x55\x02\x80\xde\x61\xb7\xde\x76\x96\x80\x49\x15\x00\xe9\x9f\x0a\xf3\xe5\x00\x33\x57\xbf\xf0\xea\x86\x11\xa5\xe6\x24\x91\xcc\xcc\x31\xc9\x50\x1b\x4e\xe5\xfd\x68\xf6\xd6\xc6\xfd\x05\x99\x3d\x94\x7e\x01\x00\x00\xff\xff\xbc\xfa\x73\x3e\xa0\x00\x00\x00")

func golangFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangFooterTmpl,
		"golang.footer.tmpl",
	)
}

func golangFooterTmpl() (*asset, error) {
	bytes, err := golangFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.footer.tmpl", size: 160, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetLastTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x91\x31\x6f\xfa\x30\x10\xc5\x67\xdf\xa7\xb8\x3f\x93\x2d\x41\xa6\xbf\x3a\x54\xca\xd8\x8d\x05\xa8\xd4\x31\x18\x7c\x89\x5c\x82\x6d\x5d\x8c\x2a\x6a\xf9\xbb\x57\x4e\xa0\x90\x46\xca\x60\xdf\xbd\xdf\x7b\x77\x4e\x69\x85\x86\x5a\xeb\x08\x17\x83\xed\x9c\x8e\x17\xa6\x05\xae\x72\x86\x8e\xe2\x5a\x0f\x31\x25\xac\xb6\x14\x2f\xec\xaa\xf7\x6b\x20\xcc\x59\x86\x13\x5a\x17\x5f\xfe\x2b\x94\x29\x61\xd0\xac\xcf\xf7\x1e\xcc\x79\x89\xc4\x5c\x7e\xcf\x0a\x0a\x9f\x9c\x19\x81\xf0\x6c\x76\xf0\xe6\x3a\xfa\x24\x10\x47\xef\x86\x88\x4d\x33\xc4\x73\xac\xf7\xc5\x70\xb7\x59\x63\xce\x7b\x10\x4d\x13\x98\x82\x66\x32\x4b\x6c\x1a\xa6\xd0\xeb\x23\x4d\x0e\xaf\x35\xfa\xc3\x67\x75\xab\xcb\x49\xae\x40\xd8\x76\x2c\xff\xab\xd1\xd9\x1e\x13\x08\x51\x8e\x35\x7e\xb0\x0e\x6f\xcc\x92\x98\x15\x08\xc1\x63\x5e\x10\x19\x84\xa1\x96\xf8\x81\x97\x0a\x44\x21\xf7\xbe\xdb\xc5\x73\xbc\x91\x97\x18\x4e\x0a\x00\x11\x31\x25\xb4\xce\xc6\xa7\x99\xc7\xeb\xc9\xe6\x91\xb8\xda\x5c\x88\xaf\x5b\xff\x25\xc3\x49\x55\xbb\xa3\x76\x65\x5d\xda\x18\xf6\x2d\xca\xb6\xd7\x31\x92\xbb\x43\x14\xe6\xac\x46\xcc\xdf\xfc\x78\xfb\xa6\xc0\xc5\xfc\x9b\xd8\xcf\x16\x3e\x1b\xad\xf4\x4e\x81\x1e\x0a\xcd\xdd\x4c\xe0\x6c\x0f\x19\x52\xfa\x7d\x9b\x9f\x00\x00\x00\xff\xff\xd9\x88\x00\x0e\x08\x02\x00\x00")

func golangGetLastTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetLastTmpl,
		"golang.get-last.tmpl",
	)
}

func golangGetLastTmpl() (*asset, error) {
	bytes, err := golangGetLastTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-last.tmpl", size: 520, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangHasTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x90\x31\x6e\xe3\x30\x10\x45\x6b\xce\x29\xfe\xba\x58\x50\x80\xac\x03\x2c\xa0\x62\x8b\x05\xb6\x48\xe3\xb8\x48\x29\x8f\xad\x91\xac\x40\x26\x85\x21\x85\xc4\x20\x78\xf7\x40\xb2\x11\x07\x29\x53\xb0\x9a\xf9\xef\x7d\x4e\x4a\x5b\xb4\xd2\x0d\x4e\xb0\x09\x43\xef\x38\xce\x2a\x1b\x6c\x73\xa6\xff\x1c\x52\x42\xb5\x9f\xbb\x6e\x78\x47\xce\x36\x25\x4c\xac\x7c\x41\xf5\x57\xfb\x80\x9c\x0b\xd8\x33\x07\x1c\xbd\x1f\x4b\x88\xea\xf2\xbc\x16\xb4\x40\xc5\xb5\x2b\x85\xbe\x1a\x8e\xbe\xbd\x6e\x90\x73\x22\x73\xf2\x2e\x44\x34\x4d\x88\x97\x58\x1f\x56\xd1\xee\x09\x39\x1f\xc8\x34\xcd\xa4\x32\xb1\x4a\x5b\xa2\x69\x54\xa6\x91\x4f\x72\x13\xfc\xa9\xe1\x8f\xaf\xd5\x7d\x6e\x6f\xf1\x82\xcc\xd0\xad\xe3\x5f\x35\xdc\x30\x22\x91\x31\x2a\x71\x56\x87\x8e\xc7\x20\x25\x5e\x94\xa7\x7f\xaa\x56\x54\x0b\x32\x99\x4c\x2b\x9d\xe8\x83\x6e\x0b\x32\x0b\x78\xf4\xfd\x3e\x5e\xe2\x1d\x5c\x22\x25\xb0\xf6\x8f\x0f\x13\x01\x58\x55\x35\x1e\x35\xab\xdd\x2c\x7a\x7d\xf6\x6f\xf6\xfb\x7e\xb5\x3f\xb1\xb3\xbf\xcf\x1c\x7e\x50\x72\x51\xdd\x37\xce\x1c\xca\x25\x45\x99\x52\xfa\xbc\xed\x47\x00\x00\x00\xff\xff\xbf\x66\x68\xe3\xbd\x01\x00\x00")

func golangHasTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangHasTmpl,
		"golang.has.tmpl",
	)
}

func golangHasTmpl() (*asset, error) {
	bytes, err := golangHasTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.has.tmpl", size: 445, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\xdf\x6f\xdb\x46\xf2\x7f\xe6\xfe\x15\x53\xa1\x31\x48\x47\xa6\xf2\xf0\xc5\xf7\x41\xad\xef\x10\x45\xbe\xa2\x40\x6a\xf7\x1c\x05\x87\x43\x5b\xa4\x2b\x72\x24\x6f\xb4\xdc\x55\x96\x4b\x59\x2a\x8f\xff\xfb\x61\x76\xf9\x63\x25\xd9\xb9\xf4\x0e\x05\xda\x87\x8a\xe4\xce\xce\x7c\x66\xe6\x33\x3f\xe2\xc9\x04\x5e\xbf\x5f\xdc\x7d\x77\x73\x7b\x73\xff\x7a\x71\x33\x87\xd9\x3f\x61\xad\xb7\x9b\x75\x2a\xd4\xa4\xdc\xf2\x0c\x0b\xad\x36\x78\x58\xeb\x49\xbe\xdc\xa7\xbb\x57\x6c\x32\x81\xf9\x1d\xdc\xde\x2d\xe0\x66\xfe\xfd\x22\x65\x6c\xcb\xb3\x0d\x5f\x23\xd4\x35\xa4\x3f\xb6\xcf\x4d\xc3\x98\x28\xb6\xda\x58\x88\x59\x34\xca\xb9\xe5\x4b\x5e\xe2\xa4\xfc\x24\x47\x2c\x1a\xad\x0a\x3b\x62\xd1\x64\x32\x2a\xad\x11\x6a\x5d\xd2\xb7\xf2\xa0\x32\xfa\xb5\xa2\xc0\x11\x63\xd1\x68\x2d\xec\x43\xb5\x4c\x33\x5d\x4c\x3e\x16\x5a\x18\xad\xe8\xfa\x7e\xc4\xea\xfa\x0a\x0c\x57\x6b\x84\xf4\x66\x6f\x0d\xff\xde\x19\x2a\xc9\x28\x00\x38\x1c\xaf\xe9\x0d\x46\xc7\x90\xfc\x4d\x54\x39\x49\x26\x8c\x3c\x91\xa6\x02\x51\x6c\x25\x16\xa8\x2c\xb7\x42\x2b\x58\x69\x03\x5b\x83\x5b\x6e\x30\x87\xd2\x72\xeb\xce\x4a\x66\x0f\x5b\x74\xf2\xa5\x35\x55\x66\xa1\x66\x51\x51\x81\xff\x8f\xb0\xa7\x3f\x54\x16\xf7\x2c\xca\x97\xed\xc7\x4b\x42\x9b\xce\x67\x2c\xca\xf8\x96\x67\xc2\x1e\x40\x28\xcb\x22\xa3\xb5\x75\x02\xa8\xac\x39\xb0\x48\xa8\x1c\xf7\xf4\x5e\xf0\xed\x4f\x3e\x20\xbf\x5c\xfa\xb3\xc6\x81\x54\xf8\xf8\xf6\xfe\x3d\x18\xb4\x95\x51\x25\x70\x05\x42\x09\x2b\xb8\x14\xbf\x61\x4e\x90\x52\xb6\xaa\x54\xd6\xca\xc5\xf9\xb2\x37\x3d\x86\xd0\x74\x02\x97\x84\xbf\x66\x91\x84\xe9\x35\x5c\x48\x53\xd5\x2c\x8a\xf2\xe5\xb4\x45\x9c\x2f\xc7\x2c\xea\xd1\x4e\xfb\xcb\xf4\xd5\xa1\x9c\x7a\x98\x1b\x8c\xcf\xb0\x26\x63\x16\x35\x2c\x92\x29\xb9\x97\x2a\xdc\x5b\x20\x13\xee\xb5\xff\xbc\x35\xb8\x0b\x3f\x7b\x97\x40\xb6\x8e\x0a\x55\xa2\xb1\xed\x4f\x09\x08\x7c\x65\xd1\x00\xb7\x63\x10\x2a\x33\x3e\x11\x20\x53\x89\xaa\x75\x39\x96\xce\xa7\xa4\xbd\x13\xe3\x18\xb8\x85\x16\x11\x79\xaa\xc8\x53\xee\x01\xb1\x88\xf7\xc8\x90\x45\xd8\xc1\xe1\x96\x5e\xda\x03\xc5\x22\xd5\x1d\x60\x8b\xcb\x60\xa1\x77\xd8\xfe\x10\xae\x95\xd1\x05\x08\xc2\x22\x4a\x3b\x86\x1c\x8f\xc1\x9d\x60\xf3\xf7\x62\x0c\x71\x79\xe3\x3d\x9a\x16\x9f\xff\xed\xcd\xbb\x87\x10\x9b\x90\x30\x99\x00\xdf\x69\x91\x43\x81\x85\x36\x07\x90\xc8\x37\x65\xe0\xcc\xf3\x32\x0d\x3b\xc1\x85\x3b\x91\xd9\xf8\x98\x21\x35\x8b\xc4\x6a\x60\xcd\xb7\xf0\x8a\x3e\xb5\x89\xa2\x0c\xb3\xc8\xea\x0f\xee\x26\x45\x56\xa2\x8a\x65\xea\xb8\x91\xc0\x55\x7f\x8f\x45\x59\x65\x0c\x2a\xeb\x79\xd6\x66\x9b\x2a\x4b\xd0\x97\x57\xdf\x80\x80\x6f\xa1\x53\xf4\x0d\x88\x97\x2f\x9d\x99\xee\xd6\x35\xb4\x4f\x6d\x04\x1c\xa6\xee\xac\xd7\xe8\xae\x44\x5b\xae\x44\x16\x8f\x7c\x15\xe9\xca\x82\x5e\xc1\xe3\x03\xcf\x36\x29\x18\x9e\x21\x64\x5a\xe5\x82\x2a\xbb\xfc\xeb\x28\x61\x11\x91\x34\x50\x97\x1a\x5c\x95\xf0\x97\xd6\xcd\x28\xd3\xca\x0a\x55\x61\x2b\x37\x99\xc0\xe3\x83\xe6\xb0\xd4\x07\x10\x25\xd8\x07\x51\x42\x59\x2d\xad\xc4\x14\x64\xda\xd2\x62\x29\xf5\x63\x09\xfc\x91\x1f\x7a\xa5\x2e\x5f\x5c\xe5\x5e\x45\xe8\x4b\x0a\xcb\xca\x1e\xc9\xf9\xc4\x3d\x0a\x29\x61\x89\x50\x54\xd4\x71\x72\xb0\x1a\x96\x78\x7e\xdd\x75\x27\xfb\x80\xe0\x2c\x08\x8b\xc6\x35\xad\xaf\x58\x14\xd1\x97\x0f\x41\xd8\x43\x1b\x8c\x45\x51\x87\x37\x6e\x0f\x28\x16\x39\x4a\xb4\xd8\x65\x70\xdc\xdf\xd9\xe0\x81\x8e\xa5\x5e\xf7\xe2\xe9\x3b\x5b\xd8\xf4\x8d\xd4\x25\xc6\x49\xc2\x8e\x92\x15\x9a\x26\x8e\x9c\x31\xed\x3b\xb4\xf1\x06\x0f\xe0\x3b\x46\x02\xb1\xaf\x84\x31\xa0\x31\xda\x38\xd6\xc9\xb4\xa8\xd2\xb7\x3a\xdb\xc4\x09\x8b\x72\x5c\xa1\x01\xf7\xe9\xbd\x92\xfe\x23\x8b\x70\x0c\x7a\xe3\x58\xe7\xf1\xfe\xb4\xc1\xc3\x2f\x8e\xaf\x7a\xe3\xd2\xd7\xbb\x88\x0e\x7d\x3a\x34\x85\x96\x31\xf4\x19\x5d\xca\x5f\xbe\x64\x3d\xad\x01\xc7\x54\x36\x9e\xdd\xa5\x2d\xac\xc3\xe5\x0d\xe5\xcb\xf4\x47\x3f\x0c\xf6\xb1\x7b\xbb\xc7\xa5\x50\x39\x79\x93\x24\xce\x36\x89\x7e\xe5\xeb\x6e\xa8\x14\x7a\x1d\xc3\x3f\x0c\xdf\xde\x18\x13\xa3\x31\x89\xd7\x8e\xd4\xfd\x9c\xef\x24\x4b\x21\x9d\x82\xb3\xc8\xa2\x68\x83\x07\xea\xaf\x1b\x3c\x74\xad\xf4\x29\xfc\xa1\xef\x5d\x1f\xeb\x1d\x3a\xf6\xe7\x2c\x0d\xf7\xb8\x95\x3c\x3b\xe9\x44\x5f\x12\x78\x67\xe1\xea\x8a\x84\x7d\xd3\x90\x69\x57\xea\xc9\xb9\x99\x1f\x2b\xb3\xc6\xf8\x4b\x95\x77\x2a\x5f\x39\x4d\x6e\xca\x3a\x70\xc1\x9c\xa5\x38\xb5\x33\x8d\x1e\x19\x73\x64\x1f\x83\xab\x88\x76\x54\x52\xf8\xa0\x1b\xc7\x8e\x66\x14\x8e\x55\xd9\x7e\xa2\xc9\xdb\x30\xb6\xe3\xa6\xcb\x0a\x5c\x03\xc1\xa6\xe4\x74\x34\x74\x3f\x50\x77\x51\x34\xa6\x71\x17\xde\xea\xf5\x1a\x8d\x97\x5e\x69\x53\x70\xdb\x5a\x18\x03\x37\xeb\x12\xd2\x34\x15\xca\xa2\x59\xf1\x0c\xeb\x26\x71\x77\x6e\xf5\x23\x5c\x03\xed\x32\xe9\xad\x7e\x6c\x23\xe4\xea\x29\xb0\xe7\x9b\x6d\xab\xbe\xe5\xd0\xc5\xc5\x29\xa3\xfc\x79\x3c\xf2\xe8\x32\xa9\x4b\xa1\xd6\xc3\x66\x32\x85\x17\xbb\x91\x63\x6c\xd2\xd6\x9e\x8b\xe1\x7c\x16\x04\xb0\x5f\x45\x28\x14\xb4\x03\x50\xa2\x98\x1f\xf9\x3f\xa0\x7d\xd0\xf9\x30\x1e\xee\xb6\xa8\xe2\xdc\x88\x1d\x9a\x31\x94\xba\x32\x19\xf6\xee\x4a\x53\x7d\x28\xc5\x6f\xe8\x67\x45\x7c\x49\x1b\xc6\xe0\x4b\xbe\xec\x0b\xc7\xd9\x7b\xa3\x95\xc2\xcc\x9e\x28\xfb\xdd\x55\x13\xf5\xa8\xa7\xd7\xc3\x8e\x33\x80\x49\x98\x13\xa0\xa8\xd3\x2a\x17\xb8\xe4\xb8\xf0\x28\x6c\xf6\x00\x1e\x03\xd4\xe1\xf2\x38\x17\x5c\x62\x36\x2c\x8e\x19\x2f\xfd\x16\x7b\xcb\x0b\x84\x7f\xc1\xd6\x08\x65\x57\x30\x7a\xf1\x69\x04\x4d\x33\xa5\xb9\x41\xfa\xaf\xe1\xa2\x17\x6a\x9a\xf9\xac\x96\xa6\x9a\x12\x9a\x26\xdc\x2f\x5d\x70\x71\xc5\x2b\x69\xa7\xac\x23\xe6\x53\x6e\xae\x0a\x9b\xde\x50\x0c\x57\xf1\xa8\x52\x65\xb5\xa5\x65\x16\xf3\x0e\xf1\x8b\x72\x34\x6e\x9f\x93\xc4\x29\x6a\x86\x42\xbf\x98\xcf\x28\x7a\xf3\xd9\xb4\xdd\xdd\x3a\x28\xe3\xde\x64\x1f\x8d\xa9\x8b\x0e\xb5\x96\x93\xee\xa0\x97\x1f\xe1\x72\x3e\x4b\xa0\x6d\xee\x70\x42\x51\xbd\xfc\x98\xd2\x92\xd9\x96\x75\x6f\xbc\x73\x80\xce\xe7\xb3\x61\x34\x9c\x2b\x9e\xbb\x31\xf3\x5a\x4a\x52\x6e\xb5\xe5\x92\x08\xf4\xff\xff\xe7\xe9\xd2\x5b\x0a\x52\xf3\xce\x51\xb7\xbc\xc7\x1d\x9a\x12\xbb\x78\x8a\x15\xa8\x9e\x62\xce\xac\x53\x5c\xd7\xb0\x95\x95\x71\xfb\x70\x9f\x97\x38\xf9\xc6\x49\x5e\x77\x24\xeb\x02\xe2\xed\xbf\xa4\x4d\xcf\x45\x13\x50\x52\xda\x4f\x73\xe4\xc4\x4e\xc8\xe8\xa3\x7f\x92\xe4\x63\xf9\xa7\x23\xeb\x6a\x8a\x0a\x66\xb1\x0f\x0b\xc6\xee\x8f\xbd\x99\xa5\x33\x5c\x0b\xb5\x8f\x7f\xff\x64\x09\x90\x5c\x2c\xf6\xf5\x62\x3f\x05\xd2\x5e\x74\xb9\x27\xfd\x4b\x52\x1e\xdb\x7d\x32\x30\xc0\xb5\x8a\xc5\xfe\xac\x55\x2c\xf6\x4e\x63\x71\xd2\x1b\x62\xbb\x87\xcb\xc5\x3e\x81\x37\xba\x28\x84\x3d\xe7\xca\x09\x35\x2c\x69\x4a\x3b\xe1\xe4\x5c\xcf\xbd\x96\x72\xc9\x69\x12\x7c\x91\xa6\x41\xfc\x09\x5d\x7f\x08\xcb\xec\xfe\xcf\x4b\xb2\x67\x5a\x19\xab\x6b\xf8\x3a\x5f\xba\xd4\x4e\xaf\xcf\xbb\x59\x39\x9f\x51\x3f\x73\x62\x76\xff\xbc\xd8\x62\xef\xc4\x3c\x47\x02\x9d\x4d\x13\xd0\xa5\x1f\x26\xc7\xa4\x3f\x12\x4f\xe0\x5d\xf6\x80\x05\x8f\x93\x76\x90\x40\xcd\x5a\x87\x7e\x75\x4e\xa4\xfe\xfc\xdd\xdf\xdf\xc2\x55\xd3\xb0\x5f\x3f\xaf\xac\xfd\xc7\x79\x4c\x7b\xd3\xb0\x51\xf6\xff\x64\x1f\xf6\x84\x31\x18\xbf\xf0\xf8\xd1\x9d\x9c\x10\x21\x1a\x76\xd0\xae\x02\xa9\xcd\xd1\xae\x4a\xaa\xff\x63\x0d\xba\xff\xa1\x31\x6e\x46\x75\x3b\x03\xa9\x6c\x8d\x7b\xa3\x50\xf7\x9a\xfb\xf5\xcb\xef\x5e\x4f\xf6\xe1\x13\x5f\xa5\x5e\x93\xb2\xd0\x57\xbf\x74\xa4\x69\x0a\xe1\xd2\x41\xe8\x82\xa9\xf4\x36\xb8\xd7\x5f\x38\x6d\xcd\x27\xb6\xba\xf6\x00\x5d\x0b\x48\xba\xfa\x0f\xea\xf1\x22\x60\x4d\xd3\x50\x48\xac\x6f\x35\xdd\xf0\x69\x9d\x1d\x87\xbb\xc8\xd1\x9d\x80\x3c\x81\xad\xcf\x32\xa9\xbf\xfb\xe7\x4e\x3e\x29\xb1\xde\xfa\x3e\x1e\x98\x90\xfc\x0f\x54\x08\x3c\xff\x83\xa8\xf0\x8c\xe4\x67\x37\x5c\xb2\x30\x99\xc0\xe2\x6e\x7e\x37\x05\x83\x2a\x47\x03\xce\x9f\x07\x2d\x73\x34\xe5\x13\x6b\x6d\xb8\xc8\x96\x9f\xe4\xf4\x67\xf5\xa2\xfc\x59\x91\x72\x7a\xa4\x05\x76\xc0\xd7\xed\xb1\x41\x0f\xa4\x66\x75\xdc\xb4\xbb\x0e\xd6\xb2\xa9\xef\x60\x47\x1d\xab\x3d\x0c\x49\x17\x34\xcd\xbf\x09\x94\xb9\x53\x14\xc6\xcb\x45\x64\xe1\xa3\x1e\x42\x68\x01\x89\x15\xa4\xef\xb7\xee\x0f\x9a\x12\x07\x0d\xbd\x4d\x7f\x88\x1e\x65\xa7\xf2\x29\xeb\x4f\x28\xa1\xd3\xaf\x57\x83\x47\x43\x2f\x7e\x51\x3a\xa9\x51\xef\x52\xef\xec\x11\x74\xc7\x99\x55\xef\xf5\x31\xfc\xe3\x70\x3e\x11\x85\xff\xc6\xfc\x10\xeb\xd5\x79\xb0\x61\x17\x06\x13\x9a\x9e\x71\x43\x62\x02\xf4\xf1\x91\x74\x42\x2f\x14\xec\xdb\x4a\x4a\x0a\x13\x34\x0d\xb9\xe7\x3d\x38\x31\x58\x77\x03\xf2\xfc\xce\xc5\x33\x77\xea\xdd\x14\x76\x3d\xa6\xb8\x3a\xf1\x21\x81\x4c\xcb\xaa\x50\x84\x2d\x98\x5b\x9d\x1d\xf7\x97\xe5\x37\x4e\x02\x9a\x66\x14\xa8\xb9\x3c\xd5\xb3\xe3\xb2\x22\x15\x41\x01\x41\x0d\xae\x44\xaa\x61\x71\x08\xbb\x4b\xd8\x53\xaa\x74\xd7\xa6\x8e\xd6\x12\x6d\x8f\x7c\x7b\x16\xfb\x3d\xae\xe2\xe4\x14\xca\x80\xfe\xa2\x82\x73\x3a\xd0\xf3\xd5\x31\x67\xfe\x1d\x00\x00\xff\xff\x8d\x73\x44\x0f\x1d\x18\x00\x00")

func golangHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangHeaderTmpl,
		"golang.header.tmpl",
	)
}

func golangHeaderTmpl() (*asset, error) {
	bytes, err := golangHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.header.tmpl", size: 6173, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangInsertTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x53\xcf\x6a\xdc\x3c\x10\x3f\x5b\x4f\x31\x5f\x4e\x12\x6c\xf4\x00\x01\x1f\x3e\x42\x0a\x81\xb0\x90\x6c\x4a\x8f\x8a\xb2\x1a\x19\xb5\x5e\x49\x8c\xb4\x38\x8b\xd1\xbb\x17\xd9\x8e\xe3\x36\xa7\x42\x0c\x3e\x68\xc6\xfa\xfd\x9b\xf1\x38\x5e\x83\x41\xeb\x3c\xc2\x55\x72\x9d\xd7\xf9\x4c\x78\x05\xd7\xa5\xb0\x5b\x42\x9d\x71\x1c\x41\x1e\xce\xd6\xba\x37\x28\x85\x8f\x23\x44\x4d\xfa\x04\xf2\x7f\xea\x12\x94\x22\x60\x53\x7b\xc2\x7c\x26\x0f\xa5\xec\x00\x89\xea\x1b\x48\xb0\x4a\x81\xde\x4c\x98\x6c\xcb\xf7\x1a\xcc\x65\xa2\x1a\x19\x00\x40\x6d\x39\x0b\x72\x8f\x68\xd2\x3e\x0c\x50\xca\x54\x57\xca\x87\x01\x6e\x5a\xd8\x87\x81\x0b\xf9\xfd\xf9\x96\x8b\xe5\xc2\x8a\xbb\x1c\x9d\x77\xd9\xe3\x00\xf2\x9b\xc3\xde\x54\x7d\xac\x39\x06\x9f\x32\x28\x95\xf2\x29\xb7\x2f\x93\x9d\xc7\x07\x28\xe5\x85\x35\x4a\x45\xc2\xa8\x09\xcd\x0e\x94\x22\x8c\xbd\x3e\xe2\xac\xfd\xa6\x85\xf0\xfa\x53\x2e\x7d\x3e\x5f\x17\xac\x71\x76\x6a\xff\xd7\x82\x77\x3d\xcc\xc2\xeb\x43\xb3\x75\xef\xfa\x1d\xfc\x20\x1d\xef\x88\x38\x12\x09\xd6\x14\xd6\x18\xb4\x48\x1f\x0c\x5c\xb0\xa6\x82\xf7\xa1\x3b\xe4\x53\x5e\xc0\x77\xd5\x80\xa6\x6e\x23\x5e\xb0\xd5\x98\xad\x53\x88\x31\x50\x4e\x73\xca\xce\x77\xf0\xa7\xf1\x4d\xfe\x53\xb9\xea\x6c\xe1\xc3\xa3\x7c\x3c\x23\x5d\x9e\xc2\xc0\x3f\x13\xc9\xc3\x51\xfb\xa9\x6e\x0c\x05\x0b\xdc\xf6\x3a\x67\xf4\xef\x98\x62\x52\x53\x51\xff\x39\x80\xda\x9c\x05\x2d\x9f\xbc\xb3\x6f\xb6\xc5\xbb\x7e\x9d\x68\x9f\x70\x1d\x69\x8d\x2c\xad\x03\xd9\x58\xb9\x7b\xc3\xe3\x5f\x36\xbe\x40\xa0\x52\xf1\xd7\x86\x8d\x30\xc9\x07\x9d\xf2\xbd\x4f\x48\xf9\xde\xf0\xaf\x4a\xa0\x0e\xbf\xc3\x5c\xb1\xeb\x3e\xce\x41\xc8\xe7\x4b\xc4\xfa\x8f\x55\x15\x9f\x16\xbc\xb0\xcd\xe1\x77\x00\x00\x00\xff\xff\xbc\x5e\xcc\x40\xb5\x03\x00\x00")

func golangInsertTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangInsertTmpl,
		"golang.insert.tmpl",
	)
}

func golangInsertTmpl() (*asset, error) {
	bytes, err := golangInsertTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.insert.tmpl", size: 949, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangMiscTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x90\x41\x4b\xc3\x40\x10\x85\xcf\xed\xaf\x78\x84\x08\x2a\xa6\x3f\xa0\xe0\x25\x88\x17\xc1\x83\x06\xcf\x5d\xb3\x93\x30\x12\xb7\x75\xb3\x11\xcb\x98\xff\x2e\xb3\x2b\x6b\xa5\x87\xdc\x86\x37\xef\x7b\xfb\x66\x45\x2a\x58\xea\xd8\x11\x0a\x4b\xed\x50\x60\x9e\xd7\xdd\xe4\x5a\x5c\xee\x5f\xdf\x70\x2d\x82\xcd\x13\xb5\xc4\x9f\xe4\x6b\x33\x12\xe6\xf9\xae\xbe\x82\xca\xcf\xdc\x3b\x13\x26\xaf\x5a\x14\xea\xbd\x3d\x2a\xbe\xc0\x37\x5f\x0b\xbc\x08\xc8\x59\x54\x1a\x75\xda\x6f\x0c\x7e\x6a\x43\x6c\x18\x8e\x07\x8a\xcc\xa3\x79\x8f\x7c\xda\x41\x14\xf6\xc6\xf5\x84\xcd\x3d\xd3\x60\x47\x75\xaf\x44\xc0\x5d\x36\x9f\x72\xbf\x6f\x25\xb1\xd1\xd4\x38\xaa\xbb\x31\xfd\x18\x4b\xac\x76\x39\xb4\xe4\x1b\x94\x01\xdb\xdb\xbf\x75\x72\x97\x7c\x96\xf6\x40\x7a\xcd\x56\xc7\x17\x33\x4c\x84\x6f\x1c\x3c\xbb\xd0\xa1\xb8\xf8\x28\x92\x29\xb9\x77\xda\xb0\xca\x47\x67\x7d\xfd\xef\x2f\x7e\x02\x00\x00\xff\xff\x15\xe5\x41\x39\xab\x01\x00\x00")

func golangMiscTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangMiscTmpl,
		"golang.misc.tmpl",
	)
}

func golangMiscTmpl() (*asset, error) {
	bytes, err := golangMiscTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.misc.tmpl", size: 427, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangSelectAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x92\xcf\x8a\xdb\x30\x10\xc6\xcf\x33\x4f\x31\xcd\x49\x86\xac\x1f\x60\x8b\x0f\x4b\x29\xbd\x94\xc2\x36\x87\x1e\xbd\xda\x68\x14\x54\x14\xc9\x8c\x14\xb2\x8b\xd0\xbb\x17\xd9\xce\x1f\x5a\xda\x4b\x0d\xbe\x68\x34\xdf\xf7\x9b\x4f\x53\xca\x03\x19\xb6\x2e\x30\x6d\x92\x3b\x04\x9d\x4f\xc2\x1b\x7a\xa8\x15\xbf\x70\x7e\xf2\xbe\x14\xea\x77\x27\x6b\xdd\x1b\xd5\xaa\x4a\xa1\x49\x8b\x3e\x52\xff\x24\x87\x44\xb5\x76\xa4\x24\x9e\x13\x95\x42\xc9\xbb\x3d\x47\x4b\xfd\xf7\x78\xa6\x5a\xb7\xc4\x22\xed\x8f\xd2\x61\xb3\xe1\x60\x66\x5d\xbc\xf7\x7c\x8d\xe6\x7d\x43\xb5\x16\x84\x7d\x0c\x29\xd3\x38\xa6\x7c\xcc\xc3\xcb\xec\xfb\xfc\x95\x6a\x7d\x41\x18\xc7\x49\x78\xd2\xc2\x66\x4b\xe3\x28\x3c\x79\xbd\xe7\xc5\xe0\x71\xa0\xf8\xfa\xb3\x5f\xeb\x6a\x69\xef\x10\x9c\x9d\xcb\x1f\x06\x0a\xce\x53\x41\x5a\x3f\xe1\x7c\x92\xd0\x0e\xb7\xf4\x43\xf4\xf4\x59\x44\xb1\x48\x87\x50\x11\x0c\x5b\x96\x9b\x83\xea\x10\x9a\xb8\x8f\x87\x5d\x3e\xe6\x55\x7c\xdb\x86\xd5\x72\xb8\x65\x80\x8d\xb0\xc5\x70\x45\xba\x01\xf7\xcf\x27\x96\x77\x75\xdf\xd2\x3a\xfe\x93\x2f\x9e\x53\xff\xc9\xc7\xd4\x10\x11\x6c\xbc\x1e\x7e\xe3\xb7\xac\x3a\x2a\x08\x50\x0a\xb9\xe0\x72\xe0\xf3\xe5\x49\x10\xa0\x79\x0e\x97\xcb\xbb\xbd\x0e\x33\x99\x31\x12\x2d\x29\xeb\x75\xce\x1c\xe6\xeb\xdd\x3c\x18\xfc\xc1\x09\x00\x7f\x47\x6c\x8c\x30\xef\xc3\x40\x7a\x9a\x38\x18\xb5\xc4\x72\x19\x7f\xe1\x58\x86\x59\x95\x1f\xaf\x38\x4d\xa7\xfb\xf8\xbb\xdd\x3f\x03\x59\x8b\x8b\x49\x70\x1e\x2b\x96\x72\xdd\xb4\x5f\x01\x00\x00\xff\xff\x24\x35\xb8\x50\xdd\x02\x00\x00")

func golangSelectAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangSelectAllTmpl,
		"golang.select-all.tmpl",
	)
}

func golangSelectAllTmpl() (*asset, error) {
	bytes, err := golangSelectAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.select-all.tmpl", size: 733, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangSelectPagedTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x53\xc1\x6a\xdc\x30\x10\x3d\x5b\x5f\xf1\xea\x43\xb1\x83\xed\xa4\xd7\x82\x0b\x69\x77\x9b\x1e\x52\x92\xd6\x81\x1e\x42\x20\x8e\x3d\x36\x4a\x6d\xd9\xc8\x32\x84\x0a\xfd\x7b\x91\x64\x6f\x92\x6d\x9a\xa6\x64\x61\xc1\x1a\xcd\xbc\x79\xef\xcd\x48\xeb\xc3\x03\x96\xbf\xf2\xc7\x80\x62\x7b\xba\xfd\x74\x81\xf3\xe3\x93\xed\x06\x5f\xb7\x17\x5f\xce\x36\xaf\x87\x3d\x38\x34\x86\x69\x8d\x9a\x1a\x2e\x08\xe1\x44\x1d\x55\x2a\x1d\xcb\x96\xea\x10\xc6\xb0\x66\x16\x15\xa2\xe1\xe6\x16\x07\x5a\x23\xdb\xf0\xd2\x26\xc0\x98\xcd\xc7\x18\x5a\x43\x51\x3f\x76\xa5\xda\x2b\x4d\x6d\x59\x88\xcc\x22\xfc\x1d\xe2\xe2\xee\x85\x10\x5a\x83\x44\xed\xc0\xb4\x4e\x9f\x24\xeb\xd2\x53\x51\xf6\x14\x22\x35\x86\x9d\xdb\xe0\x09\x29\xad\x31\x76\xb3\x2c\x3b\xfe\x8b\x90\x15\x4a\xce\xae\xb5\x25\xf2\x79\x16\x55\x31\x37\x0d\xbf\xf3\x3d\x52\xd7\x24\xfd\x77\x97\x89\xb7\xbe\xc9\xf3\xe4\x17\x36\x56\x41\x64\x53\xc7\x52\x96\x3d\xb2\x63\xd9\x4e\x9e\x01\x6f\x76\xa7\x64\xd5\x68\x61\x01\xa0\x52\xc3\x4f\x12\x98\x94\xe4\xa2\x4d\xd0\xf1\x9e\x2b\x70\xa1\x62\x44\xee\x5e\xd2\x34\x77\x0a\x97\x57\xce\xd3\x9d\xae\x64\x29\x1c\x66\xb5\xab\x25\x29\xed\x7f\x90\xf1\x7f\x88\x5c\x05\xa6\xcf\x2a\x74\x4e\x58\x81\xd0\x8c\x05\xd5\x20\x26\xdb\xb6\x57\xf9\xb5\x63\xf5\xed\x14\xc6\x5c\xb3\x60\x94\x34\x96\x92\xea\x04\x92\xc6\xae\xac\xc8\x93\x7a\x9f\x63\xb8\xb9\xcd\x96\xdb\xc8\x16\xc6\x2c\xe0\x8d\xbb\x7c\x93\x43\xf0\x0e\x9a\x05\x81\x3d\xe6\xf8\x21\xcb\x71\x2b\x65\x44\x52\xc6\x2c\x08\x24\xa9\x59\x0a\x16\x18\x16\xd4\xd4\x90\x5c\xa1\xa3\xd8\xf9\x63\x81\xbb\xa1\x2d\x54\xaf\x1c\x70\x82\xc7\x86\x6b\x8d\x52\xb6\xf7\xfe\x43\x6b\x12\xb5\x31\xde\xbe\xc5\xf0\x98\x39\x2c\xde\xac\xe3\xc8\x73\x84\x21\xb4\x8b\x3e\x98\x52\x8e\xf0\x28\x74\x41\xc3\xd8\x42\x77\xd5\x9c\x15\xce\xb5\xe8\xad\x9f\xd8\x4b\x79\x60\x8f\xc8\x13\xb6\x78\x07\xec\x31\x41\x18\x26\x7b\x06\x99\x1d\x77\xbf\x3b\x1f\x70\xf4\x80\xb8\x0d\x93\x88\x3c\xa7\xd8\xea\xf2\x59\xf7\x19\xf7\xf2\xec\x2e\xe5\x68\x7a\x95\x15\xa3\xe4\x42\x2d\x55\x97\xae\x22\x7d\x77\x95\xd9\x59\xbb\xf7\x76\x26\x60\x4c\xbc\x83\xf0\x9b\x6c\x40\xdd\x44\x7f\x98\xe6\x51\xfd\xf7\x6a\x9d\x5f\x6c\xa7\x6a\xf5\xe5\xbb\x3b\x4e\x8f\x57\x3b\xb1\xa2\xd9\xde\x9b\x65\xbf\x03\x00\x00\xff\xff\xb9\x78\xd4\xc4\x69\x05\x00\x00")

func golangSelectPagedTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangSelectPagedTmpl,
		"golang.select-paged.tmpl",
	)
}

func golangSelectPagedTmpl() (*asset, error) {
	bytes, err := golangSelectPagedTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.select-paged.tmpl", size: 1385, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangSelectTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x91\xb1\x6e\xe3\x30\x0c\x86\x67\xf1\x29\x78\x99\x6c\x20\xf1\x03\x1c\xe0\xe1\x86\xe0\x96\xa2\x40\x92\xa1\xa3\xa3\xc4\xb4\xa1\xc2\x91\x5c\x5a\x46\x9a\x12\x7c\xf7\xc2\x4a\x52\x07\x1d\x3a\x74\xd0\x42\x4a\xdf\xc7\x9f\x12\x59\x61\x4d\x8d\xf3\x84\x8b\xc1\xb5\xde\xc6\x91\x69\x81\x2b\x55\xf8\x4f\x51\x04\x8b\xdd\xd8\x34\xee\x1d\x55\x33\x11\xec\x2d\xdb\x13\x16\xff\xb8\x1d\x50\x35\xc7\x87\xda\x36\x9c\x51\x75\x89\xc4\x3c\x9d\xc0\x39\x4c\x70\xf2\x75\xa2\xc1\xa3\xe9\x10\xea\xcb\x02\x55\x05\xcc\x31\xf8\x21\x62\x55\x0d\xf1\x14\xcb\x7d\x12\x6e\x9e\x50\x75\x0f\xa6\xaa\x7a\xa6\xde\x32\xd5\x4b\xac\x2a\xa6\xbe\xb3\x47\xba\x0a\xfe\x96\x18\x0e\xaf\xc5\xad\x9f\x5d\x9f\xe7\x60\x5c\x93\xda\x7f\x4a\xf4\xae\x43\x01\x63\x98\xe2\xc8\x1e\x45\xf0\x83\x38\xcc\x63\xbe\xb0\xed\xd7\xcc\x19\x31\xe7\x60\x14\x4c\x4d\x0d\xf1\xec\xc9\x72\x30\x93\xa2\x0b\xed\x2e\x9e\xe2\x4d\xb1\x9c\x40\x96\xdb\x79\x05\x00\x46\x04\x9d\x77\xf1\xce\x06\x44\x4c\x53\x94\x38\x27\x28\x36\x23\xf1\x65\x1b\xce\xd9\x77\x40\xb1\x3b\x5a\x9f\xaa\x75\xcd\xa1\xc1\xac\xe9\x6c\x8c\xe4\x13\x2e\x4f\x8a\x7b\xac\xb2\xc4\xe1\xad\x2b\xd6\xcc\xcf\x61\x1b\xce\xc3\x8f\x01\xbd\xeb\x52\xae\xdf\xaf\x64\xca\x31\xdf\x4d\x43\x3f\xc2\x15\x44\xbe\xbe\xf7\x33\x00\x00\xff\xff\x09\xf8\x5a\x90\x48\x02\x00\x00")

func golangSelectTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangSelectTmpl,
		"golang.select.tmpl",
	)
}

func golangSelectTmpl() (*asset, error) {
	bytes, err := golangSelectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.select.tmpl", size: 584, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangUpdateTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x56\xdd\x6e\xdb\x46\x13\xbd\x26\x9f\x62\x3e\x5e\x7c\x20\x13\x8a\x69\x7b\xe9\x82\x28\xd2\xc4\x01\x5c\x04\x6a\xfd\x93\xf6\xc2\x30\xe8\xb5\x38\x14\x18\x53\x4b\x6a\x77\x19\xc9\xa0\xf6\xdd\x8b\xd9\x25\xa9\xa5\x2c\xb9\x6d\x2c\x20\x88\xc9\x9d\x99\x3d\x73\xe6\xe7\xb0\xeb\x66\x90\x63\x51\x72\x84\x40\x96\x4b\xce\x54\x2b\x30\x80\x99\xd6\xfe\x97\x26\x67\x0a\xbb\x0e\x92\xeb\xb6\x28\xca\x2d\x68\x1d\x76\x1d\x34\x4c\xb0\x15\x24\xef\xc5\x52\x82\xd6\x31\xb4\xc6\x0c\x8c\x9d\x12\xed\x42\x25\xd6\xd1\x3e\xcc\xd9\x0a\x41\xeb\x08\x1c\xd7\x2b\x54\xad\xe0\xc6\x19\x85\xa0\x7f\xb5\x88\x7c\x42\x82\x3c\x37\x57\xfb\x2e\xac\x87\x3a\x7f\x32\x88\x3a\xdf\xa3\xf7\x65\x01\xc9\x1c\x31\x97\xf3\x7a\x03\x5a\xfb\x5e\x96\xf1\x7a\x03\x67\x29\xcc\xeb\x4d\x18\x25\x5f\x6e\x3e\x84\x11\x99\x8e\xe1\xbc\x45\xcd\xa5\x82\x2c\x93\x6a\xa5\xb2\x46\x60\x51\x6e\xd3\x7b\x83\xf8\xf2\xf3\x1f\xe6\x11\xb4\xbe\x3f\xb0\x93\x26\xeb\xd1\x6e\x24\xe1\xde\xf7\xbd\x6f\x4c\xc0\x5a\xc2\xed\xdd\xc3\x93\x42\xfb\xf8\x8d\x55\x2d\xd2\xab\x92\x2b\x14\x05\x5b\x60\xa7\x7d\x03\x43\x30\xbe\xc4\x29\x3b\xec\xa1\xc2\x4f\x25\x56\xb9\x34\x19\x94\x45\x4f\x63\x42\x97\xf5\x9c\xc1\xff\x52\xe0\x65\x05\x9d\xef\x79\x6b\x09\x29\xb0\xa6\x41\x9e\x87\x6b\x19\x43\x40\x76\x1f\xea\xaa\x5d\x11\x8f\x90\xc2\x2f\x31\x04\x49\x92\x44\xbe\xe7\xf5\x40\x46\x7b\xfb\x1c\x1f\xb9\x21\x31\x47\x61\x14\xf9\x9e\x9e\x10\xe6\xc2\x7e\xdf\xaa\xda\x81\x7a\x14\xc9\x80\xd8\xc5\x71\x0a\x06\xd9\x5f\xf0\x52\xfd\xc9\x2a\x6a\x8c\x83\x7b\xcb\x02\x2a\xe4\xe1\x5a\x46\x90\xa6\xf0\x83\x49\x5e\xd8\x7e\xe1\x65\x15\xc3\x5f\x82\x35\xe7\x42\x84\xa6\x69\x92\x39\x6e\xc2\x80\x23\xe6\xa0\xea\xa1\x11\x99\x82\x0a\x99\x54\x50\x73\x84\x82\x80\x07\x36\x41\x6a\x14\x2a\x2c\x75\xca\xa4\x15\xe0\x2d\x48\x25\x4a\xbe\x0c\xd7\xf2\xf6\xac\xbf\x7e\xf6\xd3\x5d\x04\x6f\xa7\xbd\x40\x11\x1a\x81\x0d\x13\x98\xc7\x90\x65\x02\x9b\x8a\x2d\xd0\xb6\xf1\x59\x0a\xf5\xc3\xd7\xa4\x3f\x0f\xad\x63\x64\x32\xa2\x63\xa7\x98\x27\xf2\xb1\x55\xc8\xb1\x40\xb1\x8f\x4d\x9d\x4c\x61\xab\x7a\x79\xad\x56\xaa\x0f\x6b\x58\x64\x62\x39\x8e\x61\x64\x4b\x46\xa3\x71\xdd\x36\x4d\x2d\x94\xb4\x53\x56\xf2\xa5\x29\x1b\x1d\xf2\x52\x39\xc3\xe7\x7b\x04\x8b\xa8\x18\x52\x4a\x2e\x5b\x14\x4f\x57\xf5\x26\x3c\x8c\x9e\x5c\x2f\x18\x37\x6f\xf3\x5c\xd4\x05\x84\x45\xc5\x94\x42\x3e\x84\x8b\x6c\x25\xff\x63\xaa\xfd\xe1\x70\x99\xb3\x16\x78\x59\xd9\xbe\xa8\x24\xda\x09\x26\x42\xe4\x48\xb4\x83\xf9\x7c\x8b\x8b\x09\xde\xef\x41\x92\x65\xcd\xa3\x13\x5c\xa0\x4c\x3e\x33\xa9\x2e\xb8\x44\xa1\x2e\xf2\xf0\xbb\x73\xa3\xd2\x2d\x51\x51\x30\xea\x7b\x9b\x62\x72\xf3\xd4\xd0\xb8\x84\x74\xed\x74\x00\xf4\x74\x0d\xfa\x5d\xf7\xee\x8d\x9f\xbe\xf2\xe7\x03\xfc\x5e\xe5\xfd\x7c\xbc\x3e\x9a\x5f\xb4\x7c\x01\x61\xfd\xf0\x15\xde\x50\x52\x1f\x4b\x56\xe1\x42\x81\xd6\x1f\x7f\x8d\xa8\x9a\x0a\x57\x4d\x45\xa3\x18\xd8\x2b\x67\xe4\x10\x40\x42\x4d\x77\xda\xf9\x66\xfb\xcf\xce\xae\x2c\x38\xc7\x33\xce\x56\xcf\x45\xcb\xac\x5b\xd0\x9a\x1e\x3e\xb5\x7c\x31\x2e\xf0\xd3\x52\xe3\xc6\x94\xe5\xd2\x86\x3c\x05\xaa\xbf\x95\x90\x85\xfe\x73\x61\xf4\x01\xa0\xe7\x5c\x42\x92\x24\x13\x4c\x16\x66\x04\xa1\xb1\x12\x28\xdb\x4a\x59\x42\x46\x93\x7f\x27\x8e\x13\x92\x5e\x44\x6b\xf2\x21\xb0\xd0\xb9\x02\x66\x37\xdf\x0b\x12\xe6\x49\x44\x4e\x73\xb1\x62\xcd\xad\xb5\xa6\x73\x3a\x61\x79\x6e\x5c\xe8\x94\xee\x08\x89\x91\x7e\x97\xc6\x36\x1a\x38\xa1\x22\x33\x36\x65\x01\x65\xbe\x8d\xa1\x7e\x24\x37\x0a\x7e\x4b\x6e\x77\x3f\x43\xfd\x48\xe7\xbd\x70\xdc\x96\xf9\xf6\x0e\x52\x1b\xc5\xf7\x68\xa6\xbc\xbd\x31\xa4\x46\x26\xac\x69\x64\x48\xa4\xdf\xa1\x38\x19\x3c\x6f\x21\x20\x61\x0a\x5e\xd2\x46\xf3\xbf\x99\xdc\xa3\x5f\x18\xee\xf7\xc5\xa4\x16\xf4\xf7\x71\x9d\x1c\xb8\x09\xa7\x52\x1d\xec\x05\xd0\xec\xcc\x21\x18\xb9\x14\xb5\x80\x6c\xfc\xa0\x3a\x4b\xfb\xc8\x43\x0f\x11\x39\x63\xd4\x5e\xcc\x17\x26\x2e\xc9\x6f\x18\x8d\x0a\xef\xaa\xba\xa1\x66\x50\x3d\x5b\x19\x99\x5c\xf5\xda\x72\xdf\x75\xf4\x65\xa3\xf5\x7d\x3c\x52\x18\xec\x76\xbb\xcb\xeb\xdd\x6e\x17\xec\xdf\x0d\x7e\xbf\xd5\x25\xb7\xa2\x1f\x43\x10\xc5\xf0\x63\xe4\x7b\x7b\x3d\x7c\x49\x0d\x4f\x6a\xa1\xd5\xa0\xe9\xfa\xec\x97\xa7\x23\x87\x8e\x18\x32\x1a\xaf\xb3\x23\x5f\x15\x33\x47\xb2\x66\x5a\x47\xde\x54\x38\xad\x6c\x92\xb7\xf9\x3c\x19\xeb\x7c\x54\x2e\x9d\xa1\x4c\xe1\xff\xd3\x6d\x62\x4f\x2d\xee\x67\xca\xb9\x0d\x87\x1b\x7a\x0f\x23\x9c\x36\x94\x6d\xd3\x9e\x82\x34\x05\xb9\xae\x92\x73\x21\xe6\xf5\x55\xbd\xa1\xea\x0e\x6c\xbb\xba\x42\x42\x48\xef\xb4\xeb\x3b\xd2\x77\xcc\x63\x42\xe5\xde\xb5\x37\xb1\x48\x6c\x5c\xd3\x7a\x24\xb0\x7d\xc2\x59\x7c\x98\x95\xd1\xd6\x91\xb2\x57\x20\x70\xe5\x70\xb2\xa0\x24\xd2\xf6\x7f\xb6\x4e\x9f\x7d\xdd\xb8\x33\x77\xb0\xbf\xdf\xbc\xd3\xda\xff\x3b\x00\x00\xff\xff\xb2\x28\x6e\x86\xc7\x0c\x00\x00")

func golangUpdateTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangUpdateTmpl,
		"golang.update.tmpl",
	)
}

func golangUpdateTmpl() (*asset, error) {
	bytes, err := golangUpdateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.update.tmpl", size: 3271, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x4d\x8f\xda\x38\x18\x3e\xc3\xaf\x78\x55\x71\x60\xd0\x90\xde\x77\x55\x8d\x32\xe0\xe9\xa6\x0d\x0e\x93\x98\xad\xe6\x98\x12\x53\xbc\x4a\x1c\x36\x18\x8d\x90\xf1\x7f\x5f\xd9\xce\x27\x4d\xd8\xe9\x6a\x0e\x7b\x73\xec\xc7\xcf\xfb\xbc\x9f\x8e\x94\x1f\x67\xb0\x0e\x22\xf2\x39\x44\xd1\xb3\x0f\x11\x71\x09\x5a\x21\x4c\x80\xa0\xd5\xda\x77\x09\x8a\x00\x66\x1f\x95\x1a\x8f\xa5\x9c\x43\x42\x77\x8c\x53\xf8\x70\xdc\xee\x69\x16\x7f\x80\xb9\x52\x66\xbf\x88\xf9\x0f\x0a\x0e\x89\xbf\xa7\xf4\x08\x4a\x8d\x17\x21\x72\x09\x02\xe2\x3e\xfa\x08\xa4\x04\x07\xc7\x19\x05\xa5\x60\xda\xc2\x4f\xd8\x3d\x4c\xb6\x79\x0a\xbf\x7d\x02\x67\x91\xa7\xa7\x8c\x9b\xcb\x52\xb2\x1d\x4c\x98\x52\xf7\x52\x52\x9e\x28\x35\x92\x12\x5e\x99\xd8\x5b\xb4\x36\x3a\x6a\x73\xea\x35\x39\x1f\x68\x75\x32\x07\xb6\x03\x07\xe7\x02\x9f\xd2\x54\x03\x70\x40\x00\x6f\x7c\x1f\xf4\x19\xe5\x49\x17\x18\xd2\x1d\x2d\x28\xdf\x1a\xae\x10\x3d\xa1\x10\xe1\x05\x8a\x0c\x6d\x7d\x66\x7d\x03\xa5\xa6\xdd\x6d\x2b\x1b\x94\xba\x83\x00\xc3\x12\xf9\x88\xa0\xab\x9b\x01\x5f\xd2\x94\x0a\x7d\xb9\x6d\x7f\x78\x6d\x54\xad\x0b\x96\xc5\xc5\xf9\x2b\x3d\xeb\x90\xdc\x8f\xd6\xa1\xb7\x72\xc3\x17\xf8\x8a\x5e\x60\x3a\x10\xc3\xce\x9d\x26\x8a\x50\x86\x51\x4a\x0b\x35\x2b\x6d\x4e\xa9\xbb\x6b\xd3\x65\x26\x37\x9c\xfd\x7d\xa2\xd6\xf2\x06\x7b\xcf\x1b\x34\x68\xf4\x97\x4d\x29\x35\xbe\xfb\x7d\x5c\xef\xb7\x56\x9d\x1a\x4b\x72\xc1\xe3\x8c\x56\x45\x06\x75\x06\x1c\xfd\x51\xc7\xbd\xe3\x40\x87\x20\xa5\x3b\xf1\x57\xce\xb8\x65\xf0\xd1\x13\x81\x2f\x81\x87\x6d\x76\xd8\x8f\xbd\xa8\x19\x75\xea\xa4\x04\x41\xb3\x43\x1a\x8b\xb6\x6d\xc7\xa7\x3b\xa1\x11\x9f\x86\x00\x86\xe9\xa6\x8e\x6d\xce\x13\x26\x58\xce\x9b\x7e\xd1\x09\xb6\x1e\x2c\xb2\x43\x5d\xd0\x7d\xf4\x35\xaa\x56\xd2\x78\xaf\x77\x83\x03\x2d\x62\x91\x17\xfa\xe4\xe1\xa7\x9a\xea\xd8\x29\x43\xf6\x26\x6b\x76\xd1\x6f\xb3\x3c\x6b\x5b\x7e\x23\x5d\x6f\xac\xba\x3a\xbd\xb7\x08\xf4\x1a\x65\x1e\xd6\x85\xd9\xc2\x1e\x69\x4a\xb7\xa2\x0d\xf5\x78\x4f\xa1\x0f\xe4\xea\x75\x4f\x0b\x7a\x3d\xd7\xca\x72\xe7\x89\xad\xf7\x4a\x1f\xdb\x01\xcf\x05\x4c\x18\x28\xf5\xed\x0f\x14\x9a\xbe\xa7\xe9\xd1\x54\x94\x8b\x97\x50\x17\x76\x47\x60\xab\x1c\x2c\xe9\xad\x61\xd0\x9d\xba\xc6\xb5\xf9\xeb\x3e\x16\x75\x57\x4c\x84\xa9\x61\x2d\xac\xaa\xe6\x2a\xa2\x29\xe5\xe0\x7c\xdb\xc7\xa2\x56\xdc\x72\x47\x93\x98\x5b\x06\x60\x24\x9a\x1e\x06\xdb\xc4\x8d\xf0\xd2\x80\x6d\x3b\x7b\xad\xd5\xd4\x56\xac\xf6\xb9\xb2\xd1\xe0\x67\xbf\xe2\x95\x75\x28\x42\x3e\x5a\x10\xe8\x49\x68\xe9\xb5\xa3\x14\x3c\x85\xc1\x0a\xda\x03\xc1\x8e\xf2\x72\x72\xe9\xc2\xf8\x92\x33\xfb\x92\x8c\xba\x75\xd4\x4c\x04\xa7\xbe\xf6\xd3\x73\xb0\xa8\xf2\xd3\xc7\x50\xd6\xc7\x35\xa8\x97\x28\x28\x12\x5a\x3c\x9e\x2d\x4b\x10\x2e\x51\x08\x8f\x2f\x43\xad\x52\x82\x9b\xb9\x06\x6e\xb4\x18\x20\xf6\x59\xc6\x84\xa5\xf5\xbd\x95\x47\xe0\xa1\x0b\xbc\x31\x89\x4e\xbc\x1b\x69\xb3\x33\x9d\xdd\xfd\xdf\x83\xfa\x6f\x3d\xf1\x3d\x3e\xb6\xda\xb6\x17\x99\x98\x47\xd8\x82\xca\x77\x7a\xc0\xe9\x7e\xc1\xef\xa3\x97\xf1\x23\x2d\xca\x1c\x78\x38\x42\x21\x01\x0f\x93\x60\x50\x85\xfd\x29\x32\xb1\x1c\x0d\xbd\xc0\xcd\xaf\xd3\x70\x17\x5f\x3f\xc6\xf0\xa7\xeb\x6f\x50\x34\x35\xae\xfd\x27\xd6\x87\xd6\xcb\x5e\xfb\x6e\xfe\xa0\xc8\x26\xc4\x1e\xfe\x0c\xb3\xe1\x30\x9c\x0e\x49\x5c\x25\x63\xb3\x5e\xba\xe5\x4f\x53\xfd\x20\x47\x88\xc0\xe5\x72\x79\x8e\x2e\x97\xcb\xbb\x24\xe5\x86\xb0\x7f\x02\x00\x00\xff\xff\x5f\xa3\x67\x2b\x04\x0b\x00\x00")

func postgresTmplBytes() ([]byte, error) {
	return bindataRead(
		_postgresTmpl,
		"postgres.tmpl",
	)
}

func postgresTmpl() (*asset, error) {
	bytes, err := postgresTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.tmpl", size: 2820, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlite3Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x4d\x6f\xea\x38\x14\x5d\xc3\xaf\xb8\x7a\x62\x01\xa8\xe4\x2d\x66\x37\xa3\xa7\x2a\x05\x57\x93\xd7\x90\xd0\xc4\x4c\xd5\x65\x4a\x4c\xf1\x28\x71\x98\x60\x54\x21\xe3\xff\x3e\xb2\x9d\x4f\x9a\x30\xed\xa8\x8b\xb7\x73\xec\xe3\x73\xcf\xfd\x74\x84\xf8\x3e\x85\xf0\xd1\x75\x30\xfa\x0d\x42\x6c\x63\xb4\x44\x1e\x06\x8c\x96\x2b\xd7\xc6\x28\x04\x98\x7e\x97\x72\x38\x14\x62\x06\x31\xd9\x52\x46\xe0\xdb\x61\xb3\x23\x69\xf4\x0d\x66\x52\xea\xfd\x3c\x62\xaf\x04\x2c\x1c\xbd\x24\xe4\x00\x52\x0e\xe7\x01\xb2\x31\x02\x6c\xdf\xb9\x08\x84\x00\xcb\x8b\x52\x02\x52\xc2\xb8\x81\x1f\xd1\x1b\x18\x6d\xb2\x04\x7e\xff\x01\xd6\x3c\x4b\x8e\x29\xd3\x97\x85\xa0\x5b\x18\x51\x29\x6f\x84\x20\x2c\x96\x72\x20\x04\xbc\x51\xbe\x33\x68\x65\x74\xd0\xe4\x54\x6b\x7c\xda\x93\xf2\x64\x06\x74\x0b\x96\x97\x71\xef\x98\x24\x0a\xe0\xf9\x18\xbc\xb5\xeb\x82\x3a\x23\x2c\x6e\x03\x03\xb2\x25\x39\x61\x1b\xcd\x15\xa0\x7b\x14\x20\x6f\x8e\x42\x4d\x5b\x9d\x19\xdf\x40\xca\x71\x7b\xdb\xc8\x06\x29\x27\xe0\x7b\xb0\x40\x2e\xc2\xe8\xe2\xa6\xcf\x16\x24\x21\x5c\x5d\x6e\xda\xef\x5f\x6b\x55\xab\x9c\xa6\x51\x7e\x7a\x20\x27\x15\x92\x9b\xc1\x2a\x70\x96\x76\xf0\x0c\x0f\xe8\x19\xc6\x3d\x31\x6c\xdd\xa9\xa3\x08\x45\x18\x85\x30\x50\xbd\x52\xe6\xa4\x9c\x5c\x9a\x2e\x32\xb9\x66\xf4\x9f\x23\x31\x96\xd7\x9e\xf3\xb8\x46\xbd\x46\x3f\x6d\x4a\xca\xe1\xe4\x8f\x61\xb5\xdf\x58\xb5\x6a\x2c\xce\x38\x8b\x52\x52\x16\x19\x54\x19\xb0\xd4\x47\x15\xf7\x96\x03\x2d\x82\x84\x6c\xf9\xdf\x19\x65\x86\xc1\x45\xf7\x18\x7e\xfa\x8e\x67\xb2\x43\x5f\x77\xbc\x62\x54\xa9\x13\x02\x38\x49\xf7\x49\xc4\x9b\xb6\x2d\x97\x6c\xb9\x42\xfc\xe8\x03\x68\xa6\xab\x3a\x36\x19\x8b\x29\xa7\x19\xab\xfb\x45\x25\xd8\x78\x30\x4f\xf7\x55\x41\x77\xd1\x57\xa8\x4a\x49\xed\xbd\xda\xf5\xf7\x24\x8f\x78\x96\xab\x93\xdb\x77\x35\xd5\xb2\x53\x84\xec\x43\xd6\xcc\xa2\xdb\x66\x71\xd6\xb4\xfc\x41\xba\xce\x58\xb5\x75\x3a\x1f\x11\xe8\xd4\xca\x1c\x4f\x15\x66\x03\x7b\x20\x09\xd9\xf0\x26\xd4\x61\x1d\x85\xde\x93\xab\xb7\x1d\xc9\xc9\xe5\x5c\x2b\xca\x9d\xc5\xa6\xde\x4b\x7d\x74\x0b\x2c\xe3\x30\xa2\x20\xe5\xd3\x9f\x28\xd0\x7d\x4f\x92\x83\xae\x28\xdb\x5b\x40\x55\xd8\x2d\x81\x8d\x72\x30\xa4\xd7\x86\x41\x7b\xea\x6a\xd7\x66\x6f\xbb\x88\x57\x5d\x31\xe2\xba\x86\x95\xb0\xb2\x9a\xcb\x88\x26\x84\x81\xf5\xb4\x8b\x78\xa5\xb8\xe1\x8e\x22\xd1\xb7\x34\x40\x4b\xd4\x3d\x0c\xa6\x89\x6b\xe1\x85\x01\xd3\x76\xe6\x5a\xa3\xa9\x8d\x58\xe5\x73\x69\xa3\xc6\x4f\x3f\xe3\x95\x71\x28\x44\x2e\x9a\x63\xe8\x48\x68\xe1\xb5\x25\x25\xdc\x07\xfe\x12\x9a\x03\xc1\x8c\xf2\x62\x72\xa9\xc2\xf8\x99\x51\xf3\x92\x0c\xda\x75\x54\x4f\x04\xab\xba\xf6\xee\x39\x98\x97\xf9\xe9\x62\x28\xea\xe3\x12\xd4\x49\xe4\xe7\x31\xc9\xef\x4e\x86\xc5\x0f\x16\x28\x80\xbb\xe7\xbe\x56\x29\xc0\xf5\x5c\x03\x3b\x9c\xf7\x10\xbb\x34\xa5\xdc\xd0\xba\xce\xd2\xc1\x70\xdb\x06\x5e\x99\x44\x47\xd6\x8e\xb4\xde\x19\x4f\x27\xbf\x7a\x50\xff\xab\x27\x5e\xa2\x43\xa3\x6d\x3b\x91\xb1\x7e\x84\x0d\xa8\x78\xa7\x7b\x9c\xee\x16\xfc\x35\x7a\x29\x3b\x90\xbc\xc8\x81\xe3\x85\x28\xc0\xe0\x78\xd8\xef\x55\x61\x7e\x8a\x74\x2c\x07\x7d\x2f\x70\xfd\xeb\xd4\xdf\xc5\x97\x8f\x31\xfc\x65\xbb\x6b\x14\x8e\xb5\x6b\xff\x8b\xf5\xb6\xf1\xb2\x57\xbe\x5f\x73\xfd\xb8\x8f\xa3\x32\x01\xeb\xd5\xc2\x2e\x7e\x94\xaa\x47\x38\x44\x18\xce\xe7\xf3\x63\x78\x3e\x9f\xbf\x24\x11\x17\x62\xfe\x0d\x00\x00\xff\xff\x98\xb8\x02\x49\xe9\x0a\x00\x00")

func sqlite3TmplBytes() ([]byte, error) {
	return bindataRead(
		_sqlite3Tmpl,
		"sqlite3.tmpl",
	)
}

func sqlite3Tmpl() (*asset, error) {
	bytes, err := sqlite3TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sqlite3.tmpl", size: 2793, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"golang.count.tmpl": golangCountTmpl,
	"golang.delete-all.tmpl": golangDeleteAllTmpl,
	"golang.delete.tmpl": golangDeleteTmpl,
	"golang.footer.tmpl": golangFooterTmpl,
	"golang.get-last.tmpl": golangGetLastTmpl,
	"golang.has.tmpl": golangHasTmpl,
	"golang.header.tmpl": golangHeaderTmpl,
	"golang.insert.tmpl": golangInsertTmpl,
	"golang.misc.tmpl": golangMiscTmpl,
	"golang.select-all.tmpl": golangSelectAllTmpl,
	"golang.select-paged.tmpl": golangSelectPagedTmpl,
	"golang.select.tmpl": golangSelectTmpl,
	"golang.update.tmpl": golangUpdateTmpl,
	"postgres.tmpl": postgresTmpl,
	"sqlite3.tmpl": sqlite3Tmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"golang.count.tmpl": &bintree{golangCountTmpl, map[string]*bintree{}},
	"golang.delete-all.tmpl": &bintree{golangDeleteAllTmpl, map[string]*bintree{}},
	"golang.delete.tmpl": &bintree{golangDeleteTmpl, map[string]*bintree{}},
	"golang.footer.tmpl": &bintree{golangFooterTmpl, map[string]*bintree{}},
	"golang.get-last.tmpl": &bintree{golangGetLastTmpl, map[string]*bintree{}},
	"golang.has.tmpl": &bintree{golangHasTmpl, map[string]*bintree{}},
	"golang.header.tmpl": &bintree{golangHeaderTmpl, map[string]*bintree{}},
	"golang.insert.tmpl": &bintree{golangInsertTmpl, map[string]*bintree{}},
	"golang.misc.tmpl": &bintree{golangMiscTmpl, map[string]*bintree{}},
	"golang.select-all.tmpl": &bintree{golangSelectAllTmpl, map[string]*bintree{}},
	"golang.select-paged.tmpl": &bintree{golangSelectPagedTmpl, map[string]*bintree{}},
	"golang.select.tmpl": &bintree{golangSelectTmpl, map[string]*bintree{}},
	"golang.update.tmpl": &bintree{golangUpdateTmpl, map[string]*bintree{}},
	"postgres.tmpl": &bintree{postgresTmpl, map[string]*bintree{}},
	"sqlite3.tmpl": &bintree{sqlite3Tmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

