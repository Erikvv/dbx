// Code generated by go-bindata.
// sources:
// golang.funcs.tmpl
// golang.header.tmpl
// postgres.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _golangFuncsTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x59\xdf\x73\x9b\xce\x11\x7f\x86\xbf\x62\xcb\x64\x32\xe0\x91\x70\xda\xc7\x74\xd4\x8e\x62\x13\xd7\x1d\x45\x76\x2c\xb9\x7d\xf0\x78\xea\x8b\x38\x29\xc4\xe8\xa0\xc7\x11\xdb\x5f\xcc\xff\xfe\x9d\xbd\x43\x88\x1f\x06\x81\xa4\x24\x0f\x19\xc3\x7d\x76\x6f\x7f\x7c\x76\x6f\x39\x25\xc9\xe9\x09\x5c\x5c\x4d\xc6\xd3\x0b\xf8\x7c\x3b\x3d\x9b\x5f\x5e\x4d\x61\xee\x7c\xb9\x9e\x8c\xe7\xce\x0c\x4e\x4e\xd3\x54\xd7\x93\x64\x08\x2e\x5d\x7a\x8c\x82\x11\x12\x4e\xd6\x91\x01\xc3\x34\x95\xef\x39\x61\x2b\x0a\xef\xbc\x01\xbc\x23\x7c\x05\x1f\x47\x60\xcb\x35\x2d\x49\xc0\x5b\xc2\x3b\x0f\xd2\x74\x00\x49\x42\x99\x9b\xa6\x49\x22\x51\xf6\x94\xac\x29\xa4\x29\x6c\x9e\xe7\x2f\x21\x3e\x4b\x85\x94\xb9\xb9\xf2\xcd\xdf\x25\x0b\x08\x5f\xed\xb1\xbf\xd4\x55\xb3\xa0\xdb\x8e\xcc\xf3\x87\x07\xed\xca\x3c\xbf\xdb\x4e\xcb\x98\x2d\x86\xdf\x29\x71\x29\x37\xd0\x3c\x6d\x11\xb0\x48\x40\x24\xd6\x62\xf4\x90\x24\x60\xcf\xbe\x4e\x20\x4d\x1f\x74\x2d\xe4\x34\x24\x9c\xba\x03\xe0\x34\xf4\xc9\x82\x0e\x80\x72\x8e\x96\x04\xdf\x7e\xd8\xd9\xaa\x89\x82\x96\xae\x79\x4b\xb9\xf8\x97\x11\x30\xcf\x87\x44\xd7\x34\x7c\x1c\xc1\x7f\x39\x09\x1d\xce\x4d\xca\xb9\xa5\x6b\x1a\xa7\x22\xe6\x4c\xd7\x52\x5d\x73\xe9\x92\xf2\x8d\x6a\xd3\xd2\x35\xd4\xea\x07\xab\x99\x58\x0b\xa9\x55\x7a\x27\xe8\x3a\xf4\x89\xc8\x93\x62\x8f\xf9\x2a\x82\x34\xb5\xf4\xcc\xf5\xcc\xc1\xd3\x13\x98\x39\x13\xe7\x6c\x0e\xb3\xf9\x78\xee\x7c\x71\xa6\x73\x45\xad\x24\xc9\x5d\x8f\xa8\x4f\x17\x42\x7a\x8d\x51\x00\x33\xf8\xf6\x03\x4e\xce\x3f\x59\xe5\x8d\x14\x6c\x88\x10\x03\x6c\x44\x17\xe1\xf3\xe7\x9d\xf0\x3c\x29\xe5\xc8\x97\x80\x68\xf6\x05\x15\x32\xe0\x82\xc7\x0b\xa1\x98\x63\x7f\x8e\xd9\x62\x16\x2f\x97\xde\x33\xa4\xa9\x29\xe5\xb7\x5b\x6d\x2a\x23\x0f\x02\x98\x9c\x46\xb1\x2f\xe0\xa4\xa4\x48\x25\x8a\x72\x1e\x70\x0b\x92\x8a\x92\x12\x01\xa4\xbd\x5a\xa6\x64\x04\xef\xcb\xf6\xa4\x7a\x96\xc5\x0d\x15\xec\xaf\x31\xe5\x2f\x37\xc1\xd3\xb3\x99\x24\x8d\xa9\xc9\x34\xcc\x16\x84\x65\xf6\x6d\x09\x32\x1a\x41\xf4\x7f\xdf\x76\x38\x9f\x06\x37\xc1\x53\x24\xa9\xa2\x58\x81\xcc\x19\xe0\x7f\x92\x1e\x75\x42\x15\x51\x65\x5a\x49\x17\xe4\xa2\xda\x4e\x69\xa9\x15\xc1\x96\x23\xe3\xc9\xa4\xca\x93\x3a\x51\x86\xc4\xf7\xbb\x92\x85\xf8\x7e\x5f\xc2\x54\x44\xda\x49\xb3\x05\x6f\x89\x13\xfa\x31\x27\xbe\xf7\x07\x3d\x0e\x85\xee\xee\x0f\x23\x51\x85\x29\x33\x69\xb8\xf9\x7e\x93\x91\x16\xbe\xfc\xe2\x64\x5f\x8f\x2f\x9c\xf3\x0e\xe9\x0e\xc9\x8a\xba\x5d\x13\x2e\xc1\x7d\x53\x5e\x13\x6a\x4f\x7a\x11\x8e\x5e\x5d\xe3\x73\xef\xdc\x7b\xcb\x3c\xd2\xed\x54\xc8\x4f\x13\xdc\x0b\x00\x60\x21\x82\x47\xca\x20\x12\xdc\x63\xab\x01\xf8\xde\xda\x13\xe0\x31\xd1\xc6\x19\x25\x13\xc4\x22\x17\xeb\xc5\x22\x5d\x93\xbb\x64\x27\x9e\x31\x9e\x4c\x0c\xc9\x0e\xb5\xf7\x3f\xe0\x83\x24\x47\x8e\x19\xc1\x72\x2d\xec\x59\xc8\x3d\x26\x4c\xf9\x56\x12\xa4\x03\x19\xcb\x61\x69\x3c\x66\xf2\xb9\x22\x73\x2c\x8b\x02\xe1\xab\x9d\xac\x35\x8c\x3a\x73\x95\x2f\x34\x6f\x8b\xd8\x0e\x95\x6b\x28\xbd\x8d\x5d\xc9\x2f\x85\xbd\x93\xb8\xe1\x5f\xef\x6d\x8c\xb8\xa4\xc2\x15\x53\xd5\x83\x7a\x2b\x25\x81\x9b\x37\x95\xc5\xd9\xd5\xed\xb4\x76\x4c\x16\xeb\x61\x11\xc4\x6c\xf7\x31\x29\x51\x9d\x2b\xa0\x15\x5d\xd3\xfd\x9d\x44\x9d\x35\x57\xb0\x0d\x25\x55\xdc\x1f\x43\x71\x86\xcf\xc7\x3a\x7d\x3d\x26\x0e\xec\x96\x1d\xcf\x55\x3c\x51\xdf\x57\x8f\xd4\x3a\xff\x3e\xec\xd9\x33\xb7\xe1\xda\x06\x15\x97\xfe\x45\xa2\x63\x85\xea\x5b\x10\xf8\x95\x58\x69\x32\x37\xf9\x70\x29\xa7\xcb\x2e\xe9\xd9\xef\x44\x59\x12\x3f\x52\x93\x6c\x31\x2c\xd2\x04\xec\x2f\xcd\x65\x73\xee\x4c\x9c\xb9\xd3\x32\x5e\xba\xd4\xa7\x82\xee\xac\x1b\x05\xeb\x4c\xef\x3a\xbc\x81\xe1\x25\x20\x9a\x7d\x2e\x5f\x1c\x9c\x38\xa5\xd7\x7d\x2b\x73\x5d\x06\xcb\x3c\xaf\x39\xd7\x9d\x67\xba\x38\x2c\x79\x35\x72\x97\x19\xc4\x69\x64\xe3\x6c\x39\x5e\x2e\xe9\x42\x50\xd7\xdc\x47\x65\x77\x62\x74\x9b\x29\xb3\xf4\x74\x99\x29\xb7\xd0\xbe\x2c\xe9\x36\x53\xd6\xc0\x25\xb6\x1c\x6b\xac\x54\x91\xdb\xa3\x35\x1e\x9b\x34\x6f\x75\xc3\x02\x61\x7a\xf2\xa5\xa5\xb7\x66\x4a\x9b\x78\x72\x39\x9d\x39\x37\x6d\xdf\xa7\x1e\x8b\x28\xdf\x7d\xf0\x2a\x58\x67\x6a\xd4\xe1\x0d\xb4\x28\x01\xe5\x19\xc9\x29\xa9\x34\x90\x5f\xf2\x45\x9a\x6d\x4c\x62\x11\x0c\x3d\xe6\x89\xdc\xcc\x5d\xb3\x62\xf3\x77\x6b\x36\xf8\xb2\x40\x80\x7d\x23\xb3\xf3\xe9\xa5\xf7\xb9\x7b\x29\xed\x8a\x76\x7c\xd1\x1e\xf0\xd1\x22\x39\xe2\x47\xb4\x3f\xed\xb7\xa6\xf5\xb6\x23\x7c\x2c\x35\xca\x09\x89\x84\xd2\x76\xd9\x4e\xfc\x56\xaf\xf0\xcc\xae\x5e\x67\x7c\x7a\xc1\xc7\x42\xf4\xcd\xf0\xd1\x2a\xd5\x45\xad\x4a\xaa\x5c\x64\xc1\x50\x6d\xd0\xb5\x28\x72\x81\xbe\xe5\xf1\xa6\x60\x7b\xa1\x54\x45\xf6\x2f\x99\x5f\x51\x1b\xff\xdb\x74\xb7\x5e\x5c\xca\xd2\x59\x4a\x73\xcb\x98\x58\xb7\x6e\x73\xf7\x88\x9f\x57\x53\x4a\xdd\x68\x1a\x3c\x49\x7a\xb3\xe0\x09\x29\x37\x0d\x9e\x4c\xab\x76\x53\xa9\x2e\x3b\xed\x71\x2c\x82\x08\xb2\x4b\xce\xfc\x0a\xf7\xe3\x08\x33\x66\x5f\x32\x4f\xec\xb8\x4f\x3d\x3d\x81\xdb\xeb\xf3\x71\xeb\x94\x16\x87\x2e\xe9\x30\xa5\x29\x58\x67\x16\xd5\xe1\x0d\xdc\x29\x01\xd1\xec\x5b\xf9\xe2\xb0\x29\x6d\x00\x4a\x6d\x04\xb6\x6d\x97\x54\x29\xed\x7b\x75\xe5\x82\xa5\x05\x6e\xc9\x48\x03\x00\xf4\xef\xbd\x28\xd5\xd8\x7e\x91\x8b\xb6\x6d\xbf\xd9\x69\x51\xb0\xda\x96\x20\xfb\xd7\xd8\x9c\x70\x31\xd5\x0b\x90\xa6\xc6\x9b\x39\xd3\xd0\x7b\x37\x76\x1d\x6a\x44\x7b\xd7\x3d\x8e\x87\xc7\x6e\xc2\x19\x03\xba\x37\xe1\xaa\x40\xdf\xf2\xe9\xd3\x84\x1b\x44\x7e\x63\x49\xed\x55\x3b\x98\xae\x86\xd6\x5c\xa2\x5a\xcf\x46\xfc\xd6\x86\xf2\xd7\xa2\x9f\x84\x03\x23\x6b\x1a\xc1\xdd\xbd\xba\x91\x53\xef\x7e\x12\x3f\x96\x2f\x3d\x26\x28\x5f\x92\x05\x4d\x52\x5d\x8b\x28\x65\x48\xd1\x35\x09\xef\x14\x1a\xd7\x71\x85\xb8\xae\x14\xc1\x55\xdc\xc5\x44\xa5\xf9\x1d\x9f\x5a\x2a\xa8\x92\xdf\xf5\x38\x4b\x78\xee\xf3\x00\x82\x47\x14\x43\xe5\x77\x28\x76\xff\x77\x08\x1e\x71\x5d\x53\x56\xdc\x79\xee\xf3\x3d\x8c\x94\x16\x5d\xc3\xb1\x42\xdb\x82\x61\x24\x6f\xcc\xa4\x13\x96\xae\x69\xca\x9b\x11\x90\x30\xa4\xcc\x55\xef\x07\xd2\x47\x5c\xcd\xfc\xca\x97\xd5\x73\x66\xa1\x1c\x59\x8e\x70\x3a\x6d\x82\x61\x1a\xc8\x8c\xb3\xc0\x8f\xd7\x0c\xd2\xd4\x18\x14\x0f\xaa\xad\x1e\x14\x59\x06\x1c\xf3\xae\xf2\x24\xbb\x80\x54\xba\x21\x19\x46\x23\xd7\xaa\x5e\xda\x0b\xa9\x17\x4f\x41\xd3\xda\x48\xda\x0a\x61\x65\xb7\x7e\x91\x58\x0b\x19\x5a\x99\x87\xc8\x9e\xd2\xa7\x1b\xf5\x83\x1a\x37\x75\x4d\x33\x5e\x5f\x5f\xa7\xe3\x2f\xce\xec\xf5\xf5\xd5\x18\xe4\xa8\x7f\x07\x1e\xdb\xc4\xcd\x18\x80\x61\x0d\x32\xec\x7f\xc6\x93\xdb\x2a\xf8\x86\x86\x94\x08\xd3\x18\xc0\x3f\x8d\x81\xcc\x84\x0a\xa9\x65\xdd\xfd\xed\xe3\xbd\x65\x67\xfb\xe1\x76\x0f\x49\x62\xcf\xbe\x4e\xd2\xf4\xc1\xfa\xfd\xbf\x1e\x62\xf5\xa0\xf6\x4a\xde\xcb\x75\x59\xfc\x68\x1c\xa6\xa9\xa5\xbd\xf5\xab\x63\x5e\x87\x85\xeb\xf0\x3f\x03\x00\x00\xff\xff\xd5\xfb\xba\x92\xc5\x1e\x00\x00")

func golangFuncsTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangFuncsTmpl,
		"golang.funcs.tmpl",
	)
}

func golangFuncsTmpl() (*asset, error) {
	bytes, err := golangFuncsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.funcs.tmpl", size: 7877, mode: os.FileMode(420), modTime: time.Unix(1475382508, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x57\x5d\x6f\xe3\xb8\xd5\xbe\x16\x7f\xc5\x59\xe3\x9d\x81\x94\x38\xf4\x5c\x7b\x37\x6f\xb1\x1e\xa7\x8b\x02\xd3\x64\x90\xf5\xa0\x28\x16\x8b\x01\x25\x1d\x3b\xac\x29\xd2\x43\x51\xfe\x58\xd5\xff\xbd\x38\x24\x25\xcb\xb1\x67\x3b\xdd\xd6\x17\x91\x44\x9e\x8f\xe7\x3c\x7c\x78\xc8\x4c\x26\xf0\xe3\xa7\xc5\xd3\x4f\x0f\x8f\x0f\xcf\x3f\x2e\x1e\xe6\x30\xfb\x3b\xac\xa4\x7b\x69\x72\x5e\x98\x6a\x52\x6f\x44\x81\x95\xd1\x6b\x3c\xac\xcc\xa4\xcc\xf7\x6c\x32\x81\xf9\x13\x3c\x3e\x2d\xe0\x61\xfe\x97\x05\x67\x6c\x23\x8a\xb5\x58\x21\xb4\x2d\xf0\x8f\xf1\xfd\x78\x64\x4c\x56\x1b\x63\x1d\xa4\x2c\x19\x95\xc2\x89\x5c\xd4\x38\xa9\xbf\xa8\x11\x4b\x46\xcb\xca\xd1\xa3\x76\x56\xea\x55\xed\x5f\x0f\xba\xa0\xa7\x93\x15\x8e\x18\x4b\x46\x03\x0c\xff\xa8\x8c\xb4\x46\x93\xf3\x7e\xc4\x32\xc6\xb6\xc2\xc2\xdf\xac\xd8\x3c\x58\x0b\xf7\xb0\x6c\x74\x91\xa2\xb5\x80\xd6\x1a\x9b\x85\x07\xb4\x16\x5d\x63\x35\x7d\x1d\xbd\xc3\x07\xb3\x5a\xa1\x0d\xd6\x4b\x63\x2b\xe1\x20\xe4\x1f\x83\xb0\xab\x1a\x38\xe7\x52\x3b\xb4\x4b\x51\x60\x7b\xcc\xbc\xcf\xa3\xd9\xc1\x3d\x10\x26\xfe\x68\x76\x8c\x91\x33\x28\xb3\xc2\x61\xbe\x96\x25\x72\xd9\x85\xff\xee\x1e\xb4\x54\xf0\xf6\x2d\xcd\x76\x5f\x2d\x4b\x92\x30\x9f\x8e\x02\xba\x42\x99\x5a\xea\x15\xd4\x4e\x38\xac\x50\xbb\x29\xbc\xd9\x8e\xc6\xe4\x94\xb1\xe4\xc8\x8e\x8c\xb5\x2d\x58\xa1\x57\x08\xfc\x67\x67\x9b\xc2\xd5\x44\xaa\x3b\x6c\x02\xd1\x8f\xa2\x22\x96\xa9\x84\xa6\x70\xd0\xb2\xb6\xbd\xeb\xec\xff\x2c\x51\x95\xde\x3c\x19\x9a\xd2\xfb\x82\xfc\xbb\x77\xb1\x22\x1b\x72\x44\x5d\xd2\xab\xcf\x7a\x07\x72\x09\xfc\xd3\xc6\xaf\x99\xc2\x53\xb0\xb6\x85\xff\x8b\xe9\xa6\xf7\x7d\xd8\x1e\x52\x37\x77\x3c\x7a\x5f\x84\x9e\x4d\xaa\xbf\x30\xaa\xa9\x34\xf9\xa4\x59\xe4\x9d\x25\x5b\xa1\x1a\xfa\x1e\xf0\xce\x92\x8d\x95\x5b\xe1\xf0\x2c\x62\x9a\xb1\xe3\x80\x90\xaf\x80\x6b\x36\x27\x78\x1b\x2b\xb5\x5b\xc2\xe8\x4d\xfd\xa6\x1e\x41\x5a\x88\x0a\x55\x69\x76\xba\x0b\x9a\x5d\x29\xa0\xf7\x3f\x27\x2b\xac\xfa\x19\x9e\x01\xad\xe9\x76\x68\x9b\x5d\x65\xa2\x85\x28\xc6\x57\x59\xd2\x6d\x06\x31\x7c\xda\xbc\x9e\xcc\xe0\x0a\x67\xa7\x50\x23\xca\xfa\xde\x5b\xc0\xf1\x38\xfa\xbd\x38\x57\x68\x3e\x83\xd4\x81\x4f\x9b\xdf\x85\x73\x7d\x61\xa0\x3d\x49\xe8\xee\x78\xfd\x9d\xba\x81\x67\x79\x3e\x3b\x09\x36\xb9\xa1\xfd\xcc\xe7\x33\xc6\x12\x65\x1b\xb8\x51\xb6\x21\x05\xfa\xfc\x4f\x1b\xd4\x69\x6d\x1a\x5b\x60\xbf\x4b\x95\x6d\x3e\xd7\xf2\x37\x2f\xac\x0c\xd2\x9b\xf9\x6c\x3c\xd8\x82\x65\xee\xbf\x68\xed\x7d\xdc\xf7\x46\x6b\x2c\x5c\x4a\xf5\xcd\xa5\x50\x58\x38\xf8\xe7\x49\x16\x5f\x46\x70\x3c\x8e\x21\xa4\xc8\xfc\x0e\x7e\xb5\x61\x23\x3f\x5a\xaa\x71\xd7\x6c\xd2\x6e\x7b\xb2\x6e\xf6\xed\x7c\x46\xb6\xf3\xd9\x14\xca\x7c\xcc\x12\xaa\x64\x0a\x1a\x77\x1f\x9e\x3f\xa5\x04\xa9\x03\x9d\x8d\x59\x72\x1c\x53\xb4\xbe\xc6\xb4\xcc\xe1\x66\x3e\xcb\xe0\xbd\x32\x35\xad\xcf\xab\xa6\x52\xe6\x5c\xd9\x86\x7f\x6c\xec\x0a\xd3\xac\x4f\xd9\x61\x29\x73\x3e\x9f\xf1\xe8\x9b\x5d\x46\xdd\x58\xdc\x08\x8b\x69\xed\xaa\xae\xd3\x65\x90\xc6\xd1\x12\x02\xfb\x3f\xbb\xca\x8d\xc1\xe2\x46\xd1\x3e\xf5\xbd\x31\x0b\x3c\x9e\x70\xa0\x76\xf6\xd0\x93\x1b\x51\xfd\x84\xce\x47\xfe\xb7\xd4\xf9\x3f\x68\x2d\xd1\xd6\x4d\xf8\x88\x31\x77\xc8\x09\x6d\x17\xf8\x39\x60\x49\xbd\x4d\x06\x5f\xe3\x4c\x99\x15\xf9\x0f\xab\x0b\x7d\x9c\x73\x3e\x14\xba\xaf\x60\x32\x81\xc5\xd3\xfc\x69\x0a\x16\x75\x89\x16\x7c\x86\x17\xa3\x4a\xb4\xf5\x95\xe6\x3d\x6c\xd7\xf5\x17\x35\x85\x11\xdc\x82\x4f\x74\x0b\x23\x9f\xe4\xde\x37\x6b\x7a\xeb\xba\xb5\x97\xf7\x62\x7f\x21\xef\xc5\x9e\x16\x92\x30\x5f\xd6\xe0\x45\x4e\x4a\x5e\xec\x87\x4a\x76\xfb\x21\xd9\xf3\x19\x9f\xe1\x4a\xea\x7d\xfa\x5f\xa8\x74\xb1\x27\xdb\xc5\x7e\x0a\x6e\x4f\x2a\x2d\xf3\xa8\xd7\xd7\xf4\xba\x3d\xdc\x2c\xf6\x19\xbc\x37\x55\x25\xdd\xa5\x26\x5f\x69\xd0\x51\x81\xbc\x33\xce\x2e\xe3\x3c\x1b\xa5\x72\x51\xac\xbf\x31\xd2\xc9\xfc\x4a\xac\xff\x99\xa0\x3b\x97\xde\x2e\x18\xdc\x83\xdb\xf3\x32\xe7\xc3\x3c\x7f\x48\xde\x2e\xc0\xd8\xf7\xd8\xb2\x41\xa6\xab\x74\xff\x47\x6a\x0e\x28\x87\x2e\xbd\x6d\xd6\x4b\xd1\x6f\x9f\x81\x1a\xc9\x76\x40\x11\x63\x89\xc6\xbd\x1b\x13\xa9\x5b\xb8\xf1\xd6\x2c\x59\xe3\x01\xe2\xaf\x3b\xa2\x2d\x2e\xeb\x38\x24\xb5\xeb\xc3\x53\xc3\x3e\x05\xaf\x9a\xce\xeb\xa0\x0b\xfe\xd7\xc6\x61\x50\x7d\xf8\xf5\x7d\x3e\x29\xc4\x46\x14\xd2\x1d\x7c\xa8\xc4\x1a\xe3\xbc\x41\xcc\x2e\x75\x89\x7b\xfa\xae\xc4\xe6\x97\x90\xff\xd7\x88\xec\xc8\xe8\xda\x19\xda\x6a\x3c\xb8\x6a\x10\x1a\xa4\x96\x4e\x0a\x25\x7f\xc3\x92\x20\xf1\x40\x6b\xdf\x7e\xfb\xd4\x63\x18\xa6\xce\xfc\x59\x43\xc0\x15\x6d\xb2\xb7\xca\x36\x6d\xdc\x14\xe1\x17\x5a\x79\xe7\x32\xed\x9d\x69\xd4\xa3\x9c\x06\x98\x6b\x4c\x2f\xb0\xfa\x46\xcf\x12\xc5\xa9\x3c\x4e\x24\x03\xa5\xf0\x9f\xfd\xb0\x67\x7d\x30\x1c\x85\xa3\x62\xa1\x52\xd7\x68\x5d\x7c\xd4\x80\x20\x96\x0e\x2d\x08\x37\x06\xa9\x0b\xeb\x2f\x8c\x35\x28\xae\x50\xc7\x92\x53\xe5\x6b\xca\xa2\x4f\x8a\x63\x10\x2e\xae\xab\x17\x8d\xa6\x4a\x45\x00\xc4\x12\xd1\x23\x43\x96\x60\x07\x47\x38\xfa\x88\x13\x9a\x25\xba\x9b\xc0\x88\xcb\x62\x65\xb6\x18\x1f\x84\x6b\x69\x4d\x05\x92\xb0\xc8\xda\x8d\xa1\xc4\x73\x70\xaf\xb0\x05\xbf\x14\x87\xb8\x42\xf2\x1e\x4d\xc4\x17\x9e\x7d\x7a\xff\x32\xc4\x26\x15\x4c\x26\x20\xb6\x46\x96\x50\x61\x65\xec\x01\x14\x8a\x75\x3d\x28\xe6\xeb\x36\xfd\xee\xeb\x70\xe1\x56\x16\x2e\x3d\x57\x48\xb8\xd4\xf7\x63\x3f\xc0\xbb\xc1\xd6\x0f\xcd\xd5\x99\xcf\xde\x93\x98\x55\xa8\x53\xc5\xbd\x36\x32\xb8\xeb\xfd\x58\x52\x34\xd6\xa2\x76\x41\x67\x71\xb5\x97\xc6\x82\xa4\x91\x77\xdf\x83\x84\x1f\xa0\x0b\xf4\x3d\xc8\xdb\x5b\x9f\xa6\xf3\xba\x87\xf8\x16\x19\xf0\x98\xba\xb9\x3e\xa2\x77\x49\x36\x42\xcb\x22\x1d\x85\x5d\x64\x1a\x07\x66\x09\xbb\x17\x51\xac\x39\x58\xea\x85\x85\xd1\xa5\x74\xd2\xe8\xfa\x4f\xa3\x8c\x25\x24\xd2\x41\x38\xee\x37\xfa\xff\xc7\x32\x93\xc2\x68\x27\x75\x83\xd1\x6e\x32\x81\xdd\x8b\x11\x90\x9b\x03\xc8\x1a\xdc\x8b\xac\xa1\x6e\x72\xa7\x90\x83\xe2\x51\x16\xb9\x32\xbb\x1a\xc4\x4e\x1c\xfa\xa0\x7e\xbd\x84\x2e\x43\x88\x61\x2d\x1c\xf2\xc6\x9d\xd9\x85\x85\xdb\x49\xa5\x20\x47\xa8\x1a\xfa\xcf\xa8\x04\x67\x20\xc7\x4b\x77\x20\x0e\xdd\x0b\x82\xcf\x20\x1d\x5a\x41\xa5\x7d\xc7\x12\xdf\xd7\x3e\x0f\x68\x1f\xe6\x60\x74\x43\x8b\x78\xd3\x38\x41\x5c\x94\xa8\xd0\x61\xb7\x82\xe3\xde\x67\x8d\x07\x9a\xf6\xff\xf1\x75\x63\xd4\x3e\x4f\xd7\xae\xb3\xc5\x1a\xa6\x8e\xf7\x82\x73\xa5\xd1\xad\x89\x9a\x6c\x7f\x7a\xdd\x9c\x2e\x57\xf1\x70\x52\xbc\x6a\xf8\x07\x43\x67\x20\x4b\x4a\x5c\xa2\x05\x3f\xf4\x49\xab\x30\xc8\x12\x1c\x83\x59\x7b\xd5\x05\xbc\xbf\xac\xf1\xf0\xab\xd7\xab\x59\xfb\xe5\xeb\x4b\x44\x8f\x9e\x9f\x9a\x42\x54\x0c\x0d\xa3\x5f\xf2\xdb\x5b\x76\x3a\xd1\xe2\xf1\xe4\xd5\x1d\xce\x95\x78\x0f\x51\x74\xe2\x7c\x0c\xa7\xd9\x3e\xf5\x5f\xcf\x98\x4b\x5d\x52\x35\xd9\x1f\xb8\x98\x20\x75\x3f\x5f\x3b\xd9\x12\xa5\x53\x7f\xc3\xa2\x0e\xbb\xc6\x03\xf5\xd7\x35\x1e\xba\x56\x7a\x0d\xff\xb0\xf6\xae\x8f\xf5\x05\x9d\xd7\x73\xb1\x0c\xfd\x1d\x73\xd8\x89\xbe\x85\x78\x9f\xe1\xee\x8e\x8c\x43\xd3\x50\xbc\xdb\xea\xd9\x65\x9a\x78\x73\xff\xc6\xe0\x5d\xc8\x77\x3e\x12\xfb\x57\x00\x00\x00\xff\xff\x48\x90\xbf\xf6\x98\x11\x00\x00")

func golangHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangHeaderTmpl,
		"golang.header.tmpl",
	)
}

func golangHeaderTmpl() (*asset, error) {
	bytes, err := golangHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.header.tmpl", size: 4504, mode: os.FileMode(420), modTime: time.Unix(1475366203, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x4d\x8f\xda\x38\x18\x3e\xc3\xaf\x78\x55\x71\x00\x34\xa4\xf7\xae\xaa\x2a\x03\x9e\x6e\xda\xe0\xd0\xc4\x6c\x35\xc7\x94\x98\xe2\x55\xe2\xb0\xc1\x68\x84\x8c\xff\xfb\xca\x76\x3e\x69\xc2\x4e\x57\x3d\xf4\xe6\x38\x8f\x9f\xf7\x79\x3f\x6d\x29\xdf\xce\x61\x13\x44\xe4\x63\x88\xa2\x2f\x3e\x44\xc4\x25\x68\x8d\x30\x01\x82\xd6\x1b\xdf\x25\x28\x02\x98\xbf\x55\x6a\x3c\x96\x72\x01\x09\xdd\x33\x4e\xe1\xcd\x69\x77\xa0\x59\xfc\x06\x16\x4a\x99\xfd\x22\xe6\xdf\x29\x38\x24\xfe\x96\xd2\x13\x28\x35\x5e\x86\xc8\x25\x08\x88\xfb\xe8\x23\x90\x12\x1c\x1c\x67\x14\x94\x82\x69\x0b\x3f\x61\x0f\x30\xd9\xe5\x29\xbc\x7b\x0f\xce\x32\x4f\xcf\x19\x37\x87\xa5\x64\x7b\x98\x30\xa5\x1e\xa4\xa4\x3c\x51\x6a\x24\x25\xbc\x30\x71\xb0\x68\x6d\x74\xd4\xe6\xd4\x6b\x72\x39\xd2\xea\xcf\x02\xd8\x1e\x1c\x9c\x0b\x7c\x4e\x53\x0d\xc0\x01\x01\xbc\xf5\x7d\xd0\xff\x28\x4f\xba\xc0\x90\xee\x69\x41\xf9\xce\x70\x85\xe8\x09\x85\x08\x2f\x51\x64\x68\xeb\x7f\xd6\x37\x50\x6a\xda\xdd\xb6\xb2\x41\xa9\x19\x04\x18\x56\xc8\x47\x04\xdd\x9c\x0c\xf8\x8a\xa6\x54\xe8\xc3\x6d\xfb\xc3\x6b\xa3\x6a\x53\xb0\x2c\x2e\x2e\x9f\xe9\x45\x87\xe4\x61\xb4\x09\xbd\xb5\x1b\x3e\xc3\x67\xf4\x0c\xd3\x81\x18\x76\xce\x34\x51\x84\x32\x8c\x52\x5a\xa8\x59\x69\x73\x4a\xcd\x6e\x4d\x97\x99\xdc\x72\xf6\xcf\x99\x5a\xcb\x5b\xec\x7d\xd9\xa2\x41\xa3\x3f\x6d\x4a\xa9\xf1\xec\x8f\x71\xbd\xdf\x5a\x75\x6a\x2c\xc9\x05\x8f\x33\x5a\x15\x19\xd4\x19\x70\xf4\x47\x1d\xf7\x8e\x03\x1d\x82\x94\xee\xc5\xdf\x39\xe3\x96\xc1\x47\x4f\x04\x3e\x05\x1e\xb6\xd9\x61\xdf\x0f\xa2\x66\xd4\xa9\x93\x12\x04\xcd\x8e\x69\x2c\xda\xb6\x1d\x9f\xee\x85\x46\xbc\x1f\x02\x18\xa6\xbb\x3a\x76\x39\x4f\x98\x60\x39\x6f\xfa\x45\x27\xd8\x7a\xb0\xcc\x8e\x75\x41\xf7\xd1\xd7\xa8\x5a\x49\xe3\xbd\xde\x0d\x8e\xb4\x88\x45\x5e\xe8\x3f\x1f\x7e\xa8\xa9\x8e\x9d\x32\x64\xaf\xb2\x66\x17\xfd\x36\xcb\x7f\x6d\xcb\xaf\xa4\xeb\x8d\x55\x57\xa7\xf7\x1a\x81\x5e\xa3\xcc\xc3\xba\x30\x5b\xd8\x13\x4d\xe9\x4e\xb4\xa1\x1e\xef\x29\xf4\x81\x5c\xbd\x1c\x68\x41\x6f\xe7\x5a\x59\xee\x3c\xb1\xf5\x5e\xe9\x63\x7b\xe0\xb9\x80\x09\x03\xa5\xbe\xfe\x89\x42\xd3\xf7\x34\x3d\x99\x8a\x72\xf1\x0a\xea\xc2\xee\x08\x6c\x95\x83\x25\xbd\x37\x0c\xba\x53\xd7\xb8\xb6\x78\x39\xc4\xa2\xee\x8a\x89\x30\x35\xac\x85\x55\xd5\x5c\x45\x34\xa5\x1c\x9c\xaf\x87\x58\xd4\x8a\x5b\xee\x68\x12\x73\xca\x00\x8c\x44\xd3\xc3\x60\x9b\xb8\x11\x5e\x1a\xb0\x6d\x67\x8f\xb5\x9a\xda\x8a\xd5\x3e\x57\x36\x1a\xfc\xfc\x67\xbc\xb2\x0e\x45\xc8\x47\x4b\x02\x3d\x09\x2d\xbd\x76\x94\x82\xa7\x30\x58\x43\x7b\x20\xd8\x51\x5e\x4e\x2e\x5d\x18\x9f\x72\x66\x6f\x92\x51\xb7\x8e\x9a\x89\xe0\xd4\xc7\x7e\xb8\x0e\x96\x55\x7e\xfa\x18\xca\xfa\xb8\x05\xf5\x12\x05\x45\x42\x8b\xc7\x8b\x65\x09\xc2\x15\x0a\xe1\xf1\x79\xa8\x55\x4a\x70\x33\xd7\xc0\x8d\x96\x03\xc4\x3e\xcb\x98\xb0\xb4\xbe\xb7\xf6\x08\x7c\xe8\x02\xef\x4c\xa2\x33\xef\x46\xda\xec\x4c\xe7\xb3\xdf\x3d\xa8\xff\xd5\x13\xdf\xe2\x53\xab\x6d\x7b\x91\x89\xb9\x84\x2d\xa8\xbc\xa7\x07\x9c\xee\x17\xfc\x6b\xf4\x32\x7e\xa2\x45\x99\x03\x0f\x47\x28\x24\xe0\x61\x12\x0c\xaa\xb0\x8f\x22\x13\xcb\xd1\xd0\x0d\xdc\x3c\x9d\x86\xbb\xf8\xf6\x32\x86\xbf\x5c\x7f\x8b\xa2\xa9\x71\xed\x7f\xb1\xbe\xeb\xbd\xe3\xeb\x28\x98\xb7\x14\xd9\x86\xd8\xc3\x1f\x61\x3e\x1c\x90\xf3\x31\x89\xab\xb4\x6c\x37\x2b\xb7\x7c\x3e\xd5\xcf\xad\xeb\xf5\x8a\xdd\x35\x8a\xae\xd7\x6b\x25\x1a\xf4\xa6\x5d\xea\xdd\x5f\x92\xb4\x3b\x72\xff\x0d\x00\x00\xff\xff\x47\x84\x17\x22\x24\x0b\x00\x00")

func postgresTmplBytes() ([]byte, error) {
	return bindataRead(
		_postgresTmpl,
		"postgres.tmpl",
	)
}

func postgresTmpl() (*asset, error) {
	bytes, err := postgresTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.tmpl", size: 2852, mode: os.FileMode(420), modTime: time.Unix(1475366203, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"golang.funcs.tmpl": golangFuncsTmpl,
	"golang.header.tmpl": golangHeaderTmpl,
	"postgres.tmpl": postgresTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"golang.funcs.tmpl": &bintree{golangFuncsTmpl, map[string]*bintree{}},
	"golang.header.tmpl": &bintree{golangHeaderTmpl, map[string]*bintree{}},
	"postgres.tmpl": &bintree{postgresTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

