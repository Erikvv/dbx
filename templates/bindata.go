// Code generated by go-bindata.
// sources:
// golang.create.tmpl
// golang.delete-all.tmpl
// golang.delete-world.tmpl
// golang.delete.tmpl
// golang.footer.tmpl
// golang.get-all.tmpl
// golang.get-count.tmpl
// golang.get-has.tmpl
// golang.get-last.tmpl
// golang.get-paged.tmpl
// golang.get.tmpl
// golang.header.tmpl
// golang.misc.tmpl
// golang.update.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _golangCreateTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\x41\x6b\xe3\x30\x10\x85\xcf\xd2\xaf\x98\xed\xc9\x86\x54\x3f\xa0\xe0\xc3\x52\xba\x50\x28\x81\x36\x5d\xf6\xa8\xaa\xd1\xc8\x68\xd7\x91\xcc\x48\x5e\x27\x08\xfd\xf7\x45\x16\x09\xce\x61\x7b\xc8\xc1\x60\xcb\xe2\x7d\xef\xbd\x99\x94\xee\x41\xa3\xb1\x0e\xe1\x2e\xd8\xde\xa9\x38\x11\xde\xc1\x7d\xce\xfc\x91\x50\x45\x4c\x09\xc4\x6e\x32\xc6\x1e\x21\xe7\x26\x25\x18\x15\xa9\x03\x88\xef\xd4\x07\xc8\xb9\x85\xd5\xd9\x1b\xc6\x89\x1c\xe4\xbc\x01\x24\x2a\x8f\xa7\x96\x17\x04\x3a\xbd\x68\xf2\x35\xef\xd3\xeb\xd3\x82\x4a\x9c\x95\x73\x6b\x40\x6c\x11\x75\xd8\xfa\x19\x72\xe6\x4c\x4a\xe7\x67\x78\xe8\x60\xeb\xe7\xa6\x15\x3f\xdf\x1f\x9b\xb6\x5c\xbd\xc8\x95\x77\xeb\x6c\x74\x38\x83\xf8\x61\x71\xd0\xc5\x13\xe7\x6c\xef\x5d\x88\x20\x65\x88\x87\xd8\x7d\x2c\x19\x5e\x5f\x20\xe7\x0f\xce\xfc\xe7\x6f\x31\xf8\x7e\x17\x0f\xb1\xa9\x17\x36\x90\x12\x28\xea\x57\x12\x2d\xaf\xda\xa6\x84\x1f\x47\x4f\x31\xd4\x70\xd6\xf5\xb0\x02\xaf\x32\x73\x56\x32\x77\x50\xf4\x35\xd9\xbf\x48\xe2\x75\x42\x3a\xbd\xf9\xf9\x0b\x8e\xd8\xed\x95\x2b\x15\x2a\xad\xc9\x1b\x68\xcc\xa0\x62\x44\x77\x16\x6e\x17\x33\xcc\x9a\xa5\xd1\x6f\x1d\x38\x3b\x40\xe2\x8c\x51\xe5\x3a\x3b\x6c\xe0\x17\xa9\xf1\x89\xa8\x41\xa2\x96\xb3\xcc\xcf\x3f\xcf\xb8\xd5\x5c\x9c\x1d\x6a\x83\x43\xc0\x5a\xa1\x94\x84\xa1\x0e\xec\xe1\xca\xfd\xd3\x11\xf7\xff\x71\x7e\x8b\x27\x29\xc7\x3f\x17\xcc\x02\x15\x2f\x2a\xc4\x67\x17\x90\xe2\xb3\x6e\x6e\x4e\x59\x2c\xf7\x18\x8b\x58\x19\x74\x0d\x2b\xde\x4f\x23\x96\x8d\x2d\xd8\xeb\xa5\xc9\x7c\xf5\xf1\x2f\x00\x00\xff\xff\xa6\x95\x18\xd4\x00\x03\x00\x00")

func golangCreateTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangCreateTmpl,
		"golang.create.tmpl",
	)
}

func golangCreateTmpl() (*asset, error) {
	bytes, err := golangCreateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.create.tmpl", size: 768, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeleteAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\xd0\xb1\x4e\xc3\x30\x10\x06\xe0\xd9\xf7\x14\x47\xa7\x44\x4a\x23\x06\xc4\x80\x94\xa1\x12\xdd\x58\xa0\x03\x63\x9a\x26\xe7\xc8\x28\xb1\xab\xf3\x05\x8a\x4e\x7e\x77\x94\xa4\x02\x16\x06\x06\x4f\xbe\xff\xff\x4e\xa7\xba\xc5\x8e\xac\xf3\x84\x9b\xe8\x7a\xdf\xc8\xc4\xb4\xc1\x6d\x4a\xf0\x48\x03\x09\xa9\x62\x79\x98\xac\x75\x17\x4c\x29\x53\xc5\x73\xc3\xcd\x88\xe5\x8e\xfb\x88\x29\xe5\x98\xb5\x61\xf2\x82\xce\xcb\xfd\x5d\x81\xc4\x3c\xbf\xc0\x39\xcc\xd5\xe4\xbb\xa5\x0b\x7e\x3b\xa7\xd0\x7d\x2e\x84\x82\x69\x83\x8f\x82\x75\x1d\x65\x94\xea\xb8\x60\xcf\x4f\x98\xd2\x11\x4c\x38\xbd\x95\x43\xe8\x0f\x32\x4a\xb6\x0e\x14\xa8\x8a\x0d\xf7\x3f\x3a\x80\xa9\x6b\xa6\xb8\xc2\x0f\x15\xce\xa1\x8e\xdd\x3b\x71\xb9\xbf\x50\xfb\x77\xd0\x38\xbb\x64\x6e\x2a\xf4\x6e\x40\x05\x63\x98\x64\x62\x8f\xb7\x05\xbe\x72\x73\xde\x33\x67\xc4\x9c\x83\x49\x30\xef\x39\x79\x59\x95\x0a\x17\xb2\x7c\x09\x1f\x71\x67\x2d\xb5\x42\x5d\xf6\xef\xc2\xeb\xdf\xb5\xd7\xbb\x01\x12\xa8\x7e\x1f\xec\x2b\x00\x00\xff\xff\x79\xdf\x12\x7c\x98\x01\x00\x00")

func golangDeleteAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteAllTmpl,
		"golang.delete-all.tmpl",
	)
}

func golangDeleteAllTmpl() (*asset, error) {
	bytes, err := golangDeleteAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete-all.tmpl", size: 408, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeleteWorldTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x90\x31\x4f\xf3\x30\x10\x86\x67\xdf\xaf\xb8\xaf\x93\xa3\xaf\xb5\x18\x10\x5b\x86\x4a\x74\x63\xa1\x0c\x8c\x6d\x1a\x5f\x2a\x23\xeb\x0c\x67\xa7\x80\x2c\xff\x77\x14\x87\x54\x5d\x19\xbc\x58\xf7\x3e\x8f\xde\x37\xe7\x0d\x5a\x1a\x1c\x13\xae\xa2\x3b\x73\x97\x46\xa1\x15\x6e\x4a\x81\x47\xf2\x94\x68\xeb\xbd\x6e\x50\xf7\x61\xe4\x84\x8e\xd3\xc3\xfd\x1a\x49\x64\x7a\x41\x1a\x98\xf2\xc4\xb6\x06\xe0\x16\x76\x0a\xf6\xbb\x72\x32\xa8\x4b\x27\x78\x38\x08\x45\x8c\x1f\xde\xec\x29\x8e\x3e\x2d\xbf\x37\xe0\x19\x20\x1d\x9f\x09\xcd\xcb\xf3\x53\xc4\x52\x40\xd5\xe0\xec\x6c\x31\x9c\xde\x8c\x15\x77\x21\x31\xbb\x2f\xea\xf5\x31\x67\x34\x58\xca\xb1\x01\xe5\x86\x7a\xf4\xaf\x45\x76\x1e\x33\x28\x25\x94\x46\x61\xbc\x5b\xe3\xab\x74\xef\x3b\x11\x4d\x22\x0d\xa8\x02\x13\xb6\x9a\x17\x70\xb5\x98\x7d\xf8\x8c\xdb\x61\xa0\x3e\x91\xd5\x7f\x44\xaa\xb9\xc9\xff\x76\x29\x75\xdd\x66\x9a\x66\x09\xfe\x4a\xd9\x79\x28\x90\xf3\x75\xbb\x9f\x00\x00\x00\xff\xff\x51\xc4\x72\x8a\x88\x01\x00\x00")

func golangDeleteWorldTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteWorldTmpl,
		"golang.delete-world.tmpl",
	)
}

func golangDeleteWorldTmpl() (*asset, error) {
	bytes, err := golangDeleteWorldTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete-world.tmpl", size: 392, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeleteTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\xd0\x31\x4f\xc3\x30\x10\x05\xe0\xd9\xf7\x2b\x8e\x4e\xa9\x94\x46\xcc\x48\x45\xaa\x44\x37\x16\xe8\xc0\x98\x3a\xf1\x39\x32\x4a\xec\xea\xec\x40\xd1\xc9\xff\x1d\xc5\xad\x0a\x0b\x0b\x83\x27\xbf\xf7\x3e\xe9\x44\x36\x68\xc8\x3a\x4f\xb8\x8a\x6e\xf0\x3a\xcd\x4c\x2b\xdc\xe4\x0c\x4f\x34\x52\x22\x11\x6c\x0e\xb3\xb5\xee\x8c\x39\x57\x22\x78\xd2\xac\x27\x6c\x76\x3c\x44\xcc\x79\x8d\x95\x29\x39\x83\x5d\x08\x63\x8d\xc4\xbc\xbc\xc0\x6b\x58\xb6\xc9\x9b\x32\x06\xbf\xa1\x2e\x98\xaf\x62\x08\xa8\x3e\xf8\x98\xb0\x6d\x63\x9a\xd2\xf6\x58\xb4\x97\x67\xcc\xf9\x08\x2a\x74\xef\xcd\x18\x86\x43\x9a\x52\x75\x09\xd4\x28\x82\x9a\x87\x1f\x1e\x40\xb5\x2d\x53\xbc\xc0\x0f\x5b\x5c\x4a\x86\xdd\x07\x71\xb3\x3f\x53\xff\x77\x51\x39\x5b\x3a\x77\x5b\xf4\x6e\x44\x01\xa5\x98\xd2\xcc\x1e\xad\x1e\x23\xd5\xf8\xc6\xfa\xb4\x67\xae\x88\x79\x0d\x2a\x17\xa9\x0f\xb3\x4f\x37\xab\xc8\xcd\x6b\xf8\x8c\x3b\x6b\xa9\x4f\x64\xaa\x7f\xed\x5e\xff\xaf\xf3\xf8\x88\xf7\xf5\xd2\x85\x0c\x22\xb7\x0b\x7e\x07\x00\x00\xff\xff\x36\x5f\x5d\xd3\xaa\x01\x00\x00")

func golangDeleteTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteTmpl,
		"golang.delete.tmpl",
	)
}

func golangDeleteTmpl() (*asset, error) {
	bytes, err := golangDeleteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete.tmpl", size: 426, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xce\xb1\x0a\xc2\x30\x10\x06\xe0\x39\xf7\x14\x37\xb6\x42\xf3\x10\x22\x6e\x4e\x66\x70\x8d\xc9\xd9\x16\x34\xd6\xe4\xc4\x48\xb8\x77\x97\x22\xa4\x4b\xb6\x83\xfb\xff\x8f\x1f\xf8\xbb\x10\x9a\xcb\x89\x78\x7a\xfa\x84\x73\x60\x8a\x37\xeb\x08\x0b\x94\x32\x60\xb4\x61\x24\xd4\xc7\x77\x70\x09\x45\x40\x95\x82\x7a\x3d\xd6\x27\x05\x8f\x83\x08\x08\xfc\x19\xce\x2d\x46\x55\xbd\x06\x0f\xfb\x66\xf0\xec\x26\x7a\xd8\xae\xc7\xc4\x71\x0e\x63\xab\xe9\xaf\xcd\x66\x05\x01\xd4\x27\xda\xc5\xe4\x8e\x33\xee\xd2\xeb\xae\x4d\xee\xb7\x61\x20\xf0\x0b\x00\x00\xff\xff\x6d\x27\x2d\x7a\xf2\x00\x00\x00")

func golangFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangFooterTmpl,
		"golang.footer.tmpl",
	)
}

func golangFooterTmpl() (*asset, error) {
	bytes, err := golangFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.footer.tmpl", size: 242, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x91\x41\x6b\xe3\x30\x10\x85\xcf\xd2\xaf\x98\xcd\x49\x86\xc4\x3f\x20\x8b\x0f\xcb\xb2\xec\xa5\x14\xd2\x1c\x7a\x74\x94\x68\x64\x54\x1c\xc9\x8c\xe5\x26\x41\xcc\x7f\x2f\xb2\x92\xb4\x87\x50\xe8\xc1\x07\xdb\xf3\xde\xf7\xe6\x4d\x4a\x2b\x30\x68\x9d\x47\x58\x8c\xae\xf3\x3a\x4e\x84\x0b\x58\x31\xcb\xff\x18\x53\x82\x7a\x3b\x59\xeb\xce\xc0\xac\x52\x82\x41\x93\x3e\x42\xfd\x87\xba\x11\x98\x2b\x50\x14\x4e\x23\xa4\x04\x63\xef\x0e\x18\x2c\xd4\x2f\xe1\x04\xcc\x4b\x40\xa2\xfc\x04\xaa\x64\x66\xa0\x37\xb3\xa9\xfc\x0a\xdc\x07\x73\x59\x00\x73\x92\xe2\x10\xfc\x18\xa1\x6d\xc7\x78\x8c\xcd\x6e\xe6\x6e\x9e\x80\x79\x27\x45\xd8\xbf\xd5\x7d\xe8\xb6\xf1\x18\x55\x19\x58\x66\xa2\xa6\xee\x33\x88\x94\xa2\x6d\x73\x96\x02\x5e\x37\x90\x55\x86\xdc\x3b\x52\xbd\x99\x90\x2e\x0f\xa5\x59\x29\x9c\x9d\x35\xbf\x1a\xf0\xae\x87\x24\x85\x20\x8c\x13\xf9\xfc\xba\x84\x57\xd2\xc3\x3f\x22\x85\x44\x95\x14\x2c\x85\x41\x8b\x04\x85\x56\xff\xed\xc3\x88\x2a\xe3\x6d\xb8\x7f\x7c\xc6\x73\x54\xd5\xec\x94\x12\x38\xef\xa2\xc7\xd3\xad\x19\x29\x44\xa6\x35\xb7\xe1\xed\x41\xfb\xdc\xac\x36\x86\x82\x05\x65\x7b\x1d\x23\xfa\x79\xbc\x9a\x57\x13\x0f\x12\x7e\x13\x31\x67\x14\xf3\x59\x1a\xd0\xc3\x80\xde\xa8\x52\xcc\x6d\xf1\x92\xa3\x2c\x73\x75\x5e\xdf\xe3\x64\x9f\xea\xf7\x8f\x0a\xb9\xfe\x2c\x10\xef\x7a\xc9\x32\xa5\xfb\xc1\x3f\x02\x00\x00\xff\xff\x07\xee\x5e\x96\x61\x02\x00\x00")

func golangGetAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetAllTmpl,
		"golang.get-all.tmpl",
	)
}

func golangGetAllTmpl() (*asset, error) {
	bytes, err := golangGetAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-all.tmpl", size: 609, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetCountTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8f\x3f\x4f\xc3\x30\x10\xc5\x67\xdf\xa7\x78\x74\x40\x89\x94\x46\x0c\x88\x2d\x03\x42\x6c\x2c\x25\x03\x63\xeb\x26\x4e\x64\xd4\xd8\xd5\xc5\x01\xaa\xd3\x7d\x77\xe4\x20\xfe\x2c\x0c\x9e\xfc\x7e\xef\xf7\x4e\x64\x8b\xde\x0d\x3e\x38\x6c\x66\x3f\x06\x9b\x16\x76\x1b\x6c\x55\xe9\x21\x2e\x21\x89\xa0\x6e\x97\x61\xf0\x1f\x50\x2d\x44\x70\xb6\x6c\x27\xd4\xf7\x3c\xce\x50\x2d\x51\x74\x39\x06\x1f\xd2\xdd\x6d\x05\xc7\x9c\x5f\xe4\x92\x72\xb3\x0b\xfd\x5a\x45\x7f\x35\xc7\xd8\x5f\x36\x50\x15\x32\x5d\x0c\x73\xc2\x7e\x3f\xa7\x29\x35\x87\xd5\xb5\x7b\x82\xea\x81\x4c\x3c\xbe\xd6\xa7\x38\xb6\x69\x4a\xc5\x57\xa0\x82\x08\x2c\x8f\xbf\x72\x22\x93\x85\x0d\x72\xb8\x67\xff\xe6\xb8\xde\x2d\x8e\x2f\xcf\xf1\xfd\x5f\xa8\x6e\x3b\x1b\x8a\xeb\x75\x76\x49\xc6\x0f\xeb\xe8\xab\x06\xc1\x9f\x20\x64\x0c\xbb\xb4\x70\xc0\x4d\x85\x17\xb6\xe7\x47\xe6\xc2\x31\x97\x64\x94\xe8\xfb\x6f\x85\xab\x4c\x90\x92\xc8\xcf\x9d\x9f\x01\x00\x00\xff\xff\x8a\x86\x43\x5f\x4e\x01\x00\x00")

func golangGetCountTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetCountTmpl,
		"golang.get-count.tmpl",
	)
}

func golangGetCountTmpl() (*asset, error) {
	bytes, err := golangGetCountTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-count.tmpl", size: 334, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetHasTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8f\xbd\x6e\xac\x40\x0c\x85\xeb\xf1\x53\xf8\x52\x5c\x81\xc4\xf2\x06\x14\x29\x22\xa5\x48\xb3\xa1\x48\xb9\x6b\x96\x01\x26\x82\x99\x95\x67\x48\xb2\xb2\xfc\xee\xd1\x10\xe5\xa7\x49\xe1\xca\xe7\x7c\x9f\x2d\x72\xc0\xc1\x8e\xce\x5b\x2c\xa2\x9b\x3c\xa5\x8d\x6d\x81\x07\x55\x78\xa0\x28\x82\x4d\xb7\x8d\xa3\x7b\x47\xd5\x52\x04\xaf\xc4\xb4\x62\x73\xc7\x53\x44\xd5\x0a\xcb\x99\x22\xf6\x21\x2c\x35\x5a\xe6\x3c\x81\x2b\xc8\x50\xeb\x87\x9d\x02\xbf\x0d\x7d\x18\x6e\x05\xaa\x0a\x98\x4b\xf0\x31\xe1\xe9\x14\xd3\x9a\xda\xf3\x2e\x3a\x3e\xa2\xea\x19\x4c\xe8\x5f\x9a\x25\x4c\x5d\x5a\x53\xf9\x19\xa8\x51\x04\x89\xa7\x1f\x33\x80\xc9\xc2\x16\x73\x78\x60\xf7\x6a\xb9\x39\x6e\x96\x6f\x4f\xe1\xed\xcf\x52\xd3\x5d\xc8\x97\xff\x67\x8a\x15\x18\x37\xee\x27\xff\x6b\xd1\xbb\x05\x05\x8c\x61\x9b\x36\xf6\x38\xd2\x12\x6d\x8d\xcf\x4c\xd7\x7b\xe6\xd2\x32\x57\x60\x14\xbe\xd6\x33\xc5\x3a\x57\x40\x41\xe4\xfb\xcd\x8f\x00\x00\x00\xff\xff\x2a\xae\xd9\x76\x48\x01\x00\x00")

func golangGetHasTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetHasTmpl,
		"golang.get-has.tmpl",
	)
}

func golangGetHasTmpl() (*asset, error) {
	bytes, err := golangGetHasTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-has.tmpl", size: 328, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetLastTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x90\x31\x6f\xc2\x30\x10\x85\x67\xdf\xaf\xb8\x32\x25\x12\x64\xaa\xba\x31\x76\x63\x01\x2a\x75\x04\x83\x2f\x91\x4b\xb0\xa3\xcb\xd1\x8a\x9e\xee\xbf\x57\x06\x51\x85\xc1\xdb\xf7\xde\xe7\x77\xaa\x0b\x0c\xd4\xc6\x44\x38\x1b\x63\x97\xbc\x5c\x98\x66\xb8\x30\x83\x8e\x64\xe5\x47\x51\xc5\x66\x43\x72\xe1\xd4\x7c\x5c\x07\x42\xb3\x6a\x38\x61\x4c\xf2\xf6\x5a\x63\xa5\x8a\x83\x67\x7f\x7e\x30\x68\x36\x47\x62\x2e\x2f\x73\x0d\xa5\x9f\x52\xb8\x15\xc2\x54\x76\xc8\xe1\x7a\xf3\x28\xb8\x63\x4e\xa3\xe0\x6e\x37\xca\x59\x96\xfb\x22\xdc\xae\x57\x68\xb6\x07\x97\x0f\x5f\x4d\x9f\xbb\xad\x9c\xa5\xba\x03\x73\x1c\x4e\x35\x80\x53\xc5\x98\xa2\x4c\xc4\xe0\x8a\x78\x89\x25\x13\x38\x7e\x13\x37\xeb\x0b\xf1\x75\x93\x7f\xa6\xd9\x66\x7b\xf4\xa9\x7c\xdc\x87\xc0\xb9\xc5\xaa\xed\xbd\x08\xa5\x47\x53\x8d\x66\x35\xb8\xd8\xde\x76\xbc\x2c\x31\xc5\x1e\x15\x9c\xe3\xbb\x48\x15\x7f\x89\xf3\xd3\xe2\x4f\xf6\xc3\x3b\x73\x45\xcc\x35\x38\x83\x09\xeb\xb9\x7b\x42\x53\xec\xc1\x40\xf5\xff\x2c\x7f\x01\x00\x00\xff\xff\x31\x15\x5d\x8c\x83\x01\x00\x00")

func golangGetLastTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetLastTmpl,
		"golang.get-last.tmpl",
	)
}

func golangGetLastTmpl() (*asset, error) {
	bytes, err := golangGetLastTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-last.tmpl", size: 387, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetPagedTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\x41\x6f\xd4\x30\x10\x85\xcf\xf6\xaf\x18\x72\x4a\xa4\x34\x2a\xd7\xa2\x20\x21\x84\xb8\x20\xa0\xec\x81\x03\x42\x5b\x77\x33\x8e\x0c\x89\x1d\x4d\x26\x6c\x2b\xcb\xff\x1d\x8d\xbd\xbb\xed\xa1\x12\xe2\x10\x29\x71\xde\xbc\xf9\x66\xfc\x62\xbc\x82\x01\xad\xf3\x08\xd5\xea\x46\x6f\x78\x23\xac\xe0\x2a\x25\xfd\x11\x39\x46\xe8\x76\x9b\xb5\xee\x01\x52\xaa\x63\x84\xc5\x90\x99\xa1\x7b\x47\xe3\x0a\x29\x35\x50\x53\x38\xae\x10\x23\xac\x93\x3b\x60\xb0\xd0\x7d\x0b\x47\x48\xa9\x85\x03\x87\xdf\xe8\xc3\xc6\xb0\x32\x39\x3f\xb6\x80\x44\xf2\x04\x6a\xb4\x74\x45\x3f\xe4\x36\xfa\x39\xc2\x7d\x18\x1e\x2b\x48\x29\x6a\xe5\xec\xc9\x03\xfa\x1e\xaa\x0a\xa2\x56\xea\x7c\x00\xd5\x75\xa5\x55\xd2\x5a\x1d\x82\x5f\x19\xf6\xfb\x95\x67\xee\xef\x32\xef\xed\x27\x48\xe9\x4e\xab\x70\xff\xab\x9b\xc2\xb8\xe3\x99\xeb\x22\x68\x85\xd4\xd0\xf8\x34\x80\xd6\x6a\xbf\x97\x19\x0a\xde\x4d\x0f\x52\x35\x90\xfb\x83\xd4\xdd\x6e\x48\x8f\x2f\x96\x4a\xa5\x00\x4a\xcd\xab\x1e\xbc\x9b\x32\x1e\x21\x6f\xe4\xe5\xb3\x85\xaa\x6a\xe1\x3b\x99\xe5\x03\x51\x8d\x44\x8d\xe0\xaa\x01\x2d\x12\x94\x8e\xdd\xfb\x29\xac\x58\x0b\x82\x0d\x97\xc3\xcf\xf8\xc0\x75\x93\xdd\x62\x04\xe7\x1d\x7b\x3c\x9e\xb7\xaa\x95\x92\x8e\xfd\x59\xbc\x3b\x18\x2f\xb7\x62\x86\x81\x82\x85\xda\x4e\x86\x19\x7d\x96\x37\x79\x3c\xf5\x02\xe5\x3f\x30\x85\x53\xe5\x6b\xed\xc1\x2c\x0b\xfa\xa1\x2e\x0b\x3a\x2f\xa0\xb0\x94\x81\x4e\xee\x37\x17\x24\xf1\x69\xde\xfc\xef\x62\xb2\xd1\xe4\x66\xc7\xf0\x16\xae\x73\x89\x1c\xa0\xcf\xad\x1b\x49\x40\xf9\x9b\xf9\x9f\xa2\xd5\x83\x9d\xb9\xdb\x2d\xe4\x3c\x67\xe9\x8f\x2c\xbb\x7a\xfd\xb3\x93\x28\x7c\x35\x23\x0e\x5f\xfc\x69\x13\x49\xab\x04\x38\xad\xf8\x2c\x4a\xc5\xa4\xbc\x17\x90\x13\x6a\x19\xf9\x22\x6a\x85\x5d\x27\x1d\xe3\x25\xb7\x7f\x03\x00\x00\xff\xff\xf9\xf1\x83\x84\x3a\x03\x00\x00")

func golangGetPagedTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetPagedTmpl,
		"golang.get-paged.tmpl",
	)
}

func golangGetPagedTmpl() (*asset, error) {
	bytes, err := golangGetPagedTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-paged.tmpl", size: 826, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x90\x31\x6f\x02\x31\x0c\x85\xe7\xe4\x57\xb8\x4c\x77\x12\xdc\x3f\xb8\xa1\x03\xea\x52\x55\x02\x86\x8e\x10\x88\x73\x4a\x75\x24\xd4\xc9\x95\x52\xcb\xff\xbd\x4a\xaa\x02\x4b\x3b\x78\xb1\xfc\xbe\xf7\xfc\x98\x17\x60\xd1\xf9\x80\x30\x4b\x7e\x08\x26\x4f\x84\x33\x58\x88\xe8\x27\xcc\xcc\xd0\x6d\x26\xe7\xfc\x27\x88\x34\xcc\x70\x32\x64\x8e\xd0\x3d\xd2\x90\x40\xa4\x85\xbb\xdd\x3a\x9e\x41\x64\x0e\x48\x54\x26\x52\xab\x0b\x1c\x83\xad\x34\x7d\xef\xb4\x8f\xf6\x32\x03\x11\xd6\xea\x10\x43\xca\xb0\xdd\xa6\x7c\xcc\xfd\xae\x1a\xae\x9e\x41\x64\xa7\x55\xdc\xbf\x75\x63\x1c\x36\xf9\x98\x9b\x9f\x83\x39\x30\x83\xa1\xe1\x96\x40\x6b\xc5\x0c\x3e\xf8\xfc\x9b\x40\xab\x92\xa0\x87\xa2\xb6\xe4\x3f\x90\xba\xd5\x84\x74\x59\xc7\xf3\x9f\x94\x6e\x73\x30\xa1\xfc\x62\xac\xa5\xe8\xa0\x71\xa3\xc9\x19\x43\x65\xb6\xd5\x47\x79\x57\x5f\xeb\x7b\x48\xef\x63\xb7\x24\x7a\x89\xeb\x78\x4e\xc0\x5a\x29\xc2\x3c\x51\x28\xd8\x2f\xa4\x78\xeb\x22\xf8\x51\x2b\xb9\x6a\x1f\xfa\xb2\xf9\x57\xf1\x4a\xe6\xb4\x24\x6a\x90\xa8\xad\xd2\xdb\x61\x4d\x7c\x4f\x16\xcd\x7c\xed\xf7\x3b\x00\x00\xff\xff\x3b\xb5\x23\x18\xc9\x01\x00\x00")

func golangGetTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetTmpl,
		"golang.get.tmpl",
	)
}

func golangGetTmpl() (*asset, error) {
	bytes, err := golangGetTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get.tmpl", size: 457, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x56\xdd\x6e\xdb\x38\x13\xbd\x16\x9f\x62\x3e\xa3\x2d\xa4\xc2\xa5\xf1\xdd\x1a\xf0\x45\x1d\x79\x17\x01\xba\x71\x9b\xa8\x58\x2c\x50\xa0\xa5\x24\x4a\x51\x23\x91\x0a\x49\xd9\x0a\xb4\x7a\xf7\x05\x29\xea\xcf\xb1\xb3\x29\xf6\x4a\x14\x39\x73\x78\x66\xce\x0c\xc9\xd5\x0a\x3e\x7e\x0d\xf6\xbf\xef\x6e\x76\xb7\x1f\x83\x9d\x0f\xdb\xbf\x20\xe5\xe5\x43\x8a\x33\xb6\x92\x25\x89\x68\xc1\xd9\x03\x7d\x4a\xf9\x2a\x0e\x6b\x7c\xf8\x3f\x5a\xad\xc0\xdf\xc3\xcd\x3e\x80\x9d\x7f\x1d\x60\x84\x4a\x12\x3d\x90\x94\x42\xd3\x00\xfe\x6c\xc7\x6d\x8b\x50\x56\x94\x5c\x28\x70\x91\xb3\x88\x89\x22\x21\x91\x74\x25\x1f\xf3\x05\x72\x16\x49\xa1\xf4\x47\x65\x05\xd5\x5f\xa9\x44\xc4\xd9\x61\x81\x50\xd3\x7c\x00\x41\x58\x4a\x01\xef\x6a\x25\xc8\xb5\xc1\x90\x1a\xcf\xd1\xf8\x1f\xf5\x10\x16\xf3\xad\x16\xc6\x8d\xb2\x58\x9b\x79\x48\x33\xfc\x2c\xe8\x81\x32\x05\x11\x67\x71\xa6\x32\xce\x48\x0e\x99\xc5\x4a\x04\x2f\x20\x22\x95\xcc\x58\x0a\x61\x95\xe5\x31\x24\x24\xcb\x2b\x41\x25\x3a\x10\x01\xdf\x61\x03\x96\x11\xbe\x56\x9c\x20\x33\xfb\xa7\x20\xe5\x4e\x08\xd8\x40\x52\xb1\xc8\xa5\x42\x00\x15\x82\x0b\xaf\xfb\x40\x23\xa8\xaa\x04\xd3\x7f\xad\x71\xf8\xc4\xd3\x94\x8a\xce\x3a\xe1\xa2\x20\x4a\xa3\x66\x2c\x5d\x02\x11\xa9\x04\x8c\x71\xc6\x14\x15\x09\x89\x68\xd3\x7a\xc6\xe7\x86\x1f\x61\x03\x3a\x2d\xf8\x86\x1f\x11\x52\x4f\x25\x85\x58\x64\x07\x2a\x60\x30\x86\x06\x39\xbb\x9a\x46\xee\x63\x45\xc5\xd3\x8b\xa0\xe0\xca\xc7\x1c\xdf\x52\x59\xe5\x6a\x69\xf9\x22\xe7\x8b\xf6\x7b\x95\xf7\x7b\xe3\xce\x8f\xf2\xc4\xf9\x96\x1f\x5f\xe3\xdf\xbb\xa3\xd6\x86\xe2\x6f\xb5\x43\x15\x29\x1d\x83\x59\xf5\xb7\xc8\x89\xc3\x3f\xa8\xba\xe7\xb1\xd4\x76\x3a\x5f\xb0\x2f\x29\x73\xbb\xb8\x97\x20\x79\x25\x22\x6a\x77\xd2\xa4\xfc\x6d\x4f\x47\xc3\xc4\xa1\xf9\x83\xf5\x06\x34\xe0\x19\x57\x0f\x39\x59\x62\x6c\xfe\xb7\x01\x96\xe5\xda\xcb\xb1\x72\xb1\x2c\x5f\xf6\xda\x6a\x51\x3d\xe4\xb4\xc8\x41\x8e\x56\x23\x2b\xca\x1c\x46\x72\x8e\x3c\x66\x2a\xba\xef\xf5\x68\xa6\xc5\xea\x67\x24\xa7\x91\x2d\xd4\x88\xc8\xae\x1b\x6e\x48\x41\xe1\x6f\x28\x45\xc6\x54\x02\x8b\xb7\x8f\x0b\x68\xdb\x35\x72\x1c\x83\xbc\x01\x46\x8f\x83\x59\xdb\xba\x71\xe8\x4d\x2b\xd9\x89\x69\x42\xaa\x5c\xad\x2f\xb0\x4d\x0a\x85\x77\x3a\x0d\x89\xbb\xa8\x98\xac\x4a\x5d\xde\x34\xee\xf9\xbd\x95\x8b\xa5\x1d\x7b\x26\x2a\xd4\xa3\xbc\xf3\xb7\x3a\x03\xfe\x76\x0d\x71\xb8\x44\xce\x28\xc0\xda\xc4\xbc\x44\x4e\xbb\xd4\x7b\x0d\x7a\xb8\x3c\xfc\x09\xef\xfd\xad\x07\x57\x39\x97\xd4\xf5\x60\xda\x00\xcd\x80\xdc\x53\xe3\xe1\x4f\xec\x6f\xb1\x35\xf6\xce\xe0\x18\x99\xb4\x98\x41\x3d\x15\x53\xd5\x83\x98\x16\x63\x4b\xd3\x8c\xb9\xbf\x2c\xe1\x18\x6c\x50\x6b\x5b\x55\xaf\x41\xd5\x4b\x33\x1a\x82\xd5\x5b\x1c\x05\x29\x83\xda\x55\xb5\x37\x0b\xdb\x94\x6b\x50\x4f\xca\x55\xd5\x5d\x3d\x07\x35\x1a\x31\xc6\xc8\xf4\x72\x50\x7b\x70\xc5\x8b\x22\x53\xff\x9a\x21\x55\x63\x55\xe3\xde\xd8\x7b\x8e\x73\xcb\xf3\x3c\x24\xd1\xc3\x2b\x91\x46\x73\x83\x75\xa1\x34\x51\xd3\xc0\x9b\x38\x34\xc1\xad\x37\xcf\x0b\x54\xfa\x5b\x5d\xa2\xc6\x4c\xd5\x97\xcd\x82\x7a\x30\xd3\x05\x73\xd9\xf0\xba\x28\x73\x63\xda\x25\x74\xe6\xd0\xb6\x93\xec\xda\xa2\xed\x3e\x27\xf5\x72\xe2\xe5\x41\xce\xd3\x3b\x55\x28\x57\xaa\x62\x7e\xa8\x62\x8c\x61\x76\x02\x35\xdd\xb5\x61\x3b\xec\xd3\xc4\x6f\x70\xf0\xd0\x94\x9d\x4d\xce\x9c\x5b\x08\xc3\x59\x75\x4a\x66\xa0\xfa\xac\x97\x7b\x1f\xaf\x0b\x60\x04\x1e\x25\x7c\x37\x5b\x68\x4c\x27\xf6\x3d\x79\xb2\xcf\xba\x33\x9e\xcc\x68\x73\x9b\xb6\xde\xa7\xd5\x25\x7c\x26\x79\xc3\x16\x1e\xdc\x45\xf7\xb4\x20\xae\x67\xd3\x06\x0d\xb2\x5c\x7e\x98\x9a\xc1\xdd\xfa\xdd\x97\x4f\xf0\xa1\x6d\xd1\x8f\x97\xc1\x86\xde\xe9\x3b\xc3\x83\xa1\x33\x4e\xc3\xb4\xe5\xd4\xf1\x1e\xbb\xf1\xd7\xc2\xec\x7c\x86\x30\x07\xd5\x06\xf0\x0b\xfd\x7a\x51\xb5\x0b\xc5\xf1\xf2\xb5\xd6\x20\x67\xb5\x82\x60\xef\xef\xd7\x20\x28\x8b\xa9\x80\x32\x27\x11\xbd\xe7\x79\x4c\x85\x34\x47\x95\xbd\xfd\x27\xa7\x55\x37\xe3\x2e\xe4\x63\xbe\xfe\xc6\xde\xca\x6f\x4c\x83\xeb\xe1\x61\xb1\x84\xb1\x24\x3d\x1b\xdc\xe4\x26\xd0\x8d\x66\xbb\xf9\xce\xc4\x27\xfb\xee\xb3\xe1\x0e\xbd\x37\xeb\x34\xbb\x38\xcd\xca\xe4\x5c\xf8\x2d\xa3\x79\x3c\xbe\xac\xac\xbb\xc9\x48\x60\xb3\x34\xa1\x60\x09\x65\x09\xe0\x7d\xd9\x3d\xa8\xae\x99\xa4\x42\x8d\x30\xc3\xc6\xf8\x4a\x50\xa2\x68\x47\xb5\xc7\x3d\x47\xe1\x12\xd2\x8c\x90\xd6\x0e\xcf\xb0\xe6\xbc\xe6\x79\xea\x28\x7e\x2d\xcd\x8b\x33\xa7\xe7\xd8\x99\xc5\x57\xb0\x3b\x03\xf2\x9f\x88\x3d\xcb\xbb\x9e\x7c\x93\x4c\x24\x9c\x83\x8d\x42\x26\xcf\x95\x84\xc3\x54\x29\x68\x87\x72\x1e\x55\xff\x3e\x3d\x8f\x66\xe6\xde\x29\x6a\x03\xb6\x55\xe7\xf3\xcd\x61\x0d\x87\x01\xdc\xad\x4e\x96\x3d\x88\x78\x5e\x15\x4c\xef\x31\x39\x51\x7a\x2c\xf3\x4a\xbf\x32\x16\xfa\x91\x3e\x81\x79\x7f\x8a\x73\x20\x79\xa5\x21\x26\x6d\x06\x0d\x98\x46\xaa\x60\x73\xee\xc6\x37\xcf\x34\xfb\x5b\xe1\x03\xba\xcc\xf1\x96\x26\xae\x77\xba\xe5\xc8\xf2\x5d\x05\x93\x66\xfb\x30\x17\xf1\x9f\x00\x00\x00\xff\xff\xc8\xed\xdd\x8c\x1e\x0d\x00\x00")

func golangHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangHeaderTmpl,
		"golang.header.tmpl",
	)
}

func golangHeaderTmpl() (*asset, error) {
	bytes, err := golangHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.header.tmpl", size: 3358, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangMiscTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\x41\x4b\xc3\x40\x10\x85\xcf\xcd\xaf\x78\x84\x08\x2a\xa6\x3f\xa0\xe0\xa5\x07\x41\x04\x0f\x5a\x3c\x77\xcd\x4e\xc2\x48\xba\x8d\x9b\x8d\x50\xc6\xfd\xef\x32\xbb\xb2\x56\x7a\x5b\xde\x7c\xef\xbd\x99\x15\x69\x61\xa9\x67\x47\xa8\x2d\x75\x63\x8d\x18\xab\x7e\x71\x1d\xae\x8f\xef\x1f\xb8\x15\xc1\xfa\x85\x3a\xe2\x2f\xf2\x5b\x33\x13\x62\x7c\x3c\x4c\xe3\x0d\x74\xf0\xca\x83\x33\x61\xf1\xaa\x26\x61\x7b\xb4\x27\x0d\x10\x01\x39\x8b\x36\xc6\xaa\x3a\x6f\x98\x83\x5f\xba\x90\x3a\xc2\x69\xa2\xe4\x79\x36\x87\xe4\xcf\x33\x88\x9a\xbd\x71\x03\x61\xfd\xc0\x34\xda\x59\xe9\x95\x08\xb8\x2f\xf0\xb9\xef\xb7\x2b\x8b\x3b\x4d\x4d\x4f\xa5\x77\x66\x98\xd3\x12\xab\x7d\x09\x6d\xf8\x0e\x4d\xc0\xe6\xfe\x6f\x9c\xe9\x86\x2f\xd2\x9e\x48\xaf\xd9\xe8\xf3\xcd\x8c\x0b\xe1\x1b\x93\x67\x17\x7a\xd4\x57\x9f\x75\x86\x32\xbd\xd7\x0d\xdb\x72\x74\xd1\xab\x7f\x7f\xf1\x13\x00\x00\xff\xff\x1b\x36\x80\x57\x6d\x01\x00\x00")

func golangMiscTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangMiscTmpl,
		"golang.misc.tmpl",
	)
}

func golangMiscTmpl() (*asset, error) {
	bytes, err := golangMiscTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.misc.tmpl", size: 365, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangUpdateTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x55\xc1\x6e\xe3\x36\x10\x3d\x4b\x5f\x31\xd5\x89\x82\x6d\xa2\xe8\x31\x80\x0f\xc1\x22\x05\x0c\x2c\x8c\xdd\x38\x69\x0f\x41\xe0\xd0\xd6\x48\xa0\x2b\x93\x32\x49\xd9\x31\x04\xfd\x7b\x31\xa4\xac\x4a\x89\x13\x74\x73\xf0\x81\xe6\xf0\xcd\x9b\x37\x6f\x46\x4d\x33\x83\x0c\x73\xa9\x10\x12\x2b\x0b\x25\x5c\x6d\x30\x81\x59\xdb\xc6\x8f\x55\x26\x1c\x36\x0d\xf0\x55\x9d\xe7\xf2\x15\xda\x96\x35\x0d\x54\xc2\x88\x3d\xf0\x5b\x53\x58\x68\xdb\x29\xd4\x3e\x0c\x7c\x9c\x33\xf5\xd6\xf1\xf0\x30\x1c\x96\x62\x8f\xd0\xb6\x29\x0c\x9e\xde\xa3\xab\x8d\xf2\x8f\xd1\x18\xfa\x69\x93\xc6\xc4\x04\x55\xe6\x53\xc7\x43\x5a\x1b\x9d\x9d\x3d\xa3\x26\x8e\xb6\x5a\x59\x07\xeb\xb5\x75\x7b\xb7\xae\x0c\xe6\xf2\x75\xfe\xe2\x53\xff\xfc\xfe\xc3\x1f\xa1\x6d\x5f\xde\xc4\x59\x4f\xbf\x8f\xeb\xab\x79\x89\xe3\xe8\x28\x0c\x1c\x2c\x3c\x3d\x6f\xce\x0e\xc3\xf1\x28\xca\x1a\xe9\x2f\xa9\x1c\x9a\x5c\x6c\xb1\x69\xe3\x38\x6a\x1a\x90\x39\xf0\x1f\xda\x4a\x27\xb5\x12\xe5\xad\x29\xea\x3d\x2a\x47\x32\xc4\xd1\x0e\x6e\xe6\x24\x42\x89\xaa\x17\x87\xf0\x3c\xd6\x1c\x44\x55\xa1\xca\x58\x38\x4f\x29\x50\x98\xa2\x0f\x4c\x3d\x7c\x5f\x7d\x24\xb2\xec\x82\x4e\xb0\x79\xad\xb6\x4c\x91\x92\xd6\x19\xa9\x8a\x14\x9a\x38\x8a\x0e\x03\xdc\x83\x9d\x02\x05\x70\xce\xd3\x38\x8a\x48\xbe\xcf\xc8\x46\xbb\xc9\xe4\x0a\x42\x02\xbe\x04\x7e\x09\xee\x15\x4d\x3a\xdc\xb7\x0f\xac\x33\x5b\xad\x8e\x7c\xe1\xb4\x60\xbb\xf4\x83\xa8\x64\x0a\xc9\x80\x18\x96\x16\x03\x8b\xff\x9d\xff\x0d\x80\xca\xfc\xfb\xae\x2b\x46\xa8\x02\xc7\xe6\x13\x9b\x12\xff\x94\x58\x66\xa1\x5c\x99\x77\x2e\xe5\x84\xde\x59\x12\x7e\x9b\x83\x92\xa5\x97\x72\xa0\x37\x4b\x28\xe6\x9b\x2e\xeb\x3d\x59\x34\xa1\xa4\x1f\x75\xf1\x3d\x28\xf7\x57\x2c\x4d\x89\xdd\xa5\xa7\x6d\x20\x1a\x5a\xb2\x44\xcc\xec\x52\x9f\x3c\xb1\xf5\x5a\xe9\x13\x75\x78\xa9\x4f\x2c\xe5\x8f\x0f\xdf\xd8\xd8\x0a\x83\xfa\x6e\x6b\xa7\x07\x35\xbd\xa3\xdc\x31\x20\xc2\x9f\xb8\x8e\x2f\x94\x74\x7f\x89\x72\x64\xba\xf6\x3f\x7f\x2b\xed\xde\xa5\x92\x39\xb9\x9a\x1d\x6c\x0a\xf3\x39\xfc\xee\x15\x33\x61\x86\x95\x2c\xa7\xf0\xb7\x11\xd5\x9d\x31\x2c\xdf\x3b\x7e\x47\xc3\x9c\xb3\x44\x21\x66\xe0\xf4\x65\x3b\x08\x07\x25\x0a\xeb\x40\x2b\x84\x9c\xa0\x93\xab\x1a\xf5\x14\xae\x39\x77\xf6\xa5\x89\xf2\xc8\x61\x13\x90\xd2\xa3\xdd\x01\x93\x6e\xa2\xd8\xc1\x3e\xdd\x74\x45\xce\xfe\x78\x4e\x61\x32\x5e\x1e\x71\xa4\x37\x3b\x5e\xea\x62\xe5\xf6\x8e\x85\xab\x2b\x39\xfb\x2d\xb1\xaa\xab\x4a\x1b\x67\xc3\xaa\x93\xaa\x80\xae\x99\x52\x49\x37\xd8\x80\x71\x44\x1b\x70\x0e\x84\x9e\x19\x79\x44\xc3\x7f\xd6\x68\xce\xf7\xfa\xd4\x67\x09\x15\x92\xff\xf9\x6a\x2b\x14\x2d\x52\x91\x65\x46\xe7\xc0\xf2\x52\x38\x47\x0b\x27\x00\xa6\xa1\x70\x99\xfb\xbd\x3a\xf0\xf7\xb5\x6e\xa1\x31\xa1\x03\xdd\xe5\xa5\x98\xc1\x76\x56\xb2\x0c\x32\xd2\xc4\xce\x82\x61\x0d\x89\x4d\xf0\x37\x23\xd6\x77\xaf\xb8\xbd\xc2\xf8\x97\xc9\xac\xd7\xd5\x3f\x3d\xbe\xcf\xc6\xbf\x0b\xeb\x16\xca\xa2\x71\x8b\x8c\x7d\xb9\x3c\xe2\x5a\xa0\x23\x30\x1a\x83\x50\x25\x7f\x38\x57\x34\x34\x8c\xd2\x8e\x27\xaf\x1d\x7d\x90\xfe\x0d\x00\x00\xff\xff\x4d\x7d\x73\x29\x27\x07\x00\x00")

func golangUpdateTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangUpdateTmpl,
		"golang.update.tmpl",
	)
}

func golangUpdateTmpl() (*asset, error) {
	bytes, err := golangUpdateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.update.tmpl", size: 1831, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"golang.create.tmpl": golangCreateTmpl,
	"golang.delete-all.tmpl": golangDeleteAllTmpl,
	"golang.delete-world.tmpl": golangDeleteWorldTmpl,
	"golang.delete.tmpl": golangDeleteTmpl,
	"golang.footer.tmpl": golangFooterTmpl,
	"golang.get-all.tmpl": golangGetAllTmpl,
	"golang.get-count.tmpl": golangGetCountTmpl,
	"golang.get-has.tmpl": golangGetHasTmpl,
	"golang.get-last.tmpl": golangGetLastTmpl,
	"golang.get-paged.tmpl": golangGetPagedTmpl,
	"golang.get.tmpl": golangGetTmpl,
	"golang.header.tmpl": golangHeaderTmpl,
	"golang.misc.tmpl": golangMiscTmpl,
	"golang.update.tmpl": golangUpdateTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"golang.create.tmpl": &bintree{golangCreateTmpl, map[string]*bintree{}},
	"golang.delete-all.tmpl": &bintree{golangDeleteAllTmpl, map[string]*bintree{}},
	"golang.delete-world.tmpl": &bintree{golangDeleteWorldTmpl, map[string]*bintree{}},
	"golang.delete.tmpl": &bintree{golangDeleteTmpl, map[string]*bintree{}},
	"golang.footer.tmpl": &bintree{golangFooterTmpl, map[string]*bintree{}},
	"golang.get-all.tmpl": &bintree{golangGetAllTmpl, map[string]*bintree{}},
	"golang.get-count.tmpl": &bintree{golangGetCountTmpl, map[string]*bintree{}},
	"golang.get-has.tmpl": &bintree{golangGetHasTmpl, map[string]*bintree{}},
	"golang.get-last.tmpl": &bintree{golangGetLastTmpl, map[string]*bintree{}},
	"golang.get-paged.tmpl": &bintree{golangGetPagedTmpl, map[string]*bintree{}},
	"golang.get.tmpl": &bintree{golangGetTmpl, map[string]*bintree{}},
	"golang.header.tmpl": &bintree{golangHeaderTmpl, map[string]*bintree{}},
	"golang.misc.tmpl": &bintree{golangMiscTmpl, map[string]*bintree{}},
	"golang.update.tmpl": &bintree{golangUpdateTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

