// Code generated by go-bindata.
// sources:
// golang.funcs.tmpl
// golang.header.tmpl
// postgres.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _golangFuncsTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x59\xdd\x6f\x9b\xc8\x16\x7f\x86\xbf\xe2\x5c\x54\x55\x26\xd7\x26\xad\x74\x75\x1f\xba\x62\x57\x6e\xe2\x66\xb3\x72\x9d\x0f\x3b\xda\x87\x28\xda\x50\x33\xa4\xd3\xe0\x81\x0c\x43\x93\x2c\xe1\x7f\x5f\x9d\x19\xc0\x60\x02\x86\x38\xed\xbe\x44\x61\xe6\x7c\xcd\x39\xbf\xf3\x31\xe3\x24\xd9\xdf\x83\xa3\x93\xe9\x78\x76\x04\x9f\x2e\x66\x07\x8b\xe3\x93\x19\x2c\x26\x9f\x4f\xa7\xe3\xc5\x64\x0e\x7b\xfb\x69\xaa\xeb\x49\x32\x02\x97\x78\x94\x11\x30\x42\x87\x3b\xab\xc8\x80\x51\x9a\xca\x75\xee\xb0\x1b\x02\x6f\xe8\x10\xde\x38\xfc\x06\x3e\xd8\x60\xc9\x3d\x2d\x49\x80\x7a\xf0\x86\x42\x9a\x0e\x75\x00\x80\x24\x21\xcc\x4d\xd3\x24\x91\x94\xd6\xcc\x59\x11\x48\x53\xc8\xbf\x17\x8f\x21\x7e\x4b\xa1\x84\xb9\x85\x82\xfc\xff\x8a\x15\x0e\xbf\xe9\x6b\x03\x2a\x42\x59\x35\x0b\xba\x69\x64\xd4\x1f\xed\xa4\x95\x51\xbf\x9b\x26\x2f\x66\xcb\xd1\x57\xe2\xb8\x84\x1b\x68\x9e\xb6\x0c\x58\x24\x20\x12\x2b\x61\x5f\x27\x09\x58\xf3\xb3\x29\xa4\xe9\xb5\xae\x85\x9c\x84\x0e\x27\xee\x10\x38\x09\x7d\x67\x49\x86\x40\x38\x47\x4b\x82\x2f\xdf\xac\x6c\x77\x80\x8c\xa6\xae\x51\x4f\x6e\xfe\xc7\x06\x46\x7d\x48\x74\x4d\xc3\x4f\x1b\xfe\xe4\x4e\x38\xe1\x7c\x40\x38\x37\x75\x4d\xe3\x44\xc4\x9c\xe9\x5a\xaa\x6b\x2e\xf1\x08\xcf\x45\x0f\x4c\x5d\x43\xa9\x7e\x70\x33\x17\x2b\x21\xa5\xca\xd3\x09\xb2\x0a\x7d\x47\x14\x41\xb1\xc6\xfc\x26\x82\x34\x35\xf5\xec\xe8\xd9\x01\xf7\xf7\x60\x3e\x99\x4e\x0e\x16\x30\x5f\x8c\x17\x93\xcf\x93\xd9\x42\xc1\x2b\x49\x8a\xa3\x47\xc4\x27\x4b\x21\x4f\x8d\x5e\x80\x41\xf0\xe5\x1b\xec\x1d\x7e\x34\xab\x8a\x14\xd9\x08\x49\x0c\xb0\x90\xba\x4c\xbe\x78\xd8\x4a\x5e\x04\xa5\xea\xf9\x0a\x21\x9a\x7d\x44\x84\x74\xb8\xe0\xf1\x52\x28\xe4\x58\x9f\x62\xb6\x9c\xc7\x9e\x47\x1f\x20\x4d\x07\x7a\x45\x53\x9e\x1c\x85\x0f\x60\xc0\x49\x14\xfb\x02\xf6\x2a\x72\x54\x9c\x08\xe7\x01\x37\x21\xd1\xab\x42\x2a\xf1\x97\xe6\x6a\x99\x10\x1b\xde\x56\xcd\x49\xf5\x2c\x88\x39\x12\xac\xb3\x98\xf0\xc7\xf3\xe0\xfe\x61\x90\x24\x8d\x91\xc9\x24\xcc\x97\x0e\xcb\xec\x5b\xe3\xc3\xb6\x21\xba\xf3\xad\x09\xe7\xb3\xe0\x3c\xb8\x8f\x24\x52\x14\x28\x10\x38\x43\xfc\x23\xd1\x51\xc7\x53\x99\xaa\x8a\x2a\x79\x04\xb9\xa9\xd4\x29\x29\xb5\x1c\x58\x43\x64\x3c\x9d\x6e\xc2\xa4\x8e\x93\x91\xe3\xfb\x5d\xb1\xe2\xf8\x7e\x5f\xbc\x6c\xb0\xb4\x63\x66\x4d\xbc\xc6\x4d\xe8\xc7\xdc\xf1\xe9\xdf\xe4\x55\x10\x74\x79\xb5\x1b\x86\x36\x80\x32\x97\x76\x0f\xde\xe6\x01\x69\x81\xcb\x0f\x8e\xf5\xe9\xf8\x68\x72\xd8\x21\xda\xa1\x73\x43\xdc\xae\xf1\x96\xc4\x7d\x23\x5e\x63\x6a\x8f\x79\x99\x1c\x4f\x75\x8a\xdf\x7d\x43\x4f\xbd\xc2\xd1\xa8\xa2\x19\x09\x45\x2b\x41\x55\xd8\x4f\x97\x22\xb8\x25\x0c\x22\xc1\x29\xbb\x19\x82\x4f\x57\x54\x00\x65\xa2\x0d\x32\x8a\x27\x88\x45\xc1\xd6\x0b\x44\x52\x2f\xf5\x72\xd5\xb6\x0d\x86\x01\x89\x5c\x2d\x59\x64\x83\xf1\xce\x90\x8b\xa9\xde\x01\x77\x55\x17\x34\xf6\x93\x61\x3e\x40\x64\x6a\xb2\x13\x6f\x45\xa7\x61\xd4\x11\x2a\x79\x7c\x52\x54\x3f\x3c\x89\xf2\x1f\x72\xaf\x9d\x64\x83\xb7\x12\xd6\x3c\xe4\x94\x89\x8c\xf6\x52\xd2\x8d\xde\x5f\x59\xe8\x5a\x19\xf2\x13\xa6\xb2\x04\xe5\x6e\x40\xbf\x10\xd5\x9c\x05\x07\x27\x17\xb3\x5a\x4f\x2c\xc3\x7f\x19\xc4\x6c\x7b\x4f\x94\x54\x9d\x01\xdf\x4a\x5d\x93\xfd\xd5\x89\x3a\x4b\xde\xa0\x6d\xc8\xa0\xb2\x7e\x74\xc5\x01\x7e\xbf\x52\xab\xa5\x4c\xec\x58\x1b\x3b\x36\x51\x6c\x9f\x6f\x37\xfb\x67\x1d\x85\xef\x5e\x58\x21\xd7\xde\x5a\xfb\x14\xb7\x7e\x77\xa2\x57\xf2\xd4\x97\x20\xf0\x37\x5d\xa5\xc9\xd0\x14\x83\xa4\x9c\x24\xbb\x44\xe7\x65\xfd\xc3\x73\xfc\x48\x4d\xad\x65\xb7\x48\x13\xe0\x57\xf4\x5c\x53\xd6\x1c\x4e\xa6\x93\xc5\xa4\x65\x94\x74\x89\x4f\x04\xd9\x9a\x36\x8a\xac\x33\xba\xeb\xe4\x0d\x00\xaf\x10\xa2\xd9\x87\x72\x61\xd7\xc0\x29\xb1\xee\xb3\x91\xeb\x30\x44\x16\x61\x2d\xa0\x3e\x79\x20\xcb\xdd\x62\x57\xc3\x76\x15\x40\x9c\x44\x16\xce\x91\x63\xcf\x23\x4b\x41\xdc\xc1\x4b\x44\x76\xc7\x45\xb7\xf9\x31\x8b\x4e\x97\xf9\x71\x4d\xda\x17\x24\xdd\xe6\xc7\x1a\x71\x05\x2c\xaf\x34\x42\x2a\xc7\x51\x26\xfe\xff\xbf\x7f\x1b\x35\xcf\x55\xc3\x12\x62\x7a\x02\xa6\xa5\xb6\x66\x42\x9b\x80\x72\x3c\x9b\x4f\xce\xdb\xee\xa2\x94\x45\x84\x6f\xef\xbb\x8a\xac\x33\x36\xea\xe4\x0d\xb8\xa8\x10\xca\x16\xc9\x89\xb3\x51\x40\x7e\xc4\xed\x33\xd3\xeb\xc4\x22\x18\x51\x46\x45\x61\xe5\xa8\x7d\x32\x6c\xb9\xa3\x22\x2f\xf5\x80\x05\x02\xac\x73\x19\x9c\x8f\x8f\xbd\xdb\xee\xb1\xb4\x2b\xda\x72\x7b\xdd\xe1\x86\x22\x21\xe2\x47\xa4\x3f\xea\xd7\xa6\xf5\xb6\x23\xbc\xad\x14\xca\xa9\x13\x09\x25\xed\xb8\x1d\xf7\xad\xa7\xc2\x96\xbd\xf9\x72\xf1\xf1\x11\x3f\x4b\xde\x1f\x84\xb7\x66\x25\x2d\x6a\x49\xb2\x09\x45\x16\x8c\x94\x82\xae\x39\x51\x30\xf4\xcd\x8e\x67\x19\xdb\xf3\x64\x93\xe5\xc5\x19\xf3\x23\x52\xe3\xaf\xbc\xb6\xf5\x82\x52\x16\xcd\x4a\x94\x5b\x86\xc4\xba\x75\xf9\x2b\x23\xde\xaf\x66\x84\xb8\xd1\x2c\xb8\x97\xe8\x66\xc1\x3d\x22\x6e\x16\xdc\x0f\xcc\xda\x9b\xa4\x7a\xd6\xb4\xc6\xb1\x08\x22\xc8\x9e\x33\x8b\xc7\xda\x0f\x36\x06\xcc\x3a\x66\x54\x6c\x79\x39\xdd\xdf\x83\x8b\xd3\xc3\x71\xeb\x8c\x16\x87\xae\xd3\x61\x46\x53\x64\x9d\x41\x54\x27\x6f\x80\x4e\x85\x10\xcd\xbe\x90\x0b\x3b\xcd\x68\x43\x50\x52\x23\xb0\x2c\xab\x22\x49\x09\x7f\x51\x4d\x2e\x19\x5a\x82\xd6\x28\xbf\x90\xf7\xaf\xbc\xc8\xd5\x58\x7c\x11\x8a\x96\x65\x3d\x5b\x67\xb3\xfb\x7f\xc3\x43\x61\xfe\x0e\xb0\xf9\x5c\xa8\x9e\x02\x4a\xbc\x45\x41\x7b\x8e\xa3\x02\xf8\x35\xeb\x96\x92\x9d\x39\xa2\xa1\x6a\xe7\x67\xda\xd5\x88\xf6\x7a\xfd\x3a\x27\x7c\xed\xf2\x9d\xa1\xa7\x7b\xf9\xde\x64\xe8\x9b\x79\x7d\xca\x77\x03\xcb\xcf\xcb\xc6\x17\xa5\x1d\x46\xab\xa1\xa8\x57\x90\xd6\xb3\x84\x3f\xa7\x50\xfe\xa2\xf4\xdd\xe1\x70\x17\xc1\xe5\x95\x7a\xb5\x53\x0b\xdf\x1d\x3f\x26\xb8\x48\x99\x20\xdc\x73\x96\x24\x49\x75\x2d\x22\x84\x21\x3c\x57\x4e\x78\xa9\xa8\x71\x1f\x77\x1c\xd7\x95\x2c\xb8\x8b\x2a\x06\x0c\x8b\x7a\xfe\x0e\xa8\xb6\x4a\xa2\x4c\x39\x6f\x50\x0f\xa8\xfb\x30\x84\xe0\x16\xd9\x50\xf8\x25\xb2\x5d\xfd\x02\xc1\x2d\xee\x6b\xca\x8a\x4b\xea\x3e\x5c\x81\xad\xa4\xe8\x1a\x0e\x23\xda\x9a\x18\x6c\xf9\xd8\xa6\x48\xcd\x22\x25\xee\x22\xb0\xc1\x09\x43\xc2\xdc\xc1\x5d\x34\x04\x69\xcf\x7f\xc1\x00\x1b\x7e\x33\x4c\x3d\x97\xbd\x26\x52\xdf\x99\xad\x72\xe4\x79\x85\xf6\x96\xbb\x65\x60\x20\x40\x0e\x02\x3f\x5e\x31\x48\x53\x63\x58\xee\x74\x6b\x39\xc8\xe2\x05\x1c\xc3\xaf\xc2\x25\x6b\x81\x14\x9a\x63\x0d\xfd\x52\x48\x55\x8b\xd6\x52\xca\xc5\x36\x3a\x30\x73\x4e\x4b\x51\x98\xea\xe9\x10\x3d\x12\x89\x95\x90\x7e\x96\x41\x89\xac\xf3\xec\xb7\xb7\xeb\x24\xb1\xe6\x67\xd3\x34\xbd\x1e\x16\xde\x33\x9e\x9e\x9e\xce\xe6\x4f\x4f\x4f\xc6\x7a\x2d\xe7\xfb\x23\xa0\x4c\xba\xd4\x18\x82\x61\x0e\xe1\xbd\xf9\xf3\x7f\x2c\xc4\x44\x40\xe9\x1b\xb1\xab\x4e\x4b\xe5\x7b\xe3\x28\x4d\x4d\xed\xb9\x1f\x19\x8b\x94\x2a\x3d\x80\xff\x13\x00\x00\xff\xff\xf3\x94\xf3\x51\xb8\x1e\x00\x00")

func golangFuncsTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangFuncsTmpl,
		"golang.funcs.tmpl",
	)
}

func golangFuncsTmpl() (*asset, error) {
	bytes, err := golangFuncsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.funcs.tmpl", size: 7864, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\x5d\x8f\xdb\xb8\xd5\xbe\x16\x7f\xc5\x59\xe3\x4d\x20\xcd\x78\xe8\x5c\xbc\xe8\x85\xb3\xd3\x22\x8e\xd3\x45\x81\x74\x26\x9d\x71\x50\x14\x41\x90\xd0\xd2\xb1\x87\x35\x45\x3a\x14\xe5\xb1\xeb\xea\xbf\x17\x87\xa4\x64\xf9\x63\xb7\xe9\xb6\x05\xea\x8b\x91\x48\x9e\x8f\xe7\x7c\xf0\x21\x35\xa3\x11\xbc\xf9\x38\xbb\xff\xe9\xdd\xdd\xbb\x87\x37\xb3\x77\x53\x98\xfc\x05\x96\x66\xbd\x5a\x72\xa9\x47\xd5\x5a\xe4\x58\x1a\xbd\xc2\xdd\xd2\x8c\x8a\xf9\x96\x6f\x5e\xb1\xd1\x08\xa6\xf7\x70\x77\x3f\x83\x77\xd3\x3f\xcc\x38\x63\x6b\x91\xaf\xc4\x12\x61\xbf\x07\xfe\x21\xbe\x37\x0d\x63\xb2\x5c\x1b\xeb\x20\x65\xc9\xa0\x10\x4e\xcc\x45\x85\xa3\xea\x9b\x1a\xb0\x64\xb0\x28\x1d\x3d\x2a\x67\xa5\x5e\x56\xfe\x75\xa7\x73\x7a\x3a\x59\xe2\x80\xb1\x64\xb0\x94\xee\xa9\x9e\xf3\xdc\x94\xa3\xbf\x96\x46\x5a\xa3\x49\x79\x3b\x60\x19\x63\x1b\x61\xe1\xcf\x56\xac\xdf\x59\x0b\xb7\xb0\xa8\x75\x9e\xa2\xb5\x80\xd6\x1a\x9b\x85\x07\xec\x2d\xba\xda\x6a\x1a\x35\x5e\xe1\xbd\x59\x2e\xd1\x06\xe9\x85\xb1\xa5\x70\x10\xfc\x0f\x41\xd8\x65\x05\x9c\x73\xa9\x1d\xda\x85\xc8\x71\xdf\x64\x5e\xe7\xce\x3c\xc3\x2d\x10\x26\x7e\x67\x9e\x19\x23\x65\x50\x66\x89\x7d\x7f\x7b\x96\xc8\x45\x6b\xfe\x87\x5b\xd0\x52\xc1\xcb\x97\xb4\xda\x8e\xf6\x2c\x49\xc2\x7a\x3a\x08\xe8\x72\x65\x2a\xa9\x97\x50\x39\xe1\xb0\x44\xed\xc6\xf0\x62\x33\x18\x92\x52\xc6\x92\x86\x35\x8c\xe5\x46\x57\x0e\x1e\xf3\x27\x2c\x05\xdc\xc2\x57\xb6\xdf\xdf\x00\x8f\xe3\x9b\xa6\x61\x5f\x19\xdb\xef\xc1\x0a\xbd\x44\xe0\x8f\xce\xd6\xb9\xab\x28\xf1\x6e\xb7\x0e\xc5\xb8\x13\x25\x55\x82\xc2\xac\x73\x07\x7b\x6f\x21\xca\xff\x5e\xa2\x2a\xbc\x78\xd2\x17\xa5\xf7\x19\xe9\xb7\xef\x62\x49\x32\xa4\x88\xba\xa0\xd7\x86\xf9\x91\x5c\x00\xff\xb8\xf6\x75\x55\x18\x44\xe0\xff\xa2\xa3\xf1\x6d\x67\xb0\x03\xd3\xae\x35\x8d\xd7\x42\xe8\x72\x4d\xd9\xc9\x8d\xaa\x4b\x4d\x3a\x69\x16\xab\xc2\x92\x8d\x50\x35\x8d\x7b\x55\x61\xc9\xda\xca\x8d\x70\x78\x64\x31\xcd\x58\xd3\x4b\x45\x07\xeb\x10\x23\x89\xd7\xeb\x03\xbc\xb5\x95\xda\x2d\x60\xf0\xa2\x7a\x51\x0d\x20\xcd\x45\x89\xaa\x30\xcf\xba\x35\x9a\x5d\x08\xa0\xd3\x3f\x4e\x53\xe8\x89\x23\x3c\xbd\x84\xa6\x9b\xbe\x6c\x76\x31\x13\x7b\x88\xad\x7a\xe2\x25\xdd\x64\x10\xcd\xa7\xf5\xe9\x62\x06\x17\x72\x76\x30\x35\x20\xaf\x6f\xbd\x04\x34\xcd\xe0\x97\xec\x5c\x48\xf3\x11\xa4\x16\x7c\x5a\xff\x22\x9c\xcb\x85\x81\xfd\xa1\x79\x6e\x9a\xcb\xef\xc4\x15\x3e\xcb\xd3\xc9\xa1\x55\x93\x2b\xda\xed\x7c\x3a\x61\x2c\x51\xb6\x86\x2b\x65\x6b\xea\x3d\xef\xff\x7e\x8d\x3a\xad\x4c\x6d\x73\xec\xf6\xb0\xb2\xf5\x97\x4a\xfe\xcd\x37\x56\x06\xe9\xd5\x74\x32\xec\x6d\xd0\x62\xee\x47\x54\x7b\x6f\xf7\xad\xd1\x1a\x73\x97\x52\x7c\x53\x29\x14\xe6\x0e\xfe\x7e\x68\x8b\x6f\x03\x68\x9a\x21\x04\x17\x99\xdf\xdf\x27\xdb\x39\xe6\x47\x4b\x35\x6c\xa9\x28\x6d\x37\x2f\x6b\x57\x5f\x4e\x27\x24\x3b\x9d\x8c\xa1\x98\x0f\x59\x42\x91\x8c\x41\xe3\xf3\xfb\x87\x8f\x29\x41\x6a\x41\x67\x43\x96\x34\x43\xb2\xd6\xc5\x98\x16\x73\xb8\x9a\x4e\x32\x78\xab\x4c\x45\xf5\x39\xa1\x9c\x62\xce\x95\xad\xf9\x87\xda\x2e\x31\xcd\x3a\x97\x2d\x96\x62\xce\xa7\x13\x1e\x75\xb3\x73\xab\x6b\x8b\x6b\x61\x31\xad\x5c\xd9\xf2\x60\x06\x69\x9c\x2d\x20\x64\xff\xd1\x95\x6e\x08\x16\xd7\x8a\xf6\xa9\x67\xce\x2c\xe4\xf1\x80\x03\xb5\xb3\xbb\x2e\xb9\x11\xd5\x4f\xe8\xbc\xe5\x7f\x9a\x3a\xff\x07\xad\xa5\xb4\xb5\x0b\xde\x62\xf4\x1d\x7c\xc2\xbe\x35\xfc\x10\xb0\xa4\x5e\x26\x83\x9f\xcb\x99\x32\x4b\xd2\xef\x47\x17\x58\x9e\x73\xde\x6f\x74\x1f\xc1\x68\x04\xb3\xfb\xe9\xfd\x18\x2c\xea\x02\x2d\x78\x0f\x4f\x46\x15\x68\xab\x0b\xd4\xde\x27\xf3\xea\x9b\x1a\xc3\x00\xae\xc1\x3b\xba\x86\x81\x77\x72\xeb\xa9\x9c\xde\x5a\x2e\x3f\x46\xf7\x5e\x56\x6e\x46\x04\x55\x51\x59\x3d\x55\x55\xf0\xe9\x73\x8b\xf3\x28\xbf\x00\xe0\x27\x7c\x6a\x1f\x91\x1a\x35\x7d\x19\x54\x86\xf0\x95\xda\xf7\x60\xed\xf1\x4f\xef\xa1\x69\xbe\x66\x5e\x29\x26\xb3\x15\x3d\xea\xd1\x86\x9d\x42\x9a\xa2\x42\x87\x6f\x94\xf2\x88\x8c\x13\x8a\xd2\xf4\x9b\xff\x3f\x41\xd3\x3b\x40\xe2\x81\xf3\x80\x1b\xb4\x95\x27\x42\xf2\x2a\x17\xa0\xfb\xcd\x10\xec\xee\xf7\xb0\x56\xb5\x15\x8a\xf6\x67\x47\x8d\xd9\xeb\x10\x59\x9b\x56\x88\xbf\xe0\xfe\xfa\x16\xb4\x9f\x6a\x00\x55\x85\xbd\xf5\x36\x32\x12\x3b\x09\xcc\xcb\xf7\x89\xe5\x5c\x3e\xf6\x8b\x27\x9c\xd9\xf6\x8c\x70\x66\x5b\xda\x5a\x94\x94\xf3\xba\x79\xda\x21\x6e\x99\x6d\xfb\xdc\xe2\xb6\x47\x11\x4f\xf8\x04\x97\x52\x6f\xd3\x7f\x83\x37\x66\x5b\x92\x9d\x6d\xc7\xe0\xb6\xc4\x1b\xc5\x3c\x32\xc8\x69\xc3\xbb\x2d\x5c\xcd\xb6\x19\xbc\x35\x65\x29\xdd\x39\x4b\x9c\xb0\x82\xa3\x00\x79\x2b\x9c\x9d\xdb\x79\x30\x4a\xcd\x45\xbe\xfa\x4e\x4b\x07\xf1\x0b\xb6\xfe\x2b\x3d\xe5\xb6\xff\xbb\x3d\x75\x1c\xfe\x7f\x8c\x61\x5b\x95\x4e\x6e\x18\x19\xc1\x6d\x79\x31\xe7\x7d\x3f\xbf\x8a\x6f\x5d\x80\xb1\xed\xb0\x65\x3d\x4f\x17\x43\xfb\x97\xe8\x35\xa0\xec\xab\x74\xb2\x59\xb7\x13\x3d\x9f\xf7\x36\x23\xc9\xf6\x52\xc4\x58\xa2\x71\xeb\x86\x94\xd4\x0d\x5c\x79\x69\x96\xac\x70\xd7\xd6\xaf\xbd\x33\x5a\x5c\x54\x71\x4a\x6a\xd7\x99\xa7\x1b\xc4\xc1\x78\x59\xb7\x5a\x3b\x9d\xf3\x3f\xd6\x0e\xc3\xa6\x0f\xbf\xee\xe2\x91\xe4\x62\x2d\x72\xe9\x76\xde\x54\x62\x8d\x71\x5e\x20\x7a\x97\xba\xc0\x2d\x8d\x4b\xb1\xfe\x14\xfc\x7f\x8e\xc8\x1a\x46\x5f\x49\xe1\x9c\x8f\xad\x52\x81\xd0\x20\xb5\x74\xd2\x77\x6c\x41\x90\x78\x48\x6b\x77\x1f\xe8\x5c\x0f\xa1\xef\x3a\xf3\x97\x1f\x02\xae\x68\x07\xbc\x54\xb6\xde\x47\x4e\x08\xbf\x70\xb7\x68\x55\xc6\x9d\x32\xcd\x7a\x94\xe3\x00\x73\x85\xe9\x19\x56\x7f\xf3\x60\x89\xe2\x14\x1e\xa7\x24\x03\xb9\xf0\xc3\x6e\xda\x67\xbd\x37\x1d\x1b\x47\xc5\x40\xa5\xae\xd0\xba\xf8\xa8\x00\x41\x2c\x1c\x5a\x10\x6e\x08\x52\xe7\xd6\x7f\xdf\x54\xa0\xb8\x42\x1d\x43\x4e\x95\x8f\x29\x8b\x3a\x29\x0e\x41\xb8\x58\x57\xdf\x34\x9a\x22\x15\x01\x10\x4b\x44\x87\x0c\x59\x82\x2d\x1c\xe1\x68\x10\x17\x34\x4b\x74\xbb\x80\x11\x97\xc5\xd2\x6c\x30\x3e\x08\xd7\xc2\x9a\x12\x24\x61\x91\x95\x1b\x42\x81\xc7\xe0\x4e\xb0\x05\xbd\x14\xfb\xb8\x82\xf3\x0e\x4d\xc4\x17\x9e\x9d\x7b\xff\xd2\xc7\x26\x15\x8c\x46\x20\x36\x46\x16\x50\x62\x69\xec\x0e\x14\x8a\x55\xd5\x0b\xe6\xe7\x65\xba\xdd\xd7\xe2\xc2\x8d\xcc\x5d\x7a\xdc\x21\xe1\x1b\xb4\x9b\xfb\x11\x5e\xf5\xb6\x7e\x38\x5b\x9c\xf9\xe2\x35\x29\xb3\x0a\x75\xaa\xb8\xef\x8d\x0c\x6e\x3a\x3d\x96\xe4\xb5\xb5\xa8\x5d\xe8\xb3\x58\xed\x85\xb1\x20\x69\xe6\xd5\x6b\x90\xf0\x23\xb4\x86\x5e\x83\xbc\xbe\xf6\x6e\x5a\xad\x5b\x88\x6f\x31\x03\x1e\x53\xbb\xd6\x59\xf4\x2a\xc9\x5a\x68\x99\xa7\x83\xb0\x8b\x4c\xed\xc0\x2c\xe0\xf9\x49\xe4\x2b\x0e\x96\xb8\x30\x37\xba\x90\x4e\x1a\x5d\xfd\x6e\x90\xb1\x84\x9a\xb4\x67\x8e\xfb\x8d\xfe\xdb\x18\x66\x92\x1b\xed\xa4\xae\x31\xca\x8d\x46\xf0\xfc\x64\x04\xcc\xcd\x0e\x64\x05\xee\x49\x56\x50\xd5\x73\xa7\x90\x83\xe2\xb1\x2d\xe6\xca\x3c\x57\x20\x9e\xc5\xae\x33\xea\xeb\x25\x74\x11\x4c\xf4\x63\xe1\x30\xaf\xdd\x91\x5c\x28\xdc\xb3\x54\x0a\xe6\x08\x65\x4d\x1f\xf2\x05\x38\x03\x73\x3c\x57\x07\xca\xa1\x7b\x42\xf0\x1e\xa4\x43\x2b\x28\xb4\x1f\x58\xe2\x79\xed\x4b\x2f\xed\x7d\x1f\x8c\x3e\x19\x22\xde\x34\x2e\x50\x2e\x0a\x7f\x02\xb6\x15\x1c\x76\x3a\x2b\xdc\xd1\xb2\xff\x07\x45\x3b\x47\xf4\x79\xf8\x0e\x38\x2a\x56\xdf\xf5\xd1\x45\xb5\xed\x34\xba\xc6\x13\xc9\x76\xa7\xd7\xd5\xe1\xb6\x1f\x0f\x27\xc5\xcb\x9a\xbf\x37\x74\x05\x60\x49\x81\x0b\xb4\xe0\xa7\x3e\x6a\x15\x26\x59\x82\x43\x30\x2b\xdf\x75\x01\xef\xa7\x15\xee\x3e\xfb\x7e\x35\x2b\x5f\xbe\x2e\x44\xf4\xe8\xf9\x81\x14\x62\xc7\xd0\x34\xfa\x92\x5f\x5f\xb3\xc3\x89\x16\x8f\x27\xdf\xdd\xe1\x5c\x89\x97\x04\x45\x27\xce\x87\x70\x9a\x6d\x53\x3f\x7a\xc0\xb9\xd4\x05\x45\x93\xfd\x8a\x7b\x19\x12\xfb\xf9\xd8\x49\x96\x52\x3a\xf6\x57\x7e\x62\xd8\x15\xee\x88\x5f\x57\xb8\x6b\xa9\xf4\x12\xfe\x7e\xec\x2d\x8f\x75\x01\x1d\xc7\x73\x56\x86\xee\xa3\xa7\xcf\x44\xdf\x93\x78\xef\xe1\xe6\x86\x84\x03\x69\x28\xde\x6e\xf5\xec\xdc\x4d\xfc\x94\xfc\x4e\xe3\xad\xc9\x57\xe1\x73\xe2\x1f\x01\x00\x00\xff\xff\x7b\x2d\x93\xf1\x48\x14\x00\x00")

func golangHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangHeaderTmpl,
		"golang.header.tmpl",
	)
}

func golangHeaderTmpl() (*asset, error) {
	bytes, err := golangHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.header.tmpl", size: 5192, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x4d\x8f\xda\x38\x18\x3e\xc3\xaf\x78\x55\x71\x60\xd0\x90\xde\x77\x55\x8d\x32\xe0\xe9\xa6\x0d\x0e\x93\x98\xad\xe6\x98\x12\x53\xbc\x4a\x1c\x36\x18\x8d\x90\xf1\x7f\x5f\xd9\xce\x27\x4d\xd8\xe9\x6a\x0e\x7b\x73\xec\xc7\xcf\xfb\xbc\x9f\x8e\x94\x1f\x67\xb0\x0e\x22\xf2\x39\x44\xd1\xb3\x0f\x11\x71\x09\x5a\x21\x4c\x80\xa0\xd5\xda\x77\x09\x8a\x00\x66\x1f\x95\x1a\x8f\xa5\x9c\x43\x42\x77\x8c\x53\xf8\x70\xdc\xee\x69\x16\x7f\x80\xb9\x52\x66\xbf\x88\xf9\x0f\x0a\x0e\x89\xbf\xa7\xf4\x08\x4a\x8d\x17\x21\x72\x09\x02\xe2\x3e\xfa\x08\xa4\x04\x07\xc7\x19\x05\xa5\x60\xda\xc2\x4f\xd8\x3d\x4c\xb6\x79\x0a\xbf\x7d\x02\x67\x91\xa7\xa7\x8c\x9b\xcb\x52\xb2\x1d\x4c\x98\x52\xf7\x52\x52\x9e\x28\x35\x92\x12\x5e\x99\xd8\x5b\xb4\x36\x3a\x6a\x73\xea\x35\x39\x1f\x68\x75\x32\x07\xb6\x03\x07\xe7\x02\x9f\xd2\x54\x03\x70\x40\x00\x6f\x7c\x1f\xf4\x19\xe5\x49\x17\x18\xd2\x1d\x2d\x28\xdf\x1a\xae\x10\x3d\xa1\x10\xe1\x05\x8a\x0c\x6d\x7d\x66\x7d\x03\xa5\xa6\xdd\x6d\x2b\x1b\x94\xba\x83\x00\xc3\x12\xf9\x88\xa0\xab\x9b\x01\x5f\xd2\x94\x0a\x7d\xb9\x6d\x7f\x78\x6d\x54\xad\x0b\x96\xc5\xc5\xf9\x2b\x3d\xeb\x90\xdc\x8f\xd6\xa1\xb7\x72\xc3\x17\xf8\x8a\x5e\x60\x3a\x10\xc3\xce\x9d\x26\x8a\x50\x86\x51\x4a\x0b\x35\x2b\x6d\x4e\xa9\xbb\x6b\xd3\x65\x26\x37\x9c\xfd\x7d\xa2\xd6\xf2\x06\x7b\xcf\x1b\x34\x68\xf4\x97\x4d\x29\x35\xbe\xfb\x7d\x5c\xef\xb7\x56\x9d\x1a\x4b\x72\xc1\xe3\x8c\x56\x45\x06\x75\x06\x1c\xfd\x51\xc7\xbd\xe3\x40\x87\x20\xa5\x3b\xf1\x57\xce\xb8\x65\xf0\xd1\x13\x81\x2f\x81\x87\x6d\x76\xd8\x8f\xbd\xa8\x19\x75\xea\xa4\x04\x41\xb3\x43\x1a\x8b\xb6\x6d\xc7\xa7\x3b\xa1\x11\x9f\x86\x00\x86\xe9\xa6\x8e\x6d\xce\x13\x26\x58\xce\x9b\x7e\xd1\x09\xb6\x1e\x2c\xb2\x43\x5d\xd0\x7d\xf4\x35\xaa\x56\xd2\x78\xaf\x77\x83\x03\x2d\x62\x91\x17\xfa\xe4\xe1\xa7\x9a\xea\xd8\x29\x43\xf6\x26\x6b\x76\xd1\x6f\xb3\x3c\x6b\x5b\x7e\x23\x5d\x6f\xac\xba\x3a\xbd\xb7\x08\xf4\x1a\x65\x1e\xd6\x85\xd9\xc2\x1e\x69\x4a\xb7\xa2\x0d\xf5\x78\x4f\xa1\x0f\xe4\xea\x75\x4f\x0b\x7a\x3d\xd7\xca\x72\xe7\x89\xad\xf7\x4a\x1f\xdb\x01\xcf\x05\x4c\x18\x28\xf5\xed\x0f\x14\x9a\xbe\xa7\xe9\xd1\x54\x94\x8b\x97\x50\x17\x76\x47\x60\xab\x1c\x2c\xe9\xad\x61\xd0\x9d\xba\xc6\xb5\xf9\xeb\x3e\x16\x75\x57\x4c\x84\xa9\x61\x2d\xac\xaa\xe6\x2a\xa2\x29\xe5\xe0\x7c\xdb\xc7\xa2\x56\xdc\x72\x47\x93\x98\x5b\x06\x60\x24\x9a\x1e\x06\xdb\xc4\x8d\xf0\xd2\x80\x6d\x3b\x7b\xad\xd5\xd4\x56\xac\xf6\xb9\xb2\xd1\xe0\x67\xbf\xe2\x95\x75\x28\x42\x3e\x5a\x10\xe8\x49\x68\xe9\xb5\xa3\x14\x3c\x85\xc1\x0a\xda\x03\xc1\x8e\xf2\x72\x72\xe9\xc2\xf8\x92\x33\xfb\x92\x8c\xba\x75\xd4\x4c\x04\xa7\xbe\xf6\xd3\x73\xb0\xa8\xf2\xd3\xc7\x50\xd6\xc7\x35\xa8\x97\x28\x28\x12\x5a\x3c\x9e\x2d\x4b\x10\x2e\x51\x08\x8f\x2f\x43\xad\x52\x82\x9b\xb9\x06\x6e\xb4\x18\x20\xf6\x59\xc6\x84\xa5\xf5\xbd\x95\x47\xe0\xa1\x0b\xbc\x31\x89\x4e\xbc\x1b\x69\xb3\x33\x9d\xdd\xfd\xdf\x83\xfa\x6f\x3d\xf1\x3d\x3e\xb6\xda\xb6\x17\x99\x98\x47\xd8\x82\xca\x77\x7a\xc0\xe9\x7e\xc1\xef\xa3\x97\xf1\x23\x2d\xca\x1c\x78\x38\x42\x21\x01\x0f\x93\x60\x50\x85\xfd\x29\x32\xb1\x1c\x0d\xbd\xc0\xcd\xaf\xd3\x70\x17\x5f\x3f\xc6\xf0\xa7\xeb\x6f\x50\x34\x35\xae\xfd\x27\xd6\x87\xd6\xcb\x5e\xfb\x6e\xfe\xa0\xc8\x26\xc4\x1e\xfe\x0c\xb3\xe1\x30\x9c\x0e\x49\x5c\x25\x63\xb3\x5e\xba\xe5\x4f\x53\xfd\x20\x47\x88\xc0\xe5\x72\x79\x8e\x2e\x97\xcb\xbb\x24\xe5\x86\xb0\x7f\x02\x00\x00\xff\xff\x5f\xa3\x67\x2b\x04\x0b\x00\x00")

func postgresTmplBytes() ([]byte, error) {
	return bindataRead(
		_postgresTmpl,
		"postgres.tmpl",
	)
}

func postgresTmpl() (*asset, error) {
	bytes, err := postgresTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.tmpl", size: 2820, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"golang.funcs.tmpl": golangFuncsTmpl,
	"golang.header.tmpl": golangHeaderTmpl,
	"postgres.tmpl": postgresTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"golang.funcs.tmpl": &bintree{golangFuncsTmpl, map[string]*bintree{}},
	"golang.header.tmpl": &bintree{golangHeaderTmpl, map[string]*bintree{}},
	"postgres.tmpl": &bintree{postgresTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

