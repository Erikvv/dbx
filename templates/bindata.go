// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// golang.create-raw.tmpl
// golang.create.tmpl
// golang.decl.tmpl
// golang.delete-all.tmpl
// golang.delete-world.tmpl
// golang.delete.tmpl
// golang.dialect-cockroach.tmpl
// golang.dialect-postgres.tmpl
// golang.dialect-sqlite3.tmpl
// golang.footer.tmpl
// golang.get-all.tmpl
// golang.get-count.tmpl
// golang.get-first.tmpl
// golang.get-has.tmpl
// golang.get-last.tmpl
// golang.get-limitoffset.tmpl
// golang.get-one-all.tmpl
// golang.get-one.tmpl
// golang.get-paged.tmpl
// golang.get-scalar-all.tmpl
// golang.get-scalar.tmpl
// golang.header.tmpl
// golang.misc.tmpl
// golang.update.tmpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _golangCreateRawTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xcd\xaa\xdb\x3c\x10\x5d\xdb\x4f\x31\x5f\x56\x36\xe4\xea\x01\x3e\xb8\x8b\x52\x6e\x21\x50\x0a\x4d\xba\x17\x8a\x35\x76\xd5\xc8\x92\xef\x58\xf9\x43\xe8\xdd\x8b\x24\xc7\xf8\x12\x12\x0a\xed\x6e\x3c\xa3\x39\x73\xce\xd1\x58\xde\xbf\x80\xc4\x56\x19\x84\x95\x11\x3d\xae\xe0\x25\x84\x72\x2b\xce\xde\x83\x6a\x81\x6d\x71\xd0\xa2\x41\x08\x61\x8a\xbc\x07\xd4\x63\x4c\x7c\x26\x14\x2e\x7d\x1b\x09\x21\xe4\x06\x63\x5d\x6c\x72\x47\x32\x10\xc2\x37\x9b\xc3\xf9\x10\xf7\x1e\xd8\xee\xd8\xb6\xea\x02\x21\x94\x71\x7a\x2c\xc4\x99\xe5\x92\xca\xa8\x3a\x23\xdc\x91\x26\x3e\xb1\xe4\xb0\x1f\xb4\x70\x33\x4f\x06\x21\x54\xde\x43\xe3\x2e\x83\x20\xd1\x03\xfb\x44\x1d\x84\x50\x43\x55\x16\x33\xfb\x89\x88\xf7\x30\x1d\x9a\x53\x6b\x98\x59\x21\x11\x20\x91\xa5\xfa\x31\x23\x65\x4e\xf6\xf0\x67\x74\x04\x75\x33\x99\x72\x1a\x72\x87\xb7\xb7\xf2\x9a\xd1\x12\x59\xa3\x9c\xc1\x33\xb0\x2f\x0a\xb5\x1c\xa3\x37\x29\x8f\xfd\x1e\x65\xf2\xfd\xa7\xd5\x12\x69\x04\xb6\x31\xad\x85\xa9\x2d\x95\xc7\x77\x3d\x65\x57\x9c\xa7\x0c\x1f\x5d\xef\x56\x19\xe4\x24\x08\x78\x4a\xc0\x6b\x0c\xde\xf5\xfe\x68\xa4\x46\xbe\x45\x23\x91\x2a\xbb\xff\xc5\xa4\x12\x1a\x1b\xb7\x86\x65\x7f\x5d\x16\xb1\xa6\x6d\xb7\x73\xbd\xab\x32\x46\x32\x2d\xe9\x9b\x89\xd6\xe5\xcd\xee\x8f\x77\x5f\x16\x7c\x1d\x5d\x85\x57\x48\x33\x48\x9d\x90\xd8\xdb\x05\x9b\x07\x58\x11\xaa\x50\x6d\xea\xf9\xef\x15\x8c\xd2\xe0\xcb\xa2\xa0\x0c\x18\x31\x7a\x71\xc0\x37\xa2\x0a\x89\xea\xb2\x08\xe5\xad\x66\x94\xce\x76\xc4\xc5\x9c\x2d\x6d\xe3\xa6\x0d\x83\x25\x37\x66\x52\xca\x74\xb0\xf0\xfb\x03\xd7\x3b\xa2\xdf\x8f\x48\xd7\xad\x3d\x3f\x11\xce\x76\x8d\x30\xf1\xce\x85\x94\x64\x5b\xa8\x5a\x2d\x9c\x43\x73\x03\xae\xe1\xb9\x24\xa3\xf4\xfa\xa9\xae\xdb\xc8\xc5\xce\xde\x4b\xe5\x9c\x70\xcc\x4e\xff\xff\x6f\xac\x7e\xcc\x8b\xf3\xe1\x30\x8f\x4a\x83\xd9\x57\x31\xba\x8d\x19\x91\xdc\x46\x56\x7f\xa5\x36\xd6\x3a\x74\x11\x30\xbe\x12\x59\x34\xfb\x71\x1d\xe2\x63\x53\x35\xee\x12\xf7\x73\x38\xd4\x59\xff\xf4\x4f\x2d\xe3\x45\xf8\x3b\x00\x00\xff\xff\xed\x3f\x83\x46\xd7\x04\x00\x00")

func golangCreateRawTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangCreateRawTmpl,
		"golang.create-raw.tmpl",
	)
}

func golangCreateRawTmpl() (*asset, error) {
	bytes, err := golangCreateRawTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.create-raw.tmpl", size: 1239, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangCreateTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\x5d\x6b\xe3\x38\x14\x7d\xb6\x7f\xc5\x5d\x3f\xd9\x90\x88\x7d\x2e\x94\xa5\x74\x3a\x6c\x97\x10\x68\xd3\xee\xcb\x30\x08\xc5\xbe\xce\x6a\x23\x4b\x1e\x59\x6e\x5a\x8c\xfe\xfb\x70\x65\xc7\x8d\xf3\x31\x53\xe8\x9b\xad\xfb\x71\xce\xb9\x92\x8e\xba\x6e\x0e\x05\x96\x52\x23\x24\x5a\x54\x98\xc0\xdc\xfb\xb8\xeb\x40\x96\xc0\x1e\xb1\x56\x22\x47\xf0\x7e\xf8\xea\x3a\x40\xd5\xd0\xc2\xad\x45\xe1\xc2\xbf\x2e\xc0\xfb\xbe\x40\x1b\x47\x45\xae\xb5\x1a\xbc\x5f\x9a\xfe\x73\x4c\xe2\x5d\x07\x6c\xd5\x96\xa5\x7c\x85\x00\x32\x0f\x01\x02\x8c\x0f\x79\x34\x72\xa3\x85\x6b\xed\x48\x66\x0e\x0e\xab\x5a\x09\x37\x92\x64\xe0\x7d\xda\x75\x90\xbb\xd7\x5a\x58\x51\x01\xbb\xb1\x9b\x06\xbc\xcf\x20\x8d\xa3\x91\xfe\xc0\xa4\xeb\x60\xc8\x1a\x97\x66\x30\xd2\x42\x6b\x01\xad\x35\x36\xbb\x4c\x49\xea\x17\xb3\xfd\x18\x1f\x61\x37\xef\x6c\xe2\x01\xe5\xa4\xe1\xda\x14\x6f\x7d\xbb\x88\x96\x89\xee\x12\xb1\x68\x96\x66\x47\xb3\x89\x38\xd7\x66\x07\x57\xd7\x60\xd6\xff\xb3\x62\xcd\xfe\x36\x66\xdb\xb0\xa5\xd9\xa5\x19\x7b\x7e\xba\x4d\xb3\xa0\x72\xdf\x3a\x28\xd6\xd2\x69\xdc\x01\x5b\x39\xe1\x64\xfe\x55\xa2\x2a\x88\x43\xdc\x67\x56\x6b\x2c\xc2\x1e\xfe\x67\x54\x81\xb6\x01\x76\xaf\x4b\x03\x43\x71\x08\x37\x3f\xd4\xb0\x9a\x70\x1e\x56\x78\xe3\x2a\x97\xf4\x4d\x5e\x84\x05\xce\x5f\x84\x6a\xb1\x81\x6f\xdf\xa5\x76\x68\x4b\x3a\x13\x81\xed\xb0\x7e\x0d\xa2\xae\x51\x17\xe9\x7e\x25\xcc\x39\x8c\xe4\x88\x56\x16\x8f\xfb\xb4\x72\xb6\xcd\x1d\xbb\xd7\x0d\x5a\x27\xd6\x0a\xbf\xbc\x69\x51\x8d\xb9\xf3\x7e\x1e\xa6\x76\xd2\x68\xa1\x78\x6e\x54\x5b\xe9\x86\x86\xc3\x79\xf3\x43\xad\x5b\x5d\x28\xe4\x0b\xe9\xd0\x0a\xd5\x74\xff\x18\xa9\xaf\x20\x99\x41\x32\xad\x9b\xa8\xff\x50\x71\xd7\x81\x15\x7a\x83\xbf\xa5\x48\x0c\x65\x09\x7b\x28\x46\x07\x7d\x29\x2a\xba\x28\x8c\x37\xe8\xa0\x8b\xa3\x5f\x0e\xe9\x6c\x65\x08\xa6\x59\x16\x6a\x8f\xe5\xb3\xd5\xc3\x62\xd2\xea\x6c\xc2\xec\x9c\xca\x34\x21\x94\xdb\x90\x06\xde\x27\xc7\x08\x87\x83\xba\x0c\x73\x92\x75\x01\xeb\xaf\xd0\xdf\x8f\xe7\x75\x98\x95\x42\x7d\x89\x74\x06\xd7\xd7\xf0\x67\x98\x99\x2c\x81\x1f\xc6\x28\xa2\xa5\x0a\xb1\x88\xf3\x5c\x89\xb6\xc1\x3e\x70\x1e\xfd\xcb\xdd\xd7\x9b\xe7\xc5\x13\xfc\x7b\xb3\x78\xbe\x5b\x25\xa4\xd4\xc7\x91\xef\x6d\xac\xdf\x95\x49\xfb\xdf\x9d\x8a\x19\x10\xc3\x2b\xf8\xf6\xfd\x30\x71\xf5\xb0\xe8\x26\x8d\x68\x16\xc7\xda\x48\x78\xc4\x4f\xe6\xf6\x39\xcc\xe3\x6e\x13\xe0\xc3\x20\xa1\xfb\x89\x69\xec\xaf\x34\xdd\xf1\x23\x12\x8f\xa8\x0b\xb4\x69\xf0\x1e\x29\x14\xe6\x8e\xfa\xbe\x5b\x42\x16\x47\x14\x53\x66\xb3\x72\x95\x4b\xfb\x1e\xb3\xd1\x1e\x18\x63\xef\xd7\x7b\xfa\x28\xc4\x11\x9f\x91\xdb\xc2\xe0\x6c\x56\xbe\xa0\x65\x77\xaf\x98\x9f\xef\x42\x27\x80\xd2\xff\x78\xdf\x77\xdb\xf7\xa2\xf2\x4a\x6c\xf1\xce\xda\x14\xad\xed\xcf\xd8\x10\xd3\x52\xf5\x52\x69\x97\x47\x83\x24\xab\x69\xeb\xda\x58\xd7\xf4\x7c\xa4\xde\xc0\x81\x7b\x4e\x68\x9e\x70\x7c\x68\xd1\xbe\x3d\x9a\xdd\x59\x9e\x6c\x95\x0b\x4d\x0f\x80\x28\x0a\x6b\x4a\x48\x4b\x25\x9c\x43\xbd\x6f\x99\x05\xc7\xbb\x2c\x46\x4b\x35\xfb\xa5\xa2\xbd\x8b\x1e\x3c\x60\xa7\x22\x39\xb7\x64\x26\x04\x71\xf5\xe9\xf9\x5e\xa6\xc4\x79\xbd\x1d\x51\x02\x26\x5b\x88\xc6\xf5\xe6\x78\x5f\xa4\x9f\x12\x4a\xb1\x0d\x3a\x6a\x48\x2e\xd5\xeb\x65\x4f\x6f\x35\x59\x62\x9a\xbb\x57\x12\x50\x6f\x4f\xdf\xbf\xfd\xf7\xc1\xe7\xcf\x00\x00\x00\xff\xff\x64\x68\xb4\x69\xdd\x08\x00\x00")

func golangCreateTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangCreateTmpl,
		"golang.create.tmpl",
	)
}

func golangCreateTmpl() (*asset, error) {
	bytes, err := golangCreateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.create.tmpl", size: 2269, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeclTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xd6\x55\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\x49\x4d\xce\x51\x52\xa8\xad\xe5\x4a\x2b\xcd\x4b\x56\xd0\xc8\x4f\xca\x52\xd0\xaa\xae\x56\xd0\x0b\x4a\x4d\x4e\xcd\x2c\x4b\x2d\x72\x4a\x2c\x4e\x55\xa8\xad\xf5\xcc\x2d\xc8\xd1\x54\x00\x49\x04\x67\xa6\xe7\x25\x96\x94\x16\x81\x44\x15\xaa\xb9\x40\x42\x4e\xf9\x29\x95\x20\x23\x6a\x41\xbc\xd4\xbc\x14\x05\xdd\xda\x5a\x2e\x40\x00\x00\x00\xff\xff\x9b\x28\x5e\xfd\x65\x00\x00\x00")

func golangDeclTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeclTmpl,
		"golang.decl.tmpl",
	)
}

func golangDeclTmpl() (*asset, error) {
	bytes, err := golangDeclTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.decl.tmpl", size: 101, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeleteAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\xc1\xab\xd4\x30\x10\xc6\xcf\xc9\x5f\x31\xf6\xd4\x42\x5f\xf0\x20\x1e\x84\x3d\x3c\xf0\x1d\xbc\xbe\x3d\x8a\x84\xb4\x99\xd4\xb8\x69\xb2\x3b\x49\xeb\x4a\xe8\xff\x2e\x69\xab\x56\x58\x10\x3c\x04\xc2\x7c\x5f\x7e\xdf\x4c\x26\xe7\x27\xd0\x68\xac\x47\xa8\xa2\x1d\xbc\x4a\x13\x61\x05\x4f\xcb\xc2\x3f\xa2\xc3\x84\x32\x67\x10\xe7\xc9\x18\x7b\x87\x65\xa9\x73\x86\x3e\xdd\xaf\x8a\xd4\x08\xe2\x99\x86\x08\xcb\xd2\x40\xcd\x59\x1f\x26\x9f\xc0\xfa\xf4\xfe\x5d\x0b\x48\x54\x4e\xa0\x86\x97\x00\xf4\x7a\x25\xf2\x63\x9a\xf5\x73\xb8\xfc\x3b\x4a\xd1\xf0\x27\x88\xe7\xfc\x18\xd6\x05\xfd\x63\x43\xb1\x62\x19\x3b\xd4\x57\xa7\x7a\xfc\x1a\x9c\x46\x8a\x20\x3e\x79\x13\xe0\x28\xc7\x9b\xdb\xab\x95\x94\x6b\x45\xc6\x34\xa6\xaa\x98\x38\x9b\x15\x81\x94\xb3\x72\x13\x46\xf8\xfc\xc5\xfa\x84\x64\x54\x8f\xf9\x40\xd8\xd5\xad\xb9\xea\x97\xfb\x2f\x40\x21\xc2\xa9\x5c\x6e\xae\x9b\xbc\x76\x28\x5f\xd1\x6b\xa4\x3a\x74\xdf\x84\xb6\xca\x61\x9f\x5a\x38\x36\xd0\x70\x56\x34\x17\x86\x73\x1a\x53\xbd\x31\xda\xdf\xcd\x08\x21\x1a\xce\x99\x94\x84\x71\xfb\xe7\x0f\x27\x58\x61\x64\x67\x24\xf1\x72\xc7\xfe\xf1\x23\x66\xcd\xea\x7f\x73\x02\x6f\x1d\x64\xce\x18\x61\x9a\xc8\xc3\xdb\x76\x25\x8c\xea\x82\x2f\x44\x35\x12\x35\x9c\x95\x21\xd6\x9d\x6e\x29\x65\x08\xc2\x28\x5e\xc3\xf7\xf8\x6c\x0c\xf6\x09\x75\xfd\x5f\xd0\x5d\xdf\xd9\xde\xba\xe3\x52\x7f\x06\x00\x00\xff\xff\x53\x0b\xab\x75\x8f\x02\x00\x00")

func golangDeleteAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteAllTmpl,
		"golang.delete-all.tmpl",
	)
}

func golangDeleteAllTmpl() (*asset, error) {
	bytes, err := golangDeleteAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete-all.tmpl", size: 655, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeleteWorldTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\xb1\x6a\xc3\x30\x10\x86\x67\xe9\x29\xae\x86\x82\x4d\x13\xd1\xa1\x74\xf3\x10\x4a\xb6\x2e\x4d\x1f\x20\x38\xd6\x39\xa8\x55\x4f\xcd\xe9\x9c\xba\x08\xbf\x7b\xb1\x5c\x87\xcc\x19\x84\x40\xe8\xff\xbe\xbb\x3f\xa5\x35\x58\xec\x1c\x21\x14\xd1\x1d\xa9\x91\x9e\xb1\x80\xf5\x38\x6a\x8b\x1e\x05\x37\xde\x97\xad\x0c\xd0\x06\x12\x1c\xc4\xbc\xcc\x77\x05\x65\x1b\x7a\x12\x70\x24\xcf\x4f\x2b\x40\xe6\xe9\x04\xae\xf4\x84\x44\xb2\x99\xa1\xaf\xf9\x87\x60\x7f\x67\xb4\x3a\x37\x0c\xfb\x3d\x63\x84\x78\xf2\x66\x87\xb1\xf7\xb2\xbc\x5e\x71\xe7\x3c\x37\x74\x44\x30\xef\x6f\xaf\x11\xa6\x70\x0e\xce\xca\x1a\xc2\xe1\xc3\x58\x76\x67\x64\xb3\x1d\xb0\x2d\x53\x82\x6f\x76\x24\x1d\x14\xf7\xa7\x02\x0c\x8c\x63\xa5\x95\xeb\xf2\xf7\xbb\x1a\xc8\x79\x48\x5a\x29\x46\xe9\x99\xe0\x71\x95\x09\x5f\xcd\x27\x6e\x99\x4b\x64\xae\xb4\x1a\xf5\x24\xc9\x73\x2c\x9a\xec\x34\xbb\xf0\x13\x37\x5d\x87\xad\xa0\x2d\x6f\xc0\xaa\x79\xb7\x87\x7a\x59\xf3\x52\xd6\xd4\xd5\x12\xfe\x17\x93\xf3\x3a\xa5\x4b\x95\x7f\x01\x00\x00\xff\xff\xab\x74\xf7\x3d\xaa\x01\x00\x00")

func golangDeleteWorldTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteWorldTmpl,
		"golang.delete-world.tmpl",
	)
}

func golangDeleteWorldTmpl() (*asset, error) {
	bytes, err := golangDeleteWorldTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete-world.tmpl", size: 426, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeleteTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x41\x8b\xd5\x30\x10\xc7\xcf\xc9\xa7\x18\x7b\x6a\xa1\x1b\x3c\x0b\x4f\x58\x70\x0f\x5e\x77\x8f\x22\x21\x6d\x26\x35\x6e\x9a\xec\x4e\xd2\xfa\x24\xf4\xbb\x4b\xd2\xfa\xac\xa0\x08\x1e\x0a\x65\xe6\x3f\xbf\xdf\x30\xc9\xf9\x0e\x34\x1a\xeb\x11\x9a\x68\x27\xaf\xd2\x42\xd8\xc0\xdd\xb6\xf1\x0f\xe8\x30\xa1\xcc\x19\xc4\xd3\x62\x8c\xbd\xc2\xb6\xb5\x39\xc3\x98\xae\x2f\x8a\xd4\x0c\xe2\x9e\xa6\x08\xdb\xd6\x41\xcb\x99\xae\x69\x0d\x43\x08\xae\x07\x24\x2a\x5f\xa0\x8e\x17\x03\x7a\x5d\x91\xfc\xac\xb3\x7e\x0d\xcf\xff\x76\x29\x9a\x7e\x99\xfe\x4e\x1b\x82\xfe\xbe\xb3\x58\xce\x80\xf3\x80\xfa\xc5\xa9\x11\xbf\x04\xa7\x91\x22\x88\x8f\xde\x04\x38\xb7\xe3\xab\x3b\xaa\x8d\x94\xb5\x22\x63\x9a\x53\x53\x42\x9c\xad\x8a\x40\xca\x55\xb9\x05\x23\x7c\xfa\x6c\x7d\x42\x32\x6a\xc4\x7c\x22\x1c\xdd\x7d\xbb\xe6\x67\xfa\x37\x40\x21\xc2\xa5\xfc\xbc\xba\x61\xf1\xda\xa1\x7c\x44\xaf\x91\xda\x30\x7c\x15\xda\x2a\x87\x63\xea\xe1\xbc\x40\xc7\x59\xe9\xb9\x30\x3d\xa5\x39\xb5\x3b\xa3\xbf\x2d\x23\x84\xe8\x38\x67\x52\x12\xc6\xfd\xd0\xef\x2e\x50\x61\x64\x57\x24\xf1\x70\xc5\xf1\xcf\x43\xcc\x9a\x9a\x7f\x73\x01\x6f\x1d\x64\xce\x18\x61\x5a\xc8\x83\x51\x2e\x62\x5f\x29\xb3\x7a\xc6\x07\xa2\x16\x89\x3a\xce\xb6\x6a\x1a\xc3\xe2\xd3\xcd\x55\xcd\xe2\x31\x7c\x8b\xf7\xc6\xe0\x98\x50\xb7\xff\xcd\x3e\x32\x87\x02\xde\xc3\xdb\xbe\xcc\xf3\x72\xe1\xe3\x95\x7f\x04\x00\x00\xff\xff\x1e\xbb\xfd\xfc\xa2\x02\x00\x00")

func golangDeleteTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteTmpl,
		"golang.delete.tmpl",
	)
}

func golangDeleteTmpl() (*asset, error) {
	bytes, err := golangDeleteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete.tmpl", size: 674, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDialectCockroachTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\xcd\xae\x9b\x30\x10\x85\xd7\xf8\x29\x4e\xbd\x82\x2b\x42\xa4\x76\xd7\x2a\x9b\xa6\x5d\x57\xea\x1b\x38\x66\x00\xeb\x12\x9b\xcc\x98\x56\x15\xe2\xdd\x2b\x3b\xe4\x6f\x71\x25\x36\xcc\xcc\x37\x67\xce\xf1\xb2\xec\xd0\x52\xe7\x3c\x41\xbb\xf3\x14\x38\x6a\xac\xab\x2a\x74\xef\xe2\x30\x9f\x1a\x1b\xce\xfb\xd1\x9d\xf6\xd3\x45\xab\x65\x01\xf9\x16\xbb\x75\x55\xea\x85\x93\x9d\x0d\x5e\x22\x1b\xe7\xe3\x8e\x98\x03\xe7\x25\xdd\xec\x2d\x4a\x77\x9e\x46\x2c\x0b\x9a\xdf\x64\xc9\xfd\x21\xc6\xba\x56\x70\x72\xbc\x23\x3f\x13\x51\x12\x33\x32\x5b\xa1\x54\xc5\x63\x21\x24\xb2\xf3\x7d\x8d\xf0\x8e\x53\x08\x63\x85\x45\x15\xae\x03\xe5\xca\xd7\x43\x82\x9a\xf2\x6d\xba\x34\x79\x4f\xf5\x2d\x95\x17\x55\x14\x79\xa8\x39\x86\x96\x9a\xe3\x68\x44\xca\x0a\x87\x03\xf4\xe7\x2f\xfa\xda\x2e\x98\xe2\xcc\x3e\xcf\xdc\xc4\x6a\x44\x9e\x29\x75\x57\x95\xbe\x6d\x44\xeb\x1a\x9d\x19\x85\xd4\xfa\x61\x0a\x61\x22\xff\xb0\x9d\xfe\x6c\xb0\xef\x1c\x8c\x1d\x4a\x09\x33\x5b\xda\x9c\x54\x28\xdf\xe4\x32\x36\x3f\xbe\xd7\x37\xc3\x8b\x2a\xf6\x7b\x44\xfe\x87\xce\xb1\x44\xfc\x75\x71\x80\xbe\xf3\x1a\x46\x60\xd0\x72\x8e\xcf\x79\x58\x23\x04\x09\x67\x0a\x9e\x30\x18\x01\x53\xef\x24\x12\x53\x9b\x37\xa5\x16\x64\x22\xeb\xcc\x08\x89\x73\xd7\x35\x70\x1d\xe2\x60\x22\x3a\xe3\x46\xa9\x11\x07\xf2\x59\xd1\xf4\xc6\xf9\x4d\x71\x0a\x12\x7b\x26\x49\x82\xd7\x93\x06\xda\x64\x1b\x55\xb4\xa7\x7c\x70\xca\x3c\xdd\xff\x6b\x22\x5f\x3e\x1d\x59\xe3\x6a\xb3\xba\x3e\x0f\x33\x3e\x1d\xe0\xdd\x98\xd3\xbe\xb1\xcf\xe8\x5d\xed\x89\x7c\x64\xbe\x11\xaf\x89\xff\x0f\x00\x00\xff\xff\x62\xb9\xbc\x1a\xaf\x02\x00\x00")

func golangDialectCockroachTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDialectCockroachTmpl,
		"golang.dialect-cockroach.tmpl",
	)
}

func golangDialectCockroachTmpl() (*asset, error) {
	bytes, err := golangDialectCockroachTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.dialect-cockroach.tmpl", size: 687, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDialectPostgresTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x31\x6f\xc3\x20\x14\x84\x67\xf8\x15\x4f\x4c\x10\xd9\x44\x6a\xb7\x56\x59\x9a\x76\xae\xd4\x7f\x90\x38\xcf\x29\x2a\x06\xfc\xc0\x5d\x10\xff\xbd\x82\xc4\x89\x32\x54\xf2\xe2\x77\xf7\xdd\xe9\xc8\xb9\x87\x13\x8e\xc6\x21\x08\x33\x05\x4f\x49\x40\x29\x9c\x89\xb3\x49\xdf\xcb\x51\x0f\x7e\xda\x5a\x73\xdc\x86\x59\xf0\x9c\x01\xdd\x09\xfa\x52\x38\x7f\xe0\x62\x3f\x78\x17\x13\x1d\x8c\x4b\x3d\x12\x79\x6a\x21\xe3\xe2\x06\x90\x66\x0a\x16\x72\x06\xfd\x85\x03\x9a\x5f\x24\x28\x45\x81\x89\xfb\x1b\xf2\x51\x09\x89\x44\xd0\x58\x05\x92\xb3\x7b\x20\xc4\x44\xc6\x9d\x3b\xf0\x3f\x70\xf4\xde\x2a\xc8\x9c\x99\x11\xb0\x5d\x5e\x76\x15\xd2\x72\x13\x66\xdd\x72\xd4\x6b\x3d\x67\xce\x58\x33\xe9\xbd\x3f\xa1\xde\xdb\x43\x8c\x52\xc1\x6e\x07\xe2\xe9\x59\x5c\x64\x46\x98\x16\x72\xcd\xb3\x96\x75\x90\x68\xc1\xaa\x16\x5e\xbf\xab\x45\x88\x0e\xc6\x83\x8d\xc8\xcb\xbf\xaf\xe0\x03\xba\xfb\xec\xfa\x17\x7c\x4c\x67\xc2\x28\xa3\x5f\x68\xc0\xeb\x10\x05\x72\x13\x67\xab\xdf\xdf\xba\x75\x6f\xbe\x15\x55\xe1\x33\xa0\x93\x62\x85\x45\x07\x17\x5c\x3d\x74\xff\x05\x00\x00\xff\xff\xc1\x0a\x5b\x7f\xb8\x01\x00\x00")

func golangDialectPostgresTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDialectPostgresTmpl,
		"golang.dialect-postgres.tmpl",
	)
}

func golangDialectPostgresTmpl() (*asset, error) {
	bytes, err := golangDialectPostgresTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.dialect-postgres.tmpl", size: 440, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDialectSqlite3Tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x4d\x6f\xdb\x38\x10\x3d\x8b\xbf\x62\x96\xc0\x2e\xc4\x5d\x59\x46\x10\x60\x0f\x2e\x74\x48\x93\xa0\x1f\xc8\x47\x6b\x17\xe8\x21\x08\x0c\x5a\x1a\xc9\xac\x29\x52\x21\xa9\xc4\x86\xa0\xff\x5e\x90\x92\x13\xbb\x4d\x0b\x14\xd0\x45\x7c\x33\x6f\x3e\xde\x9b\xae\x9b\x40\x81\xa5\x50\x08\x54\xd4\x8d\x36\x8e\x42\xdf\x93\x88\xd6\xdc\xad\xa7\x86\xab\x82\x92\x88\x56\xc2\xad\xdb\x55\x9a\xeb\x7a\x5a\x73\xe7\xd4\xb4\xd2\x13\xfb\x20\x85\xc3\x53\x4a\xba\x0e\x50\x15\x30\xe9\x7b\x42\x8e\xe8\xec\x24\xd7\xca\x3a\xc3\x85\x72\x13\x34\x46\x9b\xc0\x5d\xb6\x2a\x87\x58\xd4\x8d\x84\xae\x83\x74\x8e\x39\x8a\x47\x34\xd0\xf7\x0c\x84\x3d\x7f\x4e\xb9\xf4\x19\x31\x1a\x03\x21\x97\x41\x4c\xa2\x17\x42\xb0\xce\x08\x55\x25\xa0\x37\xb0\xd2\x5a\x32\xe8\x48\x24\x4a\xc0\xf0\x32\xcb\x7c\x52\x1a\x8f\x4d\xa6\x81\x8b\xbd\xf1\x50\x47\xa2\x28\x04\xa6\xe7\xba\x40\xc8\x32\x38\x08\x7a\xa9\x3e\xc4\x45\xb5\xad\xf6\x64\x43\x3f\x2c\x3c\xe7\x5a\x6a\xe5\x81\xa1\x0b\x9b\x5e\x71\xeb\x3e\xa8\x02\xb7\x71\x6d\xab\x04\xe8\x8c\x0e\x81\xa2\x84\x21\xf6\xaf\x0c\x26\x27\x23\x69\x64\xd0\xb5\x46\x3d\x27\x7f\x31\xa2\x5e\x34\x3c\x47\x9f\x7c\x17\xe2\x67\xf7\x2c\x01\x67\x5a\x0c\x09\x3d\x39\xc8\xa2\xf4\x05\xe9\x89\xff\x0e\x80\x92\x4b\x8b\xa4\xff\xa5\x28\xba\x41\x15\x54\x78\xe4\x66\x3f\xf8\x85\xf1\xfb\xbf\xe1\x35\x42\x06\x5e\x9d\x98\x8d\xad\xf9\x7e\x7d\xa0\x28\xe0\xee\xe4\xff\xfb\xd5\xce\x21\x89\xbc\x29\xd2\x39\xf2\x22\x16\xc5\xdd\xec\x9e\x3d\xd7\x2f\x6b\x97\x2e\x1a\x23\x94\x2b\x63\x3a\x72\x2f\xff\xde\xd2\x64\x64\x1b\xe3\x19\xe9\x63\x46\x06\x1b\x08\x25\x5c\x1c\xa4\xb3\x0f\x32\x9d\x63\x25\xac\x43\x13\xff\xd4\x58\x02\xff\xec\x55\x5a\x7c\xbe\x12\x0e\x07\xc8\xaf\xf3\x5c\x2b\x85\xb9\x7b\xaf\xf5\x66\xb6\x9f\x68\x81\xae\x6d\x3c\x90\x90\xa8\x67\xa4\x27\x64\x3a\x85\x21\xf1\xf4\xa3\x6e\x8d\xe2\xf2\xda\x8b\x9f\x6b\xe5\x8c\x96\x16\xdc\x1a\xe1\xdb\x00\x2c\x6b\x8f\x34\x86\x57\x35\x87\x52\x1b\xe0\x52\x82\xc2\x27\x1f\xec\x0b\x09\xad\x6c\x1a\xf8\x84\xca\x11\x84\x03\x61\xc1\x20\x2f\xe0\x49\xb8\xb5\x6e\x1d\x70\xa8\x5b\x87\xdb\xc4\x63\x75\x6b\x1d\xac\x10\xf2\x35\x57\x15\x16\xe0\x74\xa8\xf5\xc8\x65\x8b\xb0\xd3\x2d\x3c\x71\xe5\x3c\xdb\x0a\x4b\x6d\x10\xb8\xda\xc1\x6d\x83\x0a\x72\x2e\xa5\x4d\x83\x4c\xaf\x34\x9e\x01\xfd\x7a\x76\x45\xc7\x2d\xfe\x38\x75\xec\x5b\x85\x7f\x8f\x37\xe6\x01\x06\x87\xf7\xd4\x91\x68\x99\xf8\x1f\xc8\xc2\x70\xe9\xe5\x16\xf3\x98\x7e\x9a\x9f\xbd\xbb\x3e\xf3\xa3\xa3\xa8\xd4\x72\x83\x3b\x0b\x19\xdc\xde\xd0\x04\x94\x90\x6c\xb8\x32\x63\xbc\xa3\x95\x90\xc1\xd2\xa3\x01\x6a\xbe\xc1\x4b\x13\x6e\x96\x05\x63\xfe\x86\xfe\x68\xdb\x19\x50\xf8\xef\x95\x39\xff\xbc\xe2\xf8\xae\x84\xf4\xaa\x87\xed\x78\xcb\x8f\xab\x88\xad\x6e\x4d\x8e\xa3\x1f\x19\xc4\x7e\x47\xe9\xc5\xdb\xe4\x60\x25\xfb\xdb\x7c\x90\xa9\x17\xe2\x35\x2f\x0e\x2c\xec\xe8\xcc\xbe\x07\x00\x00\xff\xff\xee\x90\xf0\xb1\x49\x05\x00\x00")

func golangDialectSqlite3TmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDialectSqlite3Tmpl,
		"golang.dialect-sqlite3.tmpl",
	)
}

func golangDialectSqlite3Tmpl() (*asset, error) {
	bytes, err := golangDialectSqlite3TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.dialect-sqlite3.tmpl", size: 1353, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\x3f\x8f\x9b\x40\x10\xc5\xeb\x9d\x4f\x31\xe9\xc0\xba\x50\x45\x29\x12\xb9\xc8\xdd\xa5\x48\x11\x45\xb2\x49\x1d\xf1\x67\xf0\xad\x8c\x17\x6e\x19\x2e\x1b\xad\xf8\xee\xd1\xf2\xdf\x80\x63\xa5\x38\xc1\x0d\x3b\xef\xfd\x1e\x33\xd8\x5a\x94\x19\x06\xc7\xba\x2c\x0b\xcd\x07\x83\x4d\x03\xfc\xa7\x24\x3c\x18\xac\x58\xd7\x09\xa3\x05\x91\xc6\xb8\x7b\x7e\x04\xc1\x06\x77\xa1\x81\x06\x20\xab\x55\x82\x9e\x36\xb8\x3b\x18\x1f\x7f\xaa\x2a\xca\x28\x34\x5e\xc2\x06\x93\x42\x31\x19\x0e\x9e\xba\xab\x8f\x5e\xdd\x3e\xfe\xe5\xba\xab\xd7\x3c\x08\xcd\x03\x92\xd6\xee\xaf\xd0\xbe\xd3\xe7\xbe\xf2\x69\x8f\xda\x04\x27\xe2\x4e\xca\x07\x21\xb3\xf6\xc1\xbb\x3d\x2a\x99\xbb\xa3\x42\x13\xd7\x5a\xb9\x7f\xdb\x1e\x10\x0d\x0c\x35\x36\xad\xb6\x92\xf9\x1a\x71\x14\xdd\xe0\xeb\x62\x2d\xa1\x64\xe6\x60\xd8\xe0\x7e\x32\x1f\x6a\xdd\xd9\x96\x36\x8d\x83\x1f\x25\xa9\x96\xf7\xf3\x12\x76\x4d\xeb\x70\x27\xe2\x5e\x6c\x93\xf8\x40\xb1\x54\xa9\x57\xb9\x39\x48\x75\xf2\xfb\xab\xd3\x9d\xba\xd3\x38\x18\xce\xf9\x6b\x89\xa7\xe2\x72\x91\xec\xf9\xe8\xdd\x88\x36\x43\x1d\x03\xb1\x09\x86\x3e\xf7\xba\xbb\x57\xd0\x22\xce\xc0\x5d\x96\x35\x71\x91\xe7\x71\x94\x9c\xff\xdf\x70\xea\xbc\x6b\x69\x2d\xea\x48\x9d\x08\x83\xef\xc4\x2f\x45\x5a\xb9\x95\xbd\xe6\xb0\x16\x83\xa3\x3c\xa9\x88\x6b\x4d\xd8\x34\xce\xee\x2d\xd2\xd8\xaf\xaf\xa3\xb9\x1a\xe1\xb4\x70\xab\x01\xf6\xde\x8b\x2d\x73\x06\xdf\xd4\x5b\x71\x76\xea\xd0\x38\x26\x52\xa9\xbb\x9f\xee\xba\xcf\x68\x60\x94\x8a\x49\x67\x51\x42\x68\xc1\xda\xf7\x1b\x11\xc4\x92\x7a\xa6\x35\xa8\x85\x66\x4b\x4f\xf4\x45\x00\x71\x63\x67\x40\x8c\x9b\xd0\xce\x04\xc4\x6c\x54\x5d\x65\xb0\xe0\x6d\x8b\xd1\x19\x40\xa4\x94\x13\xd3\x97\x3c\xbf\xf1\x39\x49\xc5\x1f\x3f\x3c\xf4\xd3\x07\x71\x89\xce\xf4\x55\xeb\xf9\x46\x5c\x5b\x3e\x3f\xde\x49\x75\x4c\x5e\xe8\x12\x79\x53\x9a\x21\xe6\x6b\xbe\x0c\x3a\x68\xa6\xf1\xa6\xe6\x68\x05\x20\x7e\xeb\xa8\x0c\x8d\x37\xfd\x2a\xf9\x53\xf8\x7f\x52\xff\x0d\x00\x00\xff\xff\x20\xf7\x92\xb8\x34\x05\x00\x00")

func golangFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangFooterTmpl,
		"golang.footer.tmpl",
	)
}

func golangFooterTmpl() (*asset, error) {
	bytes, err := golangFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.footer.tmpl", size: 1332, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xc1\x6e\x1b\x21\x10\x86\xcf\xf0\x14\xd3\x3d\xed\x4a\x0e\x0f\x90\x6a\x0f\x51\xd5\x43\x2f\x95\x1a\x1f\xab\x6a\x85\x97\xc1\xa5\x61\xc1\x19\x58\xdb\x11\xe2\xdd\x2b\xd8\xb5\xeb\x48\xa9\xa2\x1c\x2c\x79\x67\x86\xef\xff\x19\xfe\x94\xee\x40\xa1\x36\x0e\xa1\x09\x66\xef\x64\x9c\x09\x1b\xb8\xcb\x99\x3f\x58\x3b\xa4\x04\x62\x3b\x6b\x6d\xce\x90\x73\x9b\x12\x8c\xf1\x7c\x90\x24\x27\x10\x0f\xb4\x0f\x90\x73\x07\x2d\x67\xe4\x4f\x01\x52\x82\x60\xcd\x88\x5e\x83\x78\xf4\x27\xc8\x79\x03\x48\x54\x7e\x9e\x3a\x5e\x94\xd0\xa9\x8a\xe6\xb7\xb2\xc6\x1d\xfd\xd3\x3b\x9a\x92\xf6\xff\x14\xff\x8f\xda\x79\xf5\xd2\x40\xce\x9c\xa5\x04\x38\xed\x50\x1d\xac\x1c\xf1\xb7\xb7\x0a\x29\x80\xf8\xe6\xb4\x7f\xd5\x0e\xcf\x76\xad\x36\xc3\x50\x2b\x43\x88\x53\xac\x0c\xce\x8e\x92\x60\x18\x8e\xd2\xce\x18\xe0\xe7\x2f\xe3\x22\x92\x96\x23\xa6\x1b\xc2\xda\x5d\xcc\x35\x97\xe9\x57\x80\x42\x84\xbe\xfc\x79\xb6\xbb\xd9\x29\x8b\xc3\x23\x3a\x85\xd4\xfa\xdd\x1f\xa1\x8c\xb4\x38\xc6\x0d\xdc\x1a\xe8\x38\x2b\x3d\xeb\xf7\xdb\x38\xc5\x76\x61\x6c\xae\x66\x84\x10\x1d\xe7\x6c\x18\xca\xe2\x97\x2d\xdf\xf7\x50\x69\x64\x8e\x48\xe2\xc7\x8c\xf4\xf2\xf6\x31\x66\x74\x3d\xf0\xa9\x07\x67\x2c\x24\xce\x18\x61\x9c\xc9\x95\xcf\x4d\x85\x4c\xf2\x09\xbf\x12\xb5\x48\xd4\x71\x96\x39\x53\xa8\xb1\xdc\xa4\xc8\x89\x2f\xd6\x07\x6c\x8b\xbe\xf6\xd7\xe2\x77\x3c\xc7\xb6\xab\xb4\x94\xc0\x38\x13\x1d\x9e\x2e\x39\xe0\x8c\x15\xc5\xfe\x32\xbc\x1d\xa5\x2b\x0f\x2b\x95\x22\xaf\xa1\xd5\x56\xc6\x88\xae\x8e\x77\xf5\x85\xd9\x1b\x2e\xdf\xb1\x59\x7c\x2e\x41\xec\x41\x1e\x0e\xe8\x54\xbb\x6c\xa7\x08\x95\xf8\x2c\x5e\x96\x0b\xad\xf4\xfb\xab\xa5\xc2\xe9\x3e\x7f\x78\x31\xeb\xc0\x22\xe4\x8c\xe5\x25\x16\x6b\x32\xff\x06\x00\x00\xff\xff\xe5\x94\x6a\x8f\x5b\x03\x00\x00")

func golangGetAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetAllTmpl,
		"golang.get-all.tmpl",
	)
}

func golangGetAllTmpl() (*asset, error) {
	bytes, err := golangGetAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-all.tmpl", size: 859, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetCountTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x41\x8b\xdb\x30\x10\x85\xcf\xd2\xaf\x98\xfa\x50\x6c\x70\x44\x0f\xa5\xb7\x1c\x4a\xe9\xa1\xc7\x26\xc7\x52\x8c\x6c\x8d\xbd\xda\xc8\x52\x32\x96\xbd\x09\x42\xff\x7d\x91\xe2\xdd\x4d\x60\x97\x3d\x18\xcc\xbc\x99\x6f\x9e\xe6\x85\xb0\x01\x85\xbd\xb6\x08\xc5\xa4\x07\x2b\xfd\x4c\x58\xc0\x26\x46\xfe\xcb\xcd\xd6\x37\x21\x80\xd8\xcf\x7d\xaf\xcf\x10\x63\x19\x02\x74\xfe\x7c\x94\x24\x47\x10\x3f\x69\x98\x20\xc6\x0a\x4a\xce\xba\xd4\x0c\xda\xfa\x1f\xdf\x6b\x40\xa2\xf4\x39\xaa\x78\xe2\xa3\x55\x19\xc8\x6f\x97\x69\xbb\xb8\xc3\xa7\x9b\x24\x0d\x6f\x7b\x3e\x86\xb5\x4e\x5d\x0a\x88\x91\xb3\x10\x00\xc7\x16\xd5\xd1\xc8\x0e\x1f\x9c\x51\x48\x13\x88\x3f\xb6\x77\x77\xf2\x74\x32\x6b\xb5\x68\x9a\x5c\x69\x26\x3f\xfa\xcc\xe0\x6c\x91\x04\x4d\xb3\x48\x33\xe3\x04\xff\xfe\x6b\xeb\x91\x7a\xd9\x61\xb8\x21\xac\xea\xd5\x5c\xf1\xd2\x7d\x07\x48\x44\xd8\xa6\x9f\x93\x69\x67\xab\x0c\x36\x3b\xb4\x0a\xa9\x74\xed\xa3\x50\x5a\x1a\xec\x7c\x0d\xb7\x06\x2a\xce\x92\x66\xdc\xb0\xf7\xa3\x2f\xaf\x8c\xfa\xd5\x8c\x10\xa2\xe2\x9c\xa5\xfb\x6e\x21\x43\x48\x2f\x48\xe2\xef\x8c\x74\xd9\xb9\xa7\x77\x07\xc4\xbe\x93\xb6\xfc\x9a\x13\xaa\x38\xd3\x7d\xce\xe7\xcb\x16\xac\x36\x10\x38\x63\x84\x7e\x26\x0b\xdf\xea\x8c\x1c\xe5\x01\x7f\x13\x95\x48\x54\x71\x96\x5e\xb3\xea\x19\x50\xa7\x29\x9e\x8e\xb0\xe6\xf0\x1c\x00\x00\xff\xff\xfa\xc6\xd6\x47\x41\x02\x00\x00")

func golangGetCountTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetCountTmpl,
		"golang.get-count.tmpl",
	)
}

func golangGetCountTmpl() (*asset, error) {
	bytes, err := golangGetCountTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-count.tmpl", size: 577, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetFirstTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\xcf\x6a\xdc\x30\x10\xc6\xcf\xd2\x53\x4c\x7c\xb2\x61\xe3\x07\x48\xd9\x43\x29\x2d\xf4\x52\x68\xf6\x58\x8a\xd1\x5a\xa3\xad\x1a\x59\x4a\x46\xf2\x66\x83\xd0\xbb\x97\xd1\xda\xe9\x6e\x69\x09\xf4\x60\xb0\xe7\xcf\xef\xfb\x3c\x7c\x39\xdf\x82\x46\x63\x3d\x42\x13\xed\xc1\xab\x34\x13\x36\x70\x5b\x8a\xfc\x64\x29\xa6\x21\x67\xe8\x77\xb3\x31\xf6\x04\xa5\xb4\x39\xc3\x98\x4e\x8f\x8a\xd4\x04\xfd\x7b\x3a\x44\x28\xa5\x83\x56\x8a\x9c\x61\xa9\xde\x87\x67\x28\x65\x03\x48\xc4\x4f\xa0\x4e\xb2\x08\x7a\x5d\xa9\xf2\x52\xd1\xfa\x63\x78\x78\x53\x4e\xd1\xe1\xb7\xd8\xbf\x61\xfb\xa0\x5f\x1a\x28\xa5\x9a\xc1\x69\x8f\xfa\xd1\xa9\x11\x7f\x04\xa7\x91\x22\xf4\x9f\xbd\x09\x57\xed\xf8\xe4\x96\x6a\x33\x0c\xb5\x32\xc4\x34\xa5\xca\x90\xe2\xa8\x08\x86\xe1\xa8\xdc\x8c\x11\xbe\x7d\xb7\x3e\x21\x19\x35\x62\xbe\x20\x2c\xdd\xb3\xb9\x66\x9d\xbe\x02\x30\x11\xb6\xfc\xf2\xe4\xf6\xb3\xd7\x0e\x87\x7b\xf4\x1a\xa9\x0d\xfb\x9f\xbd\xb6\xca\xe1\x98\x36\x70\x69\xa0\x93\x82\x7b\x2e\x1c\x76\x69\x4a\xed\x99\xb1\x79\x35\xd3\xf7\x7d\x27\xa5\x18\x06\x0a\xcf\xf1\x7c\xe7\xbb\x2d\x54\x1a\xd9\x23\x52\xff\x75\x46\x7a\xf9\xfb\x9a\xb0\xa6\x2e\xdc\x6c\xc1\x5b\x07\x59\x0a\x41\x98\x66\xf2\xfc\xb9\xa9\x90\x49\x3d\xe0\x47\xa2\x16\x89\x3a\x29\x8a\x14\x1a\x0d\xf2\x9f\xb0\x5c\xff\xc1\x85\x88\x2d\xeb\x5b\x03\x37\x4b\xf1\x0b\x9e\x52\xdb\x55\xda\xc2\xbf\xdb\xae\x0b\x8c\xea\xde\xfd\x29\xfa\x86\x2a\xcb\x5e\x8d\x78\xeb\xd8\x4b\xbd\xbc\xf5\x36\xad\x31\x93\x82\xc1\xaf\x62\xbb\x51\x79\x0e\x8d\xd2\x9a\x82\x81\xd6\x38\x95\x12\xfa\x3a\xdd\xd5\xf4\xfc\xc7\x01\xe4\x3a\xc1\x60\x8e\xe2\x9a\x70\x36\xc5\x49\x58\xc2\xf8\x2b\x00\x00\xff\xff\xf6\x5c\xbe\xdf\x4b\x03\x00\x00")

func golangGetFirstTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetFirstTmpl,
		"golang.get-first.tmpl",
	)
}

func golangGetFirstTmpl() (*asset, error) {
	bytes, err := golangGetFirstTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-first.tmpl", size: 843, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetHasTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xc1\x8a\xdb\x30\x10\x86\xcf\xd2\x53\x4c\x7d\x28\x36\x78\xf5\x06\x39\xf4\x50\x68\x8f\xdd\x1c\x4b\x31\x63\x6b\x6c\xab\x2b\x4b\xbb\x23\xd9\x4d\x10\x7a\xf7\x22\x27\x69\x13\x68\xd9\x83\x40\xcc\x3f\xf3\xfd\x3f\x33\x29\x3d\x81\xa6\xd1\x38\x82\x2a\x98\xc9\x61\x5c\x99\x2a\x78\xca\x59\x7e\xc1\xd0\xa5\x04\xea\xb8\x8e\xa3\x39\x41\xce\x75\x4a\x30\xc4\xd3\x2b\x32\x2e\xa0\x3e\xf1\x14\x20\xe7\x06\x6a\x29\x66\x0c\xd0\x7b\x6f\x5b\x20\xe6\xf2\x3c\x37\xb2\xa0\xc9\xe9\x9d\x25\xef\x7d\x8c\xdb\xfc\xcb\x3b\x26\xc8\xd3\x5f\x8b\xff\xa3\x7a\xaf\xcf\x15\xe4\x2c\x45\x4a\x40\x4b\x4f\xfa\xd5\xe2\x40\xb3\xb7\x9a\x38\x80\xfa\xea\x46\xff\x20\x87\x37\x7b\xad\x56\x5d\xb7\x57\xba\x10\x97\xb8\x33\xa4\xd8\x90\xa1\xeb\x36\xb4\x2b\x05\xf8\xfe\xc3\xb8\x48\x3c\xe2\x40\xe9\x8e\x70\x55\x2f\xe1\xaa\x5b\xf7\x03\xa0\x10\xe1\x50\x3e\x6f\xb6\x5f\x9d\xb6\xd4\x3d\x93\xd3\xc4\xb5\xef\x7f\x2a\x6d\xd0\xd2\x10\x5b\xb8\x0f\xd0\x48\x51\x34\xeb\xa7\x63\x5c\x62\x7d\x61\xb4\x7f\xc2\x28\xa5\x1a\x29\x45\xd9\xee\x01\x76\x08\x9b\x8d\x58\x7d\x5b\x89\xcf\xcf\xfe\xd7\x3f\x07\xd4\x71\x40\x57\x7f\x9c\x31\x34\x52\x98\x71\xbf\xcd\x87\x03\x38\x63\x21\x49\x21\x98\xe2\xca\x0e\x46\xb4\x81\xda\x1d\xba\xe0\x0b\x7d\x66\xae\x89\xb9\x91\x22\xcb\x5b\xcb\x8c\xa1\x2d\x63\xb2\xec\xe0\x7a\x86\xdf\x01\x00\x00\xff\xff\x49\x9e\xaf\x31\x39\x02\x00\x00")

func golangGetHasTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetHasTmpl,
		"golang.get-has.tmpl",
	)
}

func golangGetHasTmpl() (*asset, error) {
	bytes, err := golangGetHasTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-has.tmpl", size: 569, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetLastTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x41\x6f\xa3\x30\x10\x85\xcf\xf6\xaf\x98\xe5\x04\x12\xe1\xb4\xda\x5b\x4e\xab\x1e\x2a\xf5\xd2\xa4\x77\x64\xf0\x40\xdd\x18\x9b\x0c\x43\x9a\xd4\xf2\x7f\xaf\x0c\x89\x44\x0e\x96\xad\x99\x79\xef\xf3\xbc\x10\x76\xa0\xb1\x33\x0e\x21\x9b\x4c\xef\x14\xcf\x84\x19\xec\x62\x94\x3d\xf2\x9b\x9a\x38\x04\xa8\x0e\xc8\x33\xb9\xea\xe3\x36\x22\xc4\x98\xb7\x7c\x85\xd6\x3b\xc6\x2b\x57\xff\xd7\xbb\x94\x62\x3c\x81\x71\xfc\xef\x6f\x01\xb9\x14\x21\xc0\xa8\x48\x0d\x0f\x2d\xc4\x58\x02\x12\xa5\xe3\xa9\x90\x89\x8b\x4e\x2f\x20\xb9\xfd\x44\xe3\xf5\x6d\xe5\x27\x0f\x1c\x1a\xd4\xa3\x55\x2d\x7e\x7a\xab\x91\x26\xa8\x5e\x5d\xe7\x61\xdb\x9e\xce\xf6\x5e\xcd\xea\x7a\xa9\xd4\x13\x0f\x9c\xa5\x21\x29\x2e\x8a\xa0\x5e\x0a\xb0\x4f\x8f\xb3\x6d\x66\xa7\x2d\xd6\x07\x74\x1a\x29\xf7\xcd\x57\xa5\x8d\xb2\xd8\x72\x09\x5b\x7d\x21\x45\xea\x59\xdf\x1f\x79\xe0\x7c\xf5\x28\x61\x3c\x15\x72\x61\x1b\x67\x78\xb3\x9d\x14\x69\xbb\x3d\x2c\x7e\x64\x2e\x48\xd5\xfb\x8c\x74\x3b\xf8\xef\xad\xb6\x3a\xb6\xca\xe5\x21\x80\xd2\x9a\x7c\x07\x79\x67\x15\x33\xba\x87\x53\x01\x31\x16\x52\x98\x6e\x09\xeb\xcf\x1e\x9c\xb1\x10\xa4\x10\xb4\x82\x42\x80\x1f\x24\xff\x14\x6b\x42\x0e\xea\x84\x2f\x44\x39\x12\x15\x52\x44\xb9\x99\x57\xd4\x3f\x8d\x3b\x63\x65\xca\xee\x9e\xfe\x6f\x00\x00\x00\xff\xff\x3a\xb2\xd4\xf6\x02\x02\x00\x00")

func golangGetLastTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetLastTmpl,
		"golang.get-last.tmpl",
	)
}

func golangGetLastTmpl() (*asset, error) {
	bytes, err := golangGetLastTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-last.tmpl", size: 514, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetLimitoffsetTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x41\x8f\xd3\x3e\x10\xc5\xcf\xf6\xa7\x98\x7f\x4f\x89\xd4\xcd\xe9\x2f\x0e\x8b\x7a\x40\x88\x03\x12\x42\x62\x7b\x44\x28\x72\xe3\x71\x31\xeb\xd8\xdd\xb1\xd3\x76\x65\xf9\xbb\xa3\x71\x9a\x52\x60\x25\xe0\x10\xc9\x19\xcf\xbc\xf7\xb3\xfd\x72\xbe\x03\x8d\xc6\x7a\x84\x55\xb4\x7b\xaf\xd2\x44\xb8\x82\xbb\x52\xe4\x07\x3b\xda\x84\xba\xcf\x19\xba\xed\x64\x8c\x3d\x43\x29\x4d\xce\x30\xa4\xf3\x41\x91\x1a\xa1\x7b\x43\xfb\x08\xa5\xac\xa5\x70\xdc\x0c\xd6\xa7\x35\x04\x63\x22\xd6\xf5\xab\xff\x5b\x68\xa4\xa0\x70\x8a\x90\x33\x44\x67\x07\x0c\x06\xba\x87\x70\xe2\x29\x40\x22\xfe\x02\xb5\x92\x39\xd0\xeb\x6a\x2c\xe5\x2d\x95\xf5\xc7\xf0\xf8\x17\x48\x8a\xf6\x3f\x80\xa0\xf2\x2c\x2c\xbf\xc8\xdf\xaa\xef\x82\x7e\x5e\x41\x29\x52\xe4\x0c\x38\xee\x50\x1f\x9c\x1a\xf0\x6b\x70\x1a\x29\x42\xf7\xde\x9b\xf0\xd3\x76\x7c\x72\x97\xea\xaa\xef\x6b\xa5\x8f\x69\x4c\x55\x43\x8a\xa3\x22\xe8\xfb\xa3\x72\x13\x46\xf8\xfc\xc5\xfa\x84\x64\xd4\x80\xf9\x46\xe1\xb2\x3b\xb3\xae\x96\xee\x19\xe2\x3a\xbb\x01\x75\x38\xa0\xd7\xcd\x52\xf9\xed\x48\x8b\x19\xbb\xc3\x86\x17\x4f\x6e\x37\x79\xed\xb0\x7f\x40\xaf\x91\x9a\xb0\xfb\xd6\x69\xab\x1c\x0e\x69\x0d\xb7\xb0\xad\x14\xbc\xe7\xc2\x7e\x9b\xc6\xd4\xcc\x1a\xeb\x2b\x78\xd7\x75\x2c\xdf\xf7\xfc\x70\xf3\x2b\xdd\x6f\xa0\xaa\x91\x3d\x22\x75\x9f\x26\xa4\xe7\x97\xc7\x84\x35\x75\xe0\xbf\x0d\x78\xeb\x20\x4b\x21\x08\xd3\x44\x9e\x7f\xd7\x55\x64\x54\x8f\xf8\x8e\xa8\x41\xa2\x56\x8a\x22\x85\x46\x83\x7c\x12\xb6\xeb\xde\xba\x10\xb1\x61\x7f\x13\xae\xc5\x8f\x78\x4e\x4d\x5b\xd5\x72\x06\xeb\x6d\xf2\x78\x5a\x72\x24\x85\x60\xc7\xcd\xd2\xbc\x1d\x94\xe7\x4c\x28\xad\x29\x18\x68\x8c\x53\x29\xa1\xaf\xed\x2d\x94\xd2\x4a\xf1\x02\xe5\x1f\x30\x99\x73\x0e\xf2\xf5\x65\xe6\xdb\x61\x23\x4e\xde\xcc\x32\x1f\xe8\xa2\x7e\x7f\x45\x62\x9d\xf6\xf5\x3f\x5f\xcc\xa5\x61\x36\xf2\xd6\x49\x8e\xd0\x25\xc5\xdf\x03\x00\x00\xff\xff\x90\x61\x3e\x65\xb9\x03\x00\x00")

func golangGetLimitoffsetTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetLimitoffsetTmpl,
		"golang.get-limitoffset.tmpl",
	)
}

func golangGetLimitoffsetTmpl() (*asset, error) {
	bytes, err := golangGetLimitoffsetTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-limitoffset.tmpl", size: 953, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetOneAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\xdb\x8a\xdb\x30\x10\x86\xaf\xa5\xa7\x98\x35\x14\x6c\xc8\xfa\x01\xb6\xe4\xa2\x94\x52\x7a\xd1\x85\x6e\x2e\x4b\x31\x4a\x34\x4a\xd5\x95\xa5\x64\x24\xe7\x80\xd0\xbb\x17\x29\xf6\xae\xd3\x03\x29\xbd\x30\xd8\x73\xf8\xfe\x5f\xf2\x4c\x8c\xf7\x20\x51\x69\x8b\x50\x79\xbd\xb5\x22\x0c\x84\x15\xdc\xa7\xc4\x3f\x62\xe8\x62\x84\x76\x35\x28\xa5\x4f\x90\x52\x1d\x23\x6c\xc2\x69\x27\x48\xf4\xd0\xbe\xa3\xad\x87\x94\x1a\xa8\x39\x8b\x11\xc6\xe8\x93\x3b\x42\x4a\x0b\x40\xa2\xfc\x38\x6a\x78\x96\x40\x2b\x0b\x93\xcf\xf5\xb4\x3d\xb8\xe7\x1b\x62\x82\xb6\xaf\x52\x7f\x47\xad\x9d\x3c\x57\x90\x52\xb1\x82\xfd\x1a\xe5\xce\x88\x0d\x7e\x77\x46\x22\x79\x68\x3f\x59\xe5\xae\xd2\x7e\x6f\xc6\x68\xd5\x75\x25\xd2\xf9\xd0\x87\xc2\xe0\xec\x20\x08\xba\xee\x20\xcc\x80\x1e\xbe\x7e\xd3\x36\x20\x29\xb1\xc1\x38\x23\x8c\xd9\x8b\xb9\x6a\xaa\xbe\x02\x64\x22\x2c\xf3\xcb\xde\xac\x07\x2b\x0d\x76\x4f\x68\x25\x52\xed\xd6\x3f\x5a\xa9\x85\xc1\x4d\x58\xc0\xdc\x40\xc3\x59\xce\x19\xb7\x5d\x85\x3e\xd4\x17\xc6\xe2\xc5\x4c\xdb\xb6\x0d\xe7\xac\xeb\xc8\x1d\xfd\xe5\x96\x1f\x96\x50\x68\xa4\x0f\x48\xed\x97\x01\xe9\xfc\xe7\x36\xa6\x55\x69\xb8\x5b\x82\xd5\x06\x22\x67\x8c\x30\x0c\x64\xf3\xe7\xa2\x40\x7a\xf1\x8c\x1f\x88\x6a\x24\x6a\x38\x4b\x9c\x49\x54\x98\x4f\x92\xe5\xda\xf7\xc6\x79\xac\xb3\xbe\x56\x70\x37\x06\x1f\xf1\x14\xea\xa6\xd0\x46\xfe\xc3\x72\x6a\xc8\xa8\xe6\xed\xaf\xa2\x37\x54\xb3\xec\x55\xc9\x94\xf6\x7b\x93\x89\x8f\xee\xc9\x1d\x7d\xb1\x57\x7e\x86\xb6\x3a\x4c\x73\xc7\x59\xd6\x7a\xd1\x5f\x6d\x84\xcd\x73\x24\xa4\x24\xa7\xa0\x56\x46\x84\x80\xb6\x54\x37\x65\xa0\xfe\xe3\x4e\x4a\xcf\xef\x87\x9f\xb7\x05\xe7\x3e\x0b\x7b\xce\x3e\xb3\xfc\x8e\xb4\x0d\x0a\xaa\x37\xfb\x6a\x36\xe0\xaf\xb0\x7f\xb9\xb4\xdb\xae\xc6\x8a\x7c\xdc\xbc\x33\xd3\x22\x5a\x6d\x78\x1e\xd9\x71\x6b\x7e\x06\x00\x00\xff\xff\x78\xc5\x07\x1b\xf0\x03\x00\x00")

func golangGetOneAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetOneAllTmpl,
		"golang.get-one-all.tmpl",
	)
}

func golangGetOneAllTmpl() (*asset, error) {
	bytes, err := golangGetOneAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-one-all.tmpl", size: 1008, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetOneTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xc1\xce\xdb\x20\x10\x84\xcf\xf0\x14\x5b\x9f\x6c\x29\x3f\x6f\x90\x43\x0f\x55\xd5\x63\x93\x63\x55\x59\xd8\x2c\x2e\xfd\x31\x24\x6b\xec\x24\x45\xbc\x7b\x05\x71\x1a\x47\x6a\xd5\x03\x12\xda\x5d\x7d\x33\x9a\x89\xf1\x0d\x14\x6a\xe3\x10\xaa\xc9\x0c\x4e\x86\x99\xb0\x82\xb7\x94\xf8\x67\x0c\x6d\x8c\x20\x8e\xb3\xd6\xe6\x0a\x29\xd5\x31\x42\x1f\xae\x27\x49\x72\x04\xf1\x91\x86\x09\x52\x6a\xa0\xe6\x2c\x46\x58\xa7\x07\x7f\x81\x94\x76\x80\x44\xf9\x79\x6a\x78\x96\x40\xa7\x0a\x93\x6f\xf5\x8c\x5b\xfc\xfb\x7f\xc4\x24\x0d\x4f\xa9\x7f\xa3\x3a\xaf\x6e\x15\xa4\x54\xac\xe0\xd8\xa1\x3a\x59\xd9\xe3\x0f\x6f\x15\xd2\x04\xe2\x8b\xd3\xfe\x65\x3d\x9d\xed\x3a\xad\xda\xb6\x4c\xda\x29\x8c\xa1\x30\x38\x5b\x24\x41\xdb\x2e\xd2\xce\x38\xc1\xb7\xef\xc6\x05\x24\x2d\x7b\x8c\x1b\xc2\xba\xbd\x9b\xab\x1e\xd7\x2f\x80\x4c\x84\x7d\xfe\x9c\x6d\x37\x3b\x65\xb1\x3d\xa0\x53\x48\xb5\xef\x7e\x0a\x65\xa4\xc5\x3e\xec\x60\x6b\xa0\xe1\x2c\xef\xac\x1f\x8e\x61\x0c\xf5\x9d\xb1\xfb\x63\x46\x08\xd1\xf0\xe2\xc1\x38\x13\x1e\x71\x73\x96\xe3\xde\x43\xa1\x92\x59\x90\xc4\xd7\x19\xe9\x76\xf0\x97\xbf\x12\xc4\xb1\x97\x2e\x07\x2c\x95\x22\xaf\xa1\xd6\x56\x86\x80\xae\xf0\x9a\x92\x34\x33\xba\x74\xf8\x61\x0f\xce\x58\x88\x9c\x31\xc2\x30\x93\x83\x18\xe1\x17\x92\x7f\x56\x9d\x55\x47\xf9\x8e\x9f\x88\x6a\x24\x6a\x38\x4b\x7c\x73\x5c\x1a\x7c\xdc\x3a\x63\x79\x0e\x70\xed\xf0\x77\x00\x00\x00\xff\xff\xec\xf3\x27\xb4\x7e\x02\x00\x00")

func golangGetOneTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetOneTmpl,
		"golang.get-one.tmpl",
	)
}

func golangGetOneTmpl() (*asset, error) {
	bytes, err := golangGetOneTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-one.tmpl", size: 638, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetPagedTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x41\x6f\xdb\x3c\x0c\x3d\x5b\xbf\x82\x5f\x0e\x85\xf3\x21\x35\x36\xec\xd6\x21\x87\xa1\xd8\x80\x5d\x8a\xad\xdd\x6d\x18\x0c\xc5\xa2\x33\xad\xb2\x94\x52\x72\x9a\x42\xd1\x7f\x1f\x28\x27\x4e\xd2\x16\xed\xd0\x43\x02\x58\x7c\x7c\x7c\xe4\xa3\x14\xe3\x39\x28\x6c\xb5\x45\x98\x78\xbd\xb4\x32\xf4\x84\x13\x38\x4f\x49\x7c\x93\x4b\x54\x75\x8c\x50\xdd\xf4\x6d\xab\x37\x90\x52\x19\x23\x34\x61\xb3\x92\x24\x3b\xa8\x3e\xd1\xd2\x43\x4a\x33\x51\x18\xdd\xe9\x00\xda\x86\x19\xf8\x20\x29\xc0\xff\x9c\x76\xe9\x6c\xd0\xb6\x97\x41\x3b\x5b\xfd\x78\x58\x21\xa4\x34\x85\x52\x14\xe4\xee\x3d\xc4\x08\xde\xe8\x06\x5d\x0b\xd5\xb5\xbb\x67\x22\xb0\xb8\x79\x21\x77\x06\x48\xc4\x3f\x47\x53\xc1\xc2\xd1\xaa\xac\x54\x1c\x77\xa1\xed\xda\xdd\xbe\xda\x82\xa4\xe5\xa1\x01\xc8\xfa\x77\xda\x5f\xa0\x5e\x38\xf5\x30\x81\x94\x44\x11\x23\x60\xb7\x40\xb5\x32\xb2\xc1\xdf\xce\x28\x24\x0f\xd5\x57\xdb\xba\x93\xb0\xbf\x33\xbb\xd3\x49\x5d\xe7\x93\xda\x87\x2e\x4c\x9e\x82\xbe\x68\xf2\xe1\x14\xd9\xf2\xd1\x01\x2f\x8a\xb5\x24\xa8\xeb\xb5\x34\x3d\x7a\xf8\xf9\x4b\xdb\x80\xd4\xca\x06\xe3\x11\xd9\x2e\x3a\xb4\x36\xd9\xa3\x4f\x08\x98\x11\x7c\x20\x6d\x97\xa2\xd0\xed\xce\xb1\xff\xe6\x60\xb5\x81\xb3\xb3\xe1\xbb\xaa\x3d\x06\x88\xa2\x28\xc6\x8a\x73\x90\xab\x15\x5a\x55\xee\x4f\x66\xf0\xd8\x29\xd8\x02\xa1\x95\x1d\x2f\x13\xb3\x4c\x60\x0b\xad\x91\x21\x20\x87\x94\xeb\x17\x06\x61\x3b\xf8\x0e\xef\xe0\xfc\x03\x6c\x21\x73\xc1\x16\x1a\xd7\x75\x12\x52\xca\x5e\x4c\x73\xe1\xac\x74\xce\x92\xef\xcc\xa2\xb7\xca\x60\x7d\x8d\x56\x21\x95\x6e\xf1\xa7\x52\x5a\x1a\x6c\xc2\x0c\x8e\x47\x3b\x15\x45\x02\x34\x1e\x5f\xd5\xfe\xf6\x3a\x07\x63\xb8\x9a\x28\x18\x64\xdc\xf2\x26\x74\xa1\x1c\xc8\x66\xa3\x4f\x55\x55\x4d\x85\x28\xea\x9a\x77\x7e\x58\xe0\x8b\x39\x64\x5a\xd2\x6b\xa4\xea\x7b\x8f\xf4\xf0\x7c\x1a\x9b\xc3\x09\x3b\x6b\xb8\x21\xc2\xd0\x93\xe5\xcf\xd9\xf0\xc7\x4c\x9d\xbc\xc5\xcf\x44\x25\x12\x0d\x82\x14\xb6\xc8\x4e\x73\xcd\xea\xd2\x38\x8f\x25\x8b\x88\x11\x14\x36\x46\x12\x3e\x72\x6d\xb7\x8d\xa7\x97\xee\x8a\x6d\x4c\x69\x58\x84\x39\x04\xea\x51\x88\xa2\x75\x23\xf1\x15\x6e\x42\x39\xcd\xb2\x62\x04\x6d\x75\xb0\x78\xbf\xbf\xcb\xa2\x28\x58\xfa\x7c\x0f\xbe\x69\xa4\xe5\xab\x97\xc3\xc7\x4b\x21\x95\x22\xd7\x1e\xf9\xff\xcc\x4e\x1d\xd0\xe3\xe6\xbc\x3f\xa4\xa6\xc4\x2e\x3e\x9d\xd5\xbf\x0c\x8b\xa7\x35\x3c\x47\xe3\x86\x0c\x46\xc5\x08\xf9\x89\x18\xba\x61\x64\x7e\x9b\xe6\x39\x30\xd4\x7d\x3a\xc3\x34\x5a\x76\x31\x36\xce\xb5\xa6\x1f\xdf\xe4\xa3\xd8\xc3\x06\x49\x2c\x20\xa3\x05\x5f\xf6\xdd\xfb\xf4\x37\x00\x00\xff\xff\x3b\x17\xa3\x73\xc0\x05\x00\x00")

func golangGetPagedTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetPagedTmpl,
		"golang.get-paged.tmpl",
	)
}

func golangGetPagedTmpl() (*asset, error) {
	bytes, err := golangGetPagedTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-paged.tmpl", size: 1472, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetScalarAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\xdd\x8a\x1b\x3d\x0c\x86\x8f\xed\xab\xd0\x0e\x7c\x30\x03\xd9\xb9\x80\xfd\xc8\x41\x29\x2d\xf4\xa0\x85\x26\x87\xa5\x0c\x4e\x2c\xa7\xee\x3a\x76\xa2\xf1\xe4\x07\xe3\x7b\x2f\x72\x26\xbb\x93\xfe\x90\xd2\x83\x40\x46\x96\x9e\xf7\x95\x90\x52\x7a\x04\x8d\xc6\x7a\x84\xaa\xb7\x1b\xaf\xe2\x40\x58\xc1\x63\xce\xf2\xbd\xf5\xba\x4b\x09\xda\xe5\x60\x8c\x3d\x41\xce\x75\x4a\xb0\x8e\xa7\x9d\x22\xb5\x85\xf6\x0d\x6d\x7a\xc8\xb9\x81\x5a\x8a\x94\x60\x8c\x2e\xc2\x11\x72\x9e\x01\x12\xf1\x2f\x50\x23\x59\x03\xbd\x2e\x50\x39\x15\xb4\xfe\x10\x9e\xef\xa9\x29\xda\xbc\x6a\xfd\x99\xb5\x0a\xfa\x5c\x41\xce\xc5\x0b\x6e\x57\xa8\x77\x4e\xad\xf1\x5b\x70\x1a\xa9\x87\xf6\x83\x37\xe1\xe6\xb9\xdf\xbb\x31\x5a\x75\x5d\x89\x74\x7d\xdc\xc6\xc2\x90\xe2\xa0\x08\xba\xee\xa0\xdc\x80\x3d\x7c\xf9\x6a\x7d\x44\x32\x6a\x8d\x69\x42\x18\x5f\x2f\xe6\xaa\x6b\xf6\x0d\x80\x89\x30\xe7\x3f\x7b\xb7\x1a\xbc\x76\xd8\x2d\xd0\x6b\xa4\x3a\xac\xbe\xb7\xda\x2a\x87\xeb\x38\x83\xa9\x81\x46\x0a\x7e\x73\x61\xb3\x8c\xdb\x58\x5f\x18\xb3\x17\x33\x6d\xdb\x36\x52\x8a\xae\xa3\x70\xec\x2f\x63\x7e\x9a\x43\xa1\x91\x3d\x20\xb5\x9f\x07\xa4\xf3\xef\xcb\x84\x35\xa5\xe0\x61\x0e\xde\x3a\x48\x52\x08\xc2\x38\x90\xe7\xcf\x59\x81\x6c\xd5\x33\xbe\x23\xaa\x91\xa8\x91\x22\x4b\xa1\xd1\x20\x77\xc2\x72\xed\x5b\x17\x7a\xac\x59\xdf\x1a\x78\x18\x83\x9f\xf0\x14\xeb\xa6\xd0\x46\xfe\xd3\xfc\x5a\xc0\xa8\xe6\xff\x9f\x45\xef\xa8\xb2\xec\x4d\x8a\xb7\x8e\xbd\x94\xc9\x5b\x6f\xe3\x75\xcb\xa4\x60\xf0\x8b\xd8\x72\xad\x3c\x2f\x8d\xd2\x9a\x82\x81\xda\x38\x15\x23\xfa\x92\xdd\x94\xed\xf9\x87\x01\x94\x9a\x5f\x3b\x9d\x96\xc5\x10\x3e\x2a\x7f\x5e\x84\x63\xcf\xf2\x3b\xb2\x3e\x1a\xa8\xfe\xdb\x57\x93\x6d\x7e\x85\xfd\xcd\x84\xee\xbb\x1a\x33\xb8\x5d\x3e\x90\xeb\xd9\xf1\xa8\x78\x3f\xc7\x13\xf9\x11\x00\x00\xff\xff\x13\xbd\xfb\x7b\xdf\x03\x00\x00")

func golangGetScalarAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetScalarAllTmpl,
		"golang.get-scalar-all.tmpl",
	)
}

func golangGetScalarAllTmpl() (*asset, error) {
	bytes, err := golangGetScalarAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-scalar-all.tmpl", size: 991, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetScalarTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x4f\x6f\xdc\x20\x10\xc5\xcf\xf0\x29\xa6\x3e\xd9\xd2\x86\x6f\xe0\x43\x0f\xa9\xd4\x4b\xa5\xee\x1e\xab\xca\x62\xcd\xe0\xd2\x60\xc8\x0e\xd8\x9b\x14\xf1\xdd\x2b\x88\x93\x75\xa4\xfe\x39\x58\xb2\x66\x98\xdf\x7b\x7a\x2f\xa5\x3b\x50\xa8\x8d\x43\x68\x82\x99\x9c\x8c\x0b\x61\x03\x77\x39\xf3\x4f\xc6\xa9\x21\x25\x10\xa7\x45\x6b\xf3\x04\x39\xb7\x29\xc1\x18\x9f\x1e\x25\xc9\x19\xc4\x47\x9a\x02\xe4\xdc\x41\xcb\x59\x4a\xb0\x4d\x8f\xfe\x0a\x39\x1f\x00\x89\xca\xe7\xa9\xe3\x45\x03\x9d\xaa\x50\xbe\x17\x34\x6e\xf5\x0f\xff\x53\x93\x34\xdd\xb4\xfe\xce\x3a\x7b\xf5\xdc\x40\xce\xd5\x0b\xce\x67\x54\x8f\x56\x8e\xf8\xc3\x5b\x85\x14\x40\x7c\x76\xda\xbf\x5b\x87\x8b\xdd\xa6\xcd\x30\xd4\xc9\x10\xe2\x1c\x2b\x83\xb3\x55\x12\x0c\xc3\x2a\xed\x82\x01\xbe\x7d\x37\x2e\x22\x69\x39\x62\xda\x11\xb6\xed\x8b\xb9\xe6\xf5\xf5\x3b\x40\x21\x42\x5f\x7e\x2e\xf6\xbc\x38\x65\x71\x38\xa2\x53\x48\xad\x3f\xff\x14\xca\x48\x8b\x63\x3c\xc0\xde\x40\xc7\x59\xd9\x59\x3f\x9d\xe2\x1c\xdb\x17\xc6\xe1\xcd\x8c\x10\xa2\xe3\xd5\x83\x71\x26\xbe\xe6\xcd\x59\xc9\xbb\x87\x4a\x25\xb3\x22\x89\xaf\x0b\xd2\xf3\xd1\x5f\xff\x48\x10\xa7\x51\xba\x12\xb0\x54\x8a\xbc\x86\x56\x5b\x19\x23\xba\xca\xeb\x6a\xd2\xcc\xe8\x5a\x62\xdf\x43\xb8\x58\x71\x4f\xf4\xc5\x1f\xfd\x35\x40\xe2\x8c\x11\xc6\x85\x1c\xa4\x04\xbf\x90\xfc\xad\x75\x67\x2c\x67\xf9\xed\xf6\x43\x5f\x26\xff\xbc\x28\x8e\x67\xf9\x80\xf7\x44\x2d\x12\x75\xf5\xfc\xf6\xb8\xb6\xbf\xa7\x97\xf0\xb7\xfe\x7f\x07\x00\x00\xff\xff\x49\x0a\x6a\x61\xbc\x02\x00\x00")

func golangGetScalarTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetScalarTmpl,
		"golang.get-scalar.tmpl",
	)
}

func golangGetScalarTmpl() (*asset, error) {
	bytes, err := golangGetScalarTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-scalar.tmpl", size: 700, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x59\xff\x6f\xdc\x36\xb2\xff\x59\xfa\x2b\x26\xfb\x92\x40\x32\x36\x74\x81\x3e\x3c\xe0\xa9\xd8\x03\x62\xaf\x73\x67\x9c\x63\xa7\xf6\xba\xc5\xa1\x2d\xb6\x5a\x89\x72\x54\x73\xc9\x35\x49\xed\xca\xb7\xd5\xff\x7e\x18\x92\x92\xa8\xfd\xe2\x26\xed\xe5\x97\x68\xc9\x99\xe1\xcc\x67\x86\x1f\x0e\xe9\xed\xf6\x1d\xbc\x16\x2b\x5d\x0a\xae\x20\x99\x00\xb9\x71\xdf\xef\x9a\x26\x0c\x4f\x4f\xe1\xfd\xfd\xec\xe6\xef\x17\xd7\x17\xb7\xef\x67\x17\x53\x38\xfb\x17\x28\x2d\xe4\x6f\xa4\x14\xa7\xf9\xa2\x46\x81\xe9\x0d\x5c\xdf\xcc\xe0\x62\x7a\x39\x23\x61\xb8\x4a\xb3\xc7\xf4\x81\xc2\x76\x0b\xe4\x93\xfb\x46\x4b\xe5\x72\x25\xa4\x86\x28\x0c\x46\x8b\x67\x4d\xd5\x28\x0c\x46\x99\xe0\x9a\xd6\x1a\x3f\xf3\x54\xa7\x8b\x54\xd1\x53\xf5\xc4\xf0\x37\x95\x52\x48\x23\x54\x2c\x8d\x80\xa4\x05\xa3\x99\xf9\x54\x5a\x66\x82\xaf\xdd\x67\xc9\x1f\x8c\x9c\x2e\x97\x14\xff\xaf\x78\x99\x89\xdc\x7c\xaa\x67\x9e\x8d\xc2\x10\x43\x94\x29\x7f\xa0\x40\x2e\x6a\x2d\xd3\x4b\xe3\x8a\x42\xb7\x02\x74\x13\x3f\x50\x86\xf2\x1c\x3f\x63\x13\xf6\x27\x49\xd7\x94\x6b\xc8\x04\xcf\x4b\x44\x24\x65\x50\x3a\xc5\x42\x8a\x25\x64\x69\xa5\x4a\xfe\x00\x8b\xaa\x64\x39\x14\x69\xc9\x2a\x49\x55\xb8\x4e\x25\xcc\x61\x02\xce\x49\x72\xa9\x45\xea\x0f\xa2\xbb\xe4\x2a\x55\xfa\x92\xe7\xb4\xee\x66\x8a\xa5\x26\x77\x2b\x59\x72\xed\x86\xd0\x77\xf2\xb1\xd2\xb4\x0e\xcd\x48\x14\x06\x3f\xca\x74\x75\x21\x25\x4a\x57\x3c\x8b\xa8\x94\x70\x72\x81\x38\xc5\x60\xe0\x82\xad\xa4\xba\x92\x1c\x7f\x35\x61\x70\x25\x1e\x1e\xa8\xb4\xb2\x85\x90\xcb\x54\xbb\xf5\xc7\x90\xca\x07\x05\x84\x90\x92\x6b\x2a\x8b\x34\xa3\xdb\x26\x0e\xc3\x80\x4a\x39\x13\xe2\x63\xca\x9f\x6f\xc5\x46\xc1\xc4\x9a\x55\xe4\x9a\x6e\xa2\x91\x16\x02\x96\x29\x7f\x06\x29\x36\x6a\x14\x1b\xe9\x7b\xae\xaa\x15\x62\x42\xf3\xa9\x2c\xd7\x54\xee\xe8\x54\xfd\x3c\xe4\x46\xc0\x29\x5e\x2c\x57\xfa\xf9\x7e\x95\xa7\x9a\xee\xa8\x50\x9c\x81\xca\x4c\x8d\x62\x4c\x06\x06\x00\x4c\x3c\x98\x50\xbf\x24\x12\xd8\x86\x41\x59\x80\x8b\xff\xd5\x04\x78\xc9\x70\xcc\x21\xe2\x4c\x58\x5d\x42\x48\x1c\x06\x4d\xd8\x84\xa1\x7e\x5e\x51\x30\x8b\x9c\x8b\x9c\x02\xa6\x22\xcc\x04\x57\xa6\x68\xbb\xf1\xf9\x3d\x7f\xe4\x62\xc3\x3d\xc9\x09\x94\x42\xa7\x43\x99\x1d\x5c\xfc\xc9\x6b\x81\xe8\xfa\x23\xb3\x7a\x2a\x38\x1d\x8c\xf4\x69\xf0\x87\xcf\xd1\x1d\x99\x96\x5c\xff\x50\x0a\x96\x62\x59\xfa\xd3\x1e\xaa\x08\x5c\x1f\x10\xc2\x55\x65\x1a\x41\xc0\x02\x32\x78\x87\x81\x71\xbe\xd3\x0e\x03\x97\x42\x0b\x2d\x4e\xb7\x8b\x75\x43\xdf\x57\x54\x3e\xdf\x55\x45\x51\xd6\xed\x58\xe3\x12\x14\xd1\xae\x18\x6d\xa2\x62\x27\x81\x8b\xb6\x75\x49\x2e\xa4\x24\x6e\xba\xd3\xdc\xd8\xb2\xf6\x0c\xb8\x6a\x36\x59\xec\x8a\xbe\x4f\x63\x6b\x0d\xf3\xd6\xfe\xf8\xb1\x35\xd2\xdb\x5d\xa6\x8f\xd4\x0c\xb5\x11\x0f\x0d\xd3\x83\x46\x79\xc9\x8c\x59\x8a\x5c\xf8\xd6\xf8\xb3\xbd\x90\x32\x71\x7b\x4a\x6d\x4a\x9d\x7d\x36\xba\xdb\x30\xc8\x52\x45\x41\x3d\x31\x0c\xc9\x66\x35\x09\x83\x80\x12\x57\x15\xfb\x29\xf7\x15\x6c\xd2\x8f\x28\xb4\x15\xd1\x07\xb8\xd9\x0f\xb0\xda\xad\xb2\x28\xf7\x33\xe8\x85\xbb\x63\xc3\xc5\x15\x06\x41\x1b\xda\x5e\xc1\x8e\xc3\xc0\xd4\x47\x02\x2f\x54\x35\x0a\xd9\xaf\xc4\x6d\xef\x71\x18\x34\xbd\x83\xb4\xaf\xc7\xe8\x6b\xbc\xf1\xea\xf8\x90\x1f\xc3\x69\x6f\x3d\xdd\xef\x9a\xe8\x09\x4b\x75\xae\xfc\x5a\xfd\x1a\x17\xbc\x0d\x78\xc8\x85\x9d\x69\x6f\x5f\x24\xe0\xaf\x3c\xf4\x2f\xdb\xdf\xbe\x7d\x75\x8e\xbd\xe9\x3f\xe1\xf0\x21\x2f\x0f\xd0\x85\x15\x6b\x87\x13\x6f\xcd\xce\x55\x43\x1b\xae\x92\x3a\x5a\x35\xd4\x51\xd3\xcc\xe2\xfa\x32\xfd\x46\x58\xe1\xb7\x54\x55\x4c\x8f\xdd\xce\x73\xd4\xf1\x45\xda\x27\x46\x1d\x91\x1d\x2a\xdf\x8a\xcd\x97\xe8\xb7\xea\x18\x8a\x3b\x38\xb9\xd0\xef\x3f\x09\x23\xb5\x73\xda\xe4\x54\xe9\x92\x1b\x64\x80\x0b\x0d\x29\xac\xac\x1c\x9e\x53\x4c\x28\xf5\x7c\x2e\xf8\x9a\x4a\x85\x02\x43\x55\x33\x8b\xf8\xb9\x69\x7b\x58\x19\xf0\xa6\x67\x1e\xe1\x1a\x7f\xa6\x67\x61\x90\x2f\x3e\x52\xfd\x59\xe4\x2a\x0c\x83\x7f\x08\xf1\xa8\x3c\xa1\xe0\x5a\x6c\xec\x49\x1d\x03\x36\x32\x64\x56\x2e\xa9\x3b\x97\x4c\xe9\xdc\xac\x28\x77\xdb\x7b\x0c\x4a\x54\x32\xa3\x5d\x91\x44\xf9\x02\x4e\xa6\x67\x06\xae\x96\xe9\xb6\x61\x80\xc1\xab\x27\x36\xc7\xd9\xd6\x07\xc7\x5f\x2e\xbb\x5b\xbf\x35\x9a\x96\x29\x36\x58\xb6\x2d\x32\x44\x85\xbd\xd1\x75\xba\xa4\xf0\x3b\x98\xce\xa4\x80\xd1\x9b\xa7\x11\x34\x0d\x92\x96\xb5\x6c\xd7\x9c\x80\x58\x51\xde\x89\x37\x4d\x64\x3d\x8c\xfd\xb6\x2a\xc8\x69\x91\x56\x4c\x27\x03\xb2\x1d\x1f\x65\x31\x73\x2c\xb7\x44\xfd\xea\x10\x51\x8f\x7d\x8a\xb7\xe2\x39\x2d\xda\x96\x67\x18\xba\x41\xe4\x80\x35\x17\x07\x39\x67\x42\xd1\x28\x0e\x03\xb4\xd2\x38\x65\xec\x89\x9c\x4a\x32\x71\x58\x92\x4f\x25\x7f\x88\xe2\xef\xbe\xc6\x2d\xcc\x3d\x4c\xe0\xed\xf4\x0c\x25\xa7\x67\x89\xb3\x35\xb6\x3e\x2f\x88\x29\x07\x82\x35\x30\xb1\xe9\xbf\x16\x9b\xf0\xbf\x99\xad\x7c\x41\xba\xf2\x83\x09\x70\xba\xf1\xb3\x85\x91\xfe\xd5\x4c\x75\x14\x85\x45\x81\xa7\x68\xd7\x18\x88\xc5\x6f\x58\x9e\x31\x38\x8c\x21\x1a\xd6\xa9\xd3\x13\x8b\xdf\x48\x0b\x1c\x7e\x4f\xcf\xda\xa4\xc4\x07\x6c\x99\xfd\x90\xe9\x1a\xdc\x1d\x82\x9c\xdb\xff\x91\x3f\x66\xf5\xd8\x33\xaf\xed\x2f\xcc\xa0\x33\x7b\x46\x1f\x4a\x8e\xb9\x7e\xb9\xb8\x7c\x87\xfa\x4c\x3a\x89\xb7\xb3\x1a\xe5\x67\x75\x02\x1a\x59\x3e\xd0\xb5\x83\x37\x31\x8a\x48\xd4\xb3\x3a\xd2\x75\x8c\x49\x6e\x11\xd9\x6e\xa1\x2c\xba\xeb\x16\xb9\xb3\x70\xde\xd6\x88\xfa\x4e\x80\xd7\x74\x73\x5b\x47\x31\x9c\xdc\xd6\x1e\x48\x6f\x6f\xeb\x6d\xbe\x30\x4b\x34\xd6\x9e\xcb\x99\xd1\x9e\x52\x46\x35\x7d\xcf\xd8\x21\x64\xc6\x60\x69\x22\x86\xa8\xe4\xfa\xff\xfe\xf7\x08\x46\xf9\x82\xb4\xd8\xbe\x84\xd0\x37\x46\x61\x77\xcf\x0d\x76\x99\xd7\x5c\x05\x96\x25\xf2\x45\x07\xa8\xae\xc9\xb9\x58\x2e\x4b\x8d\xe9\x0d\x5a\xb3\x66\xfb\x75\x16\xe6\x52\x30\xb6\x48\xb3\x47\xf4\x4b\xd7\xe4\xd6\xfd\x74\xbb\xaf\x9f\xf6\xf7\x73\x77\x51\x18\xe5\x06\x8d\x77\x29\x63\x09\x74\xa2\x78\x4f\xa3\x79\x02\x6f\xd6\xa3\xb1\xef\x8f\x6f\x2f\xee\x68\x20\xee\x80\xd7\x35\xc9\x7d\x74\xfb\x93\x72\x56\x7b\x3c\x3e\xab\x2d\xe1\xcc\xea\xb0\xaf\x88\xfe\x50\xb5\x9b\x76\xa0\xa1\x7b\x8d\xae\xca\x71\xac\x93\x8d\xa1\x05\xea\xc8\xc6\xf1\x20\x1d\xa0\x7a\xcc\x5c\x0f\xe3\x17\x19\xec\xc5\x8d\xc9\x23\x1c\x64\xc6\x5f\xe7\x0b\x13\x67\x32\xd9\xa7\x22\x35\x3d\x1b\x99\x37\x05\x23\xa8\xeb\xe3\x82\xb3\xda\x13\x2c\x97\x2b\x76\x5c\xf4\x72\xb9\x62\x23\xb3\xbc\x91\xd9\x6e\x3d\x85\xa6\xf1\x50\xce\x17\x60\xfe\x9d\x98\x83\xd8\xfa\x0d\xf3\xb9\x7a\x62\x8b\x8a\xe7\x8c\xce\x3d\x3a\x0c\x03\x47\xb8\x8e\x78\x77\xd8\x67\x67\x91\x18\x6e\xe9\xa2\xe4\x79\xa4\xba\xf3\x78\xef\xde\x83\x84\xe0\x16\x25\xad\xf4\x2e\xa9\xed\x99\x65\xe2\xe1\x4e\x2f\x75\xa4\xf4\x72\x78\xdd\x25\x84\xc0\xee\x75\xd7\x73\xff\xca\xd3\xf3\xee\xb8\x7f\xb0\xda\x4b\x97\x25\xaf\x47\x04\xf1\xd8\x12\x69\xa9\xfa\x3e\xd2\xee\x38\x4b\x92\x65\x81\x42\x1e\x55\x1c\xe9\x7a\xfd\x7e\x37\xf6\x6f\x3a\x03\xce\xf5\x53\xeb\xaa\x6b\x37\xb1\x26\xa7\xbb\x11\x75\xf1\xee\x1d\x75\x96\x03\x4f\x86\x06\x3d\x86\x1d\x4c\x6c\xcd\xd9\x99\x80\x39\xab\x83\x9d\x35\x12\x2b\xec\x8d\x18\x06\x42\x79\xf3\xcf\x2a\xb9\x6a\x4a\xf0\x37\x99\x9e\xe1\x50\x33\xf6\x5b\xbb\x3e\x23\xdd\xb2\x31\xdc\x65\x9f\xe9\x32\x3d\x74\x89\xfe\x15\xc3\xb1\xd3\x77\xdf\x5f\x41\xd3\xfc\xfa\xb2\xa5\xee\x24\x6a\x79\x26\x86\x8e\x99\x76\xe3\x76\xdb\xd2\xc5\xdd\x52\x46\xd2\x13\xd7\x56\x9b\x03\xaf\xf9\x13\x68\x98\x4d\xb0\x83\x88\x3d\x3a\x3b\x38\xba\x4c\x77\x7e\xf8\x99\x6e\x7d\x78\x21\xd9\x47\xb6\xc1\x1f\xbe\x16\x9d\x9e\xc2\xec\x66\x7a\x93\x80\xa4\x3c\xa7\x12\x56\x2c\xcd\xe8\x67\xc1\x72\x2a\xd5\x91\xb7\x24\x51\x69\xdc\x09\xfd\xbb\x5d\x11\x8d\x70\xad\x04\xde\xa8\x9f\x39\x2e\x84\x87\xcc\xcf\x7c\x34\x06\xbb\x13\x57\x92\x6a\xfd\x1c\xe1\x8c\x39\x60\xdc\x63\x94\xa8\x74\xfb\x00\xe5\xb5\x60\x16\x0a\xab\x02\x3f\xfd\xe2\xf9\xdb\xa6\x7a\xe5\x66\x63\xf8\x60\x9e\xb3\xa2\xc2\xfa\xa2\xf1\x56\x0c\x19\xc8\x8a\x53\x13\x1b\x8e\x7e\x30\x1e\x46\xc5\x18\x46\x3f\x8d\xe2\x90\xd3\x5a\xaf\x53\x96\x84\x41\x21\x24\x94\x63\x58\xa7\x0c\x83\xb1\xbc\xbe\x6a\x0f\xf1\x12\xfe\x06\xdf\xd8\x53\x75\xc7\xc8\x18\x46\xee\x8c\x0c\xe4\xda\x68\xda\xd7\x59\xf2\x43\xca\x2a\x7a\x53\x44\xeb\x94\xc5\xd6\x88\x5c\x93\x7f\x22\xe1\xc5\xd8\x0f\xb4\x62\x9f\xb4\xb4\x76\xad\xc0\xa5\xba\x2e\x99\x6b\x1e\xf6\xd6\xba\xbe\xbf\xba\x32\xab\x05\x48\x44\xba\xe4\x15\xc5\x1f\xb8\x76\x80\x7e\x4f\xd0\xc2\x05\xa3\xcb\x28\x26\x97\x2d\x4e\x6d\x27\xdf\xb6\xd0\xc6\xc9\x75\xca\x48\x84\xc0\xda\x95\xec\x63\x8c\xa9\x8c\x64\x18\x63\x61\x16\x7e\xf3\x34\x1a\xc3\x3a\x6e\x25\xbb\x6b\xd9\x61\x61\x85\xc2\xc4\xe5\xc2\xc8\xde\x7e\x38\xff\xf6\xdb\x6f\xff\xff\x3a\xe5\x22\xee\xac\xfc\xf4\xcb\xe2\x59\x3b\x13\x42\xc2\x7c\x0c\x8b\x1e\xf9\xb5\x43\xa0\x2c\xe0\x95\x7b\xc6\x26\x97\xea\x93\x81\x02\xf3\x19\x2d\xe2\x16\xa4\x7d\x07\xfe\xa7\x6e\xdd\xf5\x90\x02\x97\x6a\x33\xda\x74\xb8\x1d\x0f\xd5\x6b\xfd\xf7\xa5\xd6\xad\x54\x63\xf8\x7a\x27\x51\xbf\x8c\x5c\x83\xd0\xf6\x07\x77\x66\xef\xaa\xf6\x79\xfd\xb5\xdb\xcb\xdd\x49\xde\x1d\xf2\x99\xa4\xa9\xa6\xde\xf4\xb9\x19\xb0\xfa\x43\x51\xfb\x30\xec\x89\xda\x77\x20\x4f\x74\xd0\x0d\x38\x41\x9f\x48\xbc\x06\xe6\x43\x49\x59\xde\xff\x1d\xc0\xa9\x1b\x16\x99\x39\x66\xf1\xf6\x24\x7e\x1e\xe8\xde\xef\x15\x95\x79\xaa\x53\xb3\x70\x50\xb9\x5f\xf3\x65\xe5\x3f\xe1\x77\xe3\xc8\x84\xfe\x6e\x76\xf6\x3d\x0e\x8b\x06\x7e\xc7\x30\x9f\xa5\x0b\x46\xbd\x93\x00\x1c\x63\x8f\x8c\x9f\x38\x09\x4d\x33\x02\x47\x20\x65\x01\xe4\x92\x2b\x2a\x35\xce\xd8\x3f\xe6\xa4\xac\x8f\xb4\xc7\x66\x80\xfa\x11\x84\x5e\xb2\xb4\x87\xd9\x30\x09\x1e\x72\x87\xb8\x0d\x3d\x18\x24\xf3\x88\x07\x26\xbf\xe8\xc0\x5f\x58\x78\x2f\xdd\xa6\x94\x0a\xaf\x8a\xf6\x2d\xbc\xce\xb4\x30\x17\xa2\xbe\xdb\x9c\xbf\x51\x23\x20\x1f\x45\x4e\x99\x91\x24\xfb\xf5\x56\x1c\x08\x26\x98\x2b\xaa\x61\x21\x04\x0b\x83\x39\xaf\x18\x6b\xbf\xd7\x48\x96\x83\x6a\xf3\xce\x31\xbb\x7e\xd3\x44\x6b\x23\x71\xae\x85\x34\xe4\x6a\x6a\x62\x67\xa9\x6d\x97\xf9\x8f\x15\xf2\xff\x07\x6e\x60\x5a\xc3\xc4\xe8\x7a\x83\xd1\x7a\x78\xd3\x77\xa5\x34\xb4\xb7\x05\xf4\x38\x01\x2d\x2b\x3a\x06\xeb\x66\x02\xf6\xee\x4a\x66\xe9\x23\x7d\x9f\xe7\xe8\xda\xdb\xee\xfa\xb9\x86\xa6\xbb\xdd\x92\xeb\x8a\x31\x57\x95\x7b\xd1\xcc\x6f\xd3\x8d\x8b\x68\xd6\x36\x28\x7b\xc1\x20\xff\xad\x0f\xbc\xcd\xfb\x76\x70\x91\x68\xd0\x36\xfa\x98\xed\xfb\x7a\xd2\xfb\x1a\x1f\x82\xd9\x19\x3c\xe0\xcc\x97\x40\x84\x59\xb5\x3f\xc0\xdb\xc8\xc5\x8e\x52\x0c\xa5\xe2\x76\x19\xac\x00\xd8\xb6\xb6\x5f\x15\xc4\xd4\xc8\xef\xbf\x43\x41\x6c\x89\xd8\x4f\x5b\x21\x0e\x09\xff\xba\x7f\x74\x05\xa3\x11\xc5\x3e\xc7\x80\x01\xe3\xc0\x1a\x1d\x93\x18\xeb\xdf\xb5\xbf\xba\x75\x07\x8c\xe4\x2f\x32\x3f\x17\xac\x5a\xf2\x63\x9c\x64\x67\x7d\x52\x42\xaf\xdf\x0d\xb7\x66\xfb\x62\x7f\x3f\x3b\x8f\x74\x7f\xb8\x7a\xcf\x9f\x1e\xf8\x9a\xa0\x98\xff\xd0\x3f\x4d\x35\x7d\x41\xef\xf4\x14\x1e\x29\x5d\x41\xb5\x02\xfd\x99\xc2\xb2\xe4\x95\xa6\x80\x74\x5d\x0a\x0e\x4a\x80\xfe\x9c\x6a\xd0\x32\xe5\xca\xde\x48\x14\x2c\xa8\xde\x50\xca\x8d\x9d\x7f\x0b\x4e\x15\x6c\x4a\xc6\x8c\xa9\xee\x34\xd5\xa2\x6d\x61\x60\x25\xc5\x8a\x4a\xf6\x4c\x3c\x27\x67\xb2\xe2\x99\x71\x0c\x7d\xf9\x68\x16\x35\x4e\x9f\x9e\x86\xa7\xa7\xd8\x92\xe1\x04\xb8\x57\x34\xc0\x06\xc0\xfc\xf5\x18\x21\x54\x4f\x0c\x14\xee\xd3\x25\xe5\x5a\xa1\x46\x68\xa8\xed\xfb\x2b\x77\xce\x40\xd3\x19\x42\x08\xbf\xd2\xd8\x7f\x02\x00\x00\xff\xff\x54\x78\xf4\xd1\xe7\x1f\x00\x00")

func golangHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangHeaderTmpl,
		"golang.header.tmpl",
	)
}

func golangHeaderTmpl() (*asset, error) {
	bytes, err := golangHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.header.tmpl", size: 8167, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangMiscTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xc1\xca\x83\x30\x10\x84\xcf\xbf\x4f\x31\x04\xff\x5b\xf5\x01\x84\x5e\x7b\x29\xf4\x24\x3d\x1b\xea\x2a\x01\x1b\xac\x89\x07\xd9\xee\xbb\x97\x35\x25\x2d\xf4\x36\x99\xf9\x66\xb2\xcc\x15\x7a\x1a\x9c\x27\x98\x10\x97\xf5\x16\x0d\x44\x8a\xb8\xcd\x04\x66\xd4\x17\x7b\x27\x88\x20\x65\xe0\x82\x19\x8b\xf5\x23\xa1\x3e\x39\x9a\xfa\xa0\xf4\x1f\x33\xdc\x90\xe1\xef\x1e\x33\xc8\xf7\x6f\xb3\xd5\xd5\x5d\x2a\xdd\xda\x31\xa0\xd2\x7a\x97\x47\x4b\x77\x40\x19\xd1\x1c\x3f\x71\xa2\x4b\xf7\xb3\x76\xa6\x0d\x22\x8d\xca\xab\x9d\x56\xc2\x13\xf3\xe2\x7c\x1c\x60\xfe\x1f\x26\x41\x89\xee\xf4\xc2\x6a\x7f\xe8\x7f\xd9\x2f\xb2\x56\xfb\x15\x00\x00\xff\xff\x8e\x34\xcf\xa7\x0b\x01\x00\x00")

func golangMiscTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangMiscTmpl,
		"golang.misc.tmpl",
	)
}

func golangMiscTmpl() (*asset, error) {
	bytes, err := golangMiscTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.misc.tmpl", size: 267, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangUpdateTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\xc1\x6e\xe3\x36\x10\x3d\x4b\x5f\x31\xd5\x49\x42\x15\xa2\xe7\x05\x84\x62\xb1\x4d\xdb\x14\xa9\xd1\x8d\xbb\xbd\x14\x85\x40\x5b\x23\x97\x0d\x45\xaa\x14\x15\x27\x10\xf8\xef\xc5\x90\xb4\x2c\x65\x9d\xb4\x05\x72\xd8\x9b\xcd\x19\xce\xbc\xf7\xe6\x0d\x35\x4d\x57\xd0\x60\x2b\x14\x42\xa6\x78\x87\x19\x5c\x39\x97\x7e\xea\x1b\x6e\x71\x9a\x40\xb4\xa0\xb4\x05\x76\x87\x76\x34\x0a\x9c\xdb\xe8\xf0\x73\x9a\x00\x55\x03\xce\xd5\xd3\x04\x6c\x3b\xb6\xad\x78\x04\xe7\x52\xaa\x47\x01\xaa\x92\x2e\x8b\x0f\xe2\xa0\xb8\x1d\x4d\xec\x40\x21\x8b\x5d\x2f\xb9\x9d\x3b\x33\x70\x2e\x9f\x26\xd8\xdb\xc7\x9e\x1b\xde\x01\x7b\x6f\x0e\x03\x38\x57\xa6\xc9\xe8\x11\x81\x6f\x66\xcd\xb8\xb7\x2c\x60\x0c\x7f\x36\xbc\x43\x70\xae\x80\x3c\x4d\x02\xea\x33\xe2\x69\x82\x58\x6d\x3e\x2a\x61\x86\x8f\xc6\x00\x1a\xa3\x4d\xf1\x32\x74\xa1\x1e\xf4\xfd\x7f\xc3\xcd\xcd\xe1\x8c\x1a\x02\xe8\x57\x2a\xef\x74\xf3\x14\xea\x12\x6c\xec\x76\xd8\xf4\x92\xef\xf1\x4f\x2d\x1b\x34\x03\xb0\x1b\xd5\x6a\x58\x86\x87\xbf\x65\x3c\xcd\xea\xda\x9f\xd4\x83\xed\x6c\x46\x49\x69\x52\xd7\x03\xda\xa1\xa6\xa4\x77\x15\xd4\xf4\x63\x37\xaa\x46\x62\x7d\x2b\x2c\x1a\x2e\x87\xe9\x27\x2d\xd4\x3b\xc8\x4a\xc8\x5c\x9a\x3c\x70\x03\x75\xfd\xc0\xe5\x88\x03\xfc\xfe\x87\x50\x16\x4d\xcb\xf7\x38\xcd\x31\x4e\x5c\xd6\x11\x0f\xc6\x70\x75\xc0\xf5\x2c\xf8\x4e\xe2\xf7\x02\x65\x33\x78\xc4\xa2\x8d\xfc\x19\x0d\x2d\x4e\x88\x11\x40\x98\xd2\x24\x99\xdb\x56\xc0\xfb\x1e\x55\x93\x9f\x4e\xca\x4b\xf7\x7c\x28\x2f\x0a\x7f\xf3\x44\x92\x6d\x3f\xde\xae\x0a\xac\x02\xe5\x25\x01\xf2\x8c\xaa\x7e\xd0\x72\xec\xc8\x09\x50\xc1\xb7\x19\x55\x8d\x12\x7b\x4f\x78\x86\x57\xde\x45\x1b\xc4\x66\xd8\xe8\xa3\x67\x54\xd7\x4a\x1f\x49\x58\xbd\xfb\x8b\x35\x3b\xf6\xa3\xd6\xf7\x03\xdb\xe8\x63\x5e\xb0\x4f\xbf\x7e\xc8\x8b\xb9\xc6\x69\xa2\x51\xa5\xf7\xa3\xd5\x0b\x65\x5e\xa3\x4e\xe8\x6e\x94\xb0\xbf\x71\x49\x86\x4e\xdf\x82\x6d\xd4\x70\xe6\xba\x26\x3a\xef\xf8\x33\x94\xa2\x05\x89\xea\x79\x9b\x02\xaa\x0a\xbe\xf1\x13\x3c\x69\x34\xaf\x55\x9a\x24\x26\xfc\x56\x42\x96\x80\x5d\x6f\x9f\xc2\x96\x92\x34\x3e\x1f\xe5\x80\xab\xcc\x8b\x49\x01\xdc\xe7\x33\x09\x2b\x10\xc5\x0b\x6b\x96\x05\x8b\xce\xfe\x7f\x59\xd9\x90\xc8\x18\x9b\x45\x25\x42\xe0\xd7\x24\x32\x4c\x4f\xae\xa7\x95\x82\xf5\x02\xdd\xa1\x6a\xd0\xe4\x7e\xf4\x82\x4b\xdc\x5b\x2a\x79\xde\xc0\x22\x4d\x28\x26\xf5\x61\x6b\x3b\x9b\x87\x1a\xe5\xbc\x5d\xa1\x6f\x94\x6c\xfd\xa4\x12\xee\x92\x1e\x21\x88\xce\x32\xe2\x01\x0d\xbb\x7e\xc4\xfd\x0b\x65\x44\xeb\xd3\xbf\xaa\x48\x68\x3f\x8b\xa8\x26\x5d\xef\xf8\x3d\x5e\x1b\x93\xa3\x31\xc1\xd7\xe7\x99\xa4\xab\x19\x84\xe1\x2b\xb1\xc2\x32\x4f\x75\x3b\xf6\xbd\x36\x76\x08\x21\xa1\x0e\x3e\xfa\x19\xca\x8f\x23\x9a\xa7\x3b\x7d\xbc\x88\x94\x6d\xf7\x5c\xd1\xcb\xc8\x9b\xc6\xe8\x16\xf2\x56\x72\x6b\x51\x9d\x1a\x16\xc1\xe2\x91\x4e\x55\x01\xb9\xec\xda\x98\x8d\xbe\xd3\xc7\x61\x49\xcc\x1b\xca\x33\x70\xaf\xd0\xf7\x59\x17\x35\x58\x79\xef\xad\xd4\x7e\xb1\xdd\x85\xe7\xfa\x07\xb4\xeb\x17\xbb\x3e\x60\x78\xb5\x17\x96\xa3\xb3\xff\x69\x3b\xba\xf2\xcc\x7a\x59\x7e\xf3\xf3\x2f\xb7\x37\xd7\xdf\x15\x90\xc1\xd7\x8b\xd2\xab\x1d\xf8\xf7\x59\x3e\xbf\xf2\x85\x4d\x33\x3e\x12\x31\x99\x60\xd1\xb7\x77\xf1\x8d\x3f\x1b\x3e\xa4\x2e\xbf\xc2\xff\x04\x00\x00\xff\xff\xba\x0c\x73\x31\xf7\x08\x00\x00")

func golangUpdateTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangUpdateTmpl,
		"golang.update.tmpl",
	)
}

func golangUpdateTmpl() (*asset, error) {
	bytes, err := golangUpdateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.update.tmpl", size: 2295, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"golang.create-raw.tmpl":        golangCreateRawTmpl,
	"golang.create.tmpl":            golangCreateTmpl,
	"golang.decl.tmpl":              golangDeclTmpl,
	"golang.delete-all.tmpl":        golangDeleteAllTmpl,
	"golang.delete-world.tmpl":      golangDeleteWorldTmpl,
	"golang.delete.tmpl":            golangDeleteTmpl,
	"golang.dialect-cockroach.tmpl": golangDialectCockroachTmpl,
	"golang.dialect-postgres.tmpl":  golangDialectPostgresTmpl,
	"golang.dialect-sqlite3.tmpl":   golangDialectSqlite3Tmpl,
	"golang.footer.tmpl":            golangFooterTmpl,
	"golang.get-all.tmpl":           golangGetAllTmpl,
	"golang.get-count.tmpl":         golangGetCountTmpl,
	"golang.get-first.tmpl":         golangGetFirstTmpl,
	"golang.get-has.tmpl":           golangGetHasTmpl,
	"golang.get-last.tmpl":          golangGetLastTmpl,
	"golang.get-limitoffset.tmpl":   golangGetLimitoffsetTmpl,
	"golang.get-one-all.tmpl":       golangGetOneAllTmpl,
	"golang.get-one.tmpl":           golangGetOneTmpl,
	"golang.get-paged.tmpl":         golangGetPagedTmpl,
	"golang.get-scalar-all.tmpl":    golangGetScalarAllTmpl,
	"golang.get-scalar.tmpl":        golangGetScalarTmpl,
	"golang.header.tmpl":            golangHeaderTmpl,
	"golang.misc.tmpl":              golangMiscTmpl,
	"golang.update.tmpl":            golangUpdateTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"golang.create-raw.tmpl":        &bintree{golangCreateRawTmpl, map[string]*bintree{}},
	"golang.create.tmpl":            &bintree{golangCreateTmpl, map[string]*bintree{}},
	"golang.decl.tmpl":              &bintree{golangDeclTmpl, map[string]*bintree{}},
	"golang.delete-all.tmpl":        &bintree{golangDeleteAllTmpl, map[string]*bintree{}},
	"golang.delete-world.tmpl":      &bintree{golangDeleteWorldTmpl, map[string]*bintree{}},
	"golang.delete.tmpl":            &bintree{golangDeleteTmpl, map[string]*bintree{}},
	"golang.dialect-cockroach.tmpl": &bintree{golangDialectCockroachTmpl, map[string]*bintree{}},
	"golang.dialect-postgres.tmpl":  &bintree{golangDialectPostgresTmpl, map[string]*bintree{}},
	"golang.dialect-sqlite3.tmpl":   &bintree{golangDialectSqlite3Tmpl, map[string]*bintree{}},
	"golang.footer.tmpl":            &bintree{golangFooterTmpl, map[string]*bintree{}},
	"golang.get-all.tmpl":           &bintree{golangGetAllTmpl, map[string]*bintree{}},
	"golang.get-count.tmpl":         &bintree{golangGetCountTmpl, map[string]*bintree{}},
	"golang.get-first.tmpl":         &bintree{golangGetFirstTmpl, map[string]*bintree{}},
	"golang.get-has.tmpl":           &bintree{golangGetHasTmpl, map[string]*bintree{}},
	"golang.get-last.tmpl":          &bintree{golangGetLastTmpl, map[string]*bintree{}},
	"golang.get-limitoffset.tmpl":   &bintree{golangGetLimitoffsetTmpl, map[string]*bintree{}},
	"golang.get-one-all.tmpl":       &bintree{golangGetOneAllTmpl, map[string]*bintree{}},
	"golang.get-one.tmpl":           &bintree{golangGetOneTmpl, map[string]*bintree{}},
	"golang.get-paged.tmpl":         &bintree{golangGetPagedTmpl, map[string]*bintree{}},
	"golang.get-scalar-all.tmpl":    &bintree{golangGetScalarAllTmpl, map[string]*bintree{}},
	"golang.get-scalar.tmpl":        &bintree{golangGetScalarTmpl, map[string]*bintree{}},
	"golang.header.tmpl":            &bintree{golangHeaderTmpl, map[string]*bintree{}},
	"golang.misc.tmpl":              &bintree{golangMiscTmpl, map[string]*bintree{}},
	"golang.update.tmpl":            &bintree{golangUpdateTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
