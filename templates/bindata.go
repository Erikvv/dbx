// Code generated by go-bindata.
// sources:
// golang.create.tmpl
// golang.delete-all.tmpl
// golang.delete-world.tmpl
// golang.delete.tmpl
// golang.dialect-postgres.tmpl
// golang.dialect-sqlite3.tmpl
// golang.footer.tmpl
// golang.get-all.tmpl
// golang.get-count.tmpl
// golang.get-first.tmpl
// golang.get-has.tmpl
// golang.get-last.tmpl
// golang.get-limitoffset.tmpl
// golang.get-one-all.tmpl
// golang.get-one.tmpl
// golang.get-paged.tmpl
// golang.get-scalar-all.tmpl
// golang.get-scalar.tmpl
// golang.header.tmpl
// golang.misc.tmpl
// golang.update.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _golangCreateTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x92\x51\x6b\xdb\x30\x14\x85\x9f\xad\x5f\x71\x17\x18\xd8\x90\xea\x07\x14\xf2\x30\x4a\x07\x85\x12\x68\xd2\x3d\x1b\xd5\xba\x32\x5a\x1c\xc9\xbb\xba\xa9\x13\x84\xfe\xfb\x90\xbc\x74\x2e\x6c\x7b\x58\x1f\x0c\xc6\x96\xcf\x77\xce\xf1\x89\xf1\x06\x34\x1a\xeb\x10\x56\xc1\xf6\x4e\xf1\x89\x70\x05\x37\x29\x89\x3b\x42\xc5\xd8\xc6\x08\xd6\x80\xdc\xa9\x09\x52\xda\xa9\x29\x7f\x81\x4e\xe7\x23\x31\x82\xdc\x9f\x8c\xb1\x67\x48\xa9\x8e\x11\x3a\x3e\x8f\x8a\xd4\x11\xe4\x17\xea\x03\xa4\xd4\x40\x2d\xaa\x18\xe1\xd7\xd3\x1d\xf2\x89\x1c\xa4\xb4\x06\x24\xca\x97\xa7\x46\x2c\x14\x85\x58\x1a\xb2\xee\xd5\x1f\x3e\xe4\x46\x51\xff\xdb\x8b\x88\xf1\xcf\x9c\x17\xaf\x2f\x85\x12\xb3\xd9\x9b\x42\xd8\x22\xea\xb0\xf5\x19\x23\xaa\xb6\x75\x7e\x82\xdb\x0d\x6c\xfd\x54\x37\xf2\xdb\xf3\x5d\xdd\x94\x5c\x57\xb9\x7c\x6f\x9d\x65\x87\x13\xc8\xaf\x16\x07\x9d\x89\x42\x54\x9d\x77\x81\xa1\x6d\x03\x1f\x79\x93\x8b\x20\xeb\xd8\xc0\xea\xf3\x8f\x15\xc8\xfd\xd3\x63\x91\xf7\x2f\xdf\xe5\xe0\xfb\x3d\x1f\xb9\x9e\x8f\xae\x21\x46\x28\xe6\xdf\xc4\x1a\x31\x53\x4c\x4e\x39\x8e\x9e\x38\xcc\x75\x5a\xd7\xc3\xc2\xc2\xa2\x65\x51\xe5\x96\x37\x90\xf5\x35\xd9\x57\x24\xf9\x74\x42\xba\xec\xfc\xf4\x0f\x8e\xdc\x77\xca\xe5\xfe\x94\xd6\xe4\x0d\xd4\x66\x50\xcc\xe8\xae\xc2\x4d\x31\x53\x59\x53\xfe\xe1\xa7\x0d\x38\x3b\x40\x14\x55\x45\x33\xd7\xd9\x61\x5d\x90\x47\x75\xc0\x7b\xa2\x1a\x89\x1a\x51\x25\x71\x3d\x70\x45\x2e\xd6\xe0\xec\x30\xf7\x39\x04\x9c\x0b\x6d\x5b\xc2\x30\xcf\xe4\xf6\x5d\x82\xfb\x33\x76\x7f\x71\xff\xbf\xbe\xda\x76\x3c\xbc\xa1\x0a\x58\x3e\xaa\xc0\x0f\x2e\x20\xf1\x83\xae\x3f\x94\x36\xbf\xeb\x91\xb3\x60\x5e\xe8\x1c\x5a\x3e\x5f\x46\xcc\x33\xed\xf8\xbc\x86\xcc\x7f\xbf\xa7\xb4\xdc\xea\xcf\x00\x00\x00\xff\xff\x60\x9d\x7c\x3f\xa4\x03\x00\x00")

func golangCreateTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangCreateTmpl,
		"golang.create.tmpl",
	)
}

func golangCreateTmpl() (*asset, error) {
	bytes, err := golangCreateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.create.tmpl", size: 932, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeleteAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x90\xb1\x6a\xc3\x30\x10\x86\x67\xe9\x29\xae\x86\x82\x03\x89\xe9\x50\x3a\x14\x3c\x04\x9a\xad\x4b\x9b\x07\x30\x8e\x75\x32\x6a\x64\x29\x3d\x9d\xd3\x94\x43\xef\x5e\xec\x04\x9a\xa1\x10\xe8\xa0\x49\xf7\x7f\xdf\xdd\x2f\xb2\x02\x83\xd6\x05\x84\x22\xb9\x3e\xb4\x3c\x12\x16\xb0\xca\x59\xbf\xa0\x47\xc6\x46\x04\xaa\xed\x68\xad\x3b\x41\xce\xa5\x08\x74\x7c\x3a\xb4\xd4\x0e\x50\xad\xa9\x4f\x90\xf3\x02\x4a\xad\xba\x38\x06\x06\x17\xf8\xe9\x71\x09\x48\x34\xbd\x48\x0b\x3d\x09\x30\x98\x99\xa8\xaf\x6d\x2e\x1c\xe3\xfe\xb6\xaa\xa5\xfe\x57\xa4\x45\xfe\x86\xed\xa2\xf9\x9e\x51\x32\x6d\x12\x12\x43\xd3\x24\x1e\xb8\x16\x81\x03\xb9\xc0\x16\x8a\xfb\xcf\x02\xaa\xed\xdb\x2b\xe4\xac\x55\xdc\x7d\x54\x3e\xf6\x5b\x1e\xb8\x3c\x8f\x2e\x41\x04\xac\x43\x6f\x8e\xad\x1f\xf1\x4a\xaa\x55\xd3\x10\xa6\xf3\x59\xcf\x35\x4c\x59\x43\xee\x88\x54\x6d\x4e\xd8\xdd\xcc\x2b\x67\xe7\xe8\x5d\x0d\xc1\x79\x10\xad\x14\x21\x8f\x14\xe0\x61\x39\xc3\x86\x76\x8f\x1b\xa2\x12\x89\x16\x5a\x65\x7d\x69\xf3\x2c\xac\x61\xb6\x57\xef\xf1\x2b\xad\xad\xc5\x8e\xd1\x94\xff\x82\x5e\xfe\x2f\xec\xe0\xbc\xce\xd7\x85\xfe\x04\x00\x00\xff\xff\x4b\x21\xe0\xa1\x0b\x02\x00\x00")

func golangDeleteAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteAllTmpl,
		"golang.delete-all.tmpl",
	)
}

func golangDeleteAllTmpl() (*asset, error) {
	bytes, err := golangDeleteAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete-all.tmpl", size: 523, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeleteWorldTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x90\xc1\x6a\xeb\x30\x10\x45\xd7\xd2\x57\xcc\x33\x3c\xb0\x69\x22\xba\x28\xdd\x65\x11\x4a\x76\xdd\x34\xfd\x80\xe0\x58\xe3\xa0\x56\x1d\x35\xa3\x71\xea\x22\xf4\xef\xc5\x72\x1d\xb2\xee\x42\x08\x84\xe6\x9c\xb9\x37\xa5\x35\x58\xec\x1d\x21\x54\xd1\x9d\xa8\x95\x81\xb1\x82\x75\xce\xda\xa2\x47\xc1\xad\xf7\x75\x27\x23\x74\x81\x04\x47\x31\x4f\xf3\xdd\x40\xdd\x85\x81\x04\x1c\xc9\xe3\xc3\x0a\x90\x79\x3a\x81\x1b\x3d\x21\x91\x6c\x61\xe8\x5b\xfe\x31\xd8\xef\x82\x4e\x5a\x5d\x5a\x86\xc3\x81\x31\x42\x3c\x7b\xb3\xc7\x38\x78\x59\x5e\x6f\xc0\x33\x80\x5b\x3a\x21\x98\xd7\x97\xe7\x08\x39\x6b\x55\x06\x67\xe7\x06\xc2\xf1\xcd\x58\x76\x17\x64\xb3\x1b\xb1\xab\x53\x82\x4f\x76\x24\x3d\x54\xff\xcf\x15\x18\xc8\xb9\xd1\xca\xf5\xe5\xfb\xbf\x0d\x90\xf3\x90\xb4\x52\x8c\x32\x30\xc1\xfd\xaa\x10\x3e\xda\x77\xdc\x31\xd7\xc8\xdc\x68\x95\xf5\x24\x29\x7b\x2c\x9a\xe2\x34\xfb\xf0\x15\xb7\x7d\x8f\x9d\xa0\xad\xff\x80\x55\x73\xb6\xbb\xcd\x12\xf3\xda\xd6\x54\xd6\x32\xfc\x2b\x26\xe7\x75\xd6\x29\x5d\xdb\xfc\x09\x00\x00\xff\xff\x2e\xc5\xd2\x56\xad\x01\x00\x00")

func golangDeleteWorldTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteWorldTmpl,
		"golang.delete-world.tmpl",
	)
}

func golangDeleteWorldTmpl() (*asset, error) {
	bytes, err := golangDeleteWorldTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete-world.tmpl", size: 429, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeleteTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x90\xc1\x6a\x33\x21\x14\x46\xd7\xfa\x14\xf7\x1f\xf8\x61\x02\x93\xa1\xeb\x42\x0a\x81\x66\xd7\x4d\x9b\x07\x18\xcc\x78\x1d\x6c\x1c\x4d\xaf\x4e\x9a\x72\xf1\xdd\xcb\x98\x90\x66\x53\x02\x5d\xb8\xfb\xce\x39\x2a\xf3\x12\x34\x1a\xeb\x11\xaa\x68\x07\xaf\xd2\x44\x58\xc1\x32\x67\xf9\x8c\x0e\x13\x76\xcc\xd0\x6e\x27\x63\xec\x09\x72\xae\x99\xa1\x4f\xa7\x83\x22\x35\x42\xbb\xa6\x21\x42\xce\x0b\xa8\xa5\xd0\x65\xad\x61\x17\x82\x6b\x00\x89\xe6\x13\x68\x21\xe7\x02\x7a\x5d\x94\xf2\x36\x67\xfd\x31\xec\xef\xb7\x14\x0d\x3f\xa5\xdf\x6d\xbb\xa0\xbf\x8a\x8b\xa5\xe8\x83\x8f\x09\xba\x2e\xa6\x31\xad\x98\xe1\x40\xd6\x27\x03\xd5\xff\x8f\x0a\xda\xed\xeb\x0b\xe4\x2c\x45\xd8\xbd\xb7\x2e\x0c\xdb\x34\xa6\xfa\x3c\x6d\x80\x19\x8c\x45\xa7\x8f\xca\x4d\x78\x53\x95\xa2\xeb\x08\xe3\xf9\x5d\x8f\x2b\x98\x59\x4d\xf6\x88\xd4\x6e\x4e\xd8\xdf\xe5\x85\x35\x05\xfd\xb7\x02\x6f\x1d\xb0\x14\x82\x30\x4d\xe4\xc1\x28\x17\xb1\x29\xc2\x51\xed\x71\x43\x54\x23\xd1\x42\x8a\x5c\xa2\x7d\x98\x7c\xba\x66\xcb\x25\xda\xb7\xf0\x19\xd7\xc6\x60\x9f\x50\xd7\x7f\x76\x5f\x36\x97\x04\x3c\xc1\x43\x33\xf3\x32\x4b\xe6\xeb\x0f\x7f\x07\x00\x00\xff\xff\x70\x1b\x46\xe7\x1e\x02\x00\x00")

func golangDeleteTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteTmpl,
		"golang.delete.tmpl",
	)
}

func golangDeleteTmpl() (*asset, error) {
	bytes, err := golangDeleteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete.tmpl", size: 542, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDialectPostgresTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x90\x4b\x6e\x84\x30\x10\x44\xd7\xf6\x29\x4a\x5e\x41\x04\x1e\x29\xd9\x25\x62\x85\x72\x81\xdc\x80\x4f\x33\x69\x05\x6c\xa6\x6d\xb2\xb1\x7c\xf7\x08\xe7\x2f\x79\x55\x55\xef\x59\xea\x94\x5a\xcc\xb4\xb0\x23\x18\xde\x76\x2f\xd1\x20\x67\xad\xcc\x95\xe3\xeb\x31\xda\xc9\x6f\x97\x95\xc7\xcb\x7e\x33\x3a\x25\x90\x9b\xd1\xe6\xac\xf5\x3f\x2e\xb4\x93\x77\x21\xca\xc0\x2e\xb6\x24\xe2\xa5\x48\x96\xc3\x4d\xa8\x78\xdb\x57\xa4\x04\xfb\x42\x13\xf1\x3b\x09\x72\xae\xc1\xa1\xff\x41\x9e\x4f\xa2\x22\x11\x14\xb6\x46\xa5\xd5\xaf\x10\x21\x0a\xbb\x6b\x03\xff\x86\xd1\xfb\xb5\x46\xd2\x8a\x17\x50\x49\x1e\xbb\x13\xb2\xd5\xdd\x7e\xb3\xc5\x53\x3f\x9d\x71\xd2\x4a\x95\x91\xed\xfd\x4c\xb6\x5f\x87\x10\xaa\x1a\x5d\x07\x73\xff\x60\x3e\x6b\x25\x14\x0f\x71\x65\xf3\xfd\x59\x83\x28\x07\x9d\x6d\xd6\xe7\xfb\x9a\x18\xd3\x60\x19\xd6\x40\x3a\xff\xbd\xc2\x47\x00\x00\x00\xff\xff\x28\x4c\xe9\xcf\x3d\x01\x00\x00")

func golangDialectPostgresTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDialectPostgresTmpl,
		"golang.dialect-postgres.tmpl",
	)
}

func golangDialectPostgresTmpl() (*asset, error) {
	bytes, err := golangDialectPostgresTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.dialect-postgres.tmpl", size: 317, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDialectSqlite3Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x91\x41\x4b\xc4\x30\x10\x85\xcf\xc9\xaf\x18\x73\x6a\x61\xdb\x45\xbc\xad\xf4\xb4\x78\x10\x3c\xa9\x37\xf1\xd0\x6d\xa7\x75\xb0\x49\xd6\x49\x2a\x42\xc8\x7f\x97\xa4\xeb\xb6\x42\x4f\xf3\xde\xf7\xf5\x41\x42\xa8\xa0\xc7\x81\x0c\x82\x22\x7d\xb6\xec\x15\xc4\x28\x85\x1a\xc9\x7f\xcc\xa7\xba\xb3\x7a\xaf\x5b\xef\xcd\x7e\xb4\x95\xfb\x9a\xc8\xe3\x9d\x92\x21\x00\x9a\x1e\xaa\x18\xa5\xfc\x67\x70\x55\x67\x8d\xf3\xdc\x92\xf1\x15\x32\x5b\xce\xba\x61\x36\x1d\x14\xa4\xcf\x13\x84\x00\xf5\x33\x76\x48\xdf\xc8\x10\x63\x09\xe4\x8e\x57\xe4\x21\x11\x05\x32\x43\x66\x4b\x28\xa4\x58\x85\xe0\x3c\x93\x19\x77\x60\x3f\xe1\x64\xed\x54\x42\x90\x82\x06\xc0\x7c\x39\x34\x09\xaa\x8b\xcb\xc8\x3a\xbb\xca\xfb\x14\x05\x29\x44\x2e\xd6\x47\xdb\x23\x34\x0d\x6c\x4a\xeb\xdf\x97\x9e\xd0\x6e\xfc\x93\x2d\x7b\xca\x7c\xee\xec\x64\x4d\x0a\x96\x15\xae\x7e\x6a\x9d\x7f\x34\x3d\xfe\x14\xda\x8d\x3b\x50\x07\xb5\x14\x69\x80\xa5\x7b\xd3\x40\x75\x7b\x91\x0a\x46\x3f\xb3\xb9\xc2\xaf\x4c\xfa\xe5\xdc\x76\x98\xe0\xb7\xdc\x3f\xbc\x97\x3b\xf0\x3c\x63\x06\xa2\xdc\x50\x4a\xad\x49\x94\xe9\xdb\x04\x43\x3b\x39\x94\x71\xfb\x28\xbf\x01\x00\x00\xff\xff\xf2\xcb\x38\xa5\xd6\x01\x00\x00")

func golangDialectSqlite3TmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDialectSqlite3Tmpl,
		"golang.dialect-sqlite3.tmpl",
	)
}

func golangDialectSqlite3Tmpl() (*asset, error) {
	bytes, err := golangDialectSqlite3TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.dialect-sqlite3.tmpl", size: 470, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x93\xcf\x8e\xd3\x30\x10\xc6\xcf\x9e\xa7\x18\x6e\x49\xb5\xf8\x84\xb8\xa0\x1e\xd8\x5d\x0e\x1c\x10\x52\x9b\x17\x48\x93\x69\xd7\xaa\xeb\x04\x77\xb2\x0c\xb2\xf2\xee\xc8\xf9\x5f\x9a\x05\x21\xb5\x8a\x3d\xf2\x7c\xdf\xcf\xfe\xec\x10\xd0\x1c\x51\xef\x9b\xba\xae\x3c\xef\x04\xdb\x16\xf8\x57\x4d\xb8\x13\xbc\xb2\x6f\x0a\xc6\x00\xaa\x3c\xe0\xe6\xf9\x11\x14\x0b\x6e\x32\x81\x16\xe0\xd8\xb8\x02\x13\x2f\xb8\xd9\x49\x8a\x27\xe2\x4c\x92\x82\x05\x8b\xca\x31\x09\xeb\xa7\xfe\x9b\x62\xd2\xf7\x3c\x20\x79\x1f\xff\x95\x4f\xa3\xa2\x39\xa2\x17\xcd\x82\xdb\x2d\x3a\x63\x63\x69\xaa\xf5\x6b\xb7\x71\x52\x1e\xf4\xf7\x9a\x5c\x94\x4e\x3f\x75\xe5\x77\xf3\x7a\xe5\x89\x1b\xef\xe2\xbc\x6b\x01\xa5\x5a\x88\xbf\xa1\x3e\x88\x39\x63\xef\x89\x9f\xaa\xcb\xc5\x70\x92\x62\xf2\x06\xd7\xc2\x67\xa2\x61\xd1\x63\x1f\x28\x35\xf0\x77\xfa\x0b\xd7\x08\x72\x67\xb7\xab\xac\x3d\xe4\xc5\xf9\xff\x0d\xe7\xce\x7f\x59\x86\x80\x3e\x77\x27\x42\xfd\x8d\xf8\xa5\x2a\xaf\x31\xcb\x5b\x8c\x10\x50\xef\xcd\xc9\xe5\xdc\x78\xc2\xb6\x8d\x6e\xaf\xb9\xc7\x21\xd7\x08\x73\x73\xfc\x53\xae\xf7\x87\x3f\x58\x2f\x31\x58\x74\x34\xf8\xea\x5e\xab\x73\x54\xef\x99\xc8\x95\x71\x3c\x8f\xfa\xfb\x35\x32\x1a\xc7\xe4\x8f\x79\x41\x18\x20\x84\xf7\x2b\x5b\x50\x7f\x52\x2f\xb4\x46\xb5\x4c\xd6\xf4\xd4\x50\x04\x50\x53\xde\xdd\xc9\x83\x5a\x04\xd2\x57\x46\x25\x5e\x57\x9a\x0c\x00\x54\x49\x96\x98\x3e\x5b\xfb\xc6\x8d\x37\x8e\x3f\x7e\x78\x18\x32\x06\x75\xc9\xcf\xf4\xc5\xfb\x65\xee\xb7\x96\xcf\x8f\xab\x96\xfb\xe2\x85\x2e\x79\x92\xc6\x77\x68\xdc\x69\xde\xcd\xd8\x57\x1e\x56\xfb\x26\x39\x00\xf5\xd3\xe7\x75\x26\xdd\x1b\xbc\xfe\xb0\x3a\x93\x74\xde\xe0\x5f\xc9\x7e\x07\x00\x00\xff\xff\x0d\x56\x59\xce\x18\x04\x00\x00")

func golangFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangFooterTmpl,
		"golang.footer.tmpl",
	)
}

func golangFooterTmpl() (*asset, error) {
	bytes, err := golangFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.footer.tmpl", size: 1048, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\xc1\x6a\xdc\x30\x10\x86\xcf\xd2\x53\x4c\x0d\x05\x19\x36\x7e\x80\x14\x1f\x42\xe9\xad\x14\xd2\x7d\x00\xa3\x58\x23\xa3\x46\x96\xdc\xb1\xbc\xbb\x61\xd0\xbb\x17\x59\xc9\x36\x87\xb6\x4b\x0f\x3e\x58\xfc\xfa\xbf\xff\x1f\x0d\xf3\x1d\x18\xb4\x2e\x20\x34\xab\x9b\x82\x4e\x1b\x61\x03\x77\x39\xcb\x07\xef\x07\x66\xe8\x8e\x9b\xb5\xee\x02\x39\x2b\x66\x18\xd3\x65\xd1\xa4\x67\xe8\x1e\x68\x5a\x21\xe7\x16\x94\x14\x14\xcf\x2b\x30\xc3\xea\xdd\x88\xd1\x42\xf7\x3d\x9e\x21\xe7\x03\x20\x51\xf9\x22\xb5\xb2\x90\x30\x98\xdd\x5a\xbe\xc7\xba\x70\x8a\xcf\x37\x98\x9a\xa6\xdf\xc4\xbf\x5b\x3d\x45\xf3\xd2\x40\xce\x2c\xc5\x18\xc3\x9a\x60\x18\xd6\x34\xa7\x9e\x19\x16\x72\x21\x59\x68\x3e\xfe\x6c\xa0\x3b\x3e\x7e\x85\x9c\xa5\x88\x4f\x3f\x3a\x1f\xa7\x63\x9a\x93\xaa\xd2\x43\xa9\x61\x1d\x7a\x73\xd2\x7e\xc3\x77\x50\x29\x86\xa1\xf4\xac\xa5\xee\x7b\x28\x97\x0d\xb9\x13\x52\xf7\xb8\x21\xbd\xfc\xcb\xa1\x18\x08\x67\xf7\xab\x1f\x7a\x08\xce\x03\x4b\x21\x08\xd3\x46\xa1\xfc\x1e\x76\xbb\x59\x3f\xe3\x17\x22\x85\x44\xad\x14\x59\x0a\x83\x16\x09\x2a\xb8\xfb\xec\xe3\x8a\xaa\x24\xb1\xf1\x7a\xf8\x0d\x2f\x49\xb5\xbb\x1b\x33\xb8\xe0\x52\xc0\xf3\xdb\x03\x48\x21\x0a\xb1\x7f\x13\x1f\x47\x1d\xca\x44\xb5\x31\x14\x2d\x28\xeb\x75\x4a\x18\x76\x79\xbb\xb7\x14\x7f\x48\x79\x23\x66\xc9\x59\x37\xa0\x07\xbd\x2c\x18\x8c\xaa\x73\x2a\xa0\xf2\x6e\x35\x4b\x2d\xf4\xea\x7e\x7f\x8d\x54\x7c\xda\x4f\xff\x3d\x98\x57\x41\x05\x05\xe7\x65\x96\xcc\xd7\xa5\xf8\x15\x00\x00\xff\xff\x78\xef\x2b\x02\xd6\x02\x00\x00")

func golangGetAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetAllTmpl,
		"golang.get-all.tmpl",
	)
}

func golangGetAllTmpl() (*asset, error) {
	bytes, err := golangGetAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-all.tmpl", size: 726, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetCountTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x90\xb1\x4e\xc3\x30\x10\x86\x67\xdf\x53\x1c\x91\x40\x89\x94\x46\x0c\x88\xad\x03\x42\x6c\x2c\x25\x0f\x50\xb9\xcd\x25\x32\x4d\xec\x72\x71\x42\xab\xd3\xbd\x3b\x72\x10\xd0\x05\x75\xf0\xe4\xff\xff\x3e\xfb\x17\x59\x61\x43\xad\xf3\x84\xd9\xe8\x3a\x6f\xe3\xc4\x94\xe1\x4a\x15\x9e\xc3\xe4\xe3\x56\x04\xab\x7a\x6a\x5b\x77\x42\xd5\x5c\x04\xf7\xf1\x74\xb4\x6c\x07\xac\x9e\xb8\x1b\x51\xb5\xc0\x1c\xcc\x3e\x85\xd1\xf9\xf8\xf8\x50\x22\x31\xa7\x13\xb8\x80\xc4\x27\xdf\x2c\x40\xb8\x94\x39\x3f\x87\xc3\x55\x93\xe5\xee\xcf\xf3\x3f\x6c\x17\x9a\x73\x86\xaa\x92\x1e\xe2\xc7\x88\xdb\xed\x18\x87\xb8\x16\xc1\x23\x3b\x1f\x5b\xcc\x6e\x3f\x32\xac\xea\xcd\x2b\xaa\x82\x09\xbb\xf7\xaa\x0f\x5d\x1d\x87\x98\x7f\x47\x4b\x14\xc1\xd6\x51\xdf\xcc\xb6\x9f\xe8\x42\x0a\x26\x7d\x67\x8d\xa9\xd3\xb0\x9b\x89\xab\xcd\x44\x7c\x7e\x0b\x9f\xd7\xba\x55\xbd\xb7\x3e\xbf\x5b\xb6\x29\xc0\xb8\x76\x59\xe6\x66\x8d\xde\xf5\x28\x60\x0c\x53\x9c\xd8\xe3\x7d\xb9\xd0\x07\x7b\xa0\x17\xe6\x9c\x98\x0b\x30\x0a\xf0\x73\xbf\x00\xca\xd4\x02\x05\x91\xdf\x0d\xbe\x02\x00\x00\xff\xff\x7d\x78\x86\x22\xbd\x01\x00\x00")

func golangGetCountTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetCountTmpl,
		"golang.get-count.tmpl",
	)
}

func golangGetCountTmpl() (*asset, error) {
	bytes, err := golangGetCountTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-count.tmpl", size: 445, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetFirstTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\xcf\x8a\xdb\x30\x10\x87\xcf\xd2\x53\x4c\x0c\x05\x1b\x12\x3f\x40\x8a\x0f\xa5\xb4\xa7\x52\x48\xfd\x00\x46\x89\x46\x46\x8d\x2d\xed\x8e\xe5\xfc\x41\xe8\xdd\x97\x71\xe2\x6c\x76\x61\x37\xb0\x07\x1f\x3c\xcc\x7c\xdf\xcf\x9e\x89\x71\x05\x1a\x8d\x75\x08\xd9\x60\x5b\xa7\xc2\x48\x98\xc1\x2a\x25\xf9\xdb\xd2\x10\x9a\x18\xa1\xac\x47\x63\xec\x09\x52\xca\x63\x84\x5d\x38\x3d\x29\x52\x3d\x94\x3f\xa8\x1d\x20\xa5\x02\x72\x29\x62\x84\x6b\xf5\x9f\x3f\x42\x4a\x4b\x40\x22\x7e\x3c\x15\x92\x25\xe8\xf4\x44\x95\xf7\x46\xeb\x0e\x7e\xff\x50\xa7\xa8\x7d\x95\x7d\x0c\xdb\x7a\x7d\xce\x20\xa5\x28\xc5\xce\xbb\x21\x40\xd3\x0c\xa1\x0f\x15\x47\x23\xeb\x82\x81\xec\xdb\x73\x06\x65\xbd\xf9\x03\x29\x49\xe1\xb7\xff\xcb\xce\xb7\x75\xe8\x43\x7e\x69\x5d\x42\x8c\x60\x2c\x76\xfa\xa0\xba\x11\xef\xa4\x52\x34\x0d\xf9\xe3\x70\xf9\xac\x75\x05\x3c\xac\xc9\x1e\x90\xca\xcd\x88\x74\xfe\x8c\xc0\x00\x61\xcd\x34\xba\xa8\xc0\xd9\x0e\xa2\x14\x82\x30\x8c\xe4\xf8\x75\x39\xe1\x7a\xb5\xc7\x5f\x44\x39\x12\x15\x52\x24\x29\x34\x1a\x24\xb8\x88\xcb\x9f\x9d\x1f\x30\xe7\x24\xd6\xc0\xe2\x5a\xfc\x8b\xa7\x90\x17\x13\xed\xca\x5f\x57\xf3\x00\xa3\x8a\xef\xef\xa5\x0f\xac\xac\x7d\xd3\xe2\x6c\xc7\x59\xa6\x05\x5b\x67\xc3\xbc\x5f\x29\x18\x7c\x93\xd5\x3b\xe5\x78\x5b\x4a\x6b\xf2\x06\x72\xd3\xa9\x10\xd0\x4d\xdd\x05\x7c\xf1\x07\xc8\xb9\x83\xc1\x7c\x03\xf3\x69\x71\xa8\x24\x63\xbc\xdd\xc1\x4b\x00\x00\x00\xff\xff\xae\x35\x31\x4c\xc6\x02\x00\x00")

func golangGetFirstTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetFirstTmpl,
		"golang.get-first.tmpl",
	)
}

func golangGetFirstTmpl() (*asset, error) {
	bytes, err := golangGetFirstTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-first.tmpl", size: 710, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetHasTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x90\x31\x6e\xf3\x30\x0c\x85\x67\xf1\x14\xfc\x0d\xfc\x85\x0d\x38\xbe\x41\x86\x0e\x05\x3a\x74\x49\x7d\x80\x40\x89\x29\x47\x8d\x2d\xa5\x94\x9c\x26\x20\x78\xf7\xc2\x2e\xda\x66\x29\x32\x70\x7b\xef\xfb\xc0\x27\xb2\xc2\x8e\x9c\x0f\x84\x45\xf2\x7d\xb0\x79\x62\x2a\x70\xa5\x0a\xcf\x36\x6d\x45\xb0\x69\x27\xe7\xfc\x05\x55\x4b\x11\xdc\xe7\xcb\xc9\xb2\x1d\xb1\x79\xe4\x3e\xa1\x6a\x85\x25\x98\x83\x4d\xb8\x8b\x71\xa8\x91\x98\xe7\x8b\x5c\xc1\x8c\xa6\xd0\x2d\x2c\xb8\xf5\xf8\x70\x8e\xc7\x3b\x12\xcb\xfd\xaf\xe2\x6f\xd4\x2e\x76\xd7\x02\x55\x05\xcc\x3e\x86\x94\x71\xbb\x4d\x79\xcc\x6b\x11\x3c\xb1\x0f\xd9\x61\xf1\xff\xbd\xc0\xa6\xdd\xbc\xa0\x2a\x98\xb8\x7b\x6b\x86\xd8\xb7\x79\xcc\xe5\x57\xb4\x46\x11\x74\x9e\x86\xee\x6c\x87\x89\x6e\xa4\x60\xe6\x67\xd6\x38\x77\x3a\xf6\x67\xe2\x66\x33\x11\x5f\x5f\xe3\xc7\xbd\x6e\xd3\xee\x6d\x28\x1f\x0e\x36\x55\x60\xbc\x5b\x56\xf9\xb7\xc6\xe0\x07\x14\x30\x86\x29\x4f\x1c\xd0\xd9\x21\x51\xbd\xf0\x47\x7b\xa4\x27\xe6\x92\x98\x2b\x30\x0a\xdf\x91\x83\x4d\xf5\x5c\x03\x05\x91\x9f\x09\x3e\x03\x00\x00\xff\xff\x9c\xa8\x8c\x1b\xb5\x01\x00\x00")

func golangGetHasTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetHasTmpl,
		"golang.get-has.tmpl",
	)
}

func golangGetHasTmpl() (*asset, error) {
	bytes, err := golangGetHasTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-has.tmpl", size: 437, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetLastTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x90\xb1\x6e\xc2\x30\x10\x86\x67\xdf\x53\x5c\x23\x55\x4a\x24\xf0\x54\x75\x63\xaa\xba\xb1\x00\xdd\x91\x49\x2e\x91\x4b\x62\xa7\x97\xa3\x85\x9e\xfc\xee\x55\x12\x51\x85\xc1\xf2\xf2\xff\xf7\x7d\x77\xaa\x6b\xac\xa8\xf6\x81\x30\x1b\x7c\x13\x9c\x5c\x98\x32\x5c\xa7\x04\x0d\xc9\xd6\x0d\xa2\x8a\x76\x4f\x72\xe1\x60\x3f\x6e\x3d\x61\x4a\x79\x29\x57\x2c\x63\x10\xba\x8a\x7d\x9b\xff\x15\x98\xfe\x8c\x3e\xc8\xeb\x4b\x81\x39\x18\x55\xec\x1d\xbb\xee\xde\xc5\x94\x56\x48\xcc\xe3\x8b\x5c\xc0\xc8\xa5\x50\x4d\x20\x58\x4a\x9c\x62\x75\x9b\xf8\x0a\xa6\x8c\x61\x10\x3c\x1e\x07\xe9\x64\x33\x4e\x64\x1f\xa4\xc6\xec\xf9\x2b\x43\x7b\xd8\x6d\x31\x25\x30\xf1\xf4\x69\xdb\xd8\x1c\xa4\x93\x7c\x8e\xae\xb0\x3f\x17\x30\x39\xf8\xe0\x65\xa1\x00\x66\x54\xd8\xe0\xd8\xa9\xd8\x7f\x13\xdb\xdd\x85\xf8\xb6\x8f\x3f\xcb\xae\x3d\x94\x2e\xe4\xaa\xe8\xaa\x8a\x63\x8d\x79\xdd\x3a\x11\x0a\xf7\x49\x05\xa6\x54\x80\xf1\xf5\xb4\xd1\xd3\x06\x83\x6f\x51\xc1\x18\x9e\x41\xaa\xf8\x4b\x1c\x1f\x76\x1f\x91\x9d\x3b\xd3\x3b\x73\x4e\xcc\x05\x98\x04\x8b\xbc\xe3\xe6\x21\x1e\x7c\x0b\x09\x54\xff\x8f\xf4\x17\x00\x00\xff\xff\x91\x64\x56\x53\xa9\x01\x00\x00")

func golangGetLastTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetLastTmpl,
		"golang.get-last.tmpl",
	)
}

func golangGetLastTmpl() (*asset, error) {
	bytes, err := golangGetLastTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-last.tmpl", size: 425, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetLimitoffsetTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\xcf\x6a\xdc\x30\x10\xc6\xcf\xd2\x53\x4c\x0d\x05\x1b\x1c\x9f\x4a\x0f\x29\x3e\x94\xd2\x5b\x28\xa4\xfb\x00\x46\xb1\x46\x8b\x1a\x59\xda\x8e\xe4\xdd\x0d\xea\xbc\x7b\x91\x95\x5d\x42\x28\xb4\xcd\x41\x20\x89\x8f\xef\xfb\xcd\x9f\x9c\x6f\x40\xa3\xb1\x1e\xa1\x89\x76\xef\x55\x5a\x09\x1b\xb8\x61\x96\x77\x76\xb1\x09\xf5\x94\x33\x0c\xbb\xd5\x18\x7b\x06\xe6\x36\x67\x98\xd3\xf9\xa0\x48\x2d\x30\x7c\xa6\x7d\x64\xee\xa5\x70\x45\x0b\xd6\xa7\x1e\x82\x31\x11\xb7\xfb\xc7\x0f\x1d\xb4\x52\x50\x38\x45\xc8\x19\xa2\xb3\x33\x06\x03\xc3\xf7\x70\x02\xe6\x1e\x90\xa8\x9c\x40\x9d\x2c\x18\xe8\xf5\x96\x2b\xe5\x4b\x28\xeb\x8f\xe1\xf1\x1f\x88\x14\xed\xaf\x3c\xb0\xe1\x5c\x50\x5e\xb9\xbf\x34\x7f\x08\xfa\xa9\x01\xe6\x2c\xc5\x1c\x7c\x4c\x30\x4d\x31\x2d\x69\xcc\x19\x0e\x64\x7d\x32\xd0\xbc\xff\xd9\xc0\xb0\xbb\xbf\x03\x66\x29\xc2\xc3\x8f\xc1\x85\xfd\x2e\x2d\xa9\xad\xd2\xbe\x54\x66\x2c\x3a\x7d\x54\x6e\xc5\x8a\x00\xbf\x60\x0e\xcb\xa2\x80\xf9\x15\x89\x14\xd3\x54\xfa\x51\x8b\xbf\x1d\xa1\x38\x6a\xb2\x47\xa4\xe1\x7e\x45\x7a\x7a\x9b\xad\xb0\x66\x33\x7c\x37\x82\xb7\x0e\xb2\x14\x82\x30\xad\xe4\xcb\xb3\xdf\x42\x16\xf5\x88\x5f\x89\x5a\x24\xea\xa4\x60\x29\x34\x1a\x24\xa8\x38\xc3\x17\x17\x22\xb6\x85\xcf\x84\xeb\xe7\x37\x3c\xa7\xb6\xdb\xdc\x72\x06\xeb\x6d\xf2\x78\xba\x8c\x4f\x0a\x51\x12\xc7\x8b\x78\x37\x2b\x5f\x46\xa1\xb4\xa6\x60\xa0\x35\x4e\xa5\x84\x7e\x93\x77\xc0\xdc\x49\xf1\x07\xca\xbf\x60\x16\xce\xba\x3f\x23\xa8\xc3\x01\xbd\x6e\x6b\xf7\x4a\x50\x19\x78\x65\xa9\x05\x3d\xbb\xdf\x5e\x91\x8a\x4f\xf7\xe9\xbf\x1b\xf3\x2c\xa8\x41\xde\x3a\xc9\x32\xe7\xeb\xfe\xfc\x0e\x00\x00\xff\xff\xa3\xdc\xd6\x6a\x31\x03\x00\x00")

func golangGetLimitoffsetTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetLimitoffsetTmpl,
		"golang.get-limitoffset.tmpl",
	)
}

func golangGetLimitoffsetTmpl() (*asset, error) {
	bytes, err := golangGetLimitoffsetTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-limitoffset.tmpl", size: 817, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetOneAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x93\xcd\x6a\xdc\x30\x10\x80\xcf\xd2\x53\x4c\x0c\x05\x19\x36\x7e\x80\x94\x3d\x94\x52\x7a\x69\x03\xc9\x3e\x80\x51\x56\x23\xa3\x46\x96\x9a\x91\xbc\x3f\x08\xbd\x7b\x91\xd6\x4e\xb6\x5d\xda\x2d\x39\xf8\x60\x79\xe6\xfb\x66\x34\xe3\x94\x6e\x41\xa1\x36\x0e\xa1\x09\x66\x70\x32\x4e\x84\x0d\xdc\xe6\xcc\xbf\x62\xec\x53\x82\x6e\x33\x69\x6d\x0e\x90\xb3\x48\x09\xb6\xf1\xf0\x53\x92\x1c\xa1\xfb\x44\x43\x80\x9c\x5b\x10\x9c\xa5\x04\xf3\xe9\xa3\xdf\x43\xce\x2b\x40\xa2\xf2\x78\x6a\x79\x51\xa0\x53\x95\xc9\xcf\x7d\xc6\xed\xfc\xf3\x15\x99\xa4\xe1\x4d\xf5\x77\xd4\x93\x57\xc7\x06\x72\x4e\x9c\x6d\xbd\x0b\x11\xfa\x3e\xc4\x31\xae\x4b\x61\x64\x5c\xd4\xd0\x7c\x78\x69\xa0\xdb\x3c\x7c\x83\x9c\x39\xf3\x4f\x3f\x3a\xeb\x87\x4d\x1c\xa3\x38\x85\xae\x20\x25\xd0\x06\xad\xda\x49\x3b\xe1\x99\x94\xb3\xbe\x27\xbf\x0f\xa7\xa6\xee\xd6\x50\x92\x15\x99\x1d\x52\xf7\x30\x21\x1d\xff\x45\x28\x00\x66\x74\x4d\xbd\x59\x83\x33\x16\x12\x67\x8c\x30\x4e\xe4\xca\xeb\xaa\xe2\x46\xf9\x8c\x5f\x88\x04\x12\xb5\x9c\x65\xce\x14\x6a\x24\x38\x89\xbb\xcf\xd6\x07\x14\xa5\x12\xa3\xe1\x66\x3e\xbc\xc7\x43\x14\x6d\xa5\xcd\xfc\xbb\xf5\x92\x50\x50\xed\xc7\x3f\xa5\x57\xac\x45\xfb\x5b\xc8\xf2\x39\xbc\xd8\x42\xbc\xf7\x8f\x7e\x1f\x6a\x79\x75\xe2\xc6\x99\xb8\x0c\x9c\xb3\xe2\x7a\xf5\x6f\xb6\xd2\x95\x01\x4a\xa5\xc8\x6b\x10\xda\xca\x18\xd1\xd5\xe8\x16\xde\x79\x27\x35\xe7\xb2\xf9\xf3\xb4\xe8\xfd\x77\xe9\x8e\xa5\x4e\x71\x31\xfa\x65\xb3\xde\x60\xff\x73\x69\xd7\xab\x9a\x23\x4a\xbb\x65\x59\x97\x3f\xc0\x19\xcb\x33\x4f\xe9\x75\x61\x7f\x05\x00\x00\xff\xff\x1b\x5b\x25\x4f\x6b\x03\x00\x00")

func golangGetOneAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetOneAllTmpl,
		"golang.get-one-all.tmpl",
	)
}

func golangGetOneAllTmpl() (*asset, error) {
	bytes, err := golangGetOneAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-one-all.tmpl", size: 875, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetOneTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x90\xbd\x6e\xeb\x30\x0c\x85\x67\xe9\x29\x78\x0d\x5c\xc0\x06\x12\xbf\x41\x86\x0e\x45\x97\x2e\x89\x1f\x20\x50\x62\xca\x50\x63\x4b\x2d\x4d\xe7\xa7\x04\xdf\xbd\x90\xdb\x34\x59\x8a\x0c\x5a\x84\x83\xef\xe3\x39\x22\x4b\x68\xd1\x87\x88\x50\x8c\xa1\x8b\x8e\x27\xc2\x02\x96\xaa\xf6\x05\x79\x2b\x02\x75\x33\x79\x1f\xce\xa0\x5a\x8a\xc0\x9e\xcf\xef\x8e\xdc\x00\xf5\x13\x75\x23\xa8\x56\x50\x5a\x23\x02\x3f\xbf\x9b\x74\x02\xd5\x05\x20\x51\x7e\x89\x2a\x9b\x15\x18\xdb\x99\x69\xef\x7d\x21\x1e\xd3\xe1\x81\xcc\x51\x77\x53\xfd\x8d\xda\xa5\xf6\x52\x80\xaa\x58\xb3\x4f\x71\x64\xd8\x6e\x47\x1e\x78\x95\x0f\xa3\x10\xd9\x43\xf1\xff\xa3\x80\xba\x59\xbf\x82\xaa\x35\x69\xf7\x56\xf7\xa9\x6b\x78\xe0\xf2\x3b\xba\x00\x11\xf0\x01\xfb\xf6\xe8\xfa\x09\xef\xa4\x73\xbd\x10\x03\x5f\xdb\x59\x93\xdb\xad\x20\x43\x5a\x0a\x47\xa4\x7a\x3d\x21\x5d\x36\xe9\xf4\x08\x56\x37\x7b\x17\x73\x35\xd7\xb6\x94\x3c\x94\xbe\x77\xcc\x18\x67\x74\x35\xeb\x4c\xf0\xf3\x7a\xff\x56\x10\x43\x0f\x62\x8d\x21\xe4\x89\x62\x66\x7e\x22\xa5\xdb\xc8\xf9\x80\xc1\x1d\xf0\x99\xa8\x44\xa2\xca\x1a\xb5\x77\xe1\x79\xbb\x6b\x36\x86\xde\xaa\x15\xf9\xdd\xef\x2b\x00\x00\xff\xff\xb2\x00\x7a\x8c\xfa\x01\x00\x00")

func golangGetOneTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetOneTmpl,
		"golang.get-one.tmpl",
	)
}

func golangGetOneTmpl() (*asset, error) {
	bytes, err := golangGetOneTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-one.tmpl", size: 506, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetPagedTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x93\xdf\x8a\xdb\x3c\x10\xc5\xaf\xa5\xa7\x98\x4f\xf0\x81\x0d\x5e\xb3\xd7\x5b\x5c\x28\xa5\x77\x4b\xd9\x6d\x1e\x20\x68\xed\x91\x51\x63\x4b\xe9\x48\x4e\xb2\xa8\x7a\xf7\x22\xc9\xf9\x53\x5a\xda\xa5\x17\x81\xc4\x39\x9a\xf3\x3b\xc7\xa3\x10\xee\x60\x40\xa5\x0d\x82\x70\x7a\x34\xd2\x2f\x84\x02\xee\x62\xe4\x4f\x72\xc4\x61\x1b\x02\xb4\x9b\x45\x29\x7d\x82\x18\xab\x10\xa0\xf7\xa7\xbd\x24\x39\x43\xfb\x81\x46\x07\x31\x36\x9c\x4d\x7a\xd6\x1e\xb4\xf1\x0d\xf4\xde\xee\xd0\x80\xf3\xa4\xcd\x58\x43\xc5\x19\xd9\xa3\x83\x10\xc0\x4d\xba\x47\xab\xa0\xfd\x62\x8f\xe9\xd8\x2a\xb5\x8b\x5f\xd5\x0d\x20\x51\xfa\x58\xaa\x79\x02\x43\x33\x64\x12\x7e\x4b\xa9\xcd\xc1\xee\xfe\x8a\x28\x69\xbc\x02\x42\xe6\x3b\x1b\xfe\x61\xf6\x8b\x1d\x5e\x05\xc4\x18\x38\xd3\xea\x1c\xa5\xeb\x40\x08\x08\x9c\xb1\xf3\x03\x10\xf7\x82\xb3\xc8\x39\xeb\xad\x71\x1e\xb6\x5b\xe7\x67\xdf\x85\x00\x7b\xd2\xc6\x2b\x10\xff\x7f\x13\xd0\x6e\x9e\x1f\x21\x46\xce\xec\xcb\xd7\x76\xb2\xe3\xc6\xcf\xbe\x2a\xd2\x26\xf5\xa1\x34\x4e\xc3\x41\x4e\x0b\xae\xa4\xdf\xa1\xb7\xf3\x2c\x21\xc6\x62\xb4\x72\xd7\x9c\xb3\xed\x36\xb5\x58\x0a\x7a\xe8\x20\x4d\x1c\x48\x1f\x90\xda\xe7\x05\xe9\xf5\x2d\x63\x7f\x99\x9a\x22\xa6\x79\xff\x75\x60\xf4\x94\x03\x12\xfa\x85\x4c\xfa\xd9\x80\x10\x4d\xf6\x99\xe5\x0e\x3f\x11\x55\x48\x54\xa7\xd0\x6c\x40\x85\x04\x85\xa8\xfd\x38\x59\x87\x55\x42\x0c\x01\xb4\xd1\xde\xe0\x11\xda\x47\xe9\xfc\xd3\x2e\x87\x57\xf6\xa2\xfd\x8c\x27\x5f\xd5\xd9\xe8\x56\x5c\xd6\x81\x33\x96\x60\xba\xb3\x78\xd3\x4b\x93\xde\xa5\x1c\x06\xb2\x0a\x2a\x35\x49\xef\xd1\x64\x79\x7d\x53\xd5\x55\x72\x75\xad\x39\xfb\x4d\xb8\x37\xa4\x4b\xf1\xca\xbe\x76\x20\xf7\x7b\x34\x43\x55\x7a\x4f\x2e\x69\xa3\x0a\x6b\xe9\x61\x75\x78\xb8\x20\xa7\x39\xf5\xbb\x7f\xe9\x34\x0f\x2b\x97\xe8\x3d\xdc\xe7\x63\xe9\x01\x9a\x6c\x5f\xa7\x15\x2c\xff\xe6\x1c\xd7\x7b\xd3\x81\x9a\x7d\xbb\xc9\x5b\x57\x9d\x19\x7f\xaa\x21\x72\x16\x01\x27\x87\x37\x0b\x5c\x4e\x96\xef\xc5\x7d\x65\x2c\x59\x2f\xa2\x26\x41\xf3\xc8\x43\xb8\xdc\x96\x1f\x01\x00\x00\xff\xff\x54\x24\xc3\xea\x2f\x04\x00\x00")

func golangGetPagedTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetPagedTmpl,
		"golang.get-paged.tmpl",
	)
}

func golangGetPagedTmpl() (*asset, error) {
	bytes, err := golangGetPagedTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-paged.tmpl", size: 1071, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetScalarAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\x4b\xca\xdb\x30\x10\x80\xd7\xd2\x29\x26\x86\x82\x0c\x89\x0f\x90\xe2\x45\x29\xed\xaa\x2d\x24\x3e\x80\x51\xa2\x91\x51\x63\x4b\xed\x58\xce\x03\xa1\xbb\x17\x39\x76\x92\x36\xb4\x29\xff\xc2\x0b\x8b\x99\xef\x9b\x57\x08\x2b\x50\xa8\x8d\x45\xc8\x7a\xd3\x58\xe9\x07\xc2\x0c\x56\x31\xf2\xcf\xc6\xaa\x3a\x04\x28\xaa\x41\x6b\x73\x86\x18\x45\x08\xb0\xf7\xe7\x1f\x92\x64\x07\xc5\x07\x6a\x7a\x88\x31\x07\xc1\x59\x08\x30\xbd\x6e\xdd\x09\x62\x5c\x02\x12\xa5\xcf\x51\xce\x93\x03\xad\x1a\xa1\xfc\x51\x68\xec\xd1\x1d\x5e\xd9\x24\x35\x77\xd7\xdf\x59\x3b\xa7\x2e\x19\xc4\x18\x38\xdb\x3b\xdb\x7b\xa8\xeb\xde\x77\xbe\x4c\x95\x91\xb1\x5e\x43\xf6\xee\x67\x06\x45\xb5\xf9\x02\x31\x72\xe6\x76\xdf\x8b\xd6\x35\x95\xef\xbc\xb8\x86\x2e\x21\x04\xd0\x06\x5b\x75\x94\xed\x80\x0f\x52\xce\xea\x9a\xdc\xa9\xbf\x76\xb5\x2e\x21\x25\x2b\x32\x47\xa4\x62\x33\x20\x5d\xfe\x45\x48\x00\x66\xf4\x98\xba\x28\xc1\x9a\x16\x02\x67\x8c\xd0\x0f\x64\xd3\xef\x72\xc4\x75\xf2\x80\x9f\x88\x04\x12\xe5\x9c\x45\xce\x14\x6a\x24\xb8\x8a\x8b\x8f\xad\xeb\x51\xa4\x4a\x8c\x86\xc5\xf4\xf8\x0d\xcf\x5e\xe4\x23\x6d\xe2\xaf\xcb\x39\x21\xa1\xf2\xf7\x7f\x4a\x5f\x58\x93\xf6\xb7\x10\x6b\xda\x54\xcb\xb8\x5f\x63\x8d\x9f\xd7\xcb\x59\x02\xdf\x64\xd5\x5e\xda\xb4\x2d\xa9\x14\x39\x0d\x42\xb7\xd2\x7b\xb4\x63\x74\x0e\x6f\x1c\xc0\x98\xf3\xdc\xe9\x63\x9a\x77\xee\xab\xb4\x97\xad\x3b\xf5\xe2\x69\xcf\xf3\x19\xdd\x61\xff\x33\xa1\xd7\x55\x4d\x11\xa9\xdd\x74\x99\xf3\xbd\xa7\x51\x45\x1e\xc2\xed\x3a\x7f\x05\x00\x00\xff\xff\x7f\x0d\x6c\x81\x5a\x03\x00\x00")

func golangGetScalarAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetScalarAllTmpl,
		"golang.get-scalar-all.tmpl",
	)
}

func golangGetScalarAllTmpl() (*asset, error) {
	bytes, err := golangGetScalarAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-scalar-all.tmpl", size: 858, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetScalarTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x90\x4d\x6e\xe3\x30\x0c\x85\xd7\xd2\x29\x38\x06\x06\xb0\x81\xc4\x37\xf0\x62\x16\x99\xd5\x60\x80\xc4\x07\x08\x94\x88\x32\xd4\xd8\x52\x43\xcb\xf9\x29\xc1\xbb\x17\x72\xdb\x24\x9b\x36\x0b\x6d\x04\xf2\xfb\xf8\x1e\xf3\x12\x2c\x3a\x1f\x10\x8a\xd1\x77\xc1\xa4\x89\xb0\x80\xa5\x88\xfe\xeb\x83\xdd\x32\x43\xdd\x4e\xce\xf9\x0b\x88\x94\xcc\xb0\x4f\x97\x57\x43\x66\x80\xfa\x0f\x75\x23\x88\x54\x50\x6a\xc5\x0c\x9f\xbf\x9b\x78\x06\x91\x05\x20\x51\x7e\x91\x2a\x9d\x1d\x18\xec\x0c\xd5\x8f\x42\x1f\x4e\xf1\xf0\xcc\x66\xa8\xbb\xbb\xbe\x67\xed\xa2\xbd\x16\x20\xc2\x5a\xed\x63\x18\x13\x6c\xb7\x63\x1a\x52\x93\x2f\x23\x1f\x92\x83\xe2\xf7\xb1\x80\xba\x5d\xff\x03\x11\xad\xe2\xee\xa5\xee\x63\xd7\xa6\x21\x95\x1f\xa3\x0b\x60\x06\xe7\xb1\xb7\x27\xd3\x4f\xf8\x20\x9d\xf3\xf9\xe0\xd3\x57\x3c\xad\x72\xbc\x06\x32\xc4\x92\x3f\x21\xd5\xeb\x09\xe9\xba\x89\xe7\x67\xb0\xba\xdd\x9b\x90\xa3\x19\x6b\x29\x3a\x28\x5d\x6f\x52\xc2\x30\xa3\xab\x59\xa7\xbc\x9b\xeb\x6b\x1a\x18\x8f\x7d\xbd\x22\xfa\x1f\x37\xf1\x3c\x02\x6b\xa5\x08\xd3\x44\x21\xd3\xdf\x90\xe2\xbd\xef\xe0\x7b\xad\xe4\xb6\xfb\xab\xc9\x3f\x3f\x6e\xe4\xe3\x07\x73\xc0\x15\x51\x89\x44\xd5\xbc\x7e\x1f\x9e\x7b\x7f\xa4\x8b\x66\xbe\x75\xff\x1e\x00\x00\xff\xff\x6b\x1e\x5d\xcc\x38\x02\x00\x00")

func golangGetScalarTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetScalarTmpl,
		"golang.get-scalar.tmpl",
	)
}

func golangGetScalarTmpl() (*asset, error) {
	bytes, err := golangGetScalarTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-scalar.tmpl", size: 568, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x58\x6f\x6f\xdb\x38\xd2\x7f\x2d\x7d\x8a\xa9\x9e\xb6\x90\x02\x57\xd9\x07\x3d\x1c\x70\x5a\xe4\x80\x26\x4e\x0f\xc1\xa5\x4e\x36\x71\x76\x71\xe8\x16\x5e\x5a\xa2\x5c\x6d\x64\xd2\xa1\x28\x5b\x81\x4e\xdf\xfd\x30\x24\x25\x51\xb2\x9d\xb6\x77\x6f\x12\x99\x9c\xbf\xbf\x19\xce\x0c\x79\x7a\x0a\x1f\x1e\xe6\x37\xff\xb8\x9c\x5d\xde\x7d\x98\x5f\x4e\xe1\xfc\x5f\xb0\xe2\x9b\xc7\x55\x98\xb1\xd3\x62\x43\x62\xba\xe6\xec\x91\x3e\xaf\xf8\x69\xb2\xac\xc2\xed\xff\xbb\xa7\xa7\x30\xbd\x81\xd9\xcd\x1c\x2e\xa7\x57\xf3\xd0\x75\x37\x24\x7e\x24\x2b\x0a\x75\x0d\xe1\xad\xf9\x6e\x1a\xd7\xcd\xd6\x1b\x2e\x24\xf8\xae\xe3\xc5\x9c\x49\x5a\x49\xcf\x75\xbc\x84\x48\xb2\x24\x05\x3d\x2d\x9e\x72\xfc\x4d\x85\xe0\xa2\xc0\xaf\x74\xad\x08\x04\x4d\x73\x1a\xab\xcf\x42\x8a\x98\xb3\xad\xf9\xcc\xd8\x4a\xd1\xc9\x6c\x4d\xf1\x7f\xc9\xb2\x98\x27\xd4\x73\xdd\xba\x7e\x07\x82\xb0\x15\x85\xf0\xb2\x92\x82\x5c\x29\xcd\x05\x5a\xe1\xa0\x55\xf8\x81\x34\x94\x25\xf8\x19\xb8\xe8\xc4\xad\xa0\x5b\xca\x24\xc4\x9c\x25\x99\xcc\x38\x23\x39\x64\x86\x31\x15\x7c\x0d\x31\x29\x8b\x8c\xad\x60\x59\x66\x79\x02\x29\xc9\xf2\x52\xd0\xc2\xdd\x12\x01\x0b\x38\x03\x63\x5c\x78\x25\x39\xb1\x17\xd1\xcc\xf0\x9a\x14\xf2\x8a\x25\xb4\xea\x76\xd2\xb5\x0c\xef\x37\x22\x63\xd2\x55\x6b\xbe\xeb\xfc\x26\xc8\xe6\x52\x08\xdc\x2c\x59\xec\x53\x21\xe0\xe4\x12\xe1\x08\x40\xa1\x02\xb5\xa0\xb2\x14\x0c\x7f\x35\xae\x33\xe3\x3b\xc7\x39\x03\x74\x3f\x9c\xf1\x9d\xeb\x5c\xf3\xd5\x8a\x0a\xcd\x9c\x72\xb1\x26\xd2\xe8\x9f\x00\x11\xab\x02\xc2\x30\xcc\x98\xa4\x22\x25\x31\xad\x9b\xc0\x75\x1d\x2a\xc4\x9c\xf3\x4f\x84\x3d\xdf\xf1\x5d\x01\x67\x5a\x4f\x11\xce\xe8\xce\xf7\x24\xe7\xb0\x26\xec\x19\x04\xdf\x15\x5e\xa0\xa8\x1f\x58\x51\x6e\x10\x13\x9a\x4c\x45\xb6\xa5\x62\xc4\x53\xf6\xfb\x90\x28\x02\xc3\x78\xb9\xde\xc8\xe7\x87\x4d\x42\x24\x1d\xb1\x50\xdc\x81\x52\x6d\x79\x01\x06\x03\x1d\x80\x9c\xaf\x94\xef\xdf\xe3\x09\xd4\xae\x93\xa5\x60\xfc\x7f\x75\x06\x2c\xcb\x71\xcd\x20\x62\x44\x68\xde\x30\x0c\x03\xd7\x69\xdc\xc6\x75\xe5\xf3\x86\x82\x52\x72\xc1\x13\x0a\x2a\x14\x31\x67\x85\xca\xd1\x6e\x7d\xf1\xc0\x1e\x19\xdf\x31\x8b\xf2\x0c\x32\x2e\xc9\x90\x66\x84\x8b\xbd\x39\xe3\x88\xae\xbd\x32\xaf\xa6\x9c\xd1\xc1\x4a\x1f\x06\x7b\xf9\x02\xcd\x11\x24\x63\xf2\xd7\x8c\xe7\x04\xd3\xd2\xde\xb6\x50\x45\xe0\x7a\x87\x10\xae\x32\x96\x08\x02\x66\x94\xc2\xdb\x75\x94\xf1\x1d\xb7\xeb\x98\x10\x6a\x68\x71\xbb\x55\xd6\x2d\xfd\x52\x52\xf1\x7c\x5f\xa6\x69\x56\xb5\x6b\x8d\x09\x90\x4f\xbb\xec\xd4\x81\x0a\x0c\x05\x2a\x6d\x13\x35\xbc\x14\x22\x34\xdb\x1d\xe7\x4e\xe7\xb9\x25\xc0\xa4\xb7\x8a\x62\x77\x0a\xfa\x30\xb6\xd2\x30\x6e\xed\x8f\xdf\x5a\x21\xbd\xdc\x35\x79\xa4\x6a\xa9\xf5\x78\x28\x98\x1e\x14\xca\xb2\x5c\x89\xa5\x10\x9d\xc1\x5b\x65\x4f\x7d\x29\x44\x64\x0e\x59\xb1\xcb\x64\xfc\x55\xf1\xd6\xae\x13\x93\x82\x42\xf1\x94\xa3\x4b\x3a\xaa\x91\xeb\x38\x34\x34\x59\xb1\x1f\x72\x9b\x41\x07\xfd\x08\x43\x9b\x11\xbd\x83\xbb\x7d\x07\xcb\x71\x96\xf9\x89\x1d\x41\xcb\xdd\x91\x0c\xe3\x97\xeb\x38\xad\x6b\x7b\x09\x3b\x71\x1d\x95\x1f\x11\xbc\x90\xd5\x48\xa4\xbf\x22\x73\xbc\x27\xae\xd3\xf4\x06\xd2\x3e\x1f\xfd\x1f\xb1\xc6\xca\xe3\x43\x76\x0c\xb7\x2d\x7d\xb2\x3f\x35\xfe\x13\xa6\xea\xa2\xb0\x73\xf5\x47\x4c\xb0\x0e\xe0\x21\x13\x46\xdb\xd6\xb9\x88\xc0\xd6\x3c\xb4\x2f\xde\x3f\xbe\x7d\x76\x4e\xac\xed\xff\xc2\xe0\x43\x56\x1e\x28\x17\x9a\xac\x5d\x8e\x2c\x9d\x9d\xa9\xaa\x6c\x98\x4c\xea\xca\xaa\x2a\x1d\x15\x8d\x35\xae\x2f\x97\x5f\x1f\x33\xfc\x8e\x16\x65\x2e\x27\xe6\xe4\x99\xd2\xf1\x5d\xdc\x27\x8a\x1d\x91\x1d\x32\xdf\xf1\xdd\xf7\xf0\xb7\xec\xe8\x8a\xe9\xa4\x8c\xcb\x0f\xb7\x5c\x51\x8d\xba\x4d\x42\x0b\x99\x31\x85\x0c\x30\x2e\x81\xc0\x46\xd3\x61\x9f\xca\x79\x51\x3c\x5f\x70\xb6\xa5\xa2\x40\x82\x21\xab\xda\x45\xfc\xcc\xb6\x6e\x56\x0a\xbc\xe9\xb9\x55\x70\x95\x3d\xd3\x73\xd7\x49\x96\x9f\xa8\xfc\xca\x93\xa2\xcb\x87\x9b\x0d\x65\xe6\xcc\x4e\xa0\xe0\xa5\x88\x69\x17\x79\x3f\x59\xc2\xc9\xf4\x5c\x61\xd0\x96\xaf\xda\x75\x8a\xa7\x7c\x91\x2c\xf5\x6a\x74\xa6\x6a\xc9\x01\x29\x41\x57\xe1\x5e\x1d\xaa\x70\x13\xbb\x36\xaa\xf6\xe7\x24\x34\x6d\x67\x05\xad\x02\x8c\xdd\x4a\xeb\x01\x69\xc6\x92\xf0\x22\xe7\x05\xf5\x03\xd7\x41\x29\x8d\x61\xc6\x61\xc2\xb0\x68\x23\x91\xf2\x36\x63\x2b\x3f\xf8\xf9\x47\xcc\x72\x1d\x8c\x60\xb6\xde\xe4\xd0\xa3\xd7\x16\x61\x93\xa2\xb5\x3d\xdf\x4d\x33\x82\xd3\xa1\x9e\xed\x54\xb5\xc5\x01\x6f\x46\xd6\x14\xfe\x0d\x6a\xbc\x4a\xc1\x7b\xf3\xe4\x41\xd3\x60\xe5\x55\x92\xcf\x80\xd1\x5d\x47\xd6\xf4\x3e\x0c\xe6\x46\x1a\xdf\x30\x44\x5a\x49\x46\xe7\x16\x13\x18\x39\xa8\xce\x47\x5d\x0f\xf4\xe0\x70\xb9\xef\xf3\xc0\x69\x34\x22\x1c\x7a\xee\x0c\x06\x52\xeb\x13\xe3\x44\xca\x5c\x46\x23\xe0\x8e\xb5\x02\x83\xa2\x21\x7d\x3b\x3d\x47\xed\xd3\xf3\xc8\x98\x8c\xd5\xa0\x03\x36\x52\x96\x60\x19\x98\xa8\x36\xd8\x75\x76\xbe\xfc\x13\x53\x31\x00\x13\x6b\xf0\x87\x39\x69\xa4\xf3\xe5\x9f\x9d\x1b\xf8\x3d\x3d\x6f\x93\x23\x38\x20\x4b\x65\x6d\x2c\x2b\x30\xc3\x7f\x78\xa1\xff\x63\x01\x98\x57\x13\x4b\xbc\xac\xba\x74\x37\x62\xcf\xe9\x2a\x63\xfe\x37\x93\xdc\x36\xa8\xcf\xa8\x16\x8b\x79\x85\xf4\xb2\x8a\x40\x62\x99\x76\x64\xd5\xe1\x80\x8c\x58\x69\xe7\x95\x2f\xab\xc0\x46\xa4\xae\x21\x4b\x21\xbc\xd7\x60\xdf\x55\x18\x93\x91\x63\x33\xba\xbb\xab\xfc\x00\x4e\xee\x2a\x0b\x9c\xb7\x77\x55\x9d\x2c\x95\xe8\x46\xcb\x31\x11\x55\xdc\x53\x9a\x53\x49\x3f\xe4\xf9\x21\x44\x26\xa0\x4b\x41\x00\x7e\xc6\xe4\x5f\xff\x72\x04\x9b\x64\x19\xb6\x98\xbe\x84\xcc\x4f\x8a\x61\x7c\xe6\x07\xa7\xdc\x9a\x8a\x1c\xf5\x1b\x65\xb7\x40\xca\x2a\xbc\xe0\xeb\x75\x26\x31\xac\x5d\x26\xab\x94\xed\x24\x2c\x04\xcf\xf3\x25\x89\x1f\xd1\x2e\x59\x85\x77\xe6\xa7\x39\xfd\xfd\xb6\x7d\x24\xba\x09\xdf\x4b\x14\x1a\xef\x48\x9e\x47\xd0\x91\xe2\x05\x8b\x26\x11\xbc\xd9\x7a\x13\xdb\x1e\x5b\x5e\xd0\x95\xa1\xa0\x03\x5e\x56\x61\x62\xa3\xdb\xb7\xb8\x79\x65\x55\x69\x59\xe9\x82\x37\xaf\xdc\x3e\x13\xfa\x6e\xa8\xcb\xca\x31\x8e\x2e\xbb\x71\xad\xa3\x0d\xa0\x05\xea\xc8\x81\xb1\x20\x1d\xa0\x7a\x4c\x5c\x0f\xe3\x77\x09\xec\xc9\x95\xc8\x23\x55\x52\xad\xbf\x4e\x96\xca\xcf\xe8\x6c\xbf\x58\x16\xd3\x73\x0f\xde\x99\x32\xf4\x5a\x56\xc7\x09\xe7\x95\x45\x88\xb5\xe4\x38\xe9\xd5\x7a\x93\x7b\x4a\xbd\xa2\xa9\x6b\x8b\xa1\x69\x2c\x94\x4d\x91\xd7\xff\x46\x65\x64\xc4\x15\xe0\x25\xf1\x5e\xae\xa5\x5f\xc8\xf5\xf0\x86\x18\x86\x21\x8c\x6f\x88\x56\xc5\xbf\xb6\xf8\xac\x6b\xe1\x37\xb4\xbd\x74\xbf\xb0\xe7\x2a\xe0\x8f\x6d\xed\xca\x8a\x7e\xf6\xd2\xc9\xae\xeb\x12\x16\x15\xfe\xa8\xce\x01\x98\x58\x1e\x99\x15\xed\x29\x11\x19\x1b\xb7\xe3\x18\x94\x3a\x1b\x59\x13\xdc\x21\xae\x5d\x83\x77\x9d\xb1\x6b\x9d\xe3\xa3\xbe\x68\x0f\x05\x27\x43\xc1\x56\xa1\x1b\x6c\xd4\xaa\xc1\x44\xa0\x5b\xcd\x48\x4f\xa4\x89\xad\x15\x55\x08\x92\xf6\x46\xa1\x78\x9a\x89\xb9\x9e\x8f\x42\xd1\xa9\x08\xe0\x3e\xfe\x4a\xd7\xe4\xd0\x85\xf3\x0f\x34\x5f\x6f\xdf\xff\x72\x0d\x4d\xf3\xc7\xcb\x92\xba\xa2\xdf\x1e\xed\x00\xba\x62\x30\xf6\xd1\x9c\x04\xe3\x63\x7b\x4a\xa3\xbe\x56\xd4\xba\xb7\x34\x3f\xee\xb9\x6e\x48\x9d\xe7\x5d\x20\x3b\x95\x76\x20\x5b\x75\x2f\xc4\xf1\x48\xaa\x7f\xf3\x11\xe5\xf4\x14\xe6\x37\xd3\x9b\x08\x04\x65\x09\x15\xb0\xc9\x49\x4c\xbf\xf2\x3c\xa1\xa2\x38\xf2\xc4\xc2\x4b\x89\xc9\xde\x3f\x67\xa5\xbe\x87\xba\x22\x78\x53\xfc\xce\x50\x11\x96\xf0\xdf\x99\x37\x01\x7d\xda\x36\x82\x4a\xf9\xec\xe3\x8e\x2a\xdf\xe6\x8d\x86\x97\xb2\x7d\x97\xb1\xc6\x1f\x0d\x85\x66\x81\xcf\x5f\x2c\x7b\xdb\xa8\x6e\xcc\x6e\x00\x1f\xd5\x2b\x8f\x9f\x6a\x5b\x24\x5e\x16\x21\x06\x51\x32\xaa\x7c\xc3\xd5\x8f\xca\x42\x3f\x9d\x80\xf7\xd9\x0b\x5c\x46\x2b\xb9\x25\x79\xe4\x3a\x29\x17\x90\x4d\x60\x4b\x72\x74\x46\x57\xcd\x4d\xdb\x22\x33\xf8\x3b\xfc\xa4\x7b\xd6\x48\xc8\x04\x3c\xd3\x81\x1c\xb1\x55\x9c\xfa\xb1\x32\xfc\x95\xe4\x25\xbd\x49\xfd\x2d\xc9\x03\x2d\x44\x6c\xc3\x7f\x66\x2c\xf1\x03\xec\xb6\x2d\xd9\xad\x14\x5a\xae\x26\xb8\x2a\x66\x59\x6e\x5a\xf3\x9e\xae\xd9\xc3\xf5\xb5\xd2\xe6\x38\x38\x2f\x64\xac\xa4\xf8\xa3\x01\xfc\x8b\x86\x9f\xa1\x88\xcb\x9c\xae\xfd\x20\xbc\x6a\x81\x6a\x07\xf5\x76\x86\x56\x56\x6e\x49\x1e\xfa\x88\xac\x56\xa5\x1f\x29\x54\x6a\x44\x43\x27\x53\xa5\xf9\xcd\x93\x37\x81\x6d\xd0\x52\xaa\x07\xc7\x79\xb6\xa6\x87\x89\x0b\x24\x0e\x4d\x30\x14\xed\xdd\xc7\x8b\xf7\xef\xdf\xff\x6d\x46\x18\x0f\x3a\x29\x9f\xbf\x2c\x9f\xa5\x11\xc1\x05\x0e\xd7\xcb\x1e\xfa\xad\x81\x20\x4b\xe1\x95\x79\xd6\x0d\xaf\x8a\x5b\x85\x05\x06\xd4\x5f\x06\x2d\x4a\xfb\x06\xfc\x5f\xd5\x9a\x6b\x41\x05\x26\xd6\x6a\xb5\x71\xdb\x3f\xc7\x5d\xb5\xe6\xee\x7d\xaa\x6d\x4b\xd5\xa8\xb9\x6a\x14\xa9\x2f\x9e\x2a\xc7\x38\xf3\x99\xfe\x7b\xaf\x4e\x6f\xd1\xce\xf6\xaf\xcd\x69\xee\x3a\x65\xd7\x44\x63\x41\x89\xa4\xd6\xf6\x85\x5a\xd0\xfc\x43\x52\xfd\x62\x6a\x91\xea\x07\x12\x8b\x74\xd0\x6d\x0d\xa1\x5d\x4a\xac\x01\xe1\x63\x46\xf3\xa4\x7f\x20\x37\xec\xaa\x8e\xcc\x4d\x6d\xb1\x4e\x65\x77\xf8\x06\x82\x03\x58\xcc\xc9\x32\xa7\x56\x5d\x6e\x3b\x95\xa7\x04\xe1\x26\x34\x8d\x07\xe6\x8c\xe3\x60\x7d\xb3\xd1\x4f\xed\x57\xac\xa0\x42\xf6\x66\xf4\x86\x0f\x20\x39\x62\xfe\x31\x29\x7b\xce\x0c\xd1\x19\xba\xb4\x57\x76\x50\xfb\x00\xe5\x23\xda\x15\xf0\xe8\xdc\xff\xa0\x78\x2f\x0e\x2a\xc6\xa9\x15\xde\x7d\x09\xaf\x63\xc9\xd5\x4d\xa0\x1f\xb3\x16\x6f\x0a\x0f\xc2\x4f\x3c\xa1\xb9\xa2\x0c\xf7\x13\x21\x3d\xe0\x8c\xb3\x28\xa8\x84\x25\xe7\xb9\xeb\x2c\xb6\x58\xbb\x06\xa1\xb7\xda\x8a\xd6\xd9\x34\xfe\x56\x51\x5c\x48\x2e\x54\xad\x53\xf1\x1f\x89\xaf\xbb\x28\x7f\x2a\xb1\x1c\x7f\xd4\x77\xe9\x2d\x9c\x29\x5e\x6b\xd1\xdf\x06\x83\x4b\xaf\x49\x9b\xa1\xbc\x1a\xd0\xca\x08\xa4\x28\xe9\x04\xb4\x99\x11\x98\x0b\xda\x9c\x3c\xd2\x0f\x49\x82\xa6\xbd\xed\xee\x5a\x5b\x68\xfa\x2b\xdc\xac\xcc\x73\x93\x81\x7b\xde\x2c\xee\xc8\xce\x78\x34\x6f\x47\x83\x3d\x67\xb0\x1a\x6d\x0f\xbc\x20\xdb\x72\x50\x89\x1f\xd8\xcf\xb8\x36\x66\xfb\xb6\x9e\xf4\xb6\x06\x87\x60\x36\x02\x0f\x18\xf3\x4d\x88\x60\x78\xed\x34\x27\x36\x1d\x71\x04\xa0\x70\xf4\x03\x7b\x5c\x06\x65\xe7\xab\x34\x54\x69\xd1\x9d\x62\xf4\xbb\xf9\xb9\xfd\x95\x86\x26\x53\x06\xd5\xc0\x96\xbc\xb8\xe0\x79\xb9\x66\xc7\xea\x81\xde\xb5\x0b\x02\x9a\xfa\x6e\x78\x3c\xda\x77\xde\x87\xf9\x85\x2f\xfb\xd6\x13\xf4\x9f\x16\x18\x32\x44\x32\x04\xf2\x3f\x01\x00\x00\xff\xff\xcb\x41\x80\x89\xc7\x1c\x00\x00")

func golangHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangHeaderTmpl,
		"golang.header.tmpl",
	)
}

func golangHeaderTmpl() (*asset, error) {
	bytes, err := golangHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.header.tmpl", size: 7367, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangMiscTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\x41\x4b\xc3\x40\x10\x85\xcf\xcd\xaf\x78\x84\x08\x2a\xa6\x3f\xa0\xe0\xa5\x07\x41\x04\x0f\x5a\x3c\x77\xcd\x4e\xc2\x48\xba\x8d\x9b\x8d\x50\xc6\xfd\xef\x32\xbb\xb2\x56\x7a\x5b\xde\x7c\xef\xbd\x99\x15\x69\x61\xa9\x67\x47\xa8\x2d\x75\x63\x8d\x18\xab\x7e\x71\x1d\xae\x8f\xef\x1f\xb8\x15\xc1\xfa\x85\x3a\xe2\x2f\xf2\x5b\x33\x13\x62\x7c\x3c\x4c\xe3\x0d\x74\xf0\xca\x83\x33\x61\xf1\xaa\x26\x61\x7b\xb4\x27\x0d\x10\x01\x39\x8b\x36\xc6\xaa\x3a\x6f\x98\x83\x5f\xba\x90\x3a\xc2\x69\xa2\xe4\x79\x36\x87\xe4\xcf\x33\x88\x9a\xbd\x71\x03\x61\xfd\xc0\x34\xda\x59\xe9\x95\x08\xb8\x2f\xf0\xb9\xef\xb7\x2b\x8b\x3b\x4d\x4d\x4f\xa5\x77\x66\x98\xd3\x12\xab\x7d\x09\x6d\xf8\x0e\x4d\xc0\xe6\xfe\x6f\x9c\xe9\x86\x2f\xd2\x9e\x48\xaf\xd9\xe8\xf3\xcd\x8c\x0b\xe1\x1b\x93\x67\x17\x7a\xd4\x57\x9f\x75\x86\x32\xbd\xd7\x0d\xdb\x72\x74\xd1\xab\x7f\x7f\xf1\x13\x00\x00\xff\xff\x1b\x36\x80\x57\x6d\x01\x00\x00")

func golangMiscTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangMiscTmpl,
		"golang.misc.tmpl",
	)
}

func golangMiscTmpl() (*asset, error) {
	bytes, err := golangMiscTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.misc.tmpl", size: 365, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangUpdateTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x55\xc1\x6e\xe3\x36\x10\x3d\x4b\x5f\x31\x15\x50\x80\x42\x1c\xa2\xe8\x71\x01\x1d\x82\x6d\x5a\x04\x48\x8d\x24\xee\xf6\xb2\x58\x08\x8c\x34\x12\x98\x95\x48\x99\xa4\xec\x04\x82\xfe\xbd\x18\x52\x76\xe4\xd8\x71\x8a\xf6\xb2\x07\x1f\x64\xce\xbc\x79\x33\x6f\xf8\x38\x0c\x97\x50\x62\x25\x15\x42\x62\x65\xad\x84\xeb\x0d\x26\x70\x39\x8e\xf1\x97\xae\x14\x0e\xf3\x61\x00\xbe\xea\xab\x4a\x3e\xc3\x38\xb2\x61\x80\xc2\x3d\x77\xc2\x88\x16\xf8\x95\xa9\x2d\x8c\xe3\x22\x8e\x7a\x1f\x0b\x3e\xd6\x99\xbe\x70\x3c\x64\x87\x8f\xa5\x68\x11\xc6\x31\x05\x16\x47\xc3\x00\x53\xf6\x03\xba\xde\x28\xca\x07\x34\x86\x7e\xda\xa4\x31\x11\x42\x55\x7a\x06\xf1\x9c\x9d\x54\x1b\xfd\xfd\x63\x6a\xc2\xd4\xaf\xc4\x20\xf0\x3a\x83\xfa\xa8\xcb\x17\x8f\x39\xc4\x51\xa1\x95\x75\x90\xe7\xd6\xb5\x2e\xef\x0c\x56\xf2\x39\x23\xba\x46\x2a\x57\x41\xf2\xf3\x3a\x01\xbe\xba\xbf\xbd\xf3\x27\x30\x8e\x6f\x32\xac\x67\x72\x2a\x63\xcf\x31\x8e\xa3\x8d\x30\xb0\xb6\xf0\xf5\xdb\xe3\x8b\xc3\xf0\xb9\x11\x4d\x8f\xf4\x97\x54\x0e\x4d\x25\x0a\x1c\x28\x72\x18\x40\x56\xc0\xef\xb4\x95\x4e\x6a\x25\x9a\x2b\x53\xf7\x2d\x2a\x67\x7d\xed\x27\xf8\x94\xd1\xc0\x1b\x54\xfb\x86\x09\xcf\x63\x65\x20\xba\x0e\x55\xc9\xc2\xf7\x82\x02\x2b\x89\x4d\xe9\xbf\xf7\xf1\xa9\xaf\xb2\x1f\x4c\x24\xca\x72\x57\x84\xd0\xab\x5e\x15\x4c\x91\x78\xd6\x19\xa9\xea\x14\x86\x38\x8a\xd6\x33\xf8\xb5\x5d\x00\x05\x70\xce\xd3\x38\x8a\x68\xb2\xe7\x38\x47\x4f\x17\x17\x27\x10\x12\xf0\x9d\xf0\x5d\xf0\x7e\xc2\xc9\x84\xfb\x36\xc1\x3a\x53\x68\xb5\xe1\x37\x4e\x0b\xf6\x94\xbe\x13\x95\x2c\x20\x99\x11\xc3\xc6\x62\x60\xf1\xaf\xeb\xbf\x01\x50\xa5\xcf\x1f\xe3\x28\x27\x80\xd7\x61\x05\xb5\x8c\x50\x35\x1e\x5e\x00\xf1\xd8\xe0\xef\x34\xf7\xd0\xbf\xac\xa6\x8d\xe4\x54\x6e\xba\x16\x3c\xb7\xe8\xfc\x64\x67\x88\x2c\xa1\x88\xcf\xba\xe9\x5b\xba\x22\x09\x71\x78\x4f\xdb\x13\x90\xfe\x88\xa5\xa9\x27\x3b\x49\x3c\x86\xa5\x0a\x0a\x2d\x11\x4b\xbb\xd4\x5b\x4f\x2b\xcf\x95\xde\x92\xe0\x4b\xbd\x65\x29\xff\xf2\xd7\x67\x76\xb8\x19\xb3\xee\xae\x7a\xa7\x67\x1d\x1d\x51\x9e\x18\x10\xe1\x33\xbb\xc8\x6f\x94\x74\x7f\x8b\xe6\x60\x07\xc7\xd7\xad\x57\xda\x1d\x95\x92\x15\xed\x3a\x5b\xdb\x14\xb2\x0c\x7e\xf1\x13\x33\xc1\x43\x94\x6c\x16\x80\x6d\xe7\x5e\x82\x33\xb0\x53\x8d\xef\x71\x4f\x6d\xe7\xe5\xff\xb9\x3c\xbe\x40\x70\x01\x9a\xe2\x81\x83\xc0\xc5\x74\x79\xd8\xda\x7e\xfd\x34\x35\x70\xf9\xeb\xb7\x14\x2e\x0e\x8d\x23\x8e\xf4\xe3\x13\x6f\x74\xbd\x72\xad\x63\xe1\x68\x31\x79\x83\x5f\xc2\xd0\x83\x92\x6e\x66\x9d\x7b\x97\x58\xf5\x5d\xa7\x8d\xb3\xe1\x44\xaa\xda\x1f\x92\xaf\x66\x40\xb8\xa5\x91\x1b\x34\xfc\xbe\x47\xf3\xf2\xa0\xb7\x27\xf0\xf9\xaa\x10\x8a\x4c\x54\x94\xa5\xd1\x15\xb0\xaa\x11\xce\x91\xb9\x04\xcc\x34\xb4\x2c\x2b\xef\xd6\x59\x06\x76\xdd\xf0\x6b\x63\x96\xfa\x41\x6f\xed\x91\x1a\x4a\x36\x5e\x83\x29\xfe\xa7\x8c\xfe\x39\x8a\x22\x6a\xad\xf8\x8e\xd7\xc6\x30\x34\xe6\x55\x36\xba\xab\x5e\x93\x3c\xbc\x0e\x07\x5d\x5c\x3f\x63\x71\x6a\x42\xff\xa5\xd8\xce\xc2\x6b\x74\x1e\xf0\xc8\xbf\xff\x40\xb7\xba\xbf\xf5\xe3\x9c\x0b\x94\xb0\x9b\x3f\xef\x6e\x6f\xae\x7f\x4b\x21\xf1\x52\xee\x00\xde\x5f\x97\xf3\x7a\x7c\x98\xff\x63\x09\xb4\x73\x86\x29\x98\x68\xd1\xcb\x3b\x7b\xd4\xa9\xc0\x78\xf0\xf2\xfe\x13\x00\x00\xff\xff\xa1\x74\x04\xd6\x6d\x08\x00\x00")

func golangUpdateTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangUpdateTmpl,
		"golang.update.tmpl",
	)
}

func golangUpdateTmpl() (*asset, error) {
	bytes, err := golangUpdateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.update.tmpl", size: 2157, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"golang.create.tmpl": golangCreateTmpl,
	"golang.delete-all.tmpl": golangDeleteAllTmpl,
	"golang.delete-world.tmpl": golangDeleteWorldTmpl,
	"golang.delete.tmpl": golangDeleteTmpl,
	"golang.dialect-postgres.tmpl": golangDialectPostgresTmpl,
	"golang.dialect-sqlite3.tmpl": golangDialectSqlite3Tmpl,
	"golang.footer.tmpl": golangFooterTmpl,
	"golang.get-all.tmpl": golangGetAllTmpl,
	"golang.get-count.tmpl": golangGetCountTmpl,
	"golang.get-first.tmpl": golangGetFirstTmpl,
	"golang.get-has.tmpl": golangGetHasTmpl,
	"golang.get-last.tmpl": golangGetLastTmpl,
	"golang.get-limitoffset.tmpl": golangGetLimitoffsetTmpl,
	"golang.get-one-all.tmpl": golangGetOneAllTmpl,
	"golang.get-one.tmpl": golangGetOneTmpl,
	"golang.get-paged.tmpl": golangGetPagedTmpl,
	"golang.get-scalar-all.tmpl": golangGetScalarAllTmpl,
	"golang.get-scalar.tmpl": golangGetScalarTmpl,
	"golang.header.tmpl": golangHeaderTmpl,
	"golang.misc.tmpl": golangMiscTmpl,
	"golang.update.tmpl": golangUpdateTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"golang.create.tmpl": &bintree{golangCreateTmpl, map[string]*bintree{}},
	"golang.delete-all.tmpl": &bintree{golangDeleteAllTmpl, map[string]*bintree{}},
	"golang.delete-world.tmpl": &bintree{golangDeleteWorldTmpl, map[string]*bintree{}},
	"golang.delete.tmpl": &bintree{golangDeleteTmpl, map[string]*bintree{}},
	"golang.dialect-postgres.tmpl": &bintree{golangDialectPostgresTmpl, map[string]*bintree{}},
	"golang.dialect-sqlite3.tmpl": &bintree{golangDialectSqlite3Tmpl, map[string]*bintree{}},
	"golang.footer.tmpl": &bintree{golangFooterTmpl, map[string]*bintree{}},
	"golang.get-all.tmpl": &bintree{golangGetAllTmpl, map[string]*bintree{}},
	"golang.get-count.tmpl": &bintree{golangGetCountTmpl, map[string]*bintree{}},
	"golang.get-first.tmpl": &bintree{golangGetFirstTmpl, map[string]*bintree{}},
	"golang.get-has.tmpl": &bintree{golangGetHasTmpl, map[string]*bintree{}},
	"golang.get-last.tmpl": &bintree{golangGetLastTmpl, map[string]*bintree{}},
	"golang.get-limitoffset.tmpl": &bintree{golangGetLimitoffsetTmpl, map[string]*bintree{}},
	"golang.get-one-all.tmpl": &bintree{golangGetOneAllTmpl, map[string]*bintree{}},
	"golang.get-one.tmpl": &bintree{golangGetOneTmpl, map[string]*bintree{}},
	"golang.get-paged.tmpl": &bintree{golangGetPagedTmpl, map[string]*bintree{}},
	"golang.get-scalar-all.tmpl": &bintree{golangGetScalarAllTmpl, map[string]*bintree{}},
	"golang.get-scalar.tmpl": &bintree{golangGetScalarTmpl, map[string]*bintree{}},
	"golang.header.tmpl": &bintree{golangHeaderTmpl, map[string]*bintree{}},
	"golang.misc.tmpl": &bintree{golangMiscTmpl, map[string]*bintree{}},
	"golang.update.tmpl": &bintree{golangUpdateTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

