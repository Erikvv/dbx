// Code generated by go-bindata.
// sources:
// golang.create.tmpl
// golang.delete-all.tmpl
// golang.delete-world.tmpl
// golang.delete.tmpl
// golang.footer.tmpl
// golang.get-all.tmpl
// golang.get-count.tmpl
// golang.get-first.tmpl
// golang.get-has.tmpl
// golang.get-last.tmpl
// golang.get-limitoffset.tmpl
// golang.get-one.tmpl
// golang.get-paged.tmpl
// golang.get-scalar.tmpl
// golang.header.tmpl
// golang.misc.tmpl
// golang.update.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _golangCreateTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\x41\x6b\xdc\x30\x10\x85\xcf\xd6\xaf\x98\x2e\x14\x6c\xd8\xd5\x0f\x08\xec\xa1\x84\x14\x02\x61\x21\xd9\x94\x1e\x8d\x62\x8d\x8c\x5a\xaf\xe4\x8e\x66\xeb\x5d\x84\xfe\x7b\x91\x55\x17\xe7\xd0\x1c\xf6\x60\xb0\x2d\xf1\xbe\xf7\xde\x4c\x8c\x3b\xd0\x68\xac\x43\xd8\x04\xdb\x3b\xc5\x67\xc2\x0d\xec\x52\x12\xf7\x84\x8a\x31\x46\x90\xc7\xb3\x31\xf6\x02\x29\xd5\x31\x42\xc7\x97\x51\x91\x3a\x81\xfc\x42\x7d\x80\x94\x1a\xa8\x45\x15\x23\xfc\xfd\xfb\x82\x7c\x26\x07\x29\x6d\x01\x89\xf2\xe3\xa9\x11\x99\x83\x4e\xcf\xc2\x62\x0d\x7d\xf3\xfa\x3a\xf3\x62\x16\xd9\x81\x35\x20\x0f\x88\x3a\x1c\xfc\x04\x29\x89\xaa\x6d\x9d\x9f\xe0\x6e\x0f\x07\x3f\xd5\x8d\xfc\xf6\x7a\x5f\x37\x33\x6f\x91\xcb\xef\xd6\x59\x76\x38\x81\xfc\x6a\x71\xd0\xd9\x95\x10\x55\xe7\x5d\x60\x68\xdb\xc0\x27\xde\x67\x83\x64\x1d\x1b\xd8\x7c\xfe\xb5\x01\x79\x7c\x7e\x9a\xe5\xfd\xdb\x0f\x39\xf8\xfe\xc8\x27\xae\xcb\xd5\x2d\xc4\x08\x8a\xfa\x95\x58\x23\x0a\xc5\xe4\x2e\xc6\xd1\x13\x87\x12\xd3\xba\x1e\x56\x16\x56\xe9\x45\x95\xd3\xef\x21\xeb\x6b\xb2\xbf\x91\xe4\xf3\x19\xe9\xfa\xe2\xa7\x0f\x38\xf2\xd8\x29\x97\x5b\x56\x5a\x93\x37\x50\x9b\x41\x31\xa3\x5b\x84\x9b\xd9\x4c\x65\xcd\xdc\xed\xa7\x3d\x38\x3b\x40\x14\x55\x45\x85\xeb\xec\xb0\x85\xef\xa4\xc6\x07\xa2\x1a\x89\x1a\x51\x25\xb1\x1c\x2e\xb8\xd5\x84\x9c\x1d\x4a\x97\x43\xc0\x52\x66\xdb\x12\x86\x32\xba\xbb\x77\xee\x1f\x2e\xd8\xfd\xc7\xf9\x2d\x9e\xda\x76\xfc\xf9\x0f\x33\x43\xe5\x93\x0a\xfc\xe8\x02\x12\x3f\xea\xfa\xe6\x94\xd9\x72\x8f\x9c\xc5\xf2\xee\x96\xb0\xf2\xf5\x3a\x62\x5e\xe0\x8e\x2f\x5b\xc8\xec\xf7\x3b\x94\xc4\xea\xe3\x4f\x00\x00\x00\xff\xff\xad\x71\xb5\x3f\x14\x03\x00\x00")

func golangCreateTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangCreateTmpl,
		"golang.create.tmpl",
	)
}

func golangCreateTmpl() (*asset, error) {
	bytes, err := golangCreateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.create.tmpl", size: 788, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeleteAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x90\x31\x6b\xfb\x30\x10\x47\x67\xdd\xa7\xf8\xfd\x0d\x7f\x70\x20\x31\x1d\x4a\x87\x82\x87\x40\xb3\x75\x69\x33\x74\x34\x8e\x7d\x0a\x2a\x8e\x9c\x9e\xcf\x69\xca\xa1\xef\x5e\xec\x84\xb6\x5b\xe9\xa0\x49\x7a\xef\x9d\xce\x6c\x85\x96\x7d\x88\x8c\x6c\x08\xfb\x58\xeb\x28\x9c\x61\x95\x12\x3d\x70\xc7\xca\x66\x28\xb6\xa3\xf7\xe1\x8c\x94\x72\x33\x34\x7a\x3e\xd6\x52\x1f\x50\xac\x65\x3f\x20\xa5\x05\x72\x72\x4d\x3f\x46\x45\x88\x7a\x77\xbb\x04\x8b\x4c\xa7\x97\x05\x4d\x7e\x8e\xed\x2c\xa4\x9f\xb1\x5d\xdf\x7e\xcc\x1d\x9b\xe0\x38\x28\xaa\x6a\xd0\x83\x96\x66\x38\x4a\x88\xea\x91\xfd\x7f\xcb\x50\x6c\x9f\x1e\x91\x12\xb9\x7e\xf7\x5a\x74\xfd\x7e\xab\x07\xcd\x2f\x4f\x97\x30\x83\x0f\xdc\xb5\xa7\xba\x1b\xf9\x7b\x20\x22\x57\x55\xc2\xc3\x65\x92\xfb\x12\x13\xdb\x4a\x38\xb1\x14\x9b\x33\x37\xbf\xf2\x2e\xf8\x19\xfd\x57\x22\x86\x0e\x46\xce\x09\xeb\x28\x11\x37\x4b\xbc\x48\x7d\xdc\x88\xe4\x2c\xb2\x20\x97\xe8\xfa\xf9\x4b\xac\xc4\x5c\x2e\x9e\xfb\xf7\x61\xed\x3d\x37\xca\x6d\xfe\x67\xe1\xf5\xee\xea\x8d\xa1\xa3\x44\x66\x5f\x8b\xfc\x0c\x00\x00\xff\xff\xdd\x30\x4b\x51\xb5\x01\x00\x00")

func golangDeleteAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteAllTmpl,
		"golang.delete-all.tmpl",
	)
}

func golangDeleteAllTmpl() (*asset, error) {
	bytes, err := golangDeleteAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete-all.tmpl", size: 437, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeleteWorldTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x90\x31\x6b\xf3\x30\x10\x40\x67\xdd\xaf\xb8\xcf\xf0\x81\x4d\x13\xd1\xa1\x74\xf3\x10\xda\x6c\x5d\x9a\x0e\x1d\x83\x63\x9f\x83\x8a\x90\x92\xd3\x39\x75\x11\xfa\xef\xc5\x72\x1c\xb2\x76\x10\x02\xa1\x7b\x4f\x7a\x31\xae\xb1\xa3\xde\x38\xc2\x22\x98\xa3\x6b\x64\x60\x2a\x70\x9d\x12\xbc\x92\x25\xa1\x8d\xb5\x65\x2b\x23\xb6\xde\x09\x8d\xa2\x5f\xe6\xbd\xc2\x12\x54\xeb\x07\x27\x68\x9c\x3c\x3f\xad\x90\x98\xa7\xe5\xb9\x82\x09\x4a\xae\xcb\x14\xb8\x37\x1c\x7c\xf7\x93\xe1\x11\xd4\xa5\x61\xdc\xef\x99\x02\x86\xb3\xd5\x3b\x0a\x83\x95\xe5\xf4\x0e\x3c\x03\xb8\x71\x47\x42\xfd\xf1\xfe\x16\x30\x25\x50\x79\x70\x76\xd6\xe8\x0f\x5f\xba\x63\x73\x21\xd6\xdb\x91\xda\x32\x46\x3c\xb1\x71\xd2\x63\xf1\xff\x5c\xa0\xc6\x94\x2a\x50\xa6\xcf\xd7\xff\xd5\xe8\x8c\xc5\x08\x4a\x31\xc9\xc0\x0e\x1f\x57\xf8\xc9\xcd\x69\xcb\x5c\x12\x73\x05\x2a\xc1\x24\xc8\x6f\x58\x14\xd9\xa7\x77\xfe\x3b\x6c\xfa\x9e\x5a\xa1\xae\xfc\x23\xf2\x1a\xeb\xa1\x5e\xbe\x77\xab\x34\x45\x5a\x06\xaf\x52\x67\x2c\x24\x88\xf1\x56\xf1\x37\x00\x00\xff\xff\x1d\x0d\x4b\x82\xa7\x01\x00\x00")

func golangDeleteWorldTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteWorldTmpl,
		"golang.delete-world.tmpl",
	)
}

func golangDeleteWorldTmpl() (*asset, error) {
	bytes, err := golangDeleteWorldTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete-world.tmpl", size: 423, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeleteTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x90\xb1\x6a\xf3\x30\x14\x85\x67\xe9\x29\xce\x6f\xf8\xc1\x01\xc7\x74\x2e\xa4\x10\x68\xb6\x2e\x6d\x86\x8e\xc6\xb1\xae\x82\x8a\x22\xa5\x57\x72\x9a\x72\xd1\xbb\x17\x3b\x21\xed\x56\xe8\xa0\x49\xe7\x3b\xdf\xe1\x8a\x2c\x61\xc8\xba\x40\xa8\x92\xdb\x87\x3e\x8f\x4c\x15\x96\xa5\xe8\x47\xf2\x94\x49\x04\xed\x76\xb4\xd6\x9d\x51\x4a\x2d\x82\x21\x9f\x8f\x3d\xf7\x07\xb4\x6b\xde\x27\x94\xb2\x40\xad\x95\x99\xc3\x06\xbb\x18\x7d\x03\x62\x9e\x5e\xe4\x85\x9e\x04\x14\xcc\xdc\xa8\x7f\xda\x76\xd1\x7c\xce\x22\xd1\x6a\x88\x21\x65\x74\x5d\xca\x87\xbc\x12\xc1\x91\x5d\xc8\x16\xd5\xff\xf7\x0a\xed\xf6\xf9\x09\xa5\x68\x15\x77\x6f\xad\x8f\xfb\x6d\x3e\xe4\xfa\x12\x6d\x20\x02\xeb\xc8\x9b\x53\xef\x47\xfa\x5e\xa4\xb5\xea\x3a\xa6\x74\x59\x72\xbf\xc2\xc4\x1a\x76\x27\xe2\x76\x73\xa6\xe1\x57\x5e\x39\x3b\xa3\xff\x56\x08\xce\x43\xb4\x52\x4c\x79\xe4\x00\xdb\xfb\x44\x0d\x5e\xb9\x3f\x6e\x98\x6b\x62\x5e\x68\x55\x66\xe1\x10\xc7\x90\x6f\xca\x79\x40\xfb\x12\x3f\xd2\xda\x5a\x1a\x32\x99\xfa\x4f\xbd\xd7\xff\x6b\x3d\x1e\x70\xd7\x4c\xac\x2e\x5a\xe4\x76\xd9\xaf\x00\x00\x00\xff\xff\xec\x7c\x37\xba\xc7\x01\x00\x00")

func golangDeleteTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteTmpl,
		"golang.delete.tmpl",
	)
}

func golangDeleteTmpl() (*asset, error) {
	bytes, err := golangDeleteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete.tmpl", size: 455, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xce\x31\x0b\xc2\x30\x10\x05\xe0\xb9\xf7\x2b\x6e\x6c\x05\xf3\x23\x44\xdc\x9c\xcc\xe0\x1a\x93\xb3\x2d\xe8\x59\x93\x13\x23\x47\xfe\xbb\x14\x21\x2e\xd9\xde\xf0\xde\xc7\x03\xf9\x2c\x84\xf6\x7c\x24\x99\x1e\x21\xe1\xcc\x42\xf1\xea\x3c\xa1\x82\xea\x16\xa3\xe3\x91\xd0\x1c\x5e\xec\x13\x96\x02\x9d\x2a\x9a\x35\xa8\x22\x71\x58\x53\x81\x1f\x22\xb9\x85\x74\xd5\xae\xc5\xfd\xae\x59\x3c\xf9\x89\xee\xae\x1f\x30\x49\x9c\x79\x6c\x2d\xc3\xa5\xb9\xac\x20\x40\xf7\x8e\x6e\xb1\xb9\x97\x8c\x9b\xf4\xbc\x19\x9b\x87\xff\x31\x28\xf0\x0d\x00\x00\xff\xff\xec\xf5\x69\xba\xf0\x00\x00\x00")

func golangFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangFooterTmpl,
		"golang.footer.tmpl",
	)
}

func golangFooterTmpl() (*asset, error) {
	bytes, err := golangFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.footer.tmpl", size: 240, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\xcd\xaa\xdb\x30\x10\x85\xd7\xd2\x53\x4c\x0d\x05\x19\x72\xfd\x00\xb7\x78\x11\x4a\x77\xa5\x90\x7a\xd1\xa5\x51\xac\x91\x51\x51\x24\x77\x2c\xe7\x87\x41\xef\x5e\x64\x27\x69\x17\x25\xd0\x85\x16\x92\x66\xce\xf9\xe6\x48\xcc\x6f\x60\xd0\xba\x80\x50\xcd\x6e\x0c\x3a\x2d\x84\x15\xbc\xe5\x2c\xf7\xde\x33\x43\xd3\x2d\xd6\xba\x2b\xe4\xac\x98\x61\x48\xd7\x49\x93\x3e\x41\xb3\xa7\x71\x86\x9c\x6b\x50\x52\x50\xbc\xcc\xc0\x0c\xb3\x77\x03\x46\x0b\xcd\xf7\x78\x81\x9c\x77\x80\x44\x65\x45\xaa\x65\x31\xc2\x60\x56\x65\xf9\xb7\xeb\x31\x9a\x5b\x05\x39\xb3\x14\x43\x0c\x73\x82\xbe\x9f\xd3\x29\xb5\xcc\x30\x91\x0b\xc9\x42\xf5\xf1\x57\x05\x4d\x77\xf8\x0a\x39\x4b\x11\x8f\x3f\x1b\x1f\xc7\x2e\x9d\x92\xda\x4a\x77\xc5\xdb\x3a\xf4\xe6\xac\xfd\x82\x7f\xd8\xa4\x14\x7d\x5f\xe0\x36\x92\xf7\x16\x4a\xb3\x21\x77\x46\x6a\x0e\x0b\xd2\xed\x95\x42\x11\x10\xce\xae\xad\x1f\x5a\x08\xce\x03\x4b\x21\x08\xd3\x42\xa1\x6c\x77\xf0\x83\xf4\xf4\x85\x48\x21\x51\x2d\x45\x96\xc2\xa0\x45\x82\xcd\xb4\xf9\xec\xe3\x8c\xaa\x50\xd8\xf8\x3c\xfc\x86\xd7\xa4\xea\x55\x89\x19\x5c\x70\x29\xe0\xe5\x91\x98\x14\xa2\xb8\xb5\x8f\xe2\x6e\xd0\xa1\xc4\xae\x8d\xa1\x68\x41\x59\xaf\x53\xc2\xb0\x96\xd7\xeb\x84\xe2\x1f\x84\x2f\x10\x0b\xe3\xf6\x5c\x2d\xe8\x69\xc2\x60\xd4\x96\x4f\x31\xa1\xf1\xc1\xb1\x0d\x73\x57\x7e\x7f\xe2\x14\x9d\xfa\xd3\x7f\x05\x72\xbf\xdc\x4c\x82\xf3\x32\x4b\xe6\xe7\x47\xf8\x1d\x00\x00\xff\xff\x74\xd0\x3d\xed\x7e\x02\x00\x00")

func golangGetAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetAllTmpl,
		"golang.get-all.tmpl",
	)
}

func golangGetAllTmpl() (*asset, error) {
	bytes, err := golangGetAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-all.tmpl", size: 638, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetCountTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x8f\x3f\x4f\xc3\x30\x10\xc5\x67\xdf\xa7\x78\x44\x02\x25\x52\x1a\x31\x20\xb6\x0e\x08\xb1\xb1\x94\x0c\x8c\x55\xda\x38\x95\x51\x6a\x87\x8b\x5d\x5a\x9d\xee\xbb\x23\x07\xf1\x67\x63\xf0\xe4\xf7\x7b\xf7\x7e\x22\x2b\xf4\x76\x70\xde\xa2\x98\xdd\xc1\x77\x31\xb1\x2d\xb0\x52\xa5\xc7\x90\x7c\x14\x41\xd3\xa6\x61\x70\x67\xa8\x96\x22\xd8\xc7\xf3\xd4\x71\x77\x44\xf3\xc0\x87\x19\xaa\x15\x4a\x32\xfb\x9c\x85\xf3\xf1\xfe\xae\x86\x65\xce\x2f\x70\x45\xb9\xde\xfa\x7e\xe9\xa3\xbf\xb7\x76\xa1\xbf\x14\x50\x95\xcc\xfa\x39\x62\xbb\x9d\xe3\x31\xae\x45\x30\xb1\xf3\x71\x40\x71\xfd\x5e\xa0\x69\x37\xcf\x50\x25\x13\x76\x6f\xcd\x18\x0e\x6d\x3c\xc6\xf2\x2b\x5a\x43\x04\x83\xb3\x63\x7f\xea\xc6\x64\x7f\xf7\x10\x99\xbc\x60\x8d\xcc\xf4\xec\x4e\x96\x9b\x4d\xb2\x7c\x79\x09\x1f\xff\xb1\x4d\xbb\xef\x7c\x79\xb3\xe8\x54\x64\xdc\xb0\xc8\x5c\xad\xe1\xdd\x08\x21\x63\xd8\xc6\xc4\x1e\xb7\x35\x5e\xb9\x9b\x9e\x98\x4b\xcb\x5c\x91\x51\xa2\xef\xbf\x05\xae\x33\x41\x4a\x22\x3f\xfe\x9f\x01\x00\x00\xff\xff\x73\xce\xbf\x3a\x6b\x01\x00\x00")

func golangGetCountTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetCountTmpl,
		"golang.get-count.tmpl",
	)
}

func golangGetCountTmpl() (*asset, error) {
	bytes, err := golangGetCountTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-count.tmpl", size: 363, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetFirstTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\xcb\x6a\xe3\x30\x14\x86\xd7\xd2\x53\x9c\x18\x06\x6c\x48\xfc\x00\x19\xbc\x18\x86\x99\x55\x29\xa4\x5e\x74\x69\x94\xe8\xc8\xa8\x38\x52\x7a\x24\xe7\x82\xd0\xbb\x97\xe3\xdc\xda\x2e\xb2\xe8\x42\x0b\x9d\xcb\xf7\xff\xe2\x57\x4a\x0b\xd0\x68\xac\x43\x28\x82\xed\x9d\x8a\x23\x61\x01\x8b\x9c\xe5\x7f\x4b\x21\xa6\x04\x75\x3b\x1a\x63\x8f\x90\x73\x99\x12\x6c\xe2\x71\xa7\x48\x6d\xa1\xfe\x43\x7d\x80\x9c\x2b\x28\xa5\x48\x09\x2e\xd5\x17\x7f\x80\x9c\xe7\x80\x44\x7c\x3c\x55\x92\x35\xd0\xe9\x09\x2a\x3f\x0b\xae\xbd\x3e\x15\x90\x73\x92\x62\xe3\x5d\x88\xd0\x75\x21\x6e\x63\xc3\x34\xb2\x2e\x1a\x28\x7e\xbd\x17\x50\xb7\xab\x27\xc8\x59\x0a\xbf\x7e\xab\x07\xdf\xb7\x71\x1b\xcb\xf3\xe8\x1c\x52\x02\x63\x71\xd0\x7b\x35\x8c\x78\x37\x25\xa5\xe8\x3a\xf2\x87\x70\x76\xb2\x6c\x80\x97\x35\xd9\x3d\x52\xbd\x1a\x91\x4e\x8f\x08\x0c\x10\xd6\x4c\xab\xb3\x06\x9c\x1d\x20\x49\x21\x08\xe3\x48\x8e\xaf\x73\x78\x25\xb5\xfb\x47\x54\x22\x51\x25\x45\x96\x42\xa3\x41\x82\xb3\x68\xfd\x77\xf0\x01\x4b\x76\x61\x0d\xcc\x2e\xc5\x67\x3c\xc6\xb2\x9a\x48\x17\xf6\xb2\xb9\x2e\x30\xaa\xfa\xfd\x5d\xf0\x81\x22\x4b\x7e\x69\x3b\x3b\xb0\x8f\x29\x0b\xeb\x6c\xbc\x46\x21\x05\x43\x6f\x42\xed\x46\x39\xce\x51\x69\x4d\xde\x40\x69\x06\x15\x23\xba\x69\xba\x82\x1f\x3c\x5c\x5e\xbb\x0c\xa5\xfe\xfe\x03\xd8\x50\x96\x29\xdd\xb2\xff\x08\x00\x00\xff\xff\x23\xeb\x75\xa5\x6c\x02\x00\x00")

func golangGetFirstTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetFirstTmpl,
		"golang.get-first.tmpl",
	)
}

func golangGetFirstTmpl() (*asset, error) {
	bytes, err := golangGetFirstTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-first.tmpl", size: 620, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetHasTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x8f\xbd\x6e\xeb\x30\x0c\x85\x67\xf1\x29\xce\x35\x70\x0b\x1b\x70\xfc\x06\x19\x3a\x14\xe8\xd0\x25\xf5\xd0\x31\x50\x62\x29\x51\xe1\x48\x2e\x25\xa7\x09\x08\xbe\x7b\xe1\x14\xfd\xd9\x3a\x70\x22\xbf\xc3\xf3\x89\xac\x30\x38\x1f\xa2\x43\x95\xc3\x21\xda\x32\xb3\xab\xb0\x52\xa5\x47\x9b\x45\xd0\xf5\xb3\xf7\xe1\x02\xd5\x5a\x04\xfb\x72\x99\x2c\xdb\x13\xba\x7b\x3e\x64\xa8\x36\xa8\xc9\x1c\x6d\xc6\x2e\xa5\xb1\x85\x63\x5e\x26\x71\x43\x4b\xb2\x8b\xc3\x2d\x8a\x7e\xbf\xd9\xa5\xe1\x5a\x41\x55\xc8\xec\x53\xcc\x05\xdb\x6d\x2e\xa7\xb2\x16\xc1\xc4\x21\x16\x8f\xea\xff\x5b\x85\xae\xdf\x3c\x41\x95\x4c\xda\xbd\x76\x63\x3a\xf4\xe5\x54\xea\xcf\xd3\x16\x22\xf0\xc1\x8d\xc3\xd9\x8e\xb3\xfb\x29\x43\x64\x96\x06\x6b\x2c\xcc\xc0\xe1\xec\xb8\xdb\xcc\x8e\xaf\xcf\xe9\xfd\x2f\xb6\xeb\xf7\x36\xd6\x77\x47\x9b\x1b\x32\xc1\xdf\x54\xfe\xad\x11\xc3\x08\x21\x63\xd8\x95\x99\x23\xbc\x1d\xb3\x6b\xf1\xc2\x76\x7a\x60\xae\x1d\x73\x43\x46\xe9\x6b\x7d\xb4\xb9\x5d\x10\x52\x12\xf9\xd6\xff\x08\x00\x00\xff\xff\x88\xaa\xbc\x96\x65\x01\x00\x00")

func golangGetHasTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetHasTmpl,
		"golang.get-has.tmpl",
	)
}

func golangGetHasTmpl() (*asset, error) {
	bytes, err := golangGetHasTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-has.tmpl", size: 357, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetLastTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x90\x31\x6f\xf2\x40\x0c\x86\xe7\xf3\xaf\xf0\x17\xe9\x93\x12\x09\x32\x55\xdd\x98\xaa\x6e\x2c\x40\xa5\x8e\xe8\x48\x9c\xe8\x4a\xf0\xa5\x8e\x69\xa1\xd6\xfd\xf7\x2a\x41\x54\x61\x38\xdd\xf2\xbe\x7e\x1e\xdb\x6c\x89\x35\x35\x81\x09\xb3\x21\xb4\xec\xf5\x2c\x94\xe1\x32\x25\x68\x49\xd7\x7e\x50\x33\x2c\xb7\xa4\x67\xe1\xf2\xed\xda\x13\xa6\x94\x57\x7a\xc1\x2a\xb2\xd2\x45\xcb\x97\xdb\xbf\x00\xd7\x1f\x31\xb0\x3e\x3f\x15\x98\x83\x33\xc3\xde\x8b\x3f\xdd\xbb\x98\xd2\x02\x49\x64\x7c\x51\x0a\x18\xb9\xc4\xf5\x04\x82\xb9\xc4\x21\xd6\xd7\x89\x6f\xe0\xaa\xc8\x83\xe2\x7e\x3f\xe8\x49\x57\xe3\x44\x09\xac\x0d\x66\xff\x3f\x33\x2c\x77\x9b\x35\xa6\x04\x2e\x1e\x3e\xca\x2e\xb6\x3b\x3d\x69\x7e\x8b\x2e\xb0\x3f\x16\x30\x39\x04\x0e\x3a\x53\x00\x37\x2a\xac\x70\xec\xd4\x12\xbe\x48\xca\xcd\x99\xe4\xba\x8d\xdf\xf3\x6e\xb9\xab\x3c\xe7\x66\xe8\xeb\x5a\x62\x83\x79\xd3\x79\x55\xe2\xfb\xa4\x02\x53\x2a\xc0\x85\x66\xda\xe8\xdf\x0a\x39\x74\x68\xe0\x9c\xdc\x40\x66\xf8\x43\x12\x1f\x76\x7f\x17\xdf\xbf\x8a\xe4\x24\x52\x80\x4b\x30\xcb\x7a\x69\x1f\xa2\x1c\x3a\x48\x60\xf6\x77\xa0\xdf\x00\x00\x00\xff\xff\x77\x00\x17\x29\xa5\x01\x00\x00")

func golangGetLastTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetLastTmpl,
		"golang.get-last.tmpl",
	)
}

func golangGetLastTmpl() (*asset, error) {
	bytes, err := golangGetLastTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-last.tmpl", size: 421, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetLimitoffsetTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\x31\x8b\xdc\x30\x14\x84\x6b\xe9\x57\x4c\x0c\x01\x1b\x7c\xae\x42\x8a\x0b\x2e\x42\x48\x77\x04\x2e\x5b\xa4\x5c\x74\xd6\xd3\xa2\x60\x4b\xce\xb3\x7c\xbb\x87\xf2\xfe\x7b\x90\x7d\xbb\xa4\x08\x81\xa4\x30\x58\xd2\x30\xf3\x69\x9e\x72\xbe\x83\x25\xe7\x03\xa1\x5a\xfc\x29\x98\xb4\x32\x55\xb8\x13\xd1\x0f\x7e\xf2\x89\x6c\xce\xe8\x0e\xab\x73\xfe\x02\x91\x3a\x67\x0c\xe9\x32\x1b\x36\x13\xba\x8f\x7c\x5a\x44\x5a\xad\xc6\x22\x85\x0f\xa9\x45\x74\x6e\xa1\xed\xff\xfd\xbb\x06\xb5\x56\x1c\xcf\x0b\x72\xc6\x32\xfa\x81\xa2\x43\xf7\x35\x9e\x21\xd2\x82\x98\xcb\x17\xb9\xd1\x85\x82\x82\xdd\x62\xf5\xef\x48\x4f\xd1\xbe\x54\x10\xc9\x5a\x0d\x31\x2c\x09\xc7\xe3\x92\xa6\xd4\xe7\x8c\x99\x7d\x48\x0e\xd5\xdb\x1f\x15\xba\xc3\xe3\x03\x44\xb4\x8a\x4f\xdf\xbb\x31\x9e\x0e\x69\x4a\xf5\x2e\x6d\x4b\xb6\xf3\x34\xda\x67\x33\xae\xb4\x43\xe3\x27\x86\x38\x4d\x06\x22\x1b\xfa\x15\xbb\xd1\x5a\x1d\x8f\x85\x78\xc7\xbb\xef\x51\x1c\x2d\xfb\x67\xe2\xee\x71\x25\x7e\xf9\x3f\x5b\xe5\xdd\x66\xf8\xa6\x47\xf0\x23\xb2\x56\x8a\x29\xad\x1c\xca\xb2\xc5\x37\x36\xf3\x67\xe6\x9a\x98\x1b\xad\x44\x2b\x4b\x8e\x18\x3b\x4a\xf7\x69\x8c\x0b\xd5\x85\xcd\xc5\xdb\xe6\x17\xba\xa4\xba\xd9\x9c\x72\x86\x0f\x3e\x05\x3a\x5f\xcb\xd5\x4a\x95\xb4\xfe\x2a\x3e\x0c\x26\x94\xd1\x19\x6b\x39\x3a\xd4\x6e\x34\x29\x51\xd8\xe4\x0d\x44\x1a\xad\xfe\x40\xf8\x17\xc4\xc2\xb8\x4f\xb6\x87\x99\x67\x0a\xb6\xde\x5b\x2b\x21\x7c\xba\x72\xec\x97\x79\x75\xbe\xbf\xe1\x14\x9f\xe6\xc3\x3f\x15\xf2\x7a\xb8\x87\x04\x3f\x6a\xd1\x39\xdf\xde\xcc\xaf\x00\x00\x00\xff\xff\xfa\x04\xd9\xfb\xc6\x02\x00\x00")

func golangGetLimitoffsetTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetLimitoffsetTmpl,
		"golang.get-limitoffset.tmpl",
	)
}

func golangGetLimitoffsetTmpl() (*asset, error) {
	bytes, err := golangGetLimitoffsetTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-limitoffset.tmpl", size: 710, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetOneTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x90\xbb\x6e\xc3\x30\x0c\x45\x67\xe9\x2b\x58\x03\x05\x6c\x20\xf1\x1f\x64\xe8\x50\x74\xe9\x92\x78\xe8\x18\x28\x11\x65\xa8\x70\xa4\x94\xa6\xf3\x28\xc1\x7f\x2f\xe4\x3e\x92\xad\x83\x16\xe1\xe2\xdc\xc3\x2b\xb2\x04\x8f\x21\x26\x84\x6a\x8c\x7d\x72\x3c\x11\x56\xb0\x54\xb5\x2f\xc8\x22\xd0\x76\x53\x08\xf1\x02\xaa\xb5\x08\xec\xf9\x72\x74\xe4\x0e\xd0\x3e\x51\x3f\x82\x6a\x03\xb5\x35\x22\xf0\xf3\xbb\xc9\x67\x50\x5d\x00\x12\x95\x97\xa9\xb1\xa5\x01\x93\x9f\x91\xf6\xbe\x6e\x97\xfd\xb5\x02\x55\xb1\x66\x9f\xd3\xc8\xb0\xdd\x8e\x7c\xe0\x55\xa1\x51\x4c\x1c\xa0\x7a\xfc\xa8\xa0\xed\xd6\xaf\xa0\x6a\x4d\xde\xbd\xb7\x43\xee\x3b\x3e\x70\xfd\x1d\x5d\x80\x08\x84\x88\x83\x3f\xb9\x61\xc2\x9b\x94\x9d\x9d\x62\x8a\xfc\xab\x64\x4d\x51\x5a\x41\x81\x78\x8a\x27\xa4\x76\x3d\x21\x5d\x37\xf9\xfc\x1f\xac\xed\xf6\x2e\x95\xe3\x9d\xf7\x94\x03\xd4\x61\x70\xcc\x98\x66\x74\x33\xd7\x99\x18\xe6\x93\x1f\x56\x90\xe2\x00\x62\x8d\x21\xe4\x89\x52\x61\x7e\x22\xe5\xdb\x32\x6f\xe4\x8e\xcf\x44\x35\x12\x35\xd6\xa8\xbd\x0b\x3a\xea\x6f\xb9\x14\x07\xab\x56\xe4\x6f\xbb\xaf\x00\x00\x00\xff\xff\x68\xc3\x9f\x53\xaa\x01\x00\x00")

func golangGetOneTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetOneTmpl,
		"golang.get-one.tmpl",
	)
}

func golangGetOneTmpl() (*asset, error) {
	bytes, err := golangGetOneTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-one.tmpl", size: 426, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetPagedTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x53\x4d\x6b\xdc\x30\x10\x3d\x4b\xbf\x62\x2a\x28\xd8\xe0\x98\x9c\x53\x5c\x28\xa5\xb7\x50\x92\xee\xa1\xc7\x45\xb1\x47\x46\x8d\x2d\x6d\xc7\xe3\xec\x06\x55\xff\xbd\x48\xda\xaf\xd2\x42\xdb\x83\xc1\x96\xdf\xbc\x8f\xf1\x73\x08\x37\x30\xa0\xb1\x0e\x41\x2d\x76\x74\x9a\x57\x42\x05\x37\x31\xca\x07\x3d\xe2\x10\x02\xb4\x9b\xd5\x18\x7b\x80\x18\xab\x10\xa0\xe7\xc3\x4e\x93\x9e\xa1\xfd\x40\xe3\x02\x31\x36\x52\x4c\x76\xb6\x0c\xd6\x71\x03\x3d\xfb\x67\x74\xb0\x30\x59\x37\xd6\x50\x49\x41\x7e\xbf\x40\x08\xb0\x4c\xb6\x47\x6f\xa0\xfd\xe2\xf7\x69\xec\x08\xf5\x2b\x1f\xd1\x0d\x20\x51\xba\x3c\xd5\x32\xf9\x42\x37\x64\x23\xf2\xda\xe4\x93\x1f\x5e\x15\xc4\x18\xa4\xb0\xe6\x24\xd7\x75\xa0\x14\x04\x29\xc4\xe9\x00\xd4\xad\x92\x22\x4a\x29\x7a\xef\x16\x86\xed\x76\xe1\x99\xbb\x10\x60\x47\xd6\xb1\x01\xf5\xf6\xbb\x82\x76\xf3\x78\x0f\x31\x4a\xe1\x9f\xbe\xb5\x93\x1f\x37\x3c\x73\x55\xa0\x4d\xf2\x6c\x2c\x4e\xc3\x8b\x9e\x56\x3c\xc6\xfd\x01\xbd\x9f\x67\x0d\x31\x16\xa1\x06\x72\xf6\x5a\x4a\xb1\xdd\xa6\xa4\x25\xc4\x5d\x07\x89\x71\x20\xfb\x82\xd4\x3e\xae\x48\xaf\xff\x42\xfb\x1b\x6b\x8a\x98\xf8\xde\x74\xe0\xec\x94\x03\x12\xf2\x4a\x2e\x3d\x36\xa0\x54\x03\x5f\x49\xef\x3e\x11\x55\x48\x54\xa7\xc0\x62\x40\x83\x04\xc5\x4d\xfb\x71\xf2\x0b\x56\xc9\x5e\x08\x60\x9d\x65\x87\x7b\x68\xef\xf5\xc2\x0f\xcf\x39\xb8\xf1\x67\xec\x67\x3c\x70\x55\x67\x91\x6b\x70\xf9\x5c\x52\x88\x64\xa4\x3b\x81\x37\xbd\x76\xa9\x0e\x7a\x18\xc8\x1b\xa8\xcc\xa4\x99\xd1\x65\x78\x7d\xb5\xa6\x0b\xe4\xa2\x5a\x4b\xf1\x87\x60\x7f\x49\x96\xa2\x95\x2e\x75\xa0\x77\x3b\x74\x43\x55\xf6\x9d\x14\x68\x3c\xf9\x2c\x3b\x38\xb2\xdf\x9d\xed\x26\x9e\xfa\xdd\xff\xee\x32\x13\x95\x72\xbf\x87\xdb\x3c\x92\x0e\xd0\x65\xe9\x3a\xd5\xae\xbc\xcd\xfe\x2f\x7d\xee\xc0\xcc\xdc\x6e\x72\xd3\xaa\x93\xbf\x5f\xe2\x47\x29\x22\xe0\xb4\xe0\x55\x69\xcb\x64\xb9\x2f\xea\x47\x7f\x25\xe7\x19\xd4\x24\xc3\x32\xca\x10\xce\x7f\xc8\xcf\x00\x00\x00\xff\xff\xcc\xa3\x6a\xd7\xc6\x03\x00\x00")

func golangGetPagedTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetPagedTmpl,
		"golang.get-paged.tmpl",
	)
}

func golangGetPagedTmpl() (*asset, error) {
	bytes, err := golangGetPagedTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-paged.tmpl", size: 966, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetScalarTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x90\x3f\x6f\xe3\x30\x0c\xc5\x67\xe9\x53\xf0\x0c\x1c\x60\x03\x89\xbe\x81\x87\x1b\x72\xd3\xe1\x80\xc4\x43\xc7\x40\x89\x28\x43\x85\x23\x25\xb4\x9c\x3f\x25\xf8\xdd\x0b\xb9\x6d\xd2\x2e\xed\xc0\x85\xe0\xfb\xbd\xc7\xc7\xbc\x04\x87\x3e\x44\x84\x6a\x0c\x7d\xb4\x79\x22\xac\x60\x29\xa2\xff\x86\xe8\x98\xc1\x74\x93\xf7\xe1\x0a\x22\x35\x33\xec\xf3\xf5\x68\xc9\x1e\xc0\xfc\xa1\x7e\x04\x91\x06\x6a\xad\x98\xe1\x7d\xbb\x49\x17\x10\x59\x00\x12\x95\x49\xd4\xe8\x62\x81\xd1\xcd\x4c\xfd\xd9\x6f\x97\xdc\xad\x02\x11\xd6\x6a\x9f\xe2\x98\x61\xbb\x1d\xf3\x21\xb7\x85\x46\x21\x66\x0f\xd5\xef\x53\x05\xa6\x5b\xff\x03\x11\xad\xd2\xee\xd9\x0c\xa9\xef\xf2\x21\xd7\x6f\xa7\x0b\x60\x06\x1f\x70\x70\x67\x3b\x4c\xf8\x08\xa5\xe7\x4c\x21\x86\xfc\x11\x49\xab\x12\xa9\x85\x02\x71\x14\xce\x48\x66\x3d\x21\xdd\x36\xe9\xf2\x13\xcc\x74\x7b\x1b\xcb\xf3\xd6\x39\x4a\x1e\x6a\x3f\xd8\x9c\x31\xce\xe8\x66\xb6\x53\xc1\xcf\x2f\xb7\x2d\x8c\xa7\xc1\xac\x88\xfe\xa7\x4d\xba\x8c\xc0\x5a\x29\xc2\x3c\x51\x2c\xf4\x17\xa4\xf4\xe8\x28\x86\x41\x2b\xb9\x6b\x7f\xb5\x65\xf3\xad\xe2\x89\xec\x71\x45\x54\x23\x51\x33\x4b\x1f\x87\x96\xfa\xaf\x64\xd1\xcc\xf7\xde\x5f\x03\x00\x00\xff\xff\xdb\xa0\xe0\xc7\xe7\x01\x00\x00")

func golangGetScalarTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetScalarTmpl,
		"golang.get-scalar.tmpl",
	)
}

func golangGetScalarTmpl() (*asset, error) {
	bytes, err := golangGetScalarTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-scalar.tmpl", size: 487, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x57\x51\x6f\x9b\x48\x10\x7e\x66\x7f\xc5\x1c\x6a\x2b\x88\x1c\xac\x7b\xf5\xc9\x0f\x75\xec\x3b\x45\xea\xc5\x6d\xe2\xea\x74\x52\xa5\x74\x0d\x8b\x43\x03\xbb\x78\x77\xb1\xa9\x38\xfe\xfb\x69\x97\x05\x16\x12\xd2\x46\x3a\xdd\x93\xf1\x32\xf3\xcd\x37\x33\xdf\x0c\x30\x9f\xc3\xfb\xcf\xbb\xed\x1f\x9b\x9b\xcd\xed\xfb\xdd\x66\x0d\xab\xbf\xe1\xc0\xf2\xc7\x43\x90\xd0\xb9\xc8\x71\x48\x32\x46\x1f\xc9\xf7\x03\x9b\x47\xfb\x32\x38\xfd\x8a\xe6\x73\x58\x6f\xe1\x66\xbb\x83\xcd\xfa\x7a\x17\x20\x94\xe3\xf0\x11\x1f\x08\x54\x15\x04\x1f\xcd\x75\x5d\x23\x94\x64\x39\xe3\x12\x3c\xe4\xb8\x21\xa3\x92\x94\xd2\x45\x8e\x1b\x61\x89\xf7\x58\x90\xb9\x38\xa6\xea\x7f\x9c\xe9\x63\x99\x64\x44\xfd\x0a\xc9\x43\x46\x4f\x2e\x42\x55\x75\x09\x1c\xd3\x03\x81\x60\x53\x4a\x8e\xaf\x35\x9c\x50\xd0\x8e\x0a\xf5\x5e\x5d\x82\x3b\x8c\xea\x6a\x37\x42\x23\x65\xe6\x23\x45\xf6\x23\x27\x27\x42\x25\x84\x8c\x46\x89\x4c\x18\xc5\x29\x24\x06\x2b\xe6\x2c\x83\x10\x17\x22\xa1\x07\xd8\x17\x49\x1a\x41\x8c\x93\xb4\xe0\x44\xa0\x13\xe6\x70\x0f\x4b\x30\x8c\x82\x6b\xc9\x30\xd2\xa7\x7f\x71\x9c\x6f\x38\x87\x25\xc4\x05\x0d\x3d\xc2\x39\x10\xce\x19\xf7\x9b\x1f\xa8\x38\x91\x05\xa7\xea\x5f\xad\x1d\x3e\xb0\xc3\x81\xf0\xc6\x3a\x66\x3c\xc3\x52\xa1\x26\xf4\x30\x03\xcc\x0f\x02\x82\x20\x48\xa8\x24\x3c\xc6\x21\xa9\x6a\x5f\xfb\xdc\xb0\x33\x2c\x41\x95\x25\xb8\x61\x67\x84\xe4\xf7\x9c\x40\xc4\x93\x13\xe1\xd0\x19\x43\x85\x9c\x4d\x49\x42\xef\x58\x10\xfe\xfd\x45\x50\xf0\xc4\x31\x0d\x6e\x89\x28\x52\x39\x33\x7c\x91\xf3\x49\xf9\xfd\x94\xf7\x85\x76\x67\x67\x31\x72\xbe\x65\xe7\x9f\xf1\x6f\xdd\x51\x6d\x52\x59\xaf\x94\x43\x11\x4a\x95\x83\xbe\xbb\x5e\x21\x27\xda\xff\x49\xe4\x03\x8b\x84\xb2\x53\xf5\x82\x6d\x4e\xa8\xd7\xe4\x3d\x03\xc1\x0a\x1e\x12\x13\xc9\x07\x2f\xda\xc3\xc5\x7a\xa5\x19\xb5\x2d\xa8\x90\x23\x8e\xe9\x7d\xb4\x6f\x4e\x17\x4b\x50\xd8\xcf\xa0\xf8\xc8\x49\x62\x6d\xf3\xcb\x12\x68\x92\x2a\x4f\xc7\x74\x8e\x26\xe9\xac\x6d\xb3\xea\xaf\x8f\x9c\x1a\x39\x11\x89\xdb\x2e\x36\x21\xc0\xf0\xd6\x51\x9f\x41\x33\x4c\x82\xab\x94\x09\xe2\xf9\xc8\x51\x28\xb5\x71\xf6\x51\x47\xa0\x21\xa9\x2c\x3f\x26\xf4\xe0\xf9\xbf\xbd\x86\x16\x72\x94\x5c\x92\x2c\x4f\xa1\xaf\x9e\x23\xce\x89\x0c\x1f\x5a\xc1\x54\xf6\x34\xad\x13\x9c\x92\xd0\x4c\x52\x88\x45\x33\xb9\x37\x38\x23\xf0\x0f\xe4\x3c\xa1\x32\x06\xf7\xed\xd1\x85\xba\x5e\xa8\xb4\x14\xf2\x12\x28\x39\x77\x66\x75\x9f\xc3\x60\x4a\x49\xb8\xa5\xaa\xd2\x1a\x59\x25\x77\x3f\x83\x51\x82\x5a\xad\x55\x35\x88\x13\x40\x5d\x3f\xcd\xf9\x85\xa4\x9d\xda\x1e\x73\xeb\x52\xb5\x08\x17\xa9\x5c\x4c\xd4\x2c\xce\x64\xb0\x51\x3a\x89\x3d\xb7\xa0\xa2\xc8\xd5\x1a\x20\x51\x5b\xa6\xb7\xc2\x9d\x99\x6b\xdf\xd4\xd6\xa0\xbc\x5b\xaf\x14\xa7\xf5\x6a\x61\x12\x99\x21\xa7\x17\xeb\x42\x97\x7f\x86\x9c\x7a\xa6\xe2\x75\xda\xf5\xd8\xfe\x9b\x12\xa8\x0f\x46\x01\xe0\x0d\x95\x6a\xd0\x5b\x7a\x6c\xff\x2d\x58\xaf\x5a\xb9\xf8\xcf\xe0\x68\x1d\xab\x69\xdc\x95\x33\x0b\x47\x96\x9d\xda\x0d\xc6\x8a\x1c\x12\xea\xbd\x5a\xe3\x7d\xc2\xbb\x52\xd9\xca\x72\x01\xb2\x9c\xe9\xab\x2e\x59\x15\xe2\xcc\x71\xbe\x2b\x3d\x59\xfa\x83\xb4\xf5\x68\xef\x4a\x6b\xb4\x65\xd9\x4c\xc9\xae\x44\x3d\x46\x9f\x99\xba\xbd\x2b\x7d\xb8\x62\x59\x96\xc8\x1f\x56\x48\x96\x81\x2c\x83\xd6\xd8\x7f\x8a\x73\xcb\xd2\x74\x8f\xc3\xc7\x9f\x44\xea\xcd\x35\xd6\xc4\x94\xe8\xf3\x37\xd1\x5e\x67\xb7\x58\x3e\x1d\x16\xb1\x5e\xb9\x70\x69\xb4\xf8\x46\x96\xd3\x86\xbb\xd2\x32\x54\xaa\x99\x36\xbd\xce\xf2\xd4\xd5\xe1\xb5\x4d\x55\x59\x0e\x75\x6d\x95\xd8\xa8\xb7\xf9\x19\x89\x66\xe4\xe5\x43\xca\x0e\x77\x32\x93\x9e\x90\xd9\xf0\x29\x14\x04\x01\x0c\x56\x76\xd5\x3c\x67\xcd\xc4\x7f\xb0\xfc\x3a\x07\x1f\xd9\xec\x4c\x81\x86\xdc\xba\x25\x89\x9c\x31\x99\x8e\xea\x68\xb7\xd8\x8b\xf5\x62\x08\xdc\xf7\xf1\xdd\xe0\x46\xa5\xc7\x71\x01\xcd\x60\x8e\xe2\x2c\x1a\x63\xeb\x44\xef\x97\xa6\x5e\xad\x4f\xad\x74\xfc\x4c\xf1\xba\x10\x3e\xdc\x85\x0f\x24\xc3\x9e\x6f\xca\x66\x91\xf9\xaa\xe8\x37\xb7\xef\x3e\x7d\x80\xba\xfe\xfa\x32\x52\x37\x3d\xed\x6c\xf8\xd0\xcd\xc6\x38\x47\xa3\xa6\x86\x74\x3f\x8f\xaf\xcb\xb1\xf1\xe9\x72\xec\x5a\xd6\x81\x4f\x4c\xec\x64\xcb\x26\x94\xf1\xf2\x4b\x40\x85\x9c\xf9\x1c\x76\xdb\xf5\x76\x01\x9c\xd0\x88\x70\xc8\x53\x1c\x92\x07\x96\x46\x84\x0b\xbd\xac\xcc\xbb\x92\xb5\xaf\x9a\x13\xcf\x15\xc7\x74\xf1\x85\xbe\x15\x5f\xa8\x02\x57\x97\x47\x77\x06\xbd\x1e\x7d\x93\x9c\xf5\x3c\x40\x55\xd5\xce\xf3\x9d\xce\x4f\xb4\x0f\x8c\x37\x26\xdf\x6e\xf2\xba\xa1\x0c\x39\xc1\x92\x58\xb7\xaf\xf4\x41\xe3\x3f\x34\x2d\xf2\x68\x68\xfa\x59\x1f\x58\xa6\x83\xe9\x35\x86\x76\xb1\xad\x85\xf3\x7b\x42\xd2\xa8\x7f\xbd\x35\xee\xba\xd0\x3b\x53\x7c\x2b\x33\x93\x67\x12\x43\xb0\xcd\x9b\xb7\xda\x6b\x2a\x08\x97\x3d\x4c\x1f\x78\x90\xd2\x44\xf8\x29\x94\x01\x99\x0b\xad\xf3\x41\x7a\x4f\x39\xfd\x00\xb0\x99\x8a\xa2\x99\x89\x11\x33\x1f\xee\x88\xb4\x57\xc1\xc9\xce\x5f\x0b\xa8\x08\x6c\x42\xcb\x61\x61\xef\x07\xbe\x7e\x70\x4b\x62\x4f\xed\xa8\xaa\xd2\x1c\x2f\xeb\x91\x3c\xba\x0a\x0d\x3a\x39\x51\x21\xdd\x5c\xbc\x4f\xc9\x7f\x50\x9c\x67\xb0\x06\x75\x19\xf1\xf9\xbf\xea\xf2\x44\x8a\x5a\xe6\xb1\xa5\xf0\x29\x6d\xc7\x4f\x6b\x07\x03\x92\x50\x77\x8b\x63\x8a\xd7\x28\xa7\x21\x6a\x05\x66\x29\x0e\xcf\xab\xd3\x02\x4e\x1d\xb8\x57\x8c\x6e\xfb\x10\xb2\xb4\xc8\xa8\x8a\x61\x2d\xee\x16\x4b\x7f\x3d\x5e\x69\x0b\xf5\xf1\x08\xa3\x2e\xd8\x38\x27\x9c\x16\x0a\xc2\x5a\x68\xaa\xec\x49\x0c\x05\x2c\x9f\x7b\xb9\xd2\x9f\x0c\xe6\x6f\x11\x9c\xd0\x34\x45\xdd\x8d\x71\xc4\x9e\xe4\xbb\x02\x2c\xd9\x5e\x0e\x65\xf5\x6f\x00\x00\x00\xff\xff\x1f\x42\xa3\x20\xc0\x0f\x00\x00")

func golangHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangHeaderTmpl,
		"golang.header.tmpl",
	)
}

func golangHeaderTmpl() (*asset, error) {
	bytes, err := golangHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.header.tmpl", size: 4032, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangMiscTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\x41\x4b\xc3\x40\x10\x85\xcf\xcd\xaf\x78\x84\x08\x2a\xa6\x3f\xa0\xe0\xa5\x07\x41\x04\x0f\x5a\x3c\x77\xcd\x4e\xc2\x48\xba\x8d\x9b\x8d\x50\xc6\xfd\xef\x32\xbb\xb2\x56\x7a\x5b\xde\x7c\xef\xbd\x99\x15\x69\x61\xa9\x67\x47\xa8\x2d\x75\x63\x8d\x18\xab\x7e\x71\x1d\xae\x8f\xef\x1f\xb8\x15\xc1\xfa\x85\x3a\xe2\x2f\xf2\x5b\x33\x13\x62\x7c\x3c\x4c\xe3\x0d\x74\xf0\xca\x83\x33\x61\xf1\xaa\x26\x61\x7b\xb4\x27\x0d\x10\x01\x39\x8b\x36\xc6\xaa\x3a\x6f\x98\x83\x5f\xba\x90\x3a\xc2\x69\xa2\xe4\x79\x36\x87\xe4\xcf\x33\x88\x9a\xbd\x71\x03\x61\xfd\xc0\x34\xda\x59\xe9\x95\x08\xb8\x2f\xf0\xb9\xef\xb7\x2b\x8b\x3b\x4d\x4d\x4f\xa5\x77\x66\x98\xd3\x12\xab\x7d\x09\x6d\xf8\x0e\x4d\xc0\xe6\xfe\x6f\x9c\xe9\x86\x2f\xd2\x9e\x48\xaf\xd9\xe8\xf3\xcd\x8c\x0b\xe1\x1b\x93\x67\x17\x7a\xd4\x57\x9f\x75\x86\x32\xbd\xd7\x0d\xdb\x72\x74\xd1\xab\x7f\x7f\xf1\x13\x00\x00\xff\xff\x1b\x36\x80\x57\x6d\x01\x00\x00")

func golangMiscTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangMiscTmpl,
		"golang.misc.tmpl",
	)
}

func golangMiscTmpl() (*asset, error) {
	bytes, err := golangMiscTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.misc.tmpl", size: 365, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangUpdateTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x55\xc1\x6e\xe3\x36\x10\x3d\x4b\x5f\x31\x15\x50\x40\x42\x1c\xa2\xe8\x71\x01\x1d\x82\x6d\x5a\x04\x48\x8d\x24\xee\xb6\x87\xc5\xc2\x60\xac\xa1\xc0\x40\x26\x6d\x72\x14\x3b\x10\xf4\xef\xc5\x90\xb2\x23\xc5\x4e\xda\xa2\x97\x3d\xf8\x40\x73\xe6\xcd\x9b\xf7\x86\xa3\xae\xbb\x84\x0a\x95\x36\x08\x99\xd7\xb5\x91\xd4\x3a\xcc\xe0\xb2\xef\xd3\x2f\x9b\x4a\x12\x76\x1d\x88\x45\xab\x94\xde\x43\xdf\xe7\x5d\x07\x2b\xda\x6f\xa4\x93\x6b\x10\x57\xae\xf6\xd0\xf7\xb3\x34\x69\x43\x28\x84\x58\x72\xed\x8a\x44\x4c\x8e\x87\xb9\x5c\x23\xf4\x7d\x01\x79\x9a\x74\x1d\x0c\xd9\x0f\x48\xad\x33\x9c\x0f\xe8\x1c\xff\xac\x2b\x52\xe6\x83\xa6\x0a\x04\xd2\x31\xb9\x47\x5b\xbd\x04\x5e\x5d\x9a\xac\xac\xf1\x04\xcb\xa5\xa7\x35\x2d\x37\x0e\x95\xde\x97\x0c\xec\xb4\x21\x05\xd9\x8f\xdb\x0c\xc4\xe2\xfe\xf6\x2e\xdc\x40\xdf\xbf\xc9\xf0\xa1\x9d\x73\x19\xc7\x46\xd3\x34\x79\x96\x0e\xb6\x1e\xbe\x7e\x7b\x7c\x21\x8c\xc7\x67\xd9\xb4\xc8\x7f\x69\x43\xe8\x94\x5c\x61\xc7\x91\x5d\x07\x5a\x81\xb8\xb3\x5e\x93\xb6\x46\x36\x57\xae\x6e\xd7\x68\xc8\x87\xda\x4f\xf0\xa9\x64\x69\x1a\x34\x47\xcd\x18\x2f\x60\x95\x20\x37\x1b\x34\x55\x1e\xcf\x33\x0e\x54\x1a\x9b\x2a\x9c\x8f\xf1\x45\xa8\x72\x14\x26\x91\x55\x75\x28\xc2\xe8\xaa\x35\xab\xdc\xb0\xcc\x9e\x9c\x36\x75\x01\x5d\x9a\x24\xdb\x11\xfc\xd6\xcf\x80\x03\x84\x10\x45\x9a\x24\xac\xec\x47\x9c\x93\xa7\x8b\x8b\x33\x08\x19\x84\x4e\xc4\x21\xf8\xa8\x70\x36\xe0\xbe\x4d\xf0\xe4\x56\xd6\x3c\x8b\x1b\xb2\x32\x7f\x2a\xde\x89\xca\x66\x90\x8d\x88\x61\xe3\x31\xb2\xf8\xd7\xf5\xdf\x00\x98\x2a\xe4\xf7\x69\xb2\x64\x80\x57\xb1\xa2\x5b\x4e\x9a\x1a\xa7\xa3\x2a\x1f\x1b\xfc\x95\x75\x8f\xfd\x6b\x05\x71\xa6\x05\x97\x1b\x06\x18\x7e\x28\xc1\xe8\x26\x68\x3b\xc2\xcc\x33\x8e\xf9\x6c\x9b\x76\xcd\xe3\x9c\x31\x8b\xf7\xdc\x3d\x05\x15\xe1\x2a\x2f\x8a\x40\x77\x30\xb9\x8f\x63\x15\x3d\x9a\x23\x56\x7e\x6e\x77\x81\xd8\x72\x69\xec\x8e\x2d\x9f\xdb\x5d\x5e\x88\x2f\x7f\x7c\xce\xa7\xb3\x31\xea\xef\xaa\x25\x3b\xea\xe9\x84\xf2\xc0\x80\x09\x7f\x30\x8d\xe2\xc6\x68\xfa\x53\x36\x93\x29\xec\x5f\xe7\xde\x58\x3a\x29\xa5\x15\x4f\x7b\xbe\xf5\x05\x94\x25\xfc\x14\x14\x73\xf1\xbd\x1b\xdd\xcc\xe0\x2f\x27\x37\xd7\xce\xe5\x6a\x4d\xe2\x9a\x1f\xbe\xca\x33\x83\x58\x01\xd9\x41\x22\x90\x04\x0d\x4a\x4f\x60\x0d\xc6\x17\x91\x9d\xd5\xe8\x48\xe1\xdc\x28\x5f\xfe\x9f\x97\x16\x0a\xc4\x95\xc1\x82\x4f\xd6\x0d\x5c\x0c\x2f\x2d\xdf\xfa\xaf\x9f\x86\x5e\x2f\x7f\xfe\x56\xc0\xc5\x74\xcb\xa4\x89\x7d\x7c\x12\x8d\xad\x17\xb4\xa6\x3c\x5e\xcd\x86\x45\x12\x26\x36\xf6\x60\x34\x8d\x36\xe2\x71\xa5\x2c\xda\xcd\xc6\x3a\xf2\xf1\x46\x9b\x3a\x5c\xf2\xba\x2c\x81\x71\x2b\xa7\x9f\xd1\x89\xfb\x16\xdd\xcb\x83\xdd\x9d\xc1\x17\x8b\x95\x34\xbc\xb6\x65\x55\x39\xab\x20\x57\x8d\x24\xe2\x4d\x14\x31\x8b\xd8\xb2\x56\x61\x09\x97\x25\xf8\x6d\xc3\x96\xcc\xed\x83\xdd\xf9\x13\xe3\x8c\x6e\x82\x07\x43\xfc\xe8\x41\x9c\xb3\x17\x9d\x7b\xb5\x8c\x1f\x75\xf0\x63\x19\x17\xfe\xa4\x83\xeb\x3d\xae\xce\xa9\xf3\x5f\x0b\x1d\xf6\x7c\x8d\x14\xc0\x4e\x96\xfc\x6f\x48\x8b\xfb\xdb\x20\xe3\xd8\x98\x2c\xbf\xf9\xfd\xee\xf6\xe6\xfa\x97\x02\xb2\x60\xe1\x01\xe0\xfd\x31\xf9\xd8\x87\x7f\xcc\xff\x7e\x8c\x39\x2c\x8e\x21\x90\x29\xb9\x7a\xf2\x7d\x66\xf0\x7e\xf2\x69\xfe\x3b\x00\x00\xff\xff\xd1\xe8\xeb\x3e\x37\x08\x00\x00")

func golangUpdateTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangUpdateTmpl,
		"golang.update.tmpl",
	)
}

func golangUpdateTmpl() (*asset, error) {
	bytes, err := golangUpdateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.update.tmpl", size: 2103, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"golang.create.tmpl": golangCreateTmpl,
	"golang.delete-all.tmpl": golangDeleteAllTmpl,
	"golang.delete-world.tmpl": golangDeleteWorldTmpl,
	"golang.delete.tmpl": golangDeleteTmpl,
	"golang.footer.tmpl": golangFooterTmpl,
	"golang.get-all.tmpl": golangGetAllTmpl,
	"golang.get-count.tmpl": golangGetCountTmpl,
	"golang.get-first.tmpl": golangGetFirstTmpl,
	"golang.get-has.tmpl": golangGetHasTmpl,
	"golang.get-last.tmpl": golangGetLastTmpl,
	"golang.get-limitoffset.tmpl": golangGetLimitoffsetTmpl,
	"golang.get-one.tmpl": golangGetOneTmpl,
	"golang.get-paged.tmpl": golangGetPagedTmpl,
	"golang.get-scalar.tmpl": golangGetScalarTmpl,
	"golang.header.tmpl": golangHeaderTmpl,
	"golang.misc.tmpl": golangMiscTmpl,
	"golang.update.tmpl": golangUpdateTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"golang.create.tmpl": &bintree{golangCreateTmpl, map[string]*bintree{}},
	"golang.delete-all.tmpl": &bintree{golangDeleteAllTmpl, map[string]*bintree{}},
	"golang.delete-world.tmpl": &bintree{golangDeleteWorldTmpl, map[string]*bintree{}},
	"golang.delete.tmpl": &bintree{golangDeleteTmpl, map[string]*bintree{}},
	"golang.footer.tmpl": &bintree{golangFooterTmpl, map[string]*bintree{}},
	"golang.get-all.tmpl": &bintree{golangGetAllTmpl, map[string]*bintree{}},
	"golang.get-count.tmpl": &bintree{golangGetCountTmpl, map[string]*bintree{}},
	"golang.get-first.tmpl": &bintree{golangGetFirstTmpl, map[string]*bintree{}},
	"golang.get-has.tmpl": &bintree{golangGetHasTmpl, map[string]*bintree{}},
	"golang.get-last.tmpl": &bintree{golangGetLastTmpl, map[string]*bintree{}},
	"golang.get-limitoffset.tmpl": &bintree{golangGetLimitoffsetTmpl, map[string]*bintree{}},
	"golang.get-one.tmpl": &bintree{golangGetOneTmpl, map[string]*bintree{}},
	"golang.get-paged.tmpl": &bintree{golangGetPagedTmpl, map[string]*bintree{}},
	"golang.get-scalar.tmpl": &bintree{golangGetScalarTmpl, map[string]*bintree{}},
	"golang.header.tmpl": &bintree{golangHeaderTmpl, map[string]*bintree{}},
	"golang.misc.tmpl": &bintree{golangMiscTmpl, map[string]*bintree{}},
	"golang.update.tmpl": &bintree{golangUpdateTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

