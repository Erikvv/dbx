// Code generated by go-bindata.
// sources:
// golang.header.tmpl
// golang.tmpl
// postgres.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _golangHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x57\x6d\x6f\xe3\xb8\x11\xfe\x6c\xfd\x8a\x39\x03\xb7\x90\x12\x85\xde\xcf\xbe\x4b\x8b\xf3\x3a\x3d\x14\xd8\x26\x8b\x9c\x17\x45\x71\x38\x2c\x28\x69\xec\xb0\xa6\x48\x2f\x45\xc5\xf2\xb9\xfe\xef\xc5\x90\x22\x25\xc7\x09\xba\x87\x5e\x3e\x44\x7c\x99\x97\x67\x86\xcf\x0c\xe9\xd9\x0c\x7e\xfa\xbc\x7a\xf8\xf9\xee\xfe\xee\xf1\xa7\xd5\xdd\x12\x16\xff\x82\x8d\xb0\x4f\x6d\xc1\x4a\x5d\xcf\x9a\x1d\x2f\xb1\xd6\x6a\x8b\x87\x8d\x9e\x55\x45\x97\xcc\x66\xb0\x7c\x80\xfb\x87\x15\xdc\x2d\xff\xbe\x62\x49\xb2\xe3\xe5\x96\x6f\x10\x8e\x47\x60\x9f\xfa\xf1\xe9\x94\x24\xa2\xde\x69\x63\x21\x4d\x00\x00\xa6\x15\xb7\xbc\xe0\x0d\xce\x9a\xaf\x72\xea\x97\xd6\xb5\x9d\x26\x93\x69\x73\x50\x25\x7d\xad\xa8\x71\x9a\x24\x93\xe9\xc8\xfd\xbf\x6b\x2d\x8c\x56\xa4\xd4\x4d\x93\x2c\x49\x9e\xb9\x81\x7f\x1a\xbe\xbb\x33\x06\x6e\x61\xdd\xaa\x32\x45\x63\x00\x8d\xd1\x26\xf3\x1f\x38\x1a\xb4\xad\x51\x34\x3b\x39\x85\x8f\x7a\xb3\x41\xe3\xa5\xd7\xda\xd4\xdc\x42\x63\x8d\x50\x9b\x1c\xb8\xd9\x34\xc0\x18\x13\xca\xa2\x59\xf3\x12\x8f\xa7\xcc\xe9\xdc\xeb\x3d\xdc\x02\x61\x62\xf7\x7a\x9f\x24\xa4\x0c\x52\x6f\x70\xec\xef\xe8\x02\x11\xeb\xe0\xe1\xbb\x5b\x50\x42\xc2\xbb\x77\x24\x10\x66\x5e\x88\xfe\xbc\x54\x3a\xf5\x30\x4b\xa9\x1b\xa1\x36\xd0\x58\x6e\xb1\x46\x65\xe7\xf0\xfd\xf3\x34\x27\xd5\xcc\xa9\x9c\x92\x53\x92\x1c\x8f\x60\xb8\xda\x20\xb0\x5f\xac\x69\x4b\xdb\x50\x6e\xed\x61\xe7\xf3\x7d\xcf\x6b\x4a\x36\x85\xd3\x96\x16\x8e\xc9\xf1\x78\x13\xe4\xff\x26\x50\x56\x4e\x9c\x8c\x8d\xa5\x69\xbc\x22\x13\x61\xcc\x37\x24\x46\xba\xa8\x2a\x1a\xd2\x04\x55\x45\xc7\xe8\x7c\x2d\x17\x83\x8b\xc9\x15\x9d\x06\x5b\x2e\x92\x64\x22\x4d\x0b\x57\xd2\xb4\x84\xd4\x65\xe8\x61\x87\x2a\x6d\x74\x6b\x4a\x8c\x39\x96\xa6\xfd\xd2\x88\xdf\x11\x84\xb2\x19\xa4\x57\xcb\x45\x3e\x24\x70\x52\x15\x6e\x06\xf3\x5b\x70\x76\x3f\x68\xa5\xb0\xb4\x29\x01\x5b\x0a\x2e\xb1\xb4\xf0\x1f\xd8\x19\xa1\xec\x1a\xa6\xdf\x7f\x9d\xc2\xe9\x94\x83\x77\x91\x25\x13\xb1\x3e\xcf\xf5\x64\xd2\x9f\xbe\x12\x32\x0f\x54\x49\x5d\x4e\x27\xa7\x24\x09\xbb\xef\x96\x0b\x92\x5d\x2e\xe6\x50\x15\x79\x32\xa1\x48\xe6\xa0\x70\xff\xf1\xf1\x73\x4a\x90\x02\xe8\x2c\x4f\x26\xa7\x9c\xac\xc5\x18\xd3\xaa\x80\xab\xe5\x22\x83\x0f\x52\x37\x98\x66\x70\x4e\x89\x49\x55\x30\x69\x5a\xf6\xa9\x35\x1b\x4c\xb3\xe8\x32\x60\xa9\x0a\xb6\x5c\xb0\x5e\x37\xbb\xb4\xba\x33\xb8\xe3\x06\xd3\xc6\xd6\x81\xa7\x19\xa4\xfd\x6a\x05\x3e\xfb\xbf\xd8\xda\xe6\x60\x70\x27\x79\x89\x9e\xd9\x99\xcf\xe3\x80\x03\x95\x35\x87\x98\xdc\x1e\xd5\xcf\x68\x9d\xe5\x2c\x50\xf7\x55\xa6\x8e\x73\xe8\xfe\xa1\x31\x3d\x27\x47\xdb\xce\x41\x0f\xc5\x43\x80\x63\xf0\xf3\xe8\xa1\xa5\x4e\x26\x83\xb7\x52\x28\xf5\x86\xf4\xc7\xc1\xfa\xa2\x64\x8c\xc1\xb8\x28\x29\xa0\xd9\x0c\x56\x0f\xcb\x87\x39\x18\x54\x15\x1a\x70\x1e\x9e\xb4\xac\xd0\x34\x8e\x09\xe7\x65\x48\x07\x1c\x4a\xae\xf9\x2a\xe7\x30\x85\x6b\x70\x8e\xae\x61\xea\x9c\xdc\xba\x82\xa3\x91\x63\x47\x60\xfb\xaa\xbb\x60\xfb\xaa\xa3\x73\x25\xcc\x97\x31\x38\xce\x13\xb1\x57\xdd\x98\xd8\xb6\x1b\xe7\x7e\xb9\x60\x0b\xdc\x08\xd5\xa5\xff\x07\x69\x57\x1d\xc9\xae\xba\x39\xd8\x8e\x48\x5b\x15\x3d\x7d\x5f\xa6\xd7\x76\x70\xb5\xea\x32\xf8\xa0\xeb\x5a\xd8\x4b\x8a\xbe\xa0\xa4\xa5\x00\x59\x10\xce\x2e\xed\x3c\x6a\x29\x0b\x5e\x6e\xbf\xd1\xd2\x20\xfe\x8a\xad\x3f\x8d\xdf\x41\x25\xca\x79\x81\x5b\xb0\x1d\xab\x0a\x36\xf6\xf3\x3f\x73\x1e\x49\x3e\x39\xc5\x98\xac\x87\xd1\x45\x6c\xd9\xc8\xd3\xab\xe9\xfe\x43\x6c\xf6\x28\xc7\x2a\x51\x36\x8b\x54\x74\xe5\x33\xb0\x91\x8a\x8f\xc4\x47\x59\x4a\xdc\xa2\xc2\xce\xe6\x94\xda\x67\xb8\x72\x3a\x6e\x75\x8b\x87\x50\xd1\x1e\x4d\x5f\xbd\xeb\xa6\x5f\x15\xca\x46\x57\xd4\xcb\xcf\x1c\xd5\x6d\xd0\x3d\xa8\x92\xfd\xa3\xb5\xd8\xb9\xf5\xaa\xe8\xd7\xe3\x45\x40\x93\x92\xef\x78\x29\xec\xc1\xd9\x74\x6e\xb4\xb6\x4e\x6c\xc0\x23\x54\x85\x9d\x33\xcd\x77\xbf\x7a\x44\xbf\xf5\x70\x4f\x09\xbd\x2c\x7c\x03\xee\xfb\x4b\x03\x5c\x81\x50\xc2\x0a\x2e\xc5\xef\x58\x11\x42\xe6\x33\x1e\x1b\x75\xc4\x90\x9f\x01\xc8\xdc\xad\xd4\xc7\x21\xa9\x04\xdf\x49\xd3\x0e\xfd\x8d\x0a\x27\x8c\xf2\xb8\x1a\x2c\xcc\xe3\x68\xd8\x73\xd0\xe7\x1e\xfb\x16\xd3\x8b\x00\xb2\x7c\xd4\x1f\x25\xa3\xe0\x19\x1d\x0a\x90\x6b\x37\x1d\xef\xb8\x83\x3a\xdf\xe9\x49\x27\xfb\x4c\x08\xd5\xa0\xb1\xfd\xa7\x01\x04\xbe\xb6\x68\x80\xdb\x1c\x84\x2a\x8d\x7b\x30\x34\x20\x99\x44\xd5\xe7\x24\x95\x2e\xe8\xac\xd7\x49\x31\x07\x6e\x7b\x36\x84\xa7\x8a\xa2\x54\x70\x8f\xcc\x2d\xf0\x88\x12\xdd\x1c\x03\x34\x6e\xfb\x79\xbf\xad\xbc\x7e\xd8\xc6\x1e\xa6\xc1\x5a\x3f\x63\xff\x21\x98\x6b\xa3\x6b\x10\x04\x4d\x34\x36\x87\x0a\xcf\xb1\xbe\x80\xea\xf5\x52\x7c\x01\xd3\xa3\x88\xc8\x06\xb8\x7e\x18\x41\xb8\xc1\x0b\x9c\x42\xc2\x6c\x06\xfc\x59\x8b\x0a\x6a\xac\xb5\x39\x80\x44\xbe\x6d\xce\xc3\x7b\x5b\x2c\x16\x75\xc0\x88\xcf\xa2\xb4\xe9\x39\xbb\xe2\xc3\x2f\x2e\xff\x08\xef\x2f\xee\xcf\x9e\x11\xee\x63\xf5\x17\x67\x88\x0e\x40\xa2\x4a\x25\x73\x8c\xca\xe0\x26\xda\xf0\x65\xd4\x1a\x83\xca\x7a\xca\x0e\xec\x58\x6b\x03\x82\x16\xdf\xff\x00\x02\x7e\x8c\xe6\x7e\x00\x71\x7d\x3d\x72\x1c\xd4\x6f\xc3\x68\x48\x51\x40\x1c\x24\xa2\x83\x91\x3a\xfd\xed\xb8\x12\x65\x3a\xf5\xb5\xaa\x5b\x0b\x7a\x0d\xfb\x27\x5e\x6e\x19\x18\x6a\xc6\xa5\x56\x95\xb0\x42\xab\xe6\xaf\xd3\x2c\x6a\x9e\x5e\xf1\xc1\x5c\xa7\xf9\xcb\x59\x66\x1c\x48\xad\xac\x50\x2d\xbe\xa2\x3c\x9b\xc1\xfe\x49\x73\x28\xf4\x01\x44\x03\xf6\x49\x34\xd0\xb4\x85\x95\xc8\xa8\x76\x3c\xdb\x0a\xa9\xf7\x0d\xf0\x3d\x3f\x44\x4f\xee\xf4\xb9\xaa\xc6\x86\xc6\x19\x60\x50\xb4\xf6\x4c\xda\x33\x61\x2f\xa4\x84\x02\xa1\x6e\xe9\x15\x5e\x81\xd5\x50\xe0\x5b\x46\xdc\x29\xd8\x27\x74\xdd\x16\x84\x45\xc3\x29\x0f\xdf\x45\x79\x5a\xff\x32\x3a\xc1\xb1\xbf\x24\x4a\x85\x38\xd2\x7e\x7b\x48\x62\x85\x12\x2d\x06\x6e\xe4\x51\x7f\x8b\x87\x41\xc8\xfd\x08\x09\x3b\x74\x03\x0c\x6f\xc9\x57\x68\x30\x86\x34\xfc\xaa\x38\x67\x38\xbd\x09\xe9\xaa\x88\x97\xf1\xd5\xf0\x74\x1c\x7e\xe6\x48\x56\xb7\xec\xa3\xa6\x5b\xdd\x5f\x03\xb8\x46\xe3\x57\x3f\x2b\xe9\xd7\x7d\x91\xe5\xa0\xb7\x8e\xe7\x3e\x8e\x5f\xb7\x78\xf8\x2d\x14\x8c\xde\x8e\xc8\x10\x33\x81\xa3\xf0\xd8\xd0\xbf\x7a\x82\x0e\x9b\xe8\x28\x75\x7d\x9d\xbc\x7c\xa9\xf6\x37\xf2\xa8\xe0\xfc\x85\xda\x3f\xc0\x24\x5d\xb5\x9f\xfc\x35\xde\xa5\x6e\xf6\x88\x85\x50\x15\xc5\x9d\x7d\xfb\x5b\xf8\xec\x69\x36\x72\x86\xd4\xcc\x5d\xd2\x06\x3d\x3a\x9a\xb9\x87\x11\xd7\xb6\x78\x98\xfb\xcf\xf9\x75\xf1\x46\xc8\xe3\x04\x8e\x5a\xf4\x38\x07\xe7\xf1\x5f\x1c\x6d\x7c\x86\xbf\xe8\xb0\xdf\x7e\x98\xce\xdb\xcd\x4d\xaf\xe5\x9b\xa1\x64\xa1\x67\x65\x97\x2e\xfb\xdf\x3d\x7f\xd4\x51\xb0\xfd\xde\x99\x4c\xfe\x1b\x00\x00\xff\xff\xce\xa7\x66\x81\x98\x10\x00\x00")

func golangHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangHeaderTmpl,
		"golang.header.tmpl",
	)
}

func golangHeaderTmpl() (*asset, error) {
	bytes, err := golangHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.header.tmpl", size: 4248, mode: os.FileMode(420), modTime: time.Unix(1475346246, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x98\x5f\x6f\x9b\x48\x10\xc0\x9f\xe1\x53\xcc\x59\x55\x84\x2d\x9b\xf4\x5e\x2b\xf9\x24\x27\xa1\xb9\x48\x2e\x49\x63\x57\xf7\x50\x55\xd7\x0d\x0c\x2e\x0d\x5e\xb8\x65\x51\x92\x43\x7c\xf7\xd3\xee\x02\x36\x10\x93\xf5\x9f\x5e\x1f\xaa\xe0\x9d\x9d\x99\x9d\xf9\xcd\xce\x40\x9e\x9f\x8f\xe0\xfa\x76\x3e\x73\xaf\xe1\xe3\x17\xf7\x72\x79\x73\xeb\xc2\xd2\xf9\x74\x37\x9f\x2d\x9d\x05\x8c\xce\x8b\xc2\x34\xf3\x7c\x02\x3e\x06\x21\x45\x18\x24\x84\x91\x75\x3a\x80\x49\x51\xc8\xdf\x19\xa1\x2b\x84\x77\xe1\x18\xde\x11\xb6\x82\x0f\x53\xb0\xe5\x9a\x91\xe7\x10\x06\xf0\x2e\x84\xa2\x18\x43\x9e\x23\xf5\x8b\x22\xcf\xa5\x94\xed\x92\x35\x42\x51\x40\xf5\xbc\x7c\x49\xc4\xb3\x54\x88\xd4\xaf\x95\x57\x7f\x37\x3c\x20\x6c\x75\x80\x7d\xa9\xab\xe3\x81\x9e\x45\x1a\x46\x93\xa3\xac\xd2\x30\xd2\xb3\x14\x64\xd4\x9b\xfc\x40\xe2\x23\x1b\x08\xf7\x0c\x2f\xa6\x29\x87\x94\xaf\xf9\xf4\x7b\x9e\x83\xbd\xf8\x3c\x87\xa2\xf8\x6e\x9a\x46\xc2\x30\x21\x0c\xfd\x31\x30\x4c\x22\xe2\xe1\x18\x90\x31\xe1\x4a\xfc\xf0\xd3\x2e\x57\x2d\xb1\x73\x68\x1a\x61\x20\x17\x7f\x9b\x02\x0d\x23\xc8\x4d\xc3\x10\x8f\x53\xf8\x8b\x91\xc4\x61\xcc\x42\xc6\x86\xa6\x61\x30\xe4\x19\xa3\xa6\x51\x98\x86\x8f\x01\xb2\x4a\xb5\x35\x34\x0d\xa1\x35\x8a\x57\x0b\xbe\xe6\x52\xab\x3c\x1e\xc7\x75\x12\x11\x5e\x67\xc5\x9e\xb1\x55\x0a\x45\x31\x34\xcb\xb3\x97\x27\x3c\x1f\xc1\xc2\x99\x3b\x97\x4b\x58\x2c\x67\x4b\xe7\x93\xe3\x2e\x15\x5b\x79\x5e\x9f\x3d\xc5\x08\x3d\x2e\x8f\x7d\x3e\x12\xca\x13\x86\x9c\xbf\x80\x2d\x48\x19\x9d\x9b\x22\x36\x60\xc5\x0f\x3f\x61\x74\x75\x31\x6c\x5a\x57\x7b\x27\x42\x64\x20\x37\x98\xdb\xe2\xcb\xe7\x37\xc5\xeb\x54\x35\xf3\xd1\x10\x14\x67\xb9\x46\x2e\xd3\xc0\x59\xe6\x71\xc5\x93\xfd\x31\xa3\xde\x22\x0b\x82\xf0\x19\x8a\xc2\x92\xfb\x37\xa6\xaa\x7a\xa9\x23\x03\x16\xc3\x34\x8b\x38\x8c\x1a\x8a\x54\xf6\x90\xb1\x98\x0d\x21\x6f\x29\x69\x60\x21\xfd\x35\x4a\x25\x53\x38\x6b\xfa\x53\x98\x65\x6a\x2b\x3e\xec\xcf\x19\xb2\x97\xfb\xf8\xe9\xd9\xca\xf3\x9d\xf9\x2a\x35\x2c\x3c\x42\x4b\xff\x36\xd4\x4c\xa7\x90\xfe\x13\xd9\x0e\x63\x6e\x7c\x1f\x3f\xa5\x92\x1f\x85\x8a\xc0\x69\x2c\xfe\x93\xcc\x74\x29\xdb\x96\x6a\xb2\x26\x8f\x20\x17\x95\x39\xa5\xa5\x53\x1a\x1b\x70\x66\xf3\x79\x1b\x9e\x2e\x3d\x13\x12\x45\x92\x20\x0d\x58\x48\x14\xed\x0b\x4c\x6b\x4b\x3f\x34\x1b\xe1\x0d\x38\x49\x94\x31\x12\x85\xff\xe2\x69\x10\xfa\xfa\xed\x38\x88\x5a\xa4\x2c\xa4\xe3\xd6\x59\x95\x91\x1e\x5e\x7e\x71\xb2\xef\x66\xd7\xce\x95\x46\xba\x13\xb2\x42\x5f\x37\xe1\x52\x78\xdf\x94\x77\x36\xf5\x27\x7d\x5b\x5c\x9c\xea\x4e\x3c\xef\x9d\xfb\x30\xa8\x23\xdd\x8f\x42\xdd\x63\x84\x2d\x00\x00\x8f\xc7\x8f\x48\x21\xe5\x2c\xa4\xab\x31\x44\xe1\x3a\xe4\x10\x52\xde\xc7\x8c\xda\x13\x67\xbc\xde\xb6\x17\x45\xa6\x21\xad\x94\x7d\x70\x30\x9b\xcf\x07\x92\x0e\x65\xfb\x0f\x78\x2f\xe1\xa8\x65\xa6\x10\xac\xb9\xbd\x48\x58\x48\xb9\x25\x7f\x95\x80\x68\xc0\xd8\x0c\xcb\xce\xde\x53\x4f\x1b\xe5\xc1\xca\x28\x10\xb6\x7a\x93\xda\xc1\xa0\x4b\xae\x3a\x0b\xd6\xd7\xa2\xb8\x0e\xd5\xd1\xc4\xee\x4d\xec\x1a\xe7\x52\xb2\x5f\xa5\xdc\xe4\xf7\x6f\xb6\x88\xb8\x44\xe1\x96\xaa\xea\x11\x7a\x5b\x25\x21\x8c\xef\x2a\x8b\xcb\xdb\x2f\x6e\xa7\x77\x6e\xd7\x83\x17\x67\x94\xbf\x59\x08\x52\x4a\xbb\x02\x7a\xa5\x3b\xba\x7f\x90\x54\x5b\x73\x4b\x76\x47\x49\x6d\xdb\x17\xa1\xb8\x14\xcf\xa7\xea\xbe\x21\xe5\x47\xde\x96\x9a\x7d\x55\x74\xd4\xb3\x76\x4b\xed\xf2\xf7\xfe\xc0\x3b\x73\x13\xae\x4d\x50\xc5\xd2\x9f\x24\x3d\x55\xa8\x1e\xe2\x38\x6a\xc5\xca\x90\xb9\xa9\x27\x4e\x39\x72\xea\xa4\xe7\xb0\x8e\x12\x90\x28\x55\xe3\xed\x76\x58\xa4\x0b\xe2\x7e\xd9\x5d\x36\x57\xce\xdc\x59\x3a\x3d\x33\xa7\x8f\x11\x72\x7c\xb3\x6e\x94\x98\x36\xde\x5d\xf1\x1d\x84\x37\x04\x85\xdb\x57\xf2\x87\xa3\x13\xa7\xf4\xfa\xaf\x65\x4e\x67\xb0\xac\xf3\x5a\xb3\xee\x3c\xa3\x77\x5c\xf2\xda\x70\xcb\x66\xd5\x80\x88\x61\x6a\x8b\xf1\x72\x16\x04\xe8\x71\xf4\xad\xa1\x14\x6a\x2b\x86\xf2\x5f\x8f\x7a\xb1\xac\x2c\xe8\xa3\xa2\x37\x65\x96\x09\xd3\x99\x32\x37\xa2\xfb\x72\xa3\x37\x65\x76\x84\x1b\xfc\x9c\x6a\xd0\x54\x91\x3b\xe0\xb2\x3c\x35\x46\xaf\xdc\x8f\x2d\x84\x0e\x25\xa8\xad\xf9\x75\x7a\x76\x93\x73\xe3\x2e\x9c\xfb\xbe\x17\xdb\x90\xa6\xc8\xde\x6e\xce\x4a\x4c\x1b\x96\xae\xf8\x0e\x50\x1a\x82\xb2\x8f\x32\x24\xad\x4b\xe6\x7f\x7a\x6b\x6d\xae\x97\x8e\x91\x8c\xc7\x93\x90\x86\xbc\x3a\xb5\x0a\xfd\xae\xd7\xdb\x72\x3e\xa6\x31\x07\xfb\x5e\x26\xe8\xe2\x05\xca\xe9\x77\x9f\x0e\x7d\x23\xad\xa7\x3b\xde\x7d\x35\xb8\xe9\xbe\xe7\x74\xc8\xd9\xee\xdc\x12\x9c\x28\xc5\xca\xd7\xbd\x0a\x64\xe3\xec\xb1\x9e\x25\x8f\x8d\x0b\x77\x4e\x52\xae\x94\xdf\x68\x96\x8b\xc6\xb1\xc5\x34\xd0\xfe\x50\x72\xf1\x22\x1e\xb7\x12\x66\x25\x8f\xc3\x46\x35\x75\x6a\xab\x4d\x30\x8d\x27\xca\x80\x6e\x29\xd5\x1b\xf6\x2d\xaa\x57\x37\xf6\x97\x57\x7b\xcb\xe1\x85\xf6\x8b\x2a\xea\xef\x71\xbb\x3c\x34\x61\x2b\x93\xda\x48\x79\xcf\x18\xda\xf5\xa1\xfa\xe2\x29\x5e\xdf\x5c\x44\x3f\x75\xe3\xa7\xaa\x0a\x68\xfc\x24\x50\x74\xe3\x27\x6b\xd8\xf9\x44\xaa\xbe\xb2\xda\xb3\x8c\xc7\x69\xb5\x41\x44\xb3\xfa\x7c\xfc\x61\x2a\x1f\x6f\x68\xc8\xfb\xbe\xe5\xfe\x17\x00\x00\xff\xff\xf4\xd6\xc5\xb7\xe4\x16\x00\x00")

func golangTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangTmpl,
		"golang.tmpl",
	)
}

func golangTmpl() (*asset, error) {
	bytes, err := golangTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.tmpl", size: 5860, mode: os.FileMode(420), modTime: time.Unix(1475346976, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x56\x51\x6f\xe2\x38\x10\x7e\x86\x5f\x31\x5a\xf1\x00\xa8\x64\xdf\xf7\xb4\x5a\xa5\xe0\xee\x65\x37\x38\x6c\x62\xae\xea\x63\x4a\x4c\xf1\x29\x71\xb8\x60\x54\x55\x96\xff\xfb\xc9\x76\x48\x1c\x9a\xf4\xda\xd3\xbd\x1c\x4f\x21\x9e\xf9\xe6\x9b\x99\x6f\xc6\x91\xf2\xf3\x1c\x36\x51\x42\xbe\xc7\x28\xf9\x15\x42\x42\x7c\x82\xd6\x08\x13\x20\x68\xbd\x09\x7d\x82\x12\x80\xf9\x67\xa5\xc6\x63\x29\x17\x90\xd1\x3d\xe3\x14\x3e\x9d\x76\x07\x5a\xa4\x9f\x60\xa1\x94\x79\x5f\xa5\xfc\x89\x82\x47\xd2\xc7\x9c\x9e\x40\xa9\xf1\x32\x46\x3e\x41\x40\xfc\xdb\x10\x81\x94\xe0\xe1\xb4\xa0\xa0\x14\x4c\x1d\xfb\x09\xbb\x81\xc9\xae\xcc\xe1\xcb\x57\xf0\x96\x65\x7e\x2e\xb8\x71\x96\x92\xed\x61\xc2\x94\xba\x91\x92\xf2\x4c\xa9\x91\x94\xf0\xcc\xc4\xc1\x5a\xeb\xa0\x00\xd0\x81\xd5\xcf\xe4\xe5\x48\xcd\xe1\x48\x87\x60\x7b\xf0\x70\x29\xf0\x39\xcf\xb5\x01\x8e\x08\xe0\x6d\x18\x82\x3e\xa3\x3c\x73\x50\xac\x6d\x4c\xf7\xb4\xa2\x7c\x67\xe0\x62\x74\x87\x62\x84\x97\x28\x31\xc8\xcd\x99\xcd\x10\x94\x9a\x76\x5f\x5b\xf2\xa0\xd4\x0c\x22\x0c\x2b\x14\x22\x82\xae\x3c\x23\xbe\xa2\x39\x15\xda\xd9\xa5\x30\xfc\x6c\x58\x6d\x2a\x56\xa4\xd5\xcb\x4f\xfa\xa2\x0b\x73\x33\xda\xc4\xc1\xda\x8f\x1f\xe0\x27\x7a\x80\xe9\x40\x25\x3b\x3e\x6d\x2d\xa1\x2e\xa6\x94\xd6\xd4\x3c\xe9\x70\x4a\xcd\xae\x43\xd7\xfd\xdc\x72\xf6\xd7\x99\xda\xc8\x5b\x1c\xfc\xda\xa2\xc1\xa0\x1f\x0e\xa5\xd4\x78\xf6\xdb\xb8\x79\xef\x3c\x75\x94\x96\x95\x82\xa7\x05\xbd\x48\x0d\x9a\x0e\x78\xfa\x4f\x53\xf7\x4e\x02\x1d\x80\x9c\xee\xc5\x9f\x25\xe3\x16\x21\x44\x77\x04\x7e\x44\x01\xb6\xdd\x61\x4f\x07\xd1\x20\xea\xd6\x49\x09\x82\x16\xc7\x3c\x15\x6e\x6c\x2f\xa4\x7b\xa1\x2d\xbe\x0e\x19\x18\xa4\x37\x79\xec\x4a\x9e\x31\xc1\x4a\xde\x4e\x8d\x6e\xb0\xcd\x60\x59\x1c\x2f\xca\xed\x85\x6f\xac\x1a\x26\x6d\xf6\xfa\x6d\x74\xa4\x55\x2a\xca\x4a\x9f\x7c\x7b\xa5\xa9\x4e\x9c\xba\x64\xef\x8a\x66\x1f\xfa\x63\xd6\x67\x6e\xe4\x77\xc2\xf5\xd6\xaa\xcb\x33\xe0\xee\x94\x0f\x83\x06\x2d\xb9\x00\x6b\x6d\x3a\xb6\x27\x9a\xd3\x9d\x70\x4d\x03\xde\xa3\xf5\x81\x76\x3d\x1f\x68\x45\xaf\x17\x5c\xad\x78\x9e\x59\xc9\x3b\x14\xd9\x1e\x78\x29\x60\xc2\x40\xa9\xfb\xdf\x51\x6c\xa6\x9f\xe6\x27\xa3\x2b\x1f\xaf\xa0\x91\x77\x87\xa3\x23\x0a\x8b\xfb\xd6\x4a\xe8\x6e\x60\x93\xdd\xe2\xf9\x90\x8a\x66\x36\x26\xc2\x28\x59\x73\xbb\x68\xfa\x52\xd7\x9c\x72\xf0\xee\x0f\xa9\x70\x49\x3b\x49\x69\x1c\xe3\x68\x6c\x0c\x4b\x33\xcc\x60\xa7\xb9\xe5\x5e\xc7\xb0\xf3\x67\xdd\x9c\xe9\xb6\x7c\x75\xda\x4e\x98\xd6\x65\xfe\x91\xdc\x6c\x5a\x09\x0a\xd1\x92\x40\x4f\x67\xeb\xdc\x3d\xa5\xe0\x2e\x8e\xd6\xe0\x2e\x07\x7b\x05\xd4\x5b\x4c\x2b\xe4\x47\xc9\xec\xdd\x32\xea\x8a\xbe\xdd\x0e\x5e\xe3\xd6\x77\x3b\x2c\x2f\x8d\xea\x03\xa9\xb5\x72\x6d\x34\x84\x15\x55\x19\xad\x6e\xcd\x42\x87\xfa\x17\xc5\x2b\x14\xc3\xed\xc3\x90\xda\x6b\x97\x76\xdf\x81\x9f\x2c\x1b\xd0\xbe\x20\x21\x2b\x98\x70\x43\x84\xc1\x3a\x20\xf0\xed\x95\xd3\x1b\x0b\xeb\xcc\xbb\x4d\x30\x6f\xa6\xf3\xd9\xff\xa0\xde\xff\x34\x37\x8f\xe9\xc9\x99\xee\x5e\xcb\xcc\x5c\xd7\xd6\xa8\xbe\xd1\x07\xf2\xee\x27\xfc\xdf\xf0\x65\xfc\x44\xab\xba\x0d\x01\x4e\x50\x4c\x20\xc0\x24\xea\xb2\xe8\x56\xce\x7e\x47\x2d\x9c\xde\x0f\x5d\xda\xed\x37\xd7\xf0\xbc\x5f\xdf\xdf\xf0\x87\x1f\x6e\x51\x32\x6d\xc0\xff\x25\xf6\x97\xde\x8f\x03\x57\x9d\xe6\x3b\x8c\x6c\x63\x1c\xe0\xef\xd0\x5d\x1d\x7f\x07\x00\x00\xff\xff\x14\xe6\xc0\xba\xb7\x0a\x00\x00")

func postgresTmplBytes() ([]byte, error) {
	return bindataRead(
		_postgresTmpl,
		"postgres.tmpl",
	)
}

func postgresTmpl() (*asset, error) {
	bytes, err := postgresTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.tmpl", size: 2743, mode: os.FileMode(420), modTime: time.Unix(1475346246, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"golang.header.tmpl": golangHeaderTmpl,
	"golang.tmpl": golangTmpl,
	"postgres.tmpl": postgresTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"golang.header.tmpl": &bintree{golangHeaderTmpl, map[string]*bintree{}},
	"golang.tmpl": &bintree{golangTmpl, map[string]*bintree{}},
	"postgres.tmpl": &bintree{postgresTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

