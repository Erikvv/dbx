// Code generated by go-bindata.
// sources:
// golang.count.tmpl
// golang.delete-all.tmpl
// golang.delete.tmpl
// golang.footer.tmpl
// golang.get-last.tmpl
// golang.has.tmpl
// golang.header.tmpl
// golang.insert.tmpl
// golang.misc.tmpl
// golang.select-all.tmpl
// golang.select-paged.tmpl
// golang.select.tmpl
// golang.update.tmpl
// postgres.tmpl
// sqlite3.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _golangCountTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8f\x3d\x4f\xf4\x30\x10\x84\x6b\xef\xaf\x98\xf7\x8a\x57\x89\x94\x8b\x28\x10\xdd\x15\x08\xd1\xd1\x1c\x29\x28\xef\x7c\x89\x13\x19\x25\x76\xb4\x71\x04\xa7\xd5\xfe\x77\xe4\x20\x3e\x1a\x0a\x57\x9e\x67\x9e\x59\x91\x3d\x3a\xd7\xfb\xe0\xb0\x5b\xfc\x10\x6c\x5a\xd9\xed\xb0\x57\xa5\x87\xb8\x86\x24\x82\xba\x59\xfb\xde\xbf\x43\xb5\x10\xc1\x6c\xd9\x4e\xa8\xef\x79\x58\xa0\x5a\xa2\x68\x73\x0c\x3e\xa4\xbb\xdb\x0a\x8e\x39\xbf\xc8\x25\xe5\x66\x17\xba\xad\x8a\x7e\x6b\x2e\xb1\xbb\xee\xa0\x2a\x64\xda\x18\x96\x84\xd3\x69\x49\x53\x3a\x9c\x37\xd7\xf1\x09\xaa\x67\x32\xf1\xf2\x5a\x8f\x71\x68\xd2\x94\x8a\xcf\x40\x05\x11\x58\x1e\x7e\xe4\x44\x26\x0b\x0f\xc8\x61\x3f\xcd\x63\x7d\x5c\x1d\x5f\x9f\xe3\xdb\x9f\x48\xdd\xb4\x36\x14\xff\xb7\xd1\x25\x19\xdf\x6f\x93\xff\x1d\x10\xfc\x08\x21\x63\xd8\xa5\x95\x03\x6e\x2a\xbc\xb0\x9d\x1f\x99\x0b\xc7\x5c\x92\x51\xa2\xaf\xbf\x0d\xae\x32\x41\x4a\x22\xdf\x57\x7e\x04\x00\x00\xff\xff\x89\x04\x6d\x1b\x4c\x01\x00\x00")

func golangCountTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangCountTmpl,
		"golang.count.tmpl",
	)
}

func golangCountTmpl() (*asset, error) {
	bytes, err := golangCountTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.count.tmpl", size: 332, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeleteAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\xd0\x31\x4f\xf3\x30\x10\x06\xe0\xd9\xf7\x2b\xee\xeb\x94\x48\x69\xf4\x0d\x88\x01\x29\x43\x25\xba\xb1\x40\x07\xc6\x34\x4d\xce\x91\x51\x62\x47\xe7\x8b\x28\x3a\xf9\xbf\xa3\x24\x15\xb0\x30\x30\x78\xf2\xbd\xef\x73\x3a\xd5\x3d\x76\x64\x9d\x27\xdc\x45\xd7\xfb\x46\x66\xa6\x1d\xee\x53\x82\x47\x1a\x48\x48\x15\xcb\xd3\x6c\xad\xbb\x62\x4a\x99\x2a\x4e\x0d\x37\x23\x96\x07\xee\x23\xa6\x94\x63\xd6\x86\xd9\x0b\x3a\x2f\xf7\x77\x05\x12\xf3\xf2\x02\xe7\xb0\x54\x93\xef\xd6\x2e\xf8\xe9\x5c\x42\xf7\xb1\x12\x0a\xa6\x0d\x3e\x0a\xd6\x75\x94\x51\xaa\xf3\x8a\x3d\x3f\x61\x4a\x67\x30\xe1\xf2\x56\x0e\xa1\x3f\xc9\x28\xd9\x36\x50\xa0\x2a\x36\xdc\x7f\xeb\x00\xa6\xae\x99\xe2\x06\x3f\x54\xb8\x84\xdc\x38\x0d\xe5\xf1\x4a\xed\xef\x31\xe3\xec\x9a\xf8\x57\xa1\x77\x03\x2a\x18\xc3\x24\x33\x7b\xfc\x5f\xe0\x2b\x37\xd3\x91\x39\x23\xe6\x1c\x4c\x82\x65\xcb\xd9\xcb\x66\x54\xb8\x82\xe5\x4b\x78\x8f\x07\x6b\xa9\x15\xea\xb2\x3f\x17\xde\xfe\x6e\xbd\xde\x0d\x90\x40\xf5\xeb\x5c\x9f\x01\x00\x00\xff\xff\x55\xec\x23\xc6\x96\x01\x00\x00")

func golangDeleteAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteAllTmpl,
		"golang.delete-all.tmpl",
	)
}

func golangDeleteAllTmpl() (*asset, error) {
	bytes, err := golangDeleteAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete-all.tmpl", size: 406, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeleteTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\xd0\x31\x6b\xfb\x30\x10\x05\xf0\x59\xfa\x14\xf7\xcf\x64\x83\x63\xfe\x73\xc1\x85\x40\xb3\x75\x69\x33\x74\x74\x64\xeb\x64\x54\x64\xc9\x9c\x64\x9a\x72\xe8\xbb\x17\x2b\x21\xed\xd2\xa5\x83\x26\xbd\xf7\x7e\x70\xcc\x7b\xd0\x68\xac\x47\xd8\x45\x3b\x79\x95\x56\xc2\x1d\xec\x73\x96\x4f\xe8\x30\x21\x33\xb4\xa7\xd5\x18\x7b\x81\x9c\x2b\x66\x58\x14\xa9\x19\xda\x03\x4d\x11\x72\xae\xa1\xd2\x25\xa7\x61\x08\xc1\x35\x80\x44\xdb\x0b\x54\xcb\x6d\x1b\xbd\x2e\x63\xf2\x27\x34\x04\xfd\x59\x0c\x96\x62\x0c\x3e\x26\xe8\xfb\x98\xe6\xd4\x9d\x8b\xf6\xf2\x0c\x39\x9f\xa5\x08\xc3\x7b\xeb\xc2\x74\x4a\x73\xaa\xae\x81\x06\x98\x41\xd1\xf4\xcd\x4b\x29\xfa\x9e\x30\x5e\xe1\x87\x0e\xb6\x92\x9d\x17\xd7\x1e\x2f\x38\xfe\x5e\x13\xd6\x94\xc6\xbf\x0e\xbc\x75\xc0\x52\x08\xc2\xb4\x92\x07\xa3\x5c\xc4\x06\xde\x48\x2d\x47\xa2\x0a\x89\x6a\x29\x72\x71\xc6\xb0\xfa\x74\x97\x8a\xdb\xbe\x86\x8f\x78\x30\x06\xc7\x84\xba\xfa\xd3\xee\xed\xff\x36\x0f\x8f\xf0\xbf\xd9\xba\x32\x4b\xe6\xfb\xfd\xbe\x02\x00\x00\xff\xff\x9d\xeb\x73\xd1\xa8\x01\x00\x00")

func golangDeleteTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteTmpl,
		"golang.delete.tmpl",
	)
}

func golangDeleteTmpl() (*asset, error) {
	bytes, err := golangDeleteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete.tmpl", size: 424, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xce\x41\xca\xc2\x30\x10\xc5\xf1\x75\xe6\x14\x6f\xd9\x7e\xd0\x1c\xe3\xdb\xb9\xd2\x0b\xa4\xc9\x98\x06\xec\xa8\x49\x84\xca\x30\x77\x97\x82\xdd\xb9\xfb\xc3\x83\x1f\x8f\xa8\xbf\x1f\x8c\x95\xfb\x72\x4f\x0d\x45\x3a\xd7\x6b\x88\x0c\x25\xd5\x09\x35\x48\x66\xf8\xff\x97\xc4\x06\x33\x02\x00\x55\xf8\xbd\xf7\x9d\x25\x61\x32\x03\x40\xf6\xa5\xd2\x7c\xfa\x81\xb9\x73\x5c\x78\x0d\xc3\x88\xd6\x6b\x91\x4c\x6e\xe6\x5c\x64\xe8\x1b\xfe\xda\xf3\xe6\x2f\xdb\x78\x9c\x20\x77\x84\xd1\x27\x00\x00\xff\xff\x0d\x06\x52\x05\x9f\x00\x00\x00")

func golangFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangFooterTmpl,
		"golang.footer.tmpl",
	)
}

func golangFooterTmpl() (*asset, error) {
	bytes, err := golangFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.footer.tmpl", size: 159, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetLastTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x90\x31\x6f\xf2\x30\x10\x86\x67\xdf\xaf\xb8\x8f\x29\x91\x20\xd3\xa7\x6e\x8c\xdd\x58\x80\x4a\x1d\xc1\x90\x4b\xe4\x92\xd8\xd6\xe5\x50\x45\x4f\xf7\xdf\x2b\x83\xa8\xc2\xe0\xed\x79\xdf\xc7\xef\xa9\xae\xb0\xa5\x2e\x44\xc2\xc5\x14\xfa\xe8\xe5\xca\xb4\xc0\x95\x19\xf4\x24\x1b\x3f\x89\x2a\x36\x3b\x92\x2b\xc7\xe6\xe3\x96\x09\xcd\xaa\x7c\xc1\x10\xe5\xed\x7f\x8d\x95\x2a\x66\xcf\x7e\x7c\x32\x68\xb6\x44\x62\x2e\x2f\x71\x0d\xa5\x9f\x62\x7b\x2f\x84\xb9\xec\x94\xda\xdb\xdd\xa3\xe0\xce\x29\x4e\x82\x87\xc3\x24\xa3\xac\x8f\x45\xb8\xdf\x6e\xd0\xec\x08\x2e\x9d\xbe\x9a\x21\xf5\x7b\x19\xa5\x7a\x00\x4b\xcc\x97\x1a\xc0\xa9\x62\x88\x41\x66\x62\x70\x45\xbc\xc6\x92\x09\x63\x1e\x9a\xed\x95\xf8\xb6\x4b\xdf\xf3\x64\xb3\x3f\xfb\x58\xbe\xed\xdb\x96\x53\x87\x55\x37\x78\x11\x8a\xcf\x9e\x1a\xcd\x6a\x70\xa1\xbb\xaf\xf8\xb7\xc6\x18\x06\x54\x70\x8e\x1f\x1a\x55\xfc\x21\x4e\x2f\x7b\x3f\xd9\xe7\x77\xe6\x8a\x98\x6b\x70\x06\x33\xd6\x73\xff\x82\xc6\x30\x80\x81\xea\xdf\x51\x7e\x03\x00\x00\xff\xff\xd1\xea\x50\xed\x81\x01\x00\x00")

func golangGetLastTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetLastTmpl,
		"golang.get-last.tmpl",
	)
}

func golangGetLastTmpl() (*asset, error) {
	bytes, err := golangGetLastTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-last.tmpl", size: 385, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangHasTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8f\xbf\x6e\x84\x30\x0c\xc6\xe7\xf8\x29\xdc\x1b\x2a\x90\x38\xde\x80\xa1\x43\xa5\x0e\x5d\xae\x0c\x1d\xef\xcc\x11\x20\x15\x24\xc8\x09\x6a\x4f\x96\xdf\xbd\x0a\x55\xff\x2c\x1d\x3c\xf9\xfb\x7e\x3f\x5b\xe4\x88\xbd\x1d\x9c\xb7\x78\x88\x6e\xf4\x94\x36\xb6\x07\x3c\xaa\xc2\x13\x45\x11\xac\xdb\x6d\x18\xdc\x07\xaa\x16\x22\xb8\x12\xd3\x82\xf5\x03\x8f\x11\x55\x4b\x2c\x26\x8a\xd8\x85\x30\x57\x68\x99\xf3\x04\x2e\x21\x43\xad\xef\x77\x0a\xfc\x35\x74\xa1\xbf\x1d\x50\x55\xc0\x5c\x83\x8f\x09\xcf\xe7\x98\x96\xd4\x5c\x76\xd1\xe9\x19\x55\x2f\x60\x42\xf7\x56\xcf\x61\x6c\xd3\x92\x8a\xaf\x40\x85\x22\x48\x3c\xfe\x9a\x01\x4c\x16\x36\x98\xc3\x6e\x59\xe7\xfa\xb4\x59\xbe\xbd\x84\xf7\x7f\x2b\x75\x7b\x25\x5f\xdc\x4f\x14\x4b\x30\x6e\xd8\x0f\xbe\x6b\xd0\xbb\x19\x05\x8c\x61\x9b\x36\xf6\x38\xd0\x1c\x6d\x85\xaf\x4c\xeb\x23\x73\x61\x99\x4b\x30\x0a\xdf\xeb\x89\x62\x95\x2b\xa0\x20\xf2\xf3\xe4\x67\x00\x00\x00\xff\xff\x7a\x0b\x6d\x90\x46\x01\x00\x00")

func golangHasTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangHasTmpl,
		"golang.has.tmpl",
	)
}

func golangHasTmpl() (*asset, error) {
	bytes, err := golangHasTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.has.tmpl", size: 326, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x5b\x8f\xa3\x46\x13\x7d\xa6\x7f\x45\x7d\x68\x67\x04\xf3\x79\x71\x1e\xa2\x3c\x38\xf2\xc3\xb0\x38\xd1\x4a\x9b\x71\x32\xc3\x2a\x8a\xb4\x0f\xdb\x86\xc6\xc3\x4e\x73\x99\xee\xc6\xc3\x86\xf0\xdf\xa3\x6a\x6e\x8d\x2f\x9b\x8b\x12\x29\x4f\x06\x53\x75\xaa\xea\xd4\xa9\xea\x5e\x2e\xe1\xf6\x7d\xb8\xfd\x7e\x73\xb7\xb9\xbf\x0d\x37\x01\xf8\xbf\xc0\xbe\x28\x9f\xf6\x5e\x9a\x2f\x65\x49\x23\x96\x15\xf9\x13\xfb\xbc\x2f\x96\xf1\xae\xf6\x0e\x5f\x91\xe5\x12\x82\x2d\xdc\x6d\x43\xd8\x04\x6f\x43\x8f\x90\x92\x46\x4f\x74\xcf\xa0\x69\xc0\xfb\xb1\x7f\x6e\x5b\x42\xd2\xac\x2c\x84\x02\x87\x58\x76\x4c\x15\xdd\x51\xc9\x96\xf2\x99\xdb\xc4\xb2\x93\x4c\xe1\x8f\x4a\x33\x86\xbf\x52\x89\xa8\xc8\x0f\x36\x21\x4d\xf3\x1a\x04\xcd\xf7\x0c\xbc\x4d\xad\x04\x7d\xab\x31\x24\xe2\x59\x88\x7f\x8b\x8f\x60\xcf\x43\xd9\xda\x8d\xe5\x31\x9a\xb9\x84\x1c\xa8\x80\x9f\x05\x2d\x37\x42\xc0\x1a\x92\x2a\x8f\x1c\x26\x04\x30\x21\x0a\xe1\x76\x3f\xd0\x08\xa6\x2a\x91\xe3\x5b\xab\x1d\xde\x15\xfb\x3d\x13\x9d\x75\x52\x88\x8c\x2a\x90\x4a\xa4\xf9\x7e\x01\x54\xec\x25\x78\x9e\x97\xe6\x8a\x89\x84\x46\xac\x69\x5d\xed\x73\x57\xbc\xc0\x1a\xb0\x0a\xef\xae\x78\x21\x44\x7d\x2e\x19\x04\x3e\x3a\x56\x91\x82\x86\x58\x37\xf2\x99\x7b\x81\x4f\xac\x78\xf7\x03\x53\x8f\x45\x2c\x49\x4b\x08\x06\x81\x6d\xc9\x72\x27\x16\xe9\x81\x89\x05\xc8\xa2\x12\x11\xeb\x23\xba\xe0\xdc\x04\xfe\x62\x48\xb8\x41\x6f\xfd\x06\xab\x35\x20\xe0\x19\x57\x97\x58\x69\xa2\x6d\xfe\xb7\x86\x3c\xe5\xe8\x65\xf5\x35\xe6\x29\x5f\x0c\x84\x20\x13\x2e\xb1\x5a\x62\x11\x0b\x4b\x48\xb3\x92\xc3\x94\x9c\x25\x5f\x52\x15\x3d\x42\x07\x0e\x8d\xd9\x90\x20\xa5\x9c\x45\x7d\x33\x22\x2a\xbb\x8e\xdf\xd1\x8c\xc1\x6f\x50\x8a\x34\x57\x09\xd8\x57\xcf\x36\xb4\xed\x8a\x58\x96\x46\x5e\xc3\xf5\x68\xd4\xb6\x81\xdf\xe0\xbf\x2b\x88\x77\xad\xd9\x33\x2b\x66\x09\xad\xb8\x5a\x5d\xc8\x39\xc9\x94\xb7\x41\x32\x12\xc7\xae\x72\x59\x95\x28\x0a\x16\x0f\x59\x5e\x49\x7b\xd1\x3f\xbb\xba\x36\x32\xa0\x5c\x07\x3e\xf2\x10\xf8\x18\x72\x41\xac\xa9\x0d\x2b\x5d\xf9\x82\x58\xed\x02\x63\x8d\x5d\x71\x8a\xdd\x27\xb8\x09\x7c\x17\xde\xf0\x42\x32\xc7\x05\x53\x3b\xcd\x88\x3c\xa4\x56\xec\x3e\x79\x81\xef\xf5\xc6\xee\x19\x9c\x80\x71\xa6\xd8\x2d\xe7\x88\xa5\x0a\x45\x39\xa4\xb9\xfa\xe6\xeb\xae\xa3\x23\xb0\x41\xf4\x83\x96\x8f\xbc\x67\x07\x26\xa4\x9e\x25\xec\x6d\x3e\x4a\x40\xc7\xd4\xa8\x4d\x03\x25\xaf\x04\xe5\xe9\xaf\x6c\x64\xd9\x71\xbf\xd5\x96\xeb\x49\x08\x5d\xd8\xff\xaf\x21\x27\x56\x0b\x8c\x63\xef\x26\xae\xf5\xd7\x53\x85\x98\x0d\x9a\x5b\x9e\x27\x4c\xab\x12\xb5\x1b\xd6\xa6\x76\x55\x3d\x4f\xdc\xf7\x7c\xb6\x4f\x73\xe7\x2f\x2b\x76\xea\x6a\x58\x37\xaa\x5e\x01\x22\x67\x43\x3b\x11\x7b\xa7\x81\x55\xed\x4e\x4d\xd5\x23\x19\xd6\xc6\x48\xaa\x1a\xf4\x54\x86\x35\xb1\xb2\xa3\x99\x74\xf0\x63\x58\xbb\xf0\xa6\xc8\xb2\x54\xfd\x61\xf7\x55\xed\xa9\xda\x1b\x8c\xdd\x53\x9c\xfb\x82\xf3\x1d\x8d\x9e\xfe\x24\xd2\x64\x7e\x06\xeb\x9f\x17\x92\xaa\xff\x13\x3a\xba\xb0\x63\x48\xd3\xc0\xab\x78\xa7\x3b\xb8\x5a\x9f\x6e\x1a\x19\xf8\xb8\x6b\xb4\x99\xaa\x2f\x9b\x85\xb5\x36\xeb\xa4\x60\x60\xb6\xad\xa1\x0a\xbd\xad\x86\x6d\x3d\xd7\xf6\xcc\xc5\x85\x87\xe8\x91\x65\xd4\x71\xfb\x65\x0d\x0d\xe9\x8b\xfa\xa8\x0b\xf1\xba\xef\x0f\x3f\xbd\x83\xd7\x6d\x4b\x3e\x7e\x19\x8c\x17\xfb\x07\x95\x29\x47\xaa\x6c\x7e\xde\x78\x9e\x07\xe6\x79\x83\x39\x1a\x9b\xf4\x9d\xe1\x37\x3a\x1c\x6f\x9f\xa3\x58\xc3\x74\x0c\xf2\x77\x87\xe1\x31\xe4\x78\x6d\x90\xd9\xb6\x4d\xbf\xc6\xf5\xa8\x61\x2b\x4d\x16\x47\xab\xb3\x2c\x86\xf5\x99\x64\x46\x97\x7f\xad\xf0\x0b\x96\x5f\x3c\xca\x31\xc2\x72\x09\xe1\x36\xd8\xae\x40\xb0\x3c\x66\x02\x4a\x4e\x23\xf6\x58\xf0\x98\x09\xa9\x87\xa6\xbf\x1e\x18\xab\xaa\xfb\xc7\xb1\xe5\x33\x5f\x7d\xc8\xaf\xe4\x87\x1c\xc1\xf1\xf1\x60\x2f\x60\xca\xcf\xed\x89\x33\xc6\x00\x25\x3b\x1f\xd1\x41\xc7\x3d\x95\xa3\x8e\x67\xba\xed\x3f\x9a\x8c\x1b\xa3\xf3\x5d\xca\x78\x3c\xdd\x94\x7a\x77\xcd\x48\xd8\xb1\x6e\xa6\xd0\x27\x94\x26\xe0\xbd\x2f\xf5\xf5\x8c\xb3\x09\x61\x8c\xd9\x7d\x64\x5d\x96\x03\xe4\xb9\xe8\x67\x40\xf0\xeb\xab\x64\xaa\x68\x9a\xc8\x2b\xa9\xad\xec\xb1\xa4\xb1\xd8\x59\xea\x5a\x33\xc9\x58\xf5\x3c\xfd\x39\x9d\x67\x58\xf8\x3b\xe1\x27\xae\x93\x53\xb2\xe1\x60\x92\x09\xed\xa8\xb8\xa9\x31\x46\xf6\xce\xcc\xda\xc5\x17\x24\xfb\xae\xe2\x1c\x69\x82\xb6\xc5\xf2\xba\x0a\x8e\x02\x36\xd0\x4f\xe3\xa9\xcf\xf5\x05\x9f\xe6\xb0\x82\xc3\x98\x93\x53\x1d\xd5\xe0\x42\x54\xf0\x2a\xcb\x31\x37\x63\x73\x0d\x71\xf4\x7d\xfa\x8d\xb6\xc0\xeb\xb4\x01\x73\x73\x8c\x73\xa0\xbc\x42\x08\x63\x80\xa0\x01\x3d\x22\x95\x79\x52\x4c\x07\xb9\xbe\x6c\xf6\xaf\x95\x77\xe8\x5b\x87\xe7\x50\xa1\x66\xb5\x5d\xcc\xfd\x9e\x25\x8e\x7b\x9c\xca\x94\xfd\x75\x05\xa7\x72\xc0\xe7\xd7\x73\xcd\xfc\x1e\x00\x00\xff\xff\x69\xdb\x32\x44\xeb\x0c\x00\x00")

func golangHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangHeaderTmpl,
		"golang.header.tmpl",
	)
}

func golangHeaderTmpl() (*asset, error) {
	bytes, err := golangHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.header.tmpl", size: 3307, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangInsertTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\x41\x6b\x24\x21\x10\x85\xcf\xfa\x2b\x6a\x73\xea\x86\x89\x3f\x20\x30\x87\x25\x64\x21\x10\x06\x92\xc9\xb2\x47\x63\xc6\xb2\x71\xd7\xd1\xa6\x74\xe8\x0c\xe2\x7f\x5f\x6c\x99\xe0\x1e\x36\x87\x39\x34\x74\xdb\xf2\xbe\xf7\x5e\x55\xce\xb7\xa0\xd1\x58\x8f\x70\x13\xed\xe4\x55\x3a\x11\xde\xc0\x6d\x29\xfc\x9e\x50\x25\xcc\x19\xc4\xfe\x64\x8c\xfd\x80\x52\x86\x9c\x61\x56\xa4\x8e\x20\xbe\xd3\x14\xa1\x94\x11\xba\xb3\x17\x4c\x27\xf2\x50\xca\x06\x90\xa8\x3e\x81\x46\x5e\x11\xe8\xf5\xaa\xc9\x7b\xde\x7b\xd0\xe7\x15\x95\x39\xab\xe7\xd6\x80\xd8\x21\xea\xb8\x0b\x0b\x94\xc2\x99\x94\x3e\x2c\x70\xb7\x85\x5d\x58\x86\x51\xfc\x7c\xbd\x1f\xc6\x7a\xf5\x53\xae\xbe\x5b\x6f\x93\xc7\x05\xc4\x0f\x8b\x4e\x57\x4f\x9c\xb3\x43\xf0\x31\x81\x94\x31\x1d\xd3\xf6\x6d\xcd\xf0\xfc\x04\xa5\xbc\x71\x16\xde\x7f\x0b\x17\xa6\x7d\x3a\xa6\xa1\x5d\xd8\x40\xce\xa0\x68\xea\x24\x46\xde\xb4\x4d\x0d\x3f\xcf\x81\x52\x6c\xe1\xac\x9f\xa0\x03\x77\x99\x39\xab\x99\xb7\x50\xf5\xed\x71\x76\xe2\xf9\x84\x74\x7e\x09\xcb\x17\x14\xb1\x3f\x28\x5f\x0b\x54\x5a\x53\x30\x30\x18\xa7\x52\x42\x7f\x91\x1d\x57\x2b\xcc\x9a\xb5\xcf\x6f\x5b\xf0\xd6\x41\xe6\x8c\x51\xa3\x7a\xeb\x36\xf0\x8b\xd4\xfc\x40\x34\x20\xd1\xc8\x59\xe1\x97\x9f\x17\x5c\x37\x15\x6f\x5d\xeb\xcf\x45\x6c\x05\x4a\x49\x18\xdb\xb8\xee\x3a\xef\x0f\x1f\x78\xf8\x8f\xef\x6b\x1c\x49\x39\xff\xf9\x84\xac\x48\xf1\xa4\x62\x7a\xf4\x11\x29\x3d\xea\xe1\xea\x8c\xd5\xf0\x84\xa9\x8a\xd5\x21\xb7\xa8\xe2\xf5\x3c\x63\xdd\xd6\x8a\xfd\x77\x61\x0a\xef\x3e\xfe\x06\x00\x00\xff\xff\xa2\x72\x15\x2a\xfc\x02\x00\x00")

func golangInsertTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangInsertTmpl,
		"golang.insert.tmpl",
	)
}

func golangInsertTmpl() (*asset, error) {
	bytes, err := golangInsertTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.insert.tmpl", size: 764, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangMiscTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x90\x41\x4b\xc3\x40\x10\x85\xcf\xed\xaf\x78\x84\x08\x2a\xa6\x3f\xa0\xe0\x25\x88\x17\xc1\x83\x06\xcf\x5d\xb3\x93\x30\x12\xb7\x75\xb3\x11\xcb\x98\xff\x2e\xb3\x2b\x6b\xa5\x87\xdc\x86\x37\xef\x7b\xfb\x66\x45\x2a\x58\xea\xd8\x11\x0a\x4b\xed\x50\x60\x9e\xd7\xdd\xe4\x5a\x5c\xee\x5f\xdf\x70\x2d\x82\xcd\x13\xb5\xc4\x9f\xe4\x6b\x33\x12\xe6\xf9\xae\xbe\x82\xca\xcf\xdc\x3b\x13\x26\xaf\x5a\x14\xea\xbd\x3d\x2a\xbe\xc0\x37\x5f\x0b\xbc\x08\xc8\x59\x54\x1a\x75\xda\x6f\x0c\x7e\x6a\x43\x6c\x18\x8e\x07\x8a\xcc\xa3\x79\x8f\x7c\xda\x41\x14\xf6\xc6\xf5\x84\xcd\x3d\xd3\x60\x47\x75\xaf\x44\xc0\x5d\x36\x9f\x72\xbf\x6f\x25\xb1\xd1\xd4\x38\xaa\xbb\x31\xfd\x18\x4b\xac\x76\x39\xb4\xe4\x1b\x94\x01\xdb\xdb\xbf\x75\x72\x97\x7c\x96\xf6\x40\x7a\xcd\x56\xc7\x17\x33\x4c\x84\x6f\x1c\x3c\xbb\xd0\xa1\xb8\xf8\x28\x92\x29\xb9\x77\xda\xb0\xca\x47\x67\x7d\xfd\xef\x2f\x7e\x02\x00\x00\xff\xff\x15\xe5\x41\x39\xab\x01\x00\x00")

func golangMiscTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangMiscTmpl,
		"golang.misc.tmpl",
	)
}

func golangMiscTmpl() (*asset, error) {
	bytes, err := golangMiscTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.misc.tmpl", size: 427, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangSelectAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x91\xc1\x6a\xf3\x30\x10\x84\xcf\xd2\x53\xec\x9f\x93\x0c\x89\x1f\x20\x3f\x3e\x84\x52\x7a\x29\x85\x34\x87\x1e\x1d\x25\x5e\x19\x15\x59\x32\x6b\x99\x24\x88\x7d\xf7\x22\x3b\x49\x7b\x08\x85\x1e\x7c\xb0\xbd\x33\xdf\xec\x6c\x4a\x2b\x68\xd0\x58\x8f\xb0\x18\x6c\xeb\x75\x1c\x09\x17\xb0\x62\x96\x2f\x18\x37\xce\xa5\x04\xe5\x6e\x34\xc6\x9e\x81\x59\xa5\x04\xbd\x26\xdd\x41\xb9\xa1\x76\x00\xe6\x02\x14\x85\xd3\x00\x29\xc1\xe0\xec\x11\x83\x81\xf2\x3d\x9c\x80\x79\x09\x48\x94\x9f\x40\x85\xcc\x18\xf4\xcd\xe4\x2b\x7f\x32\x0f\xa1\xb9\x2c\x80\x39\x49\x71\x0c\x7e\x88\x50\xd7\x43\xec\x62\xb5\x9f\xb8\xdb\x57\x60\xde\x4b\x11\x0e\x9f\xa5\x0b\xed\x2e\x76\x51\xcd\x03\xcb\x4c\xd4\xd4\x7e\x07\x91\x52\xd4\x75\xce\x32\x83\xd7\x15\x64\x95\xed\x7a\x57\x6e\x47\xa4\xcb\x43\x61\xd6\x09\x6b\x26\xc5\xbf\x0a\xbc\x75\x90\xa4\x10\x84\x71\x24\x9f\x5f\x97\xf0\x41\xba\x7f\x26\x52\x48\x54\x48\xc1\x52\x34\x68\x90\x60\x66\x95\x4f\x2e\x0c\xa8\x32\xdc\x84\xfb\xc7\x37\x3c\x47\x55\x4c\x4e\x29\x81\xf5\x36\x7a\x3c\xdd\x7a\x91\x42\x64\x5a\x75\x1b\xde\x1d\xb5\xcf\xbd\xea\xa6\xa1\x60\x40\x19\xa7\x63\x44\x3f\x8d\x17\xd3\x62\xe2\x41\xc2\x5f\x22\xe6\x8c\x62\x3a\x4a\x05\xba\xef\xd1\x37\x6a\xae\xe5\xb6\xf8\x9c\x63\x5e\xe6\xea\xbc\xbe\xc7\xc9\x3e\xc5\xff\x3f\x15\x72\xfd\x39\x43\xbc\x75\x92\x65\x4a\xf7\x73\x7f\x05\x00\x00\xff\xff\xf4\x18\x1d\x73\x62\x02\x00\x00")

func golangSelectAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangSelectAllTmpl,
		"golang.select-all.tmpl",
	)
}

func golangSelectAllTmpl() (*asset, error) {
	bytes, err := golangSelectAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.select-all.tmpl", size: 610, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangSelectPagedTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x53\xc1\x6a\xdc\x30\x10\x3d\x5b\x5f\xf1\xea\x43\xb1\x83\xed\xa4\xd7\x82\x0b\x69\x77\x9b\x1e\x52\x92\xd6\x81\x1e\x42\x20\x8e\x3d\x36\x4a\x6d\xd9\xc8\x32\x84\x0a\xfd\x7b\x91\x64\x6f\x92\x6d\x9a\xa6\x64\x61\xc1\x1a\xcd\xbc\x79\xef\xcd\x48\xeb\xc3\x03\x96\xbf\xf2\xc7\x80\x62\x7b\xba\xfd\x74\x81\xf3\xe3\x93\xed\x06\x5f\xb7\x17\x5f\xce\x36\xaf\x87\x3d\x38\x34\x86\x69\x8d\x9a\x1a\x2e\x08\xe1\x44\x1d\x55\x2a\x1d\xcb\x96\xea\x10\xc6\xb0\x66\x16\x15\xa2\xe1\xe6\x16\x07\x5a\x23\xdb\xf0\xd2\x26\xc0\x98\xcd\xc7\x18\x5a\x43\x51\x3f\x76\xa5\xda\x2b\x4d\x6d\x59\x88\xcc\x22\xfc\x1d\xe2\xe2\xee\x85\x10\x5a\x83\x44\xed\xc0\xb4\x4e\x9f\x24\xeb\xd2\x53\x51\xf6\x14\x22\x35\x86\x9d\xdb\xe0\x09\x29\xad\x31\x76\xb3\x2c\x3b\xfe\x8b\x90\x15\x4a\xce\xae\xb5\x25\xf2\x79\x16\x55\x31\x37\x0d\xbf\xf3\x3d\x52\xd7\x24\xfd\x77\x97\x89\xb7\xbe\xc9\xf3\xe4\x17\x36\x56\x41\x64\x53\xc7\x52\x96\x3d\xb2\x63\xd9\x4e\x9e\x01\x6f\x76\xa7\x64\xd5\x68\x61\x01\xa0\x52\xc3\x4f\x12\x98\x94\xe4\xa2\x4d\xd0\xf1\x9e\x2b\x70\xa1\x62\x44\xee\x5e\xd2\x34\x77\x0a\x97\x57\xce\xd3\x9d\xae\x64\x29\x1c\x66\xb5\xab\x25\x29\xed\x7f\x90\xf1\x7f\x88\x5c\x05\xa6\xcf\x2a\x74\x4e\x58\x81\xd0\x8c\x05\xd5\x20\x26\xdb\xb6\x57\xf9\xb5\x63\xf5\xed\x14\xc6\x5c\xb3\x60\x94\x34\x96\x92\xea\x04\x92\xc6\xae\xac\xc8\x93\x7a\x9f\x63\xb8\xb9\xcd\x96\xdb\xc8\x16\xc6\x2c\xe0\x8d\xbb\x7c\x93\x43\xf0\x0e\x9a\x05\x81\x3d\xe6\xf8\x21\xcb\x71\x2b\x65\x44\x52\xc6\x2c\x08\x24\xa9\x59\x0a\x16\x18\x16\xd4\xd4\x90\x5c\xa1\xa3\xd8\xf9\x63\x81\xbb\xa1\x2d\x54\xaf\x1c\x70\x82\xc7\x86\x6b\x8d\x52\xb6\xf7\xfe\x43\x6b\x12\xb5\x31\xde\xbe\xc5\xf0\x98\x39\x2c\xde\xac\xe3\xc8\x73\x84\x21\xb4\x8b\x3e\x98\x52\x8e\xf0\x28\x74\x41\xc3\xd8\x42\x77\xd5\x9c\x15\xce\xb5\xe8\xad\x9f\xd8\x4b\x79\x60\x8f\xc8\x13\xb6\x78\x07\xec\x31\x41\x18\x26\x7b\x06\x99\x1d\x77\xbf\x3b\x1f\x70\xf4\x80\xb8\x0d\x93\x88\x3c\xa7\xd8\xea\xf2\x59\xf7\x19\xf7\xf2\xec\x2e\xe5\x68\x7a\x95\x15\xa3\xe4\x42\x2d\x55\x97\xae\x22\x7d\x77\x95\xd9\x59\xbb\xf7\x76\x26\x60\x4c\xbc\x83\xf0\x9b\x6c\x40\xdd\x44\x7f\x98\xe6\x51\xfd\xf7\x6a\x9d\x5f\x6c\xa7\x6a\xf5\xe5\xbb\x3b\x4e\x8f\x57\x3b\xb1\xa2\xd9\xde\x9b\x65\xbf\x03\x00\x00\xff\xff\xb9\x78\xd4\xc4\x69\x05\x00\x00")

func golangSelectPagedTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangSelectPagedTmpl,
		"golang.select-paged.tmpl",
	)
}

func golangSelectPagedTmpl() (*asset, error) {
	bytes, err := golangSelectPagedTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.select-paged.tmpl", size: 1385, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangSelectTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x90\xb1\x6e\xf3\x30\x0c\x84\x67\xe9\x29\xf8\x67\xb2\x81\x44\x6f\xe0\xe1\x1f\x82\x2e\x45\x81\x24\x43\xc7\x44\x89\x25\x43\x85\x2d\xb9\x94\x0c\x37\x25\xf8\xee\x85\x54\x34\xf6\xd2\x0e\x5c\x08\xde\x77\xc7\x23\xda\x41\x6b\xac\xf3\x06\x36\xd1\x75\x5e\xa7\x09\xcd\x06\x76\xcc\xf2\xc9\x24\x22\x50\xa7\xc9\x5a\xf7\x01\xcc\x15\x11\x8c\x1a\xf5\x00\xea\x3f\x76\x11\x98\x6b\x58\xed\x8e\x61\x06\xe6\x2d\x18\xc4\x3c\x01\x6b\x99\xe1\xc6\xb7\x85\x26\xd7\x4e\xd7\xd0\xde\x37\xc0\x4c\x52\xdc\x82\x8f\x09\xce\xe7\x98\x86\xd4\x5c\x8a\xe1\xe1\x19\x98\x2f\x52\x84\xeb\x9b\xea\x43\x77\x4a\x43\xaa\xbe\x0f\xb6\x40\x04\x1a\xbb\x25\x81\x94\x82\x08\x9c\x77\xe9\x27\x81\x14\x39\x41\x03\x59\xed\x86\xb1\x57\x87\xc9\xe0\xfd\x18\xe6\x5f\x19\xea\x74\xd3\x3e\x7f\xa2\xdb\x16\x83\x85\xca\xf6\x3a\x25\xe3\x0b\xb1\x2e\x2e\xc2\xd9\xf2\x58\xd3\x40\x7c\xef\xd5\x1e\xf1\x25\x1c\xc3\x1c\x81\xa4\x10\x68\xd2\x84\x3e\x63\x3f\x0d\x86\xa5\x09\xef\x7a\x29\xf8\xa1\xfd\xd7\xe4\xcd\x9f\x8a\x57\xd4\xe3\x1e\xb1\x32\x88\x75\x91\x2e\x87\x25\xf1\x9a\xcc\x92\xe8\xd1\xee\x57\x00\x00\x00\xff\xff\x6d\x19\xb1\xa7\xc7\x01\x00\x00")

func golangSelectTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangSelectTmpl,
		"golang.select.tmpl",
	)
}

func golangSelectTmpl() (*asset, error) {
	bytes, err := golangSelectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.select.tmpl", size: 455, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangUpdateTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x55\x41\x6b\xf3\x38\x10\x3d\xdb\xbf\x62\xd6\x27\x99\x24\x62\xd9\x63\x21\x87\xf2\xd1\x85\xc0\x47\x68\x9b\x76\xf7\x50\x4a\xaa\xc4\x63\xa3\xac\x2d\x39\x92\xdc\x34\x18\xff\xf7\x65\x24\xc7\xeb\xb4\x69\xd9\xaf\x87\x1c\x14\x8d\xde\xbc\x79\xf3\x66\xdc\xb6\x33\xc8\x30\x97\x0a\x21\xb1\xb2\x50\xc2\x35\x06\x13\x98\x75\x5d\xfc\x58\x67\xc2\x61\xdb\x02\x5f\x35\x79\x2e\xdf\xa0\xeb\x58\xdb\x42\x2d\x8c\xa8\x80\x5f\x9b\xc2\x42\xd7\x4d\xa1\xf1\x61\xe0\xe3\x9c\x69\xb6\x8e\x87\x87\xe1\xb0\x14\x15\x42\xd7\xa5\x30\x7a\x7a\x8f\xae\x31\xca\x3f\x46\x63\xe8\xa7\x4d\x1a\x13\x13\x54\x99\x4f\x1d\x8f\x69\x6d\x74\x76\xf4\x8c\xda\x38\xda\x6a\x65\x1d\xac\xd7\xd6\x55\x6e\x5d\x1b\xcc\xe5\xdb\xfc\xc5\xa7\xbe\xfb\x79\xeb\x8f\xd0\x75\x2f\xef\xe2\xac\xa7\x3f\xc4\x0d\xd5\xbc\xc4\x71\xf4\x2a\x0c\xec\x2d\x3c\x3d\x6f\x8e\x0e\xc3\xf1\x55\x94\x0d\xd2\x5f\x52\x39\x34\xb9\xd8\x62\xdb\xc5\x71\xd4\xb6\x20\x73\xe0\xb7\xda\x4a\x27\xb5\x12\xe5\xb5\x29\x9a\x0a\x95\x23\x19\xe2\x68\x07\x57\x73\x12\xa1\x44\x35\x88\x43\x78\x1e\x6b\x0e\xa2\xae\x51\x65\x2c\x9c\xa7\x14\x28\x4c\x31\x04\xa6\x1e\x7e\xa8\x3e\x12\x59\x76\x42\x27\xd8\xbc\x51\x5b\xa6\x48\x49\xeb\x8c\x54\x45\x0a\x6d\x1c\x45\xfb\x11\xee\xde\x4e\x81\x02\x38\xe7\x69\x1c\x45\x24\xdf\x57\x64\xa3\xdd\x64\x72\x01\x21\x01\x5f\x02\x3f\x05\x0f\x8a\x26\x3d\xee\xfb\x07\xd6\x99\xad\x56\xaf\x7c\xe1\xb4\x60\xbb\xf4\x93\xa8\x64\x0a\xc9\x88\x18\x96\x16\x03\x8b\xff\x9d\xff\x1d\x80\xca\xfc\xfb\xbe\x2b\x46\xa8\x02\xcf\xcd\x27\x36\x25\xfe\x29\xb1\xcc\x42\xb9\x32\xef\x5d\xca\x09\xbd\xb7\x24\xfc\x36\x07\x25\x4b\x2f\xe5\x48\x6f\x96\x50\xcc\x0f\x5d\x36\x15\x59\x34\xa1\xa4\x9f\x75\xf1\x23\x28\xf7\x57\x2c\x4d\x89\xdd\xa9\xa7\x5d\x20\x1a\x5a\xb2\x44\xcc\xec\x52\x1f\x3c\xb1\xf5\x5a\xe9\x03\x75\x78\xa9\x0f\x2c\xe5\x8f\x0f\x3f\xd8\xb9\x15\x46\xf5\x5d\x37\x4e\x8f\x6a\xfa\x40\xb9\x67\x40\x84\xbf\x70\x1d\x5f\x28\xe9\xfe\x12\xe5\x99\xe9\xba\xff\xfc\xad\xb4\xfb\x90\x4a\xe6\xe4\x6a\xb6\xb7\x29\xcc\xe7\xf0\xbb\x57\xcc\x84\x19\x56\xb2\x9c\xc2\xdf\x46\xd4\x37\xc6\xb0\xbc\x72\xfc\x86\x86\x39\x67\x89\x42\xcc\xc0\xe9\xd3\x76\x10\x0e\x4a\x14\xd6\x81\x56\x08\x39\x41\x27\x17\x35\x1a\x28\x5c\x72\xee\xec\x5b\x13\xe5\x91\xc3\x26\x20\xa5\xcf\x76\x07\x4c\xfa\x89\x62\x7b\xfb\x74\xd5\x17\x39\xfb\xe3\x39\x85\xc9\xf9\xf2\x88\x23\xbd\xd9\xf1\x52\x17\x2b\x57\x39\x16\xae\x2e\xe4\x1c\xb6\xc4\xaa\xa9\x6b\x6d\x9c\x0d\xab\x4e\xaa\x02\xfa\x66\x4a\x25\xdd\x68\x03\xc6\x11\x6d\xc0\x39\x10\xba\xac\xea\x92\xdf\x35\x68\x8e\xf7\xfa\x30\xe4\x08\xf5\x91\xfb\xf9\x6a\x2b\x14\xad\x51\x91\x65\x46\xe7\xc0\xf2\x52\x38\x47\xeb\x26\xc0\xa5\xa1\x6c\x99\xfb\xad\x3a\x72\xf7\xa5\x5e\xa1\x31\x41\xff\xfe\xf2\x54\xca\x68\x37\x2b\x59\x06\x11\x69\x5e\x67\xc1\xae\x86\xa4\x26\xf8\xab\x11\xe7\x9b\x37\xdc\x5e\xe0\xfb\xcb\x54\xd6\xeb\xfa\x9f\x01\xdd\xe7\xe2\x3f\x85\x75\x0b\x65\xd1\xb8\x45\xc6\xbe\x5d\x1c\x31\x2d\xd0\x11\x18\x8d\x40\xa8\x91\x3f\x1c\x6b\x1a\x18\x46\x69\xcf\xa7\xae\x3b\xfb\x18\xfd\x1b\x00\x00\xff\xff\xa3\x96\x7e\xba\x23\x07\x00\x00")

func golangUpdateTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangUpdateTmpl,
		"golang.update.tmpl",
	)
}

func golangUpdateTmpl() (*asset, error) {
	bytes, err := golangUpdateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.update.tmpl", size: 1827, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x4d\x8f\xda\x38\x18\x3e\xc3\xaf\x78\x55\x71\x60\xd0\x90\xde\x77\x55\x8d\x32\xe0\xe9\xa6\x0d\x0e\x93\x98\xad\xe6\x98\x12\x53\xbc\x4a\x1c\x36\x18\x8d\x90\xf1\x7f\x5f\xd9\xce\x27\x4d\xd8\xe9\x6a\x0e\x7b\x73\xec\xc7\xcf\xfb\xbc\x9f\x8e\x94\x1f\x67\xb0\x0e\x22\xf2\x39\x44\xd1\xb3\x0f\x11\x71\x09\x5a\x21\x4c\x80\xa0\xd5\xda\x77\x09\x8a\x00\x66\x1f\x95\x1a\x8f\xa5\x9c\x43\x42\x77\x8c\x53\xf8\x70\xdc\xee\x69\x16\x7f\x80\xb9\x52\x66\xbf\x88\xf9\x0f\x0a\x0e\x89\xbf\xa7\xf4\x08\x4a\x8d\x17\x21\x72\x09\x02\xe2\x3e\xfa\x08\xa4\x04\x07\xc7\x19\x05\xa5\x60\xda\xc2\x4f\xd8\x3d\x4c\xb6\x79\x0a\xbf\x7d\x02\x67\x91\xa7\xa7\x8c\x9b\xcb\x52\xb2\x1d\x4c\x98\x52\xf7\x52\x52\x9e\x28\x35\x92\x12\x5e\x99\xd8\x5b\xb4\x36\x3a\x6a\x73\xea\x35\x39\x1f\x68\x75\x32\x07\xb6\x03\x07\xe7\x02\x9f\xd2\x54\x03\x70\x40\x00\x6f\x7c\x1f\xf4\x19\xe5\x49\x17\x18\xd2\x1d\x2d\x28\xdf\x1a\xae\x10\x3d\xa1\x10\xe1\x05\x8a\x0c\x6d\x7d\x66\x7d\x03\xa5\xa6\xdd\x6d\x2b\x1b\x94\xba\x83\x00\xc3\x12\xf9\x88\xa0\xab\x9b\x01\x5f\xd2\x94\x0a\x7d\xb9\x6d\x7f\x78\x6d\x54\xad\x0b\x96\xc5\xc5\xf9\x2b\x3d\xeb\x90\xdc\x8f\xd6\xa1\xb7\x72\xc3\x17\xf8\x8a\x5e\x60\x3a\x10\xc3\xce\x9d\x26\x8a\x50\x86\x51\x4a\x0b\x35\x2b\x6d\x4e\xa9\xbb\x6b\xd3\x65\x26\x37\x9c\xfd\x7d\xa2\xd6\xf2\x06\x7b\xcf\x1b\x34\x68\xf4\x97\x4d\x29\x35\xbe\xfb\x7d\x5c\xef\xb7\x56\x9d\x1a\x4b\x72\xc1\xe3\x8c\x56\x45\x06\x75\x06\x1c\xfd\x51\xc7\xbd\xe3\x40\x87\x20\xa5\x3b\xf1\x57\xce\xb8\x65\xf0\xd1\x13\x81\x2f\x81\x87\x6d\x76\xd8\x8f\xbd\xa8\x19\x75\xea\xa4\x04\x41\xb3\x43\x1a\x8b\xb6\x6d\xc7\xa7\x3b\xa1\x11\x9f\x86\x00\x86\xe9\xa6\x8e\x6d\xce\x13\x26\x58\xce\x9b\x7e\xd1\x09\xb6\x1e\x2c\xb2\x43\x5d\xd0\x7d\xf4\x35\xaa\x56\xd2\x78\xaf\x77\x83\x03\x2d\x62\x91\x17\xfa\xe4\xe1\xa7\x9a\xea\xd8\x29\x43\xf6\x26\x6b\x76\xd1\x6f\xb3\x3c\x6b\x5b\x7e\x23\x5d\x6f\xac\xba\x3a\xbd\xb7\x08\xf4\x1a\x65\x1e\xd6\x85\xd9\xc2\x1e\x69\x4a\xb7\xa2\x0d\xf5\x78\x4f\xa1\x0f\xe4\xea\x75\x4f\x0b\x7a\x3d\xd7\xca\x72\xe7\x89\xad\xf7\x4a\x1f\xdb\x01\xcf\x05\x4c\x18\x28\xf5\xed\x0f\x14\x9a\xbe\xa7\xe9\xd1\x54\x94\x8b\x97\x50\x17\x76\x47\x60\xab\x1c\x2c\xe9\xad\x61\xd0\x9d\xba\xc6\xb5\xf9\xeb\x3e\x16\x75\x57\x4c\x84\xa9\x61\x2d\xac\xaa\xe6\x2a\xa2\x29\xe5\xe0\x7c\xdb\xc7\xa2\x56\xdc\x72\x47\x93\x98\x5b\x06\x60\x24\x9a\x1e\x06\xdb\xc4\x8d\xf0\xd2\x80\x6d\x3b\x7b\xad\xd5\xd4\x56\xac\xf6\xb9\xb2\xd1\xe0\x67\xbf\xe2\x95\x75\x28\x42\x3e\x5a\x10\xe8\x49\x68\xe9\xb5\xa3\x14\x3c\x85\xc1\x0a\xda\x03\xc1\x8e\xf2\x72\x72\xe9\xc2\xf8\x92\x33\xfb\x92\x8c\xba\x75\xd4\x4c\x04\xa7\xbe\xf6\xd3\x73\xb0\xa8\xf2\xd3\xc7\x50\xd6\xc7\x35\xa8\x97\x28\x28\x12\x5a\x3c\x9e\x2d\x4b\x10\x2e\x51\x08\x8f\x2f\x43\xad\x52\x82\x9b\xb9\x06\x6e\xb4\x18\x20\xf6\x59\xc6\x84\xa5\xf5\xbd\x95\x47\xe0\xa1\x0b\xbc\x31\x89\x4e\xbc\x1b\x69\xb3\x33\x9d\xdd\xfd\xdf\x83\xfa\x6f\x3d\xf1\x3d\x3e\xb6\xda\xb6\x17\x99\x98\x47\xd8\x82\xca\x77\x7a\xc0\xe9\x7e\xc1\xef\xa3\x97\xf1\x23\x2d\xca\x1c\x78\x38\x42\x21\x01\x0f\x93\x60\x50\x85\xfd\x29\x32\xb1\x1c\x0d\xbd\xc0\xcd\xaf\xd3\x70\x17\x5f\x3f\xc6\xf0\xa7\xeb\x6f\x50\x34\x35\xae\xfd\x27\xd6\x87\xd6\xcb\x5e\xfb\x6e\xfe\xa0\xc8\x26\xc4\x1e\xfe\x0c\xb3\xe1\x30\x9c\x0e\x49\x5c\x25\x63\xb3\x5e\xba\xe5\x4f\x53\xfd\x20\x47\x88\xc0\xe5\x72\x79\x8e\x2e\x97\xcb\xbb\x24\xe5\x86\xb0\x7f\x02\x00\x00\xff\xff\x5f\xa3\x67\x2b\x04\x0b\x00\x00")

func postgresTmplBytes() ([]byte, error) {
	return bindataRead(
		_postgresTmpl,
		"postgres.tmpl",
	)
}

func postgresTmpl() (*asset, error) {
	bytes, err := postgresTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.tmpl", size: 2820, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlite3Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x4d\x6f\xea\x38\x14\x5d\xc3\xaf\xb8\x7a\x62\x01\xa8\xe4\x2d\x66\x37\xa3\xa7\x2a\x05\x57\x93\xd7\x90\xd0\xc4\x4c\xd5\x65\x4a\x4c\xf1\x28\x71\x98\x60\x54\x21\xe3\xff\x3e\xb2\x9d\x4f\x9a\x30\xed\xa8\x8b\xb7\x73\xec\xe3\x73\xcf\xfd\x74\x84\xf8\x3e\x85\xf0\xd1\x75\x30\xfa\x0d\x42\x6c\x63\xb4\x44\x1e\x06\x8c\x96\x2b\xd7\xc6\x28\x04\x98\x7e\x97\x72\x38\x14\x62\x06\x31\xd9\x52\x46\xe0\xdb\x61\xb3\x23\x69\xf4\x0d\x66\x52\xea\xfd\x3c\x62\xaf\x04\x2c\x1c\xbd\x24\xe4\x00\x52\x0e\xe7\x01\xb2\x31\x02\x6c\xdf\xb9\x08\x84\x00\xcb\x8b\x52\x02\x52\xc2\xb8\x81\x1f\xd1\x1b\x18\x6d\xb2\x04\x7e\xff\x01\xd6\x3c\x4b\x8e\x29\xd3\x97\x85\xa0\x5b\x18\x51\x29\x6f\x84\x20\x2c\x96\x72\x20\x04\xbc\x51\xbe\x33\x68\x65\x74\xd0\xe4\x54\x6b\x7c\xda\x93\xf2\x64\x06\x74\x0b\x96\x97\x71\xef\x98\x24\x0a\xe0\xf9\x18\xbc\xb5\xeb\x82\x3a\x23\x2c\x6e\x03\x03\xb2\x25\x39\x61\x1b\xcd\x15\xa0\x7b\x14\x20\x6f\x8e\x42\x4d\x5b\x9d\x19\xdf\x40\xca\x71\x7b\xdb\xc8\x06\x29\x27\xe0\x7b\xb0\x40\x2e\xc2\xe8\xe2\xa6\xcf\x16\x24\x21\x5c\x5d\x6e\xda\xef\x5f\x6b\x55\xab\x9c\xa6\x51\x7e\x7a\x20\x27\x15\x92\x9b\xc1\x2a\x70\x96\x76\xf0\x0c\x0f\xe8\x19\xc6\x3d\x31\x6c\xdd\xa9\xa3\x08\x45\x18\x85\x30\x50\xbd\x52\xe6\xa4\x9c\x5c\x9a\x2e\x32\xb9\x66\xf4\x9f\x23\x31\x96\xd7\x9e\xf3\xb8\x46\xbd\x46\x3f\x6d\x4a\xca\xe1\xe4\x8f\x61\xb5\xdf\x58\xb5\x6a\x2c\xce\x38\x8b\x52\x52\x16\x19\x54\x19\xb0\xd4\x47\x15\xf7\x96\x03\x2d\x82\x84\x6c\xf9\xdf\x19\x65\x86\xc1\x45\xf7\x18\x7e\xfa\x8e\x67\xb2\x43\x5f\x77\xbc\x62\x54\xa9\x13\x02\x38\x49\xf7\x49\xc4\x9b\xb6\x2d\x97\x6c\xb9\x42\xfc\xe8\x03\x68\xa6\xab\x3a\x36\x19\x8b\x29\xa7\x19\xab\xfb\x45\x25\xd8\x78\x30\x4f\xf7\x55\x41\x77\xd1\x57\xa8\x4a\x49\xed\xbd\xda\xf5\xf7\x24\x8f\x78\x96\xab\x93\xdb\x77\x35\xd5\xb2\x53\x84\xec\x43\xd6\xcc\xa2\xdb\x66\x71\xd6\xb4\xfc\x41\xba\xce\x58\xb5\x75\x3a\x1f\x11\xe8\xd4\xca\x1c\x4f\x15\x66\x03\x7b\x20\x09\xd9\xf0\x26\xd4\x61\x1d\x85\xde\x93\xab\xb7\x1d\xc9\xc9\xe5\x5c\x2b\xca\x9d\xc5\xa6\xde\x4b\x7d\x74\x0b\x2c\xe3\x30\xa2\x20\xe5\xd3\x9f\x28\xd0\x7d\x4f\x92\x83\xae\x28\xdb\x5b\x40\x55\xd8\x2d\x81\x8d\x72\x30\xa4\xd7\x86\x41\x7b\xea\x6a\xd7\x66\x6f\xbb\x88\x57\x5d\x31\xe2\xba\x86\x95\xb0\xb2\x9a\xcb\x88\x26\x84\x81\xf5\xb4\x8b\x78\xa5\xb8\xe1\x8e\x22\xd1\xb7\x34\x40\x4b\xd4\x3d\x0c\xa6\x89\x6b\xe1\x85\x01\xd3\x76\xe6\x5a\xa3\xa9\x8d\x58\xe5\x73\x69\xa3\xc6\x4f\x3f\xe3\x95\x71\x28\x44\x2e\x9a\x63\xe8\x48\x68\xe1\xb5\x25\x25\xdc\x07\xfe\x12\x9a\x03\xc1\x8c\xf2\x62\x72\xa9\xc2\xf8\x99\x51\xf3\x92\x0c\xda\x75\x54\x4f\x04\xab\xba\xf6\xee\x39\x98\x97\xf9\xe9\x62\x28\xea\xe3\x12\xd4\x49\xe4\xe7\x31\xc9\xef\x4e\x86\xc5\x0f\x16\x28\x80\xbb\xe7\xbe\x56\x29\xc0\xf5\x5c\x03\x3b\x9c\xf7\x10\xbb\x34\xa5\xdc\xd0\xba\xce\xd2\xc1\x70\xdb\x06\x5e\x99\x44\x47\xd6\x8e\xb4\xde\x19\x4f\x27\xbf\x7a\x50\xff\xab\x27\x5e\xa2\x43\xa3\x6d\x3b\x91\xb1\x7e\x84\x0d\xa8\x78\xa7\x7b\x9c\xee\x16\xfc\x35\x7a\x29\x3b\x90\xbc\xc8\x81\xe3\x85\x28\xc0\xe0\x78\xd8\xef\x55\x61\x7e\x8a\x74\x2c\x07\x7d\x2f\x70\xfd\xeb\xd4\xdf\xc5\x97\x8f\x31\xfc\x65\xbb\x6b\x14\x8e\xb5\x6b\xff\x8b\xf5\xb6\xf1\xb2\x57\xbe\x5f\x73\xfd\xb8\x8f\xa3\x32\x01\xeb\xd5\xc2\x2e\x7e\x94\xaa\x47\x38\x44\x18\xce\xe7\xf3\x63\x78\x3e\x9f\xbf\x24\x11\x17\x62\xfe\x0d\x00\x00\xff\xff\x98\xb8\x02\x49\xe9\x0a\x00\x00")

func sqlite3TmplBytes() ([]byte, error) {
	return bindataRead(
		_sqlite3Tmpl,
		"sqlite3.tmpl",
	)
}

func sqlite3Tmpl() (*asset, error) {
	bytes, err := sqlite3TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sqlite3.tmpl", size: 2793, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"golang.count.tmpl": golangCountTmpl,
	"golang.delete-all.tmpl": golangDeleteAllTmpl,
	"golang.delete.tmpl": golangDeleteTmpl,
	"golang.footer.tmpl": golangFooterTmpl,
	"golang.get-last.tmpl": golangGetLastTmpl,
	"golang.has.tmpl": golangHasTmpl,
	"golang.header.tmpl": golangHeaderTmpl,
	"golang.insert.tmpl": golangInsertTmpl,
	"golang.misc.tmpl": golangMiscTmpl,
	"golang.select-all.tmpl": golangSelectAllTmpl,
	"golang.select-paged.tmpl": golangSelectPagedTmpl,
	"golang.select.tmpl": golangSelectTmpl,
	"golang.update.tmpl": golangUpdateTmpl,
	"postgres.tmpl": postgresTmpl,
	"sqlite3.tmpl": sqlite3Tmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"golang.count.tmpl": &bintree{golangCountTmpl, map[string]*bintree{}},
	"golang.delete-all.tmpl": &bintree{golangDeleteAllTmpl, map[string]*bintree{}},
	"golang.delete.tmpl": &bintree{golangDeleteTmpl, map[string]*bintree{}},
	"golang.footer.tmpl": &bintree{golangFooterTmpl, map[string]*bintree{}},
	"golang.get-last.tmpl": &bintree{golangGetLastTmpl, map[string]*bintree{}},
	"golang.has.tmpl": &bintree{golangHasTmpl, map[string]*bintree{}},
	"golang.header.tmpl": &bintree{golangHeaderTmpl, map[string]*bintree{}},
	"golang.insert.tmpl": &bintree{golangInsertTmpl, map[string]*bintree{}},
	"golang.misc.tmpl": &bintree{golangMiscTmpl, map[string]*bintree{}},
	"golang.select-all.tmpl": &bintree{golangSelectAllTmpl, map[string]*bintree{}},
	"golang.select-paged.tmpl": &bintree{golangSelectPagedTmpl, map[string]*bintree{}},
	"golang.select.tmpl": &bintree{golangSelectTmpl, map[string]*bintree{}},
	"golang.update.tmpl": &bintree{golangUpdateTmpl, map[string]*bintree{}},
	"postgres.tmpl": &bintree{postgresTmpl, map[string]*bintree{}},
	"sqlite3.tmpl": &bintree{sqlite3Tmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

