// Code generated by go-bindata.
// sources:
// golang.count.tmpl
// golang.delete-all.tmpl
// golang.delete.tmpl
// golang.footer.tmpl
// golang.get-last.tmpl
// golang.has.tmpl
// golang.header.tmpl
// golang.insert.tmpl
// golang.misc.tmpl
// golang.select-all.tmpl
// golang.select-paged.tmpl
// golang.select.tmpl
// golang.update.tmpl
// postgres.tmpl
// sqlite3.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _golangCountTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8f\x3f\x4f\xc3\x30\x10\xc5\x67\xdf\xa7\x78\x74\x40\x89\x94\x46\x0c\x88\x2d\x03\x42\x6c\x2c\x25\x03\x63\xeb\x26\x4e\x64\xd4\xd8\xd5\xc5\x01\xaa\xd3\x7d\x77\xe4\x20\xfe\x2c\x0c\x9e\xfc\x7e\xef\xf7\x4e\x64\x8b\xde\x0d\x3e\x38\x6c\x66\x3f\x06\x9b\x16\x76\x1b\x6c\x55\xe9\x21\x2e\x21\x89\xa0\x6e\x97\x61\xf0\x1f\x50\x2d\x44\x70\xb6\x6c\x27\xd4\xf7\x3c\xce\x50\x2d\x51\x74\x39\x06\x1f\xd2\xdd\x6d\x05\xc7\x9c\x5f\xe4\x92\x72\xb3\x0b\xfd\x5a\x45\x7f\x35\xc7\xd8\x5f\x36\x50\x15\x32\x5d\x0c\x73\xc2\x7e\x3f\xa7\x29\x35\x87\xd5\xb5\x7b\x82\xea\x81\x4c\x3c\xbe\xd6\xa7\x38\xb6\x69\x4a\xc5\x57\xa0\x82\x08\x2c\x8f\xbf\x72\x22\x93\x85\x0d\x72\xb8\x67\xff\xe6\xb8\xde\x2d\x8e\x2f\xcf\xf1\xfd\x5f\xa8\x6e\x3b\x1b\x8a\xeb\x75\x76\x49\xc6\x0f\xeb\xe8\xab\x06\xc1\x9f\x20\x64\x0c\xbb\xb4\x70\xc0\x4d\x85\x17\xb6\xe7\x47\xe6\xc2\x31\x97\x64\x94\xe8\xfb\x6f\x85\xab\x4c\x90\x92\xc8\xcf\x9d\x9f\x01\x00\x00\xff\xff\x8a\x86\x43\x5f\x4e\x01\x00\x00")

func golangCountTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangCountTmpl,
		"golang.count.tmpl",
	)
}

func golangCountTmpl() (*asset, error) {
	bytes, err := golangCountTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.count.tmpl", size: 334, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeleteAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\xd0\xb1\x4e\xc3\x30\x10\x06\xe0\xd9\xf7\x14\x47\xa7\x44\x4a\x23\x06\xc4\x80\x94\xa1\x12\xdd\x58\xa0\x03\x63\x9a\x26\xe7\xc8\x28\xb1\xab\xf3\x05\x8a\x4e\x7e\x77\x94\xa4\x02\x16\x06\x06\x4f\xbe\xff\xff\x4e\xa7\xba\xc5\x8e\xac\xf3\x84\x9b\xe8\x7a\xdf\xc8\xc4\xb4\xc1\x6d\x4a\xf0\x48\x03\x09\xa9\x62\x79\x98\xac\x75\x17\x4c\x29\x53\xc5\x73\xc3\xcd\x88\xe5\x8e\xfb\x88\x29\xe5\x98\xb5\x61\xf2\x82\xce\xcb\xfd\x5d\x81\xc4\x3c\xbf\xc0\x39\xcc\xd5\xe4\xbb\xa5\x0b\x7e\x3b\xa7\xd0\x7d\x2e\x84\x82\x69\x83\x8f\x82\x75\x1d\x65\x94\xea\xb8\x60\xcf\x4f\x98\xd2\x11\x4c\x38\xbd\x95\x43\xe8\x0f\x32\x4a\xb6\x0e\x14\xa8\x8a\x0d\xf7\x3f\x3a\x80\xa9\x6b\xa6\xb8\xc2\x0f\x15\xce\xa1\x8e\xdd\x3b\x71\xb9\xbf\x50\xfb\x77\xd0\x38\xbb\x64\x6e\x2a\xf4\x6e\x40\x05\x63\x98\x64\x62\x8f\xb7\x05\xbe\x72\x73\xde\x33\x67\xc4\x9c\x83\x49\x30\xef\x39\x79\x59\x95\x0a\x17\xb2\x7c\x09\x1f\x71\x67\x2d\xb5\x42\x5d\xf6\xef\xc2\xeb\xdf\xb5\xd7\xbb\x01\x12\xa8\x7e\x1f\xec\x2b\x00\x00\xff\xff\x79\xdf\x12\x7c\x98\x01\x00\x00")

func golangDeleteAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteAllTmpl,
		"golang.delete-all.tmpl",
	)
}

func golangDeleteAllTmpl() (*asset, error) {
	bytes, err := golangDeleteAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete-all.tmpl", size: 408, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeleteTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\xd0\x31\x4f\xc3\x30\x10\x05\xe0\xd9\xf7\x2b\x8e\x4e\xa9\x94\x46\xcc\x48\x45\xaa\x44\x37\x16\xe8\xc0\x98\x3a\xf1\x39\x32\x4a\xec\xea\xec\x40\xd1\xc9\xff\x1d\xc5\xad\x0a\x0b\x0b\x83\x27\xbf\xf7\x3e\xe9\x44\x36\x68\xc8\x3a\x4f\xb8\x8a\x6e\xf0\x3a\xcd\x4c\x2b\xdc\xe4\x0c\x4f\x34\x52\x22\x11\x6c\x0e\xb3\xb5\xee\x8c\x39\x57\x22\x78\xd2\xac\x27\x6c\x76\x3c\x44\xcc\x79\x8d\x95\x29\x39\x83\x5d\x08\x63\x8d\xc4\xbc\xbc\xc0\x6b\x58\xb6\xc9\x9b\x32\x06\xbf\xa1\x2e\x98\xaf\x62\x08\xa8\x3e\xf8\x98\xb0\x6d\x63\x9a\xd2\xf6\x58\xb4\x97\x67\xcc\xf9\x08\x2a\x74\xef\xcd\x18\x86\x43\x9a\x52\x75\x09\xd4\x28\x82\x9a\x87\x1f\x1e\x40\xb5\x2d\x53\xbc\xc0\x0f\x5b\x5c\x4a\x86\xdd\x07\x71\xb3\x3f\x53\xff\x77\x51\x39\x5b\x3a\x77\x5b\xf4\x6e\x44\x01\xa5\x98\xd2\xcc\x1e\xad\x1e\x23\xd5\xf8\xc6\xfa\xb4\x67\xae\x88\x79\x0d\x2a\x17\xa9\x0f\xb3\x4f\x37\xab\xc8\xcd\x6b\xf8\x8c\x3b\x6b\xa9\x4f\x64\xaa\x7f\xed\x5e\xff\xaf\xf3\xf8\x88\xf7\xf5\xd2\x85\x0c\x22\xb7\x0b\x7e\x07\x00\x00\xff\xff\x36\x5f\x5d\xd3\xaa\x01\x00\x00")

func golangDeleteTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteTmpl,
		"golang.delete.tmpl",
	)
}

func golangDeleteTmpl() (*asset, error) {
	bytes, err := golangDeleteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete.tmpl", size: 426, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xce\xb1\x0a\xc2\x30\x10\x06\xe0\x39\xf7\x14\x37\xb6\x42\xf3\x10\x22\x6e\x4e\x66\x70\x8d\xc9\xd9\x16\x34\xd6\xe4\xc4\x48\xb8\x77\x97\x22\xa4\x4b\xb6\x83\xfb\xff\x8f\x1f\xf8\xbb\x10\x9a\xcb\x89\x78\x7a\xfa\x84\x73\x60\x8a\x37\xeb\x08\x0b\x94\x32\x60\xb4\x61\x24\xd4\xc7\x77\x70\x09\x45\x40\x95\x82\x7a\x3d\xd6\x27\x05\x8f\x83\x08\x08\xfc\x19\xce\x2d\x46\x55\xbd\x06\x0f\xfb\x66\xf0\xec\x26\x7a\xd8\xae\xc7\xc4\x71\x0e\x63\xab\xe9\xaf\xcd\x66\x05\x01\xd4\x27\xda\xc5\xe4\x8e\x33\xee\xd2\xeb\xae\x4d\xee\xb7\x61\x20\xf0\x0b\x00\x00\xff\xff\x6d\x27\x2d\x7a\xf2\x00\x00\x00")

func golangFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangFooterTmpl,
		"golang.footer.tmpl",
	)
}

func golangFooterTmpl() (*asset, error) {
	bytes, err := golangFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.footer.tmpl", size: 242, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetLastTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x90\x31\x6f\xc2\x30\x10\x85\x67\xdf\xaf\xb8\x32\x25\x12\x64\xaa\xba\x31\x76\x63\x01\x2a\x75\x04\x83\x2f\x91\x4b\xb0\xa3\xcb\xd1\x8a\x9e\xee\xbf\x57\x06\x51\x85\xc1\xdb\xf7\xde\xe7\x77\xaa\x0b\x0c\xd4\xc6\x44\x38\x1b\x63\x97\xbc\x5c\x98\x66\xb8\x30\x83\x8e\x64\xe5\x47\x51\xc5\x66\x43\x72\xe1\xd4\x7c\x5c\x07\x42\xb3\x6a\x38\x61\x4c\xf2\xf6\x5a\x63\xa5\x8a\x83\x67\x7f\x7e\x30\x68\x36\x47\x62\x2e\x2f\x73\x0d\xa5\x9f\x52\xb8\x15\xc2\x54\x76\xc8\xe1\x7a\xf3\x28\xb8\x63\x4e\xa3\xe0\x6e\x37\xca\x59\x96\xfb\x22\xdc\xae\x57\x68\xb6\x07\x97\x0f\x5f\x4d\x9f\xbb\xad\x9c\xa5\xba\x03\x73\x1c\x4e\x35\x80\x53\xc5\x98\xa2\x4c\xc4\xe0\x8a\x78\x89\x25\x13\x38\x7e\x13\x37\xeb\x0b\xf1\x75\x93\x7f\xa6\xd9\x66\x7b\xf4\xa9\x7c\xdc\x87\xc0\xb9\xc5\xaa\xed\xbd\x08\xa5\x47\x53\x8d\x66\x35\xb8\xd8\xde\x76\xbc\x2c\x31\xc5\x1e\x15\x9c\xe3\xbb\x48\x15\x7f\x89\xf3\xd3\xe2\x4f\xf6\xc3\x3b\x73\x45\xcc\x35\x38\x83\x09\xeb\xb9\x7b\x42\x53\xec\xc1\x40\xf5\xff\x2c\x7f\x01\x00\x00\xff\xff\x31\x15\x5d\x8c\x83\x01\x00\x00")

func golangGetLastTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetLastTmpl,
		"golang.get-last.tmpl",
	)
}

func golangGetLastTmpl() (*asset, error) {
	bytes, err := golangGetLastTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-last.tmpl", size: 387, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangHasTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8f\xbd\x6e\xac\x40\x0c\x85\xeb\xf1\x53\xf8\x52\x5c\x81\xc4\xf2\x06\x14\x29\x22\xa5\x48\xb3\xa1\x48\xb9\x6b\x96\x01\x26\x82\x99\x95\x67\x48\xb2\xb2\xfc\xee\xd1\x10\xe5\xa7\x49\xe1\xca\xe7\x7c\x9f\x2d\x72\xc0\xc1\x8e\xce\x5b\x2c\xa2\x9b\x3c\xa5\x8d\x6d\x81\x07\x55\x78\xa0\x28\x82\x4d\xb7\x8d\xa3\x7b\x47\xd5\x52\x04\xaf\xc4\xb4\x62\x73\xc7\x53\x44\xd5\x0a\xcb\x99\x22\xf6\x21\x2c\x35\x5a\xe6\x3c\x81\x2b\xc8\x50\xeb\x87\x9d\x02\xbf\x0d\x7d\x18\x6e\x05\xaa\x0a\x98\x4b\xf0\x31\xe1\xe9\x14\xd3\x9a\xda\xf3\x2e\x3a\x3e\xa2\xea\x19\x4c\xe8\x5f\x9a\x25\x4c\x5d\x5a\x53\xf9\x19\xa8\x51\x04\x89\xa7\x1f\x33\x80\xc9\xc2\x16\x73\x78\x60\xf7\x6a\xb9\x39\x6e\x96\x6f\x4f\xe1\xed\xcf\x52\xd3\x5d\xc8\x97\xff\x67\x8a\x15\x18\x37\xee\x27\xff\x6b\xd1\xbb\x05\x05\x8c\x61\x9b\x36\xf6\x38\xd2\x12\x6d\x8d\xcf\x4c\xd7\x7b\xe6\xd2\x32\x57\x60\x14\xbe\xd6\x33\xc5\x3a\x57\x40\x41\xe4\xfb\xcd\x8f\x00\x00\x00\xff\xff\x2a\xae\xd9\x76\x48\x01\x00\x00")

func golangHasTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangHasTmpl,
		"golang.has.tmpl",
	)
}

func golangHasTmpl() (*asset, error) {
	bytes, err := golangHasTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.has.tmpl", size: 328, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x5b\x8f\x9c\x38\x13\x7d\xc6\xbf\xa2\xbe\x56\x32\x82\xa8\x43\x7f\xcf\x2d\xf5\x43\x3a\xf4\xae\x46\xca\x4e\x27\x33\x44\xab\x95\x22\x25\x06\x0c\x43\xc6\xd8\x8c\x6d\xba\x89\x58\xfe\xfb\xca\xc6\xdc\xfa\x92\x9d\x48\xfb\xc4\xad\xce\xf1\xa9\xaa\x53\xc6\xab\x15\xbc\xfb\x1c\xee\x7f\xdf\xdd\xed\xee\xdf\x85\xbb\x00\xb6\x7f\x41\xc6\xcb\xa7\xcc\xcf\xd9\x4a\x96\x38\x26\x05\x67\x4f\xe4\x47\xc6\x57\x49\x54\xfb\x87\xff\xa3\xd5\x0a\x82\x3d\xdc\xed\x43\xd8\x05\xb7\xa1\x8f\x50\x89\xe3\x27\x9c\x11\x68\x1a\xf0\x3f\xda\xfb\xb6\x45\x28\x2f\x4a\x2e\x14\xb8\xc8\x59\x24\x58\xe1\x08\x4b\xb2\x92\xcf\x74\x81\x9c\x45\x5a\x28\x7d\x51\x79\x41\xf4\x55\x2a\x11\x73\x76\x58\x20\xd4\x34\x6f\x41\x60\x96\x11\xf0\x77\xb5\x12\xf8\xd6\x70\x48\xcd\xe7\x68\xfe\x77\xfa\x16\x16\xf3\xa5\x16\x06\x46\x58\xa2\xc3\x3c\xa4\x15\x7e\x14\xe4\x40\x98\x82\x98\xb3\x24\x57\x39\x67\x98\x42\x6e\xb9\x52\xc1\x0b\x88\x71\x25\x73\x96\x41\x54\xe5\x34\x81\x14\xe7\xb4\x12\x44\xa2\x03\x16\xf0\x15\x36\x60\x15\xf9\xb7\x8a\x63\x64\xde\xfe\x29\x70\xb9\x13\x02\x36\x90\x56\x2c\x76\x89\x10\x40\x84\xe0\xc2\xeb\x2e\xd0\x08\xa2\x2a\xc1\xf4\x53\x6b\x00\x1f\x78\x96\x11\xd1\x45\xa7\x5c\x14\x58\x69\xd6\x9c\x65\x4b\xc0\x22\x93\xe0\xfb\x7e\xce\x14\x11\x29\x8e\x49\xd3\x7a\x06\x73\xc7\x8f\xb0\x01\x5d\x16\xff\x8e\x1f\x11\x52\x3f\x4a\x02\x89\xc8\x0f\x44\xc0\x10\x0c\x0d\x72\x76\x35\x89\xdd\xe7\x8a\x88\x1f\x3f\x25\x05\x57\x3e\x53\xff\x9e\xc8\x8a\xaa\xa5\xd5\x8b\x9c\x4f\x1a\xf7\x22\xf4\x1b\x03\xe7\x47\x79\x02\xbe\xe7\xc7\x97\xe0\x7b\x38\x6a\x6d\x2a\xc1\x56\x03\xaa\x58\xe9\x1c\xcc\xd7\x60\x8b\x9c\x24\xfa\x83\xa8\x47\x9e\x48\x1d\xa7\xeb\x05\xfb\x92\x30\xb7\xcb\x7b\x09\x92\x57\x22\x26\x76\x25\x2d\x2a\xd8\xf6\x72\x34\x4d\x12\x99\x27\x58\x6f\x40\x13\x5e\x80\x7a\xc8\xc9\x53\x13\xf3\xbf\x0d\xb0\x9c\x6a\x94\x63\xdb\xc5\x72\xba\xec\x7b\xab\x9b\xea\x21\xa7\x45\x0e\x72\x74\x37\xf2\xa2\xa4\x30\x8a\x73\xe4\x31\x57\xf1\x63\xdf\x8f\x66\x6a\xd6\x20\xc7\x94\xc4\xd6\xa8\x31\x96\xdd\x34\xdc\xe1\x82\xc0\xdf\x50\x8a\x9c\xa9\x14\x16\xaf\x9f\x17\xd0\xb6\x6b\xe4\x38\x86\x79\x03\x8c\x1c\x87\xb0\xb6\x75\x93\xc8\x9b\x3a\xd9\x49\x48\x8a\x2b\xaa\xd6\x57\xd4\xa6\x85\xf2\x77\xba\x0c\xa9\xbb\xa8\x98\xac\x4a\x6d\x6f\x92\xf4\xfa\x5e\xcb\xc5\xd2\xde\x7b\x26\x2b\xd4\xb3\xdc\x04\x5b\x5d\x81\x60\xbb\x86\x24\x5a\x22\x67\x6c\xc0\xda\xe4\xbc\x44\x4e\xbb\xd4\x6b\x0d\xfd\x70\x79\xf4\x1d\xde\x04\x5b\x0f\xde\x53\x2e\x89\xeb\xc1\x74\x00\x9a\x81\xb9\x97\xc6\xa3\xef\x7e\xb0\xf5\x6d\xb0\x77\x81\xc7\xb4\x49\x37\x33\xac\xa7\xcd\x54\xf5\xd0\x4c\xcb\xb1\x25\x59\xce\xdc\x5f\x6e\xe1\x98\x6c\x58\xeb\x58\x55\xaf\x41\xd5\x4b\x73\x37\x24\xab\x97\x38\x0a\x5c\x86\xb5\xab\x6a\x6f\x96\xb6\xb1\x6b\x58\x4f\xec\xaa\xea\xce\xcf\x61\x8d\x46\x8e\x31\x33\xfd\x39\xac\x3d\x78\xcf\x8b\x22\x57\xff\x5a\x21\x55\xfb\xaa\xf6\xfb\x60\xef\x9c\xe7\x9e\x53\x1a\xe1\xf8\xe9\x85\x4c\x63\xb8\xe1\xba\x62\x4d\xd4\x34\xf0\x2a\x89\x4c\x72\xeb\xcd\xb9\x41\x65\xb0\xd5\x16\x35\x61\xaa\xbe\x1e\x16\xd6\x43\x98\x36\xcc\xf5\xc0\xdb\xa2\xa4\x26\xb4\x2b\xe8\x0c\xd0\xb6\x93\xea\x5a\xd3\x76\x97\x13\xbf\x9c\xa0\x3c\xa0\x3c\x7b\x50\x85\x72\xa5\x2a\xe6\x9b\xaa\xef\xfb\x30\xdb\x81\x9a\xee\xb7\x61\x27\xec\xc3\x04\x37\x00\x3c\x34\x55\x67\x8b\x33\xd7\x16\xc1\xb0\x57\x9d\x8a\x19\xa4\x9e\xcd\x72\x8f\xf1\xba\x04\x46\xe2\xb1\x85\x37\xb3\x0f\x8d\x99\xc4\x7e\x26\x4f\xd6\x59\x77\xc1\x93\x37\x3a\xdc\x96\xad\xc7\xb4\xda\xc2\x17\x8a\x37\x2c\xe1\xc1\x43\xfc\x48\x0a\xec\x7a\xb6\x6c\xd0\x20\xab\xe5\x9b\xf1\x8c\xdf\x7d\x7f\xf8\xf4\x01\xde\xb6\x2d\xfa\xf6\x73\xb2\x61\x76\xfa\xc9\xf0\x60\x98\x8c\xd3\x34\xad\x9d\x3a\xdd\xe3\x34\xfe\x5a\x9a\x1d\x66\x48\x73\xe8\xda\x40\x7e\x65\x5e\xaf\x76\xed\x8a\x39\x7e\xfe\x5b\x6b\x90\xb3\x5a\x41\xb8\x0f\xf6\x6b\x10\x84\x25\x44\x40\x49\x71\x4c\x1e\x39\x4d\x88\x90\x66\xab\xb2\x7f\xff\xc9\x6e\xd5\xbd\x71\x17\xf2\x99\xae\xbf\xb0\xd7\xf2\x0b\xd3\xe4\xfa\xf6\xb0\x58\xc2\x68\x49\xcf\x26\x37\xf9\x13\xe8\x41\xb3\xd3\xfc\x60\xf2\x93\xfd\xf4\xd9\x74\x87\xd9\x9b\x4d\x9a\xfd\x38\xad\xca\x64\x5f\xf8\x2d\x27\x34\x19\x4f\x56\x16\x6e\x2a\x12\xda\x2a\x4d\x24\x58\x41\x79\x0a\xfe\xbe\xec\x0e\x54\xb7\x4c\x12\xa1\x46\x9a\x61\x61\xbf\xfb\xd2\x49\xed\x79\x2f\x49\xb8\xc6\x34\x13\xa4\x7b\xe7\x7f\x2e\x13\xac\xc8\x8c\x71\xae\x6e\x5e\xad\x4e\xa8\x01\xe1\x88\x92\x4b\x1a\x2f\x30\x5e\xd4\x78\x81\xe4\x3f\x90\x77\xd6\x03\xfd\xf2\x55\x3a\x69\xe7\x25\xca\xb1\xb5\xe9\x79\x6f\xe1\x30\xed\x1d\xb4\x83\xc1\x47\x1f\x7c\x9d\xee\x50\xb3\x70\x4f\x3f\xe8\x9a\xdd\x55\x94\xea\x6c\xa1\x6d\x75\x66\x9d\xe6\x93\x15\x1b\xb0\x83\x7d\x8e\xb9\xb9\x82\x69\x0e\x6b\x38\x0c\xa2\xdc\xea\x24\x09\x0f\x62\x4e\xab\x82\x69\x6d\x93\xbd\xa9\x5f\xc7\x9c\xf7\xdf\x9b\x08\x7d\xdc\x9f\xd0\xbc\x39\xe5\x39\x60\x5a\x69\x8a\xc9\xc0\x42\x03\x66\x24\x2b\xd8\x5c\x3a\x3b\x98\x03\x9f\x7d\xac\xfc\x83\x6d\x56\x9e\x02\xe3\x6a\x96\xdb\x55\xed\xf7\x24\x75\xbd\x53\x29\xa3\xfa\x9b\x0a\xce\x0d\xa0\xef\xdf\xce\x5d\xf2\x4f\x00\x00\x00\xff\xff\x92\x29\x8a\xea\x8b\x0d\x00\x00")

func golangHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangHeaderTmpl,
		"golang.header.tmpl",
	)
}

func golangHeaderTmpl() (*asset, error) {
	bytes, err := golangHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.header.tmpl", size: 3467, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangInsertTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\x41\x6b\xe3\x30\x10\x85\xcf\xd2\xaf\x98\xed\xc9\x86\x54\x3f\xa0\xe0\xc3\x52\xba\x50\x28\x81\x36\x5d\xf6\xa8\xaa\xd1\xc8\x68\xd7\x91\xcc\x48\x5e\x27\x08\xfd\xf7\x45\x16\x09\xce\x61\x7b\xc8\xc1\x60\xcb\xe2\x7d\xef\xbd\x99\x94\xee\x41\xa3\xb1\x0e\xe1\x2e\xd8\xde\xa9\x38\x11\xde\xc1\x7d\xce\xfc\x91\x50\x45\x4c\x09\xc4\x6e\x32\xc6\x1e\x21\xe7\x26\x25\x18\x15\xa9\x03\x88\xef\xd4\x07\xc8\xb9\x85\xd5\xd9\x1b\xc6\x89\x1c\xe4\xbc\x01\x24\x2a\x8f\xa7\x96\x17\x04\x3a\xbd\x68\xf2\x35\xef\xd3\xeb\xd3\x82\x4a\x9c\x95\x73\x6b\x40\x6c\x11\x75\xd8\xfa\x19\x72\xe6\x4c\x4a\xe7\x67\x78\xe8\x60\xeb\xe7\xa6\x15\x3f\xdf\x1f\x9b\xb6\x5c\xbd\xc8\x95\x77\xeb\x6c\x74\x38\x83\xf8\x61\x71\xd0\xc5\x13\xe7\x6c\xef\x5d\x88\x20\x65\x88\x87\xd8\x7d\x2c\x19\x5e\x5f\x20\xe7\x0f\xce\xfc\xe7\x6f\x31\xf8\x7e\x17\x0f\xb1\xa9\x17\x36\x90\x12\x28\xea\x57\x12\x2d\xaf\xda\xa6\x84\x1f\x47\x4f\x31\xd4\x70\xd6\xf5\xb0\x02\xaf\x32\x73\x56\x32\x77\x50\xf4\x35\xd9\xbf\x48\xe2\x75\x42\x3a\xbd\xf9\xf9\x0b\x8e\xd8\xed\x95\x2b\x15\x2a\xad\xc9\x1b\x68\xcc\xa0\x62\x44\x77\x16\x6e\x17\x33\xcc\x9a\xa5\xd1\x6f\x1d\x38\x3b\x40\xe2\x8c\x51\xe5\x3a\x3b\x6c\xe0\x17\xa9\xf1\x89\xa8\x41\xa2\x96\xb3\xcc\xcf\x3f\xcf\xb8\xd5\x5c\x9c\x1d\x6a\x83\x43\xc0\x5a\xa1\x94\x84\xa1\x0e\xec\xe1\xca\xfd\xd3\x11\xf7\xff\x71\x7e\x8b\x27\x29\xc7\x3f\x17\xcc\x02\x15\x2f\x2a\xc4\x67\x17\x90\xe2\xb3\x6e\x6e\x4e\x59\x2c\xf7\x18\x8b\x58\x19\x74\x0d\x2b\xde\x4f\x23\x96\x8d\x2d\xd8\xeb\xa5\xc9\x7c\xf5\xf1\x2f\x00\x00\xff\xff\xa6\x95\x18\xd4\x00\x03\x00\x00")

func golangInsertTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangInsertTmpl,
		"golang.insert.tmpl",
	)
}

func golangInsertTmpl() (*asset, error) {
	bytes, err := golangInsertTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.insert.tmpl", size: 768, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangMiscTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\x41\x4b\xc3\x40\x10\x85\xcf\xcd\xaf\x78\x84\x08\x2a\xa6\x3f\xa0\xe0\xa5\x07\x41\x04\x0f\x5a\x3c\x77\xcd\x4e\xc2\x48\xba\x8d\x9b\x8d\x50\xc6\xfd\xef\x32\xbb\xb2\x56\x7a\x5b\xde\x7c\xef\xbd\x99\x15\x69\x61\xa9\x67\x47\xa8\x2d\x75\x63\x8d\x18\xab\x7e\x71\x1d\xae\x8f\xef\x1f\xb8\x15\xc1\xfa\x85\x3a\xe2\x2f\xf2\x5b\x33\x13\x62\x7c\x3c\x4c\xe3\x0d\x74\xf0\xca\x83\x33\x61\xf1\xaa\x26\x61\x7b\xb4\x27\x0d\x10\x01\x39\x8b\x36\xc6\xaa\x3a\x6f\x98\x83\x5f\xba\x90\x3a\xc2\x69\xa2\xe4\x79\x36\x87\xe4\xcf\x33\x88\x9a\xbd\x71\x03\x61\xfd\xc0\x34\xda\x59\xe9\x95\x08\xb8\x2f\xf0\xb9\xef\xb7\x2b\x8b\x3b\x4d\x4d\x4f\xa5\x77\x66\x98\xd3\x12\xab\x7d\x09\x6d\xf8\x0e\x4d\xc0\xe6\xfe\x6f\x9c\xe9\x86\x2f\xd2\x9e\x48\xaf\xd9\xe8\xf3\xcd\x8c\x0b\xe1\x1b\x93\x67\x17\x7a\xd4\x57\x9f\x75\x86\x32\xbd\xd7\x0d\xdb\x72\x74\xd1\xab\x7f\x7f\xf1\x13\x00\x00\xff\xff\x1b\x36\x80\x57\x6d\x01\x00\x00")

func golangMiscTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangMiscTmpl,
		"golang.misc.tmpl",
	)
}

func golangMiscTmpl() (*asset, error) {
	bytes, err := golangMiscTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.misc.tmpl", size: 365, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangSelectAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x91\x31\x6f\xc2\x30\x10\x85\x67\xfb\x57\x5c\x99\x1c\x09\xf2\x03\xa8\x32\xa0\xaa\xea\x52\x55\xa2\x0c\x1d\x83\xc1\xe7\xc8\x95\xb1\xa3\x8b\x53\x40\x96\xff\x7b\xe5\x18\x68\x07\x54\xa9\x43\x86\x24\xf7\xde\xf7\xee\x5d\x8c\x0b\x50\xa8\x8d\x43\x98\x0d\xa6\x73\x32\x8c\x84\x33\x58\xa4\xc4\x5f\x30\xac\xac\x8d\x11\xea\xcd\xa8\xb5\x39\x41\x4a\x22\x46\xe8\x25\xc9\x03\xd4\x2b\xea\x06\x48\xa9\x02\x41\xfe\x38\x40\x8c\x30\x58\xb3\x47\xaf\xa1\x7e\xf7\x47\x48\x69\x0e\x48\x94\x1f\x4f\x15\xcf\x18\x74\x6a\xf2\xe5\xbf\x99\x3b\xaf\xce\x33\x48\x29\x72\xb6\xf7\x6e\x08\xd0\xb6\x43\x38\x84\x66\x3b\x71\xd7\xaf\x90\xd2\x96\x33\xbf\xfb\xac\xad\xef\x36\xe1\x10\x44\x19\x98\x67\xa2\xa4\xee\x27\x08\xe7\xac\x6d\x73\x96\x02\x5e\x36\x90\x55\x8a\xcc\x17\x52\xbd\x1e\x91\xce\x77\xa5\x59\xc9\x8c\x9e\x34\x0f\x0d\x38\x63\x21\x72\xc6\x08\xc3\x48\x2e\xbf\xce\xe1\x83\x64\xff\x4c\x24\x90\xa8\xe2\x2c\x71\xa6\x50\x23\x41\xa1\xd5\x4f\xd6\x0f\x28\x32\x5e\xfb\xdb\xc7\x37\x3c\x05\x51\x4d\x4e\x31\x82\x71\x26\x38\x3c\x5e\x9b\xe1\x8c\x65\x5a\x73\x1d\xde\xec\xa5\xcb\xcd\x4a\xa5\xc8\x6b\x10\xda\xca\x10\xd0\x4d\xe3\xd5\xb4\x1a\xbb\x93\xf0\x8f\x88\x39\x23\x9b\xce\xd2\x80\xec\x7b\x74\x4a\x94\x62\xae\x8b\x97\x1c\x65\x99\x8b\xf3\xf2\x16\x27\xfb\x54\x8f\xff\x2a\xe4\xf2\xb3\x40\x9c\xb1\x3c\xf1\x18\x6f\x07\xff\x0e\x00\x00\xff\xff\x3a\xa0\xa7\x10\x64\x02\x00\x00")

func golangSelectAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangSelectAllTmpl,
		"golang.select-all.tmpl",
	)
}

func golangSelectAllTmpl() (*asset, error) {
	bytes, err := golangSelectAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.select-all.tmpl", size: 612, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangSelectPagedTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\x41\x6f\xd4\x30\x10\x85\xcf\xf6\xaf\x18\x72\x4a\xa4\x34\x2a\xd7\xa2\x20\x21\x84\xb8\x20\xa0\xec\x81\x03\x42\x5b\x77\x33\x8e\x0c\x89\x1d\x4d\x26\x6c\x2b\xcb\xff\x1d\x8d\xbd\xbb\xed\xa1\x12\xe2\x10\x29\x71\xde\xbc\xf9\x66\xfc\x62\xbc\x82\x01\xad\xf3\x08\xd5\xea\x46\x6f\x78\x23\xac\xe0\x2a\x25\xfd\x11\x39\x46\xe8\x76\x9b\xb5\xee\x01\x52\xaa\x63\x84\xc5\x90\x99\xa1\x7b\x47\xe3\x0a\x29\x35\x50\x53\x38\xae\x10\x23\xac\x93\x3b\x60\xb0\xd0\x7d\x0b\x47\x48\xa9\x85\x03\x87\xdf\xe8\xc3\xc6\xb0\x32\x39\x3f\xb6\x80\x44\xf2\x04\x6a\xb4\x74\x45\x3f\xe4\x36\xfa\x39\xc2\x7d\x18\x1e\x2b\x48\x29\x6a\xe5\xec\xc9\x03\xfa\x1e\xaa\x0a\xa2\x56\xea\x7c\x00\xd5\x75\xa5\x55\xd2\x5a\x1d\x82\x5f\x19\xf6\xfb\x95\x67\xee\xef\x32\xef\xed\x27\x48\xe9\x4e\xab\x70\xff\xab\x9b\xc2\xb8\xe3\x99\xeb\x22\x68\x85\xd4\xd0\xf8\x34\x80\xd6\x6a\xbf\x97\x19\x0a\xde\x4d\x0f\x52\x35\x90\xfb\x83\xd4\xdd\x6e\x48\x8f\x2f\x96\x4a\xa5\x00\x4a\xcd\xab\x1e\xbc\x9b\x32\x1e\x21\x6f\xe4\xe5\xb3\x85\xaa\x6a\xe1\x3b\x99\xe5\x03\x51\x8d\x44\x8d\xe0\xaa\x01\x2d\x12\x94\x8e\xdd\xfb\x29\xac\x58\x0b\x82\x0d\x97\xc3\xcf\xf8\xc0\x75\x93\xdd\x62\x04\xe7\x1d\x7b\x3c\x9e\xb7\xaa\x95\x92\x8e\xfd\x59\xbc\x3b\x18\x2f\xb7\x62\x86\x81\x82\x85\xda\x4e\x86\x19\x7d\x96\x37\x79\x3c\xf5\x02\xe5\x3f\x30\x85\x53\xe5\x6b\xed\xc1\x2c\x0b\xfa\xa1\x2e\x0b\x3a\x2f\xa0\xb0\x94\x81\x4e\xee\x37\x17\x24\xf1\x69\xde\xfc\xef\x62\xb2\xd1\xe4\x66\xc7\xf0\x16\xae\x73\x89\x1c\xa0\xcf\xad\x1b\x49\x40\xf9\x9b\xf9\x9f\xa2\xd5\x83\x9d\xb9\xdb\x2d\xe4\x3c\x67\xe9\x8f\x2c\xbb\x7a\xfd\xb3\x93\x28\x7c\x35\x23\x0e\x5f\xfc\x69\x13\x49\xab\x04\x38\xad\xf8\x2c\x4a\xc5\xa4\xbc\x17\x90\x13\x6a\x19\xf9\x22\x6a\x85\x5d\x27\x1d\xe3\x25\xb7\x7f\x03\x00\x00\xff\xff\xf9\xf1\x83\x84\x3a\x03\x00\x00")

func golangSelectPagedTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangSelectPagedTmpl,
		"golang.select-paged.tmpl",
	)
}

func golangSelectPagedTmpl() (*asset, error) {
	bytes, err := golangSelectPagedTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.select-paged.tmpl", size: 826, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangSelectTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x90\x31\x6f\x02\x31\x0c\x85\xe7\xe4\x57\xb8\x4c\x77\x12\xdc\x3f\xb8\xa1\x03\xea\x52\x55\x02\x86\x8e\x10\x88\x73\x4a\x75\x24\xd4\xc9\x95\x52\xcb\xff\xbd\x4a\xaa\x02\x4b\x3b\x78\xb1\xfc\xbe\xf7\xfc\x98\x17\x60\xd1\xf9\x80\x30\x4b\x7e\x08\x26\x4f\x84\x33\x58\x88\xe8\x27\xcc\xcc\xd0\x6d\x26\xe7\xfc\x27\x88\x34\xcc\x70\x32\x64\x8e\xd0\x3d\xd2\x90\x40\xa4\x85\xbb\xdd\x3a\x9e\x41\x64\x0e\x48\x54\x26\x52\xab\x0b\x1c\x83\xad\x34\x7d\xef\xb4\x8f\xf6\x32\x03\x11\xd6\xea\x10\x43\xca\xb0\xdd\xa6\x7c\xcc\xfd\xae\x1a\xae\x9e\x41\x64\xa7\x55\xdc\xbf\x75\x63\x1c\x36\xf9\x98\x9b\x9f\x83\x39\x30\x83\xa1\xe1\x96\x40\x6b\xc5\x0c\x3e\xf8\xfc\x9b\x40\xab\x92\xa0\x87\xa2\xb6\xe4\x3f\x90\xba\xd5\x84\x74\x59\xc7\xf3\x9f\x94\x6e\x73\x30\xa1\xfc\x62\xac\xa5\xe8\xa0\x71\xa3\xc9\x19\x43\x65\xb6\xd5\x47\x79\x57\x5f\xeb\x7b\x48\xef\x63\xb7\x24\x7a\x89\xeb\x78\x4e\xc0\x5a\x29\xc2\x3c\x51\x28\xd8\x2f\xa4\x78\xeb\x22\xf8\x51\x2b\xb9\x6a\x1f\xfa\xb2\xf9\x57\xf1\x4a\xe6\xb4\x24\x6a\x90\xa8\xad\xd2\xdb\x61\x4d\x7c\x4f\x16\xcd\x7c\xed\xf7\x3b\x00\x00\xff\xff\x3b\xb5\x23\x18\xc9\x01\x00\x00")

func golangSelectTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangSelectTmpl,
		"golang.select.tmpl",
	)
}

func golangSelectTmpl() (*asset, error) {
	bytes, err := golangSelectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.select.tmpl", size: 457, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangUpdateTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x55\xc1\x6e\xe3\x36\x10\x3d\x4b\x5f\x31\xd5\x89\x82\x6d\xa2\xe8\x31\x80\x0f\xc1\x22\x05\x0c\x2c\x8c\xdd\x38\x69\x0f\x41\xe0\xd0\xd6\x48\xa0\x2b\x93\x32\x49\xd9\x31\x04\xfd\x7b\x31\xa4\xac\x4a\x89\x13\x74\x73\xf0\x81\xe6\xf0\xcd\x9b\x37\x6f\x46\x4d\x33\x83\x0c\x73\xa9\x10\x12\x2b\x0b\x25\x5c\x6d\x30\x81\x59\xdb\xc6\x8f\x55\x26\x1c\x36\x0d\xf0\x55\x9d\xe7\xf2\x15\xda\x96\x35\x0d\x54\xc2\x88\x3d\xf0\x5b\x53\x58\x68\xdb\x29\xd4\x3e\x0c\x7c\x9c\x33\xf5\xd6\xf1\xf0\x30\x1c\x96\x62\x8f\xd0\xb6\x29\x0c\x9e\xde\xa3\xab\x8d\xf2\x8f\xd1\x18\xfa\x69\x93\xc6\xc4\x04\x55\xe6\x53\xc7\x43\x5a\x1b\x9d\x9d\x3d\xa3\x26\x8e\xb6\x5a\x59\x07\xeb\xb5\x75\x7b\xb7\xae\x0c\xe6\xf2\x75\xfe\xe2\x53\xff\xfc\xfe\xc3\x1f\xa1\x6d\x5f\xde\xc4\x59\x4f\xbf\x8f\xeb\xab\x79\x89\xe3\xe8\x28\x0c\x1c\x2c\x3c\x3d\x6f\xce\x0e\xc3\xf1\x28\xca\x1a\xe9\x2f\xa9\x1c\x9a\x5c\x6c\xb1\x69\xe3\x38\x6a\x1a\x90\x39\xf0\x1f\xda\x4a\x27\xb5\x12\xe5\xad\x29\xea\x3d\x2a\x47\x32\xc4\xd1\x0e\x6e\xe6\x24\x42\x89\xaa\x17\x87\xf0\x3c\xd6\x1c\x44\x55\xa1\xca\x58\x38\x4f\x29\x50\x98\xa2\x0f\x4c\x3d\x7c\x5f\x7d\x24\xb2\xec\x82\x4e\xb0\x79\xad\xb6\x4c\x91\x92\xd6\x19\xa9\x8a\x14\x9a\x38\x8a\x0e\x03\xdc\x83\x9d\x02\x05\x70\xce\xd3\x38\x8a\x48\xbe\xcf\xc8\x46\xbb\xc9\xe4\x0a\x42\x02\xbe\x04\x7e\x09\xee\x15\x4d\x3a\xdc\xb7\x0f\xac\x33\x5b\xad\x8e\x7c\xe1\xb4\x60\xbb\xf4\x83\xa8\x64\x0a\xc9\x80\x18\x96\x16\x03\x8b\xff\x9d\xff\x0d\x80\xca\xfc\xfb\xae\x2b\x46\xa8\x02\xc7\xe6\x13\x9b\x12\xff\x94\x58\x66\xa1\x5c\x99\x77\x2e\xe5\x84\xde\x59\x12\x7e\x9b\x83\x92\xa5\x97\x72\xa0\x37\x4b\x28\xe6\x9b\x2e\xeb\x3d\x59\x34\xa1\xa4\x1f\x75\xf1\x3d\x28\xf7\x57\x2c\x4d\x89\xdd\xa5\xa7\x6d\x20\x1a\x5a\xb2\x44\xcc\xec\x52\x9f\x3c\xb1\xf5\x5a\xe9\x13\x75\x78\xa9\x4f\x2c\xe5\x8f\x0f\xdf\xd8\xd8\x0a\x83\xfa\x6e\x6b\xa7\x07\x35\xbd\xa3\xdc\x31\x20\xc2\x9f\xb8\x8e\x2f\x94\x74\x7f\x89\x72\x64\xba\xf6\x3f\x7f\x2b\xed\xde\xa5\x92\x39\xb9\x9a\x1d\x6c\x0a\xf3\x39\xfc\xee\x15\x33\x61\x86\x95\x2c\xa7\xf0\xb7\x11\xd5\x9d\x31\x2c\xdf\x3b\x7e\x47\xc3\x9c\xb3\x44\x21\x66\xe0\xf4\x65\x3b\x08\x07\x25\x0a\xeb\x40\x2b\x84\x9c\xa0\x93\xab\x1a\xf5\x14\xae\x39\x77\xf6\xa5\x89\xf2\xc8\x61\x13\x90\xd2\xa3\xdd\x01\x93\x6e\xa2\xd8\xc1\x3e\xdd\x74\x45\xce\xfe\x78\x4e\x61\x32\x5e\x1e\x71\xa4\x37\x3b\x5e\xea\x62\xe5\xf6\x8e\x85\xab\x2b\x39\xfb\x2d\xb1\xaa\xab\x4a\x1b\x67\xc3\xaa\x93\xaa\x80\xae\x99\x52\x49\x37\xd8\x80\x71\x44\x1b\x70\x0e\x84\x9e\x19\x79\x44\xc3\x7f\xd6\x68\xce\xf7\xfa\xd4\x67\x09\x15\x92\xff\xf9\x6a\x2b\x14\x2d\x52\x91\x65\x46\xe7\xc0\xf2\x52\x38\x47\x0b\x27\x00\xa6\xa1\x70\x99\xfb\xbd\x3a\xf0\xf7\xb5\x6e\xa1\x31\xa1\x03\xdd\xe5\xa5\x98\xc1\x76\x56\xb2\x0c\x32\xd2\xc4\xce\x82\x61\x0d\x89\x4d\xf0\x37\x23\xd6\x77\xaf\xb8\xbd\xc2\xf8\x97\xc9\xac\xd7\xd5\x3f\x3d\xbe\xcf\xc6\xbf\x0b\xeb\x16\xca\xa2\x71\x8b\x8c\x7d\xb9\x3c\xe2\x5a\xa0\x23\x30\x1a\x83\x50\x25\x7f\x38\x57\x34\x34\x8c\xd2\x8e\x27\xaf\x1d\x7d\x90\xfe\x0d\x00\x00\xff\xff\x4d\x7d\x73\x29\x27\x07\x00\x00")

func golangUpdateTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangUpdateTmpl,
		"golang.update.tmpl",
	)
}

func golangUpdateTmpl() (*asset, error) {
	bytes, err := golangUpdateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.update.tmpl", size: 1831, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x4d\x8f\xda\x38\x18\x3e\xc3\xaf\x78\x55\x71\x60\xd0\x90\xde\x77\x55\x8d\x32\xe0\xe9\xa6\x0d\x0e\x93\x98\xad\xe6\x98\x12\x53\xbc\x4a\x1c\x36\x18\x8d\x90\xf1\x7f\x5f\xd9\xce\x27\x4d\xd8\xe9\x6a\x0e\x7b\x73\xec\xc7\xcf\xfb\xbc\x9f\x8e\x94\x1f\x67\xb0\x0e\x22\xf2\x39\x44\xd1\xb3\x0f\x11\x71\x09\x5a\x21\x4c\x80\xa0\xd5\xda\x77\x09\x8a\x00\x66\x1f\x95\x1a\x8f\xa5\x9c\x43\x42\x77\x8c\x53\xf8\x70\xdc\xee\x69\x16\x7f\x80\xb9\x52\x66\xbf\x88\xf9\x0f\x0a\x0e\x89\xbf\xa7\xf4\x08\x4a\x8d\x17\x21\x72\x09\x02\xe2\x3e\xfa\x08\xa4\x04\x07\xc7\x19\x05\xa5\x60\xda\xc2\x4f\xd8\x3d\x4c\xb6\x79\x0a\xbf\x7d\x02\x67\x91\xa7\xa7\x8c\x9b\xcb\x52\xb2\x1d\x4c\x98\x52\xf7\x52\x52\x9e\x28\x35\x92\x12\x5e\x99\xd8\x5b\xb4\x36\x3a\x6a\x73\xea\x35\x39\x1f\x68\x75\x32\x07\xb6\x03\x07\xe7\x02\x9f\xd2\x54\x03\x70\x40\x00\x6f\x7c\x1f\xf4\x19\xe5\x49\x17\x18\xd2\x1d\x2d\x28\xdf\x1a\xae\x10\x3d\xa1\x10\xe1\x05\x8a\x0c\x6d\x7d\x66\x7d\x03\xa5\xa6\xdd\x6d\x2b\x1b\x94\xba\x83\x00\xc3\x12\xf9\x88\xa0\xab\x9b\x01\x5f\xd2\x94\x0a\x7d\xb9\x6d\x7f\x78\x6d\x54\xad\x0b\x96\xc5\xc5\xf9\x2b\x3d\xeb\x90\xdc\x8f\xd6\xa1\xb7\x72\xc3\x17\xf8\x8a\x5e\x60\x3a\x10\xc3\xce\x9d\x26\x8a\x50\x86\x51\x4a\x0b\x35\x2b\x6d\x4e\xa9\xbb\x6b\xd3\x65\x26\x37\x9c\xfd\x7d\xa2\xd6\xf2\x06\x7b\xcf\x1b\x34\x68\xf4\x97\x4d\x29\x35\xbe\xfb\x7d\x5c\xef\xb7\x56\x9d\x1a\x4b\x72\xc1\xe3\x8c\x56\x45\x06\x75\x06\x1c\xfd\x51\xc7\xbd\xe3\x40\x87\x20\xa5\x3b\xf1\x57\xce\xb8\x65\xf0\xd1\x13\x81\x2f\x81\x87\x6d\x76\xd8\x8f\xbd\xa8\x19\x75\xea\xa4\x04\x41\xb3\x43\x1a\x8b\xb6\x6d\xc7\xa7\x3b\xa1\x11\x9f\x86\x00\x86\xe9\xa6\x8e\x6d\xce\x13\x26\x58\xce\x9b\x7e\xd1\x09\xb6\x1e\x2c\xb2\x43\x5d\xd0\x7d\xf4\x35\xaa\x56\xd2\x78\xaf\x77\x83\x03\x2d\x62\x91\x17\xfa\xe4\xe1\xa7\x9a\xea\xd8\x29\x43\xf6\x26\x6b\x76\xd1\x6f\xb3\x3c\x6b\x5b\x7e\x23\x5d\x6f\xac\xba\x3a\xbd\xb7\x08\xf4\x1a\x65\x1e\xd6\x85\xd9\xc2\x1e\x69\x4a\xb7\xa2\x0d\xf5\x78\x4f\xa1\x0f\xe4\xea\x75\x4f\x0b\x7a\x3d\xd7\xca\x72\xe7\x89\xad\xf7\x4a\x1f\xdb\x01\xcf\x05\x4c\x18\x28\xf5\xed\x0f\x14\x9a\xbe\xa7\xe9\xd1\x54\x94\x8b\x97\x50\x17\x76\x47\x60\xab\x1c\x2c\xe9\xad\x61\xd0\x9d\xba\xc6\xb5\xf9\xeb\x3e\x16\x75\x57\x4c\x84\xa9\x61\x2d\xac\xaa\xe6\x2a\xa2\x29\xe5\xe0\x7c\xdb\xc7\xa2\x56\xdc\x72\x47\x93\x98\x5b\x06\x60\x24\x9a\x1e\x06\xdb\xc4\x8d\xf0\xd2\x80\x6d\x3b\x7b\xad\xd5\xd4\x56\xac\xf6\xb9\xb2\xd1\xe0\x67\xbf\xe2\x95\x75\x28\x42\x3e\x5a\x10\xe8\x49\x68\xe9\xb5\xa3\x14\x3c\x85\xc1\x0a\xda\x03\xc1\x8e\xf2\x72\x72\xe9\xc2\xf8\x92\x33\xfb\x92\x8c\xba\x75\xd4\x4c\x04\xa7\xbe\xf6\xd3\x73\xb0\xa8\xf2\xd3\xc7\x50\xd6\xc7\x35\xa8\x97\x28\x28\x12\x5a\x3c\x9e\x2d\x4b\x10\x2e\x51\x08\x8f\x2f\x43\xad\x52\x82\x9b\xb9\x06\x6e\xb4\x18\x20\xf6\x59\xc6\x84\xa5\xf5\xbd\x95\x47\xe0\xa1\x0b\xbc\x31\x89\x4e\xbc\x1b\x69\xb3\x33\x9d\xdd\xfd\xdf\x83\xfa\x6f\x3d\xf1\x3d\x3e\xb6\xda\xb6\x17\x99\x98\x47\xd8\x82\xca\x77\x7a\xc0\xe9\x7e\xc1\xef\xa3\x97\xf1\x23\x2d\xca\x1c\x78\x38\x42\x21\x01\x0f\x93\x60\x50\x85\xfd\x29\x32\xb1\x1c\x0d\xbd\xc0\xcd\xaf\xd3\x70\x17\x5f\x3f\xc6\xf0\xa7\xeb\x6f\x50\x34\x35\xae\xfd\x27\xd6\x87\xd6\xcb\x5e\xfb\x6e\xfe\xa0\xc8\x26\xc4\x1e\xfe\x0c\xb3\xe1\x30\x9c\x0e\x49\x5c\x25\x63\xb3\x5e\xba\xe5\x4f\x53\xfd\x20\x47\x88\xc0\xe5\x72\x79\x8e\x2e\x97\xcb\xbb\x24\xe5\x86\xb0\x7f\x02\x00\x00\xff\xff\x5f\xa3\x67\x2b\x04\x0b\x00\x00")

func postgresTmplBytes() ([]byte, error) {
	return bindataRead(
		_postgresTmpl,
		"postgres.tmpl",
	)
}

func postgresTmpl() (*asset, error) {
	bytes, err := postgresTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.tmpl", size: 2820, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlite3Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x4d\x6f\xea\x38\x14\x5d\xc3\xaf\xb8\x7a\x62\x01\xa8\xe4\x2d\x66\x37\xa3\xa7\x2a\x05\x57\x93\xd7\x90\xd0\xc4\x4c\xd5\x65\x4a\x4c\xf1\x28\x71\x98\x60\x54\x21\xe3\xff\x3e\xb2\x9d\x4f\x9a\x30\xed\xa8\x8b\xb7\x73\xec\xe3\x73\xcf\xfd\x74\x84\xf8\x3e\x85\xf0\xd1\x75\x30\xfa\x0d\x42\x6c\x63\xb4\x44\x1e\x06\x8c\x96\x2b\xd7\xc6\x28\x04\x98\x7e\x97\x72\x38\x14\x62\x06\x31\xd9\x52\x46\xe0\xdb\x61\xb3\x23\x69\xf4\x0d\x66\x52\xea\xfd\x3c\x62\xaf\x04\x2c\x1c\xbd\x24\xe4\x00\x52\x0e\xe7\x01\xb2\x31\x02\x6c\xdf\xb9\x08\x84\x00\xcb\x8b\x52\x02\x52\xc2\xb8\x81\x1f\xd1\x1b\x18\x6d\xb2\x04\x7e\xff\x01\xd6\x3c\x4b\x8e\x29\xd3\x97\x85\xa0\x5b\x18\x51\x29\x6f\x84\x20\x2c\x96\x72\x20\x04\xbc\x51\xbe\x33\x68\x65\x74\xd0\xe4\x54\x6b\x7c\xda\x93\xf2\x64\x06\x74\x0b\x96\x97\x71\xef\x98\x24\x0a\xe0\xf9\x18\xbc\xb5\xeb\x82\x3a\x23\x2c\x6e\x03\x03\xb2\x25\x39\x61\x1b\xcd\x15\xa0\x7b\x14\x20\x6f\x8e\x42\x4d\x5b\x9d\x19\xdf\x40\xca\x71\x7b\xdb\xc8\x06\x29\x27\xe0\x7b\xb0\x40\x2e\xc2\xe8\xe2\xa6\xcf\x16\x24\x21\x5c\x5d\x6e\xda\xef\x5f\x6b\x55\xab\x9c\xa6\x51\x7e\x7a\x20\x27\x15\x92\x9b\xc1\x2a\x70\x96\x76\xf0\x0c\x0f\xe8\x19\xc6\x3d\x31\x6c\xdd\xa9\xa3\x08\x45\x18\x85\x30\x50\xbd\x52\xe6\xa4\x9c\x5c\x9a\x2e\x32\xb9\x66\xf4\x9f\x23\x31\x96\xd7\x9e\xf3\xb8\x46\xbd\x46\x3f\x6d\x4a\xca\xe1\xe4\x8f\x61\xb5\xdf\x58\xb5\x6a\x2c\xce\x38\x8b\x52\x52\x16\x19\x54\x19\xb0\xd4\x47\x15\xf7\x96\x03\x2d\x82\x84\x6c\xf9\xdf\x19\x65\x86\xc1\x45\xf7\x18\x7e\xfa\x8e\x67\xb2\x43\x5f\x77\xbc\x62\x54\xa9\x13\x02\x38\x49\xf7\x49\xc4\x9b\xb6\x2d\x97\x6c\xb9\x42\xfc\xe8\x03\x68\xa6\xab\x3a\x36\x19\x8b\x29\xa7\x19\xab\xfb\x45\x25\xd8\x78\x30\x4f\xf7\x55\x41\x77\xd1\x57\xa8\x4a\x49\xed\xbd\xda\xf5\xf7\x24\x8f\x78\x96\xab\x93\xdb\x77\x35\xd5\xb2\x53\x84\xec\x43\xd6\xcc\xa2\xdb\x66\x71\xd6\xb4\xfc\x41\xba\xce\x58\xb5\x75\x3a\x1f\x11\xe8\xd4\xca\x1c\x4f\x15\x66\x03\x7b\x20\x09\xd9\xf0\x26\xd4\x61\x1d\x85\xde\x93\xab\xb7\x1d\xc9\xc9\xe5\x5c\x2b\xca\x9d\xc5\xa6\xde\x4b\x7d\x74\x0b\x2c\xe3\x30\xa2\x20\xe5\xd3\x9f\x28\xd0\x7d\x4f\x92\x83\xae\x28\xdb\x5b\x40\x55\xd8\x2d\x81\x8d\x72\x30\xa4\xd7\x86\x41\x7b\xea\x6a\xd7\x66\x6f\xbb\x88\x57\x5d\x31\xe2\xba\x86\x95\xb0\xb2\x9a\xcb\x88\x26\x84\x81\xf5\xb4\x8b\x78\xa5\xb8\xe1\x8e\x22\xd1\xb7\x34\x40\x4b\xd4\x3d\x0c\xa6\x89\x6b\xe1\x85\x01\xd3\x76\xe6\x5a\xa3\xa9\x8d\x58\xe5\x73\x69\xa3\xc6\x4f\x3f\xe3\x95\x71\x28\x44\x2e\x9a\x63\xe8\x48\x68\xe1\xb5\x25\x25\xdc\x07\xfe\x12\x9a\x03\xc1\x8c\xf2\x62\x72\xa9\xc2\xf8\x99\x51\xf3\x92\x0c\xda\x75\x54\x4f\x04\xab\xba\xf6\xee\x39\x98\x97\xf9\xe9\x62\x28\xea\xe3\x12\xd4\x49\xe4\xe7\x31\xc9\xef\x4e\x86\xc5\x0f\x16\x28\x80\xbb\xe7\xbe\x56\x29\xc0\xf5\x5c\x03\x3b\x9c\xf7\x10\xbb\x34\xa5\xdc\xd0\xba\xce\xd2\xc1\x70\xdb\x06\x5e\x99\x44\x47\xd6\x8e\xb4\xde\x19\x4f\x27\xbf\x7a\x50\xff\xab\x27\x5e\xa2\x43\xa3\x6d\x3b\x91\xb1\x7e\x84\x0d\xa8\x78\xa7\x7b\x9c\xee\x16\xfc\x35\x7a\x29\x3b\x90\xbc\xc8\x81\xe3\x85\x28\xc0\xe0\x78\xd8\xef\x55\x61\x7e\x8a\x74\x2c\x07\x7d\x2f\x70\xfd\xeb\xd4\xdf\xc5\x97\x8f\x31\xfc\x65\xbb\x6b\x14\x8e\xb5\x6b\xff\x8b\xf5\xb6\xf1\xb2\x57\xbe\x5f\x73\xfd\xb8\x8f\xa3\x32\x01\xeb\xd5\xc2\x2e\x7e\x94\xaa\x47\x38\x44\x18\xce\xe7\xf3\x63\x78\x3e\x9f\xbf\x24\x11\x17\x62\xfe\x0d\x00\x00\xff\xff\x98\xb8\x02\x49\xe9\x0a\x00\x00")

func sqlite3TmplBytes() ([]byte, error) {
	return bindataRead(
		_sqlite3Tmpl,
		"sqlite3.tmpl",
	)
}

func sqlite3Tmpl() (*asset, error) {
	bytes, err := sqlite3TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sqlite3.tmpl", size: 2793, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"golang.count.tmpl": golangCountTmpl,
	"golang.delete-all.tmpl": golangDeleteAllTmpl,
	"golang.delete.tmpl": golangDeleteTmpl,
	"golang.footer.tmpl": golangFooterTmpl,
	"golang.get-last.tmpl": golangGetLastTmpl,
	"golang.has.tmpl": golangHasTmpl,
	"golang.header.tmpl": golangHeaderTmpl,
	"golang.insert.tmpl": golangInsertTmpl,
	"golang.misc.tmpl": golangMiscTmpl,
	"golang.select-all.tmpl": golangSelectAllTmpl,
	"golang.select-paged.tmpl": golangSelectPagedTmpl,
	"golang.select.tmpl": golangSelectTmpl,
	"golang.update.tmpl": golangUpdateTmpl,
	"postgres.tmpl": postgresTmpl,
	"sqlite3.tmpl": sqlite3Tmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"golang.count.tmpl": &bintree{golangCountTmpl, map[string]*bintree{}},
	"golang.delete-all.tmpl": &bintree{golangDeleteAllTmpl, map[string]*bintree{}},
	"golang.delete.tmpl": &bintree{golangDeleteTmpl, map[string]*bintree{}},
	"golang.footer.tmpl": &bintree{golangFooterTmpl, map[string]*bintree{}},
	"golang.get-last.tmpl": &bintree{golangGetLastTmpl, map[string]*bintree{}},
	"golang.has.tmpl": &bintree{golangHasTmpl, map[string]*bintree{}},
	"golang.header.tmpl": &bintree{golangHeaderTmpl, map[string]*bintree{}},
	"golang.insert.tmpl": &bintree{golangInsertTmpl, map[string]*bintree{}},
	"golang.misc.tmpl": &bintree{golangMiscTmpl, map[string]*bintree{}},
	"golang.select-all.tmpl": &bintree{golangSelectAllTmpl, map[string]*bintree{}},
	"golang.select-paged.tmpl": &bintree{golangSelectPagedTmpl, map[string]*bintree{}},
	"golang.select.tmpl": &bintree{golangSelectTmpl, map[string]*bintree{}},
	"golang.update.tmpl": &bintree{golangUpdateTmpl, map[string]*bintree{}},
	"postgres.tmpl": &bintree{postgresTmpl, map[string]*bintree{}},
	"sqlite3.tmpl": &bintree{sqlite3Tmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

