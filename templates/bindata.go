// Code generated by go-bindata.
// sources:
// golang.create.tmpl
// golang.delete-all.tmpl
// golang.delete-world.tmpl
// golang.delete.tmpl
// golang.dialect-postgres.tmpl
// golang.dialect-sqlite3.tmpl
// golang.footer.tmpl
// golang.get-all.tmpl
// golang.get-count.tmpl
// golang.get-first.tmpl
// golang.get-has.tmpl
// golang.get-last.tmpl
// golang.get-limitoffset.tmpl
// golang.get-one-all.tmpl
// golang.get-one.tmpl
// golang.get-paged.tmpl
// golang.get-scalar-all.tmpl
// golang.get-scalar.tmpl
// golang.header.tmpl
// golang.misc.tmpl
// golang.update.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _golangCreateTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x92\x4f\x8b\xdb\x30\x10\xc5\xcf\xd6\xa7\x98\x06\x0a\x36\x24\xfa\x00\x0b\x39\x94\x65\x0b\x0b\x4b\x60\x93\xed\xd9\x68\xa3\x91\x51\xd7\x91\xdc\xd1\xa4\x4e\x10\xfa\xee\x65\xec\xa6\x78\x0f\xed\xa1\x7b\x30\xf8\xcf\xf8\xbd\xdf\x7b\x9a\x9c\x37\x60\xd1\xf9\x80\xb0\x4a\xbe\x0b\x86\xcf\x84\x2b\xd8\x94\xa2\xee\x09\x0d\x63\xce\xe0\x1d\xe8\xbd\x19\xa1\x94\xbd\x19\xe5\x07\x0c\x56\x26\x72\x06\x7d\x38\x3b\xe7\x2f\x50\x4a\x9d\x33\x1c\xf9\x32\x18\x32\x27\xd0\x5f\xa8\x4b\x50\x4a\x03\xb5\xaa\x72\x86\xdf\x6f\xf7\xc8\x67\x0a\x50\xca\x1a\x90\x48\xae\x48\x8d\x5a\x28\x2a\xb5\xe4\x79\x8d\xf6\x3a\xa1\x64\x11\xd9\x4c\x1c\x3b\x44\x9b\x76\x51\x60\x54\xd5\xb6\x21\x8e\x70\xb7\x85\x5d\x1c\xeb\x46\x7f\x7b\xb9\xaf\x9b\xc9\xef\x26\x27\xf7\x3e\x78\x0e\x38\x82\xfe\xea\xb1\xb7\x42\xa5\x54\x75\x8c\x21\x31\xb4\x6d\xe2\x13\x6f\x05\x90\x7c\x60\x07\xab\xcf\x3f\x56\xa0\x0f\xcf\x4f\x93\x7c\x7c\xfd\xae\xfb\xd8\x1d\xf8\xc4\xf5\x3c\xba\x86\x9c\xc1\x50\xb7\x10\x6b\xd4\xec\xe2\xa4\x8b\x61\x88\xc4\x69\x8e\xe9\x43\x07\x0b\x84\x45\x7a\x55\x49\xfa\x2d\x88\xbe\x25\xff\x13\x49\x3f\x9f\x91\xae\xfb\x38\xfe\xc3\x47\x1f\x8e\x26\x48\xcb\xc6\x5a\x8a\x0e\x6a\xd7\x1b\x66\x0c\x37\xe1\x66\x82\xa9\xbc\x9b\xba\xfd\xb4\x85\xe0\x7b\xc8\xaa\xaa\x68\xf6\x0d\xbe\x5f\x4f\x96\x27\xf3\x86\x0f\x44\x35\x12\x35\xaa\x2a\xea\x36\x70\xb3\x5c\x9c\x52\xf0\xfd\xdc\x67\x9f\x70\x2e\xb4\x6d\x09\xd3\x7c\x7c\x77\xef\x12\x3c\x5c\xf0\xf8\x17\xfa\xff\xe5\x6a\xdb\xe1\xed\x8f\xd5\x64\xac\x9f\x4c\xe2\xc7\x90\x90\xf8\xd1\xd6\x1f\x4a\x2b\xdf\x3a\x64\x11\x94\x3d\x9e\x43\xeb\x97\xeb\x80\xb2\xcc\x47\xbe\xac\x41\xfc\xdf\xef\x53\x51\x8b\x87\x5f\x01\x00\x00\xff\xff\x0e\xbb\x3e\xb4\x3b\x03\x00\x00")

func golangCreateTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangCreateTmpl,
		"golang.create.tmpl",
	)
}

func golangCreateTmpl() (*asset, error) {
	bytes, err := golangCreateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.create.tmpl", size: 827, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeleteAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x90\xc1\x4a\xf3\x40\x10\x80\xcf\x3b\x4f\x31\x7f\xe0\x87\x14\xda\xe0\x41\x3c\x08\x39\x14\xec\xcd\x8b\xf6\x01\x42\x9a\xcc\x96\xd5\xcd\x6e\x9d\x9d\xd4\xca\xb0\xef\x2e\x49\x83\x7a\x13\x3c\xec\x69\xe7\xfb\xbe\x61\x54\x37\xd8\x93\x75\x81\xb0\x48\xee\x18\x5a\x19\x99\x0a\xdc\xe4\x0c\x0f\xe4\x49\x48\x15\xab\xfd\x68\xad\xbb\x60\xce\xa5\x2a\x76\x72\x39\xb5\xdc\x0e\x58\x6d\xf9\x98\x30\xe7\x15\x96\x60\xba\x38\x06\x41\x17\xe4\xee\x76\x8d\xc4\x3c\xbd\xc8\x2b\x98\xfc\x14\xfa\x59\x08\x3f\x63\x87\xd8\x7f\xcc\x1d\x9d\xe0\x90\x04\x9b\x26\xc9\x20\xb5\x2a\x9e\xd8\x05\xb1\x58\xfc\x7f\x2b\xb0\xda\x3f\x3d\x62\xce\x60\xe2\xe1\xa5\xf2\xf1\xb8\x97\x41\xca\xeb\xe8\x1a\x55\xd1\x3a\xf2\xfd\xb9\xf5\x23\x7d\x2f\x04\x60\x9a\x86\x29\x5d\x37\xb9\xaf\x71\x62\x7b\x76\x67\xe2\x6a\x77\xa1\xee\x57\xde\x38\x3b\xa3\xff\x6a\x0c\xce\xa3\x82\x31\x4c\x32\x72\xc0\x9b\xf5\x2c\x1b\xda\x57\xda\x31\x97\xc4\xbc\x02\x93\x61\x39\xc0\x35\x58\xe3\x5c\xaf\x9e\xe3\x7b\xda\x5a\x4b\x9d\x50\x5f\xfe\x49\xba\xfc\x2f\xee\xe0\x3c\x64\x50\xfd\x3a\xe8\x67\x00\x00\x00\xff\xff\x9a\x86\xa0\xd9\xbd\x01\x00\x00")

func golangDeleteAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteAllTmpl,
		"golang.delete-all.tmpl",
	)
}

func golangDeleteAllTmpl() (*asset, error) {
	bytes, err := golangDeleteAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete-all.tmpl", size: 445, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeleteWorldTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x90\xc1\x6a\xeb\x30\x10\x45\xd7\xd2\x57\xcc\x33\x3c\xb0\x69\x22\xba\x28\xdd\x65\x11\x4a\x76\xdd\x34\xfd\x80\xe0\x58\xe3\xa0\x56\x1d\x35\xa3\x71\xea\x22\xf4\xef\xc5\x72\x1d\xb2\xee\x42\x08\x84\xe6\x9c\xb9\x37\xa5\x35\x58\xec\x1d\x21\x54\xd1\x9d\xa8\x95\x81\xb1\x82\x75\xce\xda\xa2\x47\xc1\xad\xf7\x75\x27\x23\x74\x81\x04\x47\x31\x4f\xf3\xdd\x40\xdd\x85\x81\x04\x1c\xc9\xe3\xc3\x0a\x90\x79\x3a\x81\x1b\x3d\x21\x91\x6c\x61\xe8\x5b\xfe\x31\xd8\xef\x82\x4e\x5a\x5d\x5a\x86\xc3\x81\x31\x42\x3c\x7b\xb3\xc7\x38\x78\x59\x5e\x6f\xc0\x33\x80\x5b\x3a\x21\x98\xd7\x97\xe7\x08\x39\x6b\x55\x06\x67\xe7\x06\xc2\xf1\xcd\x58\x76\x17\x64\xb3\x1b\xb1\xab\x53\x82\x4f\x76\x24\x3d\x54\xff\xcf\x15\x18\xc8\xb9\xd1\xca\xf5\xe5\xfb\xbf\x0d\x90\xf3\x90\xb4\x52\x8c\x32\x30\xc1\xfd\xaa\x10\x3e\xda\x77\xdc\x31\xd7\xc8\xdc\x68\x95\xf5\x24\x29\x7b\x2c\x9a\xe2\x34\xfb\xf0\x15\xb7\x7d\x8f\x9d\xa0\xad\xff\x80\x55\x73\xb6\xbb\xcd\x12\xf3\xda\xd6\x54\xd6\x32\xfc\x2b\x26\xe7\x75\xd6\x29\x5d\xdb\xfc\x09\x00\x00\xff\xff\x2e\xc5\xd2\x56\xad\x01\x00\x00")

func golangDeleteWorldTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteWorldTmpl,
		"golang.delete-world.tmpl",
	)
}

func golangDeleteWorldTmpl() (*asset, error) {
	bytes, err := golangDeleteWorldTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete-world.tmpl", size: 429, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeleteTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x90\xc1\x6a\xeb\x30\x10\x45\xd7\xd2\x57\xcc\x33\x3c\x70\xc0\x31\x5d\x17\x52\x08\x34\xbb\x6e\xda\x7c\x80\x71\xac\x51\x50\x2b\x4b\xe9\x68\x9c\xba\x0c\xfa\xf7\x62\x25\xa4\xdd\x15\xba\x98\xdd\x3d\xf7\x5c\x46\x64\x0d\x06\xad\x0b\x08\x55\x72\xc7\xd0\xf3\x44\x58\xc1\x3a\x67\xfd\x88\x1e\x19\x45\xa0\xdd\x4f\xd6\xba\x19\x72\xae\x45\x60\xe0\xf9\xd4\x53\x3f\x42\xbb\xa5\x63\x82\x9c\x57\x50\x6b\x65\x4a\xd8\xc0\x21\x46\xdf\x00\x12\x2d\x17\x69\xa5\x17\x01\x06\x53\x1a\xf5\x4f\xdb\x21\x9a\xcf\x22\x12\xad\x86\x18\x12\x43\xd7\x25\x1e\x79\x23\x02\x27\x72\x81\x2d\x54\xff\xdf\x2b\x68\xf7\xcf\x4f\x90\xb3\x56\xf1\xf0\xda\xfa\x78\xdc\xf3\xc8\xf5\x25\xda\x80\x08\x58\x87\xde\x9c\x7b\x3f\xe1\xf7\x22\xad\x55\xd7\x11\xa6\xcb\x92\xfb\x0d\x2c\xac\x21\x77\x46\x6a\x77\x33\x0e\xbf\xf2\xca\xd9\x82\xfe\xdb\x40\x70\x1e\x44\x2b\x45\xc8\x13\x05\xb0\xbd\x4f\xd8\x94\xc2\xb1\x7f\xc3\x1d\x51\x8d\x44\x2b\xad\x72\x91\x0e\x71\x0a\x7c\xd3\x96\x11\xed\x4b\xfc\x48\x5b\x6b\x71\x60\x34\xf5\x9f\xbb\xaf\x99\xab\x02\x1e\xe0\xae\x59\x78\x9d\xb5\xc8\xed\xc3\x5f\x01\x00\x00\xff\xff\x61\x58\xa7\x9f\xcf\x01\x00\x00")

func golangDeleteTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteTmpl,
		"golang.delete.tmpl",
	)
}

func golangDeleteTmpl() (*asset, error) {
	bytes, err := golangDeleteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete.tmpl", size: 463, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDialectPostgresTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x90\x4b\x6e\x84\x30\x10\x44\xd7\xf6\x29\x4a\x5e\x41\x04\x1e\x29\xd9\x25\x62\x85\x72\x81\xdc\x80\x4f\x33\x69\x05\x6c\xa6\x6d\xb2\xb1\x7c\xf7\x08\xe7\x2f\x79\x55\x55\xef\x59\xea\x94\x5a\xcc\xb4\xb0\x23\x18\xde\x76\x2f\xd1\x20\x67\xad\xcc\x95\xe3\xeb\x31\xda\xc9\x6f\x97\x95\xc7\xcb\x7e\x33\x3a\x25\x90\x9b\xd1\xe6\xac\xf5\x3f\x2e\xb4\x93\x77\x21\xca\xc0\x2e\xb6\x24\xe2\xa5\x48\x96\xc3\x4d\xa8\x78\xdb\x57\xa4\x04\xfb\x42\x13\xf1\x3b\x09\x72\xae\xc1\xa1\xff\x41\x9e\x4f\xa2\x22\x11\x14\xb6\x46\xa5\xd5\xaf\x10\x21\x0a\xbb\x6b\x03\xff\x86\xd1\xfb\xb5\x46\xd2\x8a\x17\x50\x49\x1e\xbb\x13\xb2\xd5\xdd\x7e\xb3\xc5\x53\x3f\x9d\x71\xd2\x4a\x95\x91\xed\xfd\x4c\xb6\x5f\x87\x10\xaa\x1a\x5d\x07\x73\xff\x60\x3e\x6b\x25\x14\x0f\x71\x65\xf3\xfd\x59\x83\x28\x07\x9d\x6d\xd6\xe7\xfb\x9a\x18\xd3\x60\x19\xd6\x40\x3a\xff\xbd\xc2\x47\x00\x00\x00\xff\xff\x28\x4c\xe9\xcf\x3d\x01\x00\x00")

func golangDialectPostgresTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDialectPostgresTmpl,
		"golang.dialect-postgres.tmpl",
	)
}

func golangDialectPostgresTmpl() (*asset, error) {
	bytes, err := golangDialectPostgresTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.dialect-postgres.tmpl", size: 317, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDialectSqlite3Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x91\x41\x4b\xc4\x30\x10\x85\xcf\xc9\xaf\x18\x73\x6a\x61\xdb\x45\xbc\xad\xf4\xb4\x78\x10\x3c\xa9\x37\xf1\xd0\x6d\xa7\x75\xb0\x49\xd6\x49\x2a\x42\xc8\x7f\x97\xa4\xeb\xb6\x42\x4f\xf3\xde\xf7\xf5\x41\x42\xa8\xa0\xc7\x81\x0c\x82\x22\x7d\xb6\xec\x15\xc4\x28\x85\x1a\xc9\x7f\xcc\xa7\xba\xb3\x7a\xaf\x5b\xef\xcd\x7e\xb4\x95\xfb\x9a\xc8\xe3\x9d\x92\x21\x00\x9a\x1e\xaa\x18\xa5\xfc\x67\x70\x55\x67\x8d\xf3\xdc\x92\xf1\x15\x32\x5b\xce\xba\x61\x36\x1d\x14\xa4\xcf\x13\x84\x00\xf5\x33\x76\x48\xdf\xc8\x10\x63\x09\xe4\x8e\x57\xe4\x21\x11\x05\x32\x43\x66\x4b\x28\xa4\x58\x85\xe0\x3c\x93\x19\x77\x60\x3f\xe1\x64\xed\x54\x42\x90\x82\x06\xc0\x7c\x39\x34\x09\xaa\x8b\xcb\xc8\x3a\xbb\xca\xfb\x14\x05\x29\x44\x2e\xd6\x47\xdb\x23\x34\x0d\x6c\x4a\xeb\xdf\x97\x9e\xd0\x6e\xfc\x93\x2d\x7b\xca\x7c\xee\xec\x64\x4d\x0a\x96\x15\xae\x7e\x6a\x9d\x7f\x34\x3d\xfe\x14\xda\x8d\x3b\x50\x07\xb5\x14\x69\x80\xa5\x7b\xd3\x40\x75\x7b\x91\x0a\x46\x3f\xb3\xb9\xc2\xaf\x4c\xfa\xe5\xdc\x76\x98\xe0\xb7\xdc\x3f\xbc\x97\x3b\xf0\x3c\x63\x06\xa2\xdc\x50\x4a\xad\x49\x94\xe9\xdb\x04\x43\x3b\x39\x94\x71\xfb\x28\xbf\x01\x00\x00\xff\xff\xf2\xcb\x38\xa5\xd6\x01\x00\x00")

func golangDialectSqlite3TmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDialectSqlite3Tmpl,
		"golang.dialect-sqlite3.tmpl",
	)
}

func golangDialectSqlite3Tmpl() (*asset, error) {
	bytes, err := golangDialectSqlite3TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.dialect-sqlite3.tmpl", size: 470, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x8f\xbd\x4e\x03\x31\x10\x84\x6b\xef\x53\x6c\x69\x23\xb8\x0a\xd1\x43\x80\x8e\x06\xee\x05\x1c\xdf\x92\x58\xf1\x4f\x58\x2f\xc2\xc8\xba\x77\x47\x21\xc9\x45\x42\x16\xd5\x8e\x46\x9a\x6f\x76\xe4\x7b\x4f\xf8\x42\xb2\xcd\x53\x41\x9f\x84\xf8\xdd\x3a\xc2\x06\xad\xdd\x20\xdb\xb4\x21\x1c\x9e\x3f\x93\x2b\x38\xcf\xa0\x5a\xc3\xe1\x20\x5a\x43\x4a\xd3\x41\xcd\x00\xbf\x88\xb1\xf6\x20\xea\x64\x02\xa8\x55\x8e\xd1\x8b\x36\x48\xcc\x99\x41\xbd\xe6\x10\xd6\xd6\xed\x16\xe7\x4c\x92\x3e\x69\x29\x00\x50\x13\x05\x12\xba\x0f\x41\x3b\xa9\xe8\x72\x12\xaa\x32\xac\x8e\xd7\xa0\xf6\x49\xee\x6e\xaf\x8f\x5c\x03\x2a\xda\x1d\x3d\x31\x6b\x62\x3e\x79\x7f\x2a\x1f\x1f\xba\x95\x6f\x6e\x4b\xd1\x6a\x83\x45\xd8\xa7\xcd\x65\xcd\x39\x37\xad\xbb\xb9\x05\x07\xa0\xbe\xd8\xee\xc7\xaa\xa5\xe2\x55\xf9\x08\xc3\x58\xcd\x65\xe0\xbf\x9f\xfd\x04\x00\x00\xff\xff\x52\xf2\x8b\xad\x99\x01\x00\x00")

func golangFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangFooterTmpl,
		"golang.footer.tmpl",
	)
}

func golangFooterTmpl() (*asset, error) {
	bytes, err := golangFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.footer.tmpl", size: 409, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\x4d\xaa\xdc\x30\x10\x84\xd7\xd2\x29\x3a\x86\x80\x0c\xf3\x7c\x80\x17\xbc\x78\x84\xec\x42\x60\xe2\x03\x18\x8d\xd5\x32\x4a\x64\xc9\x69\xcb\xf3\x43\xa3\xbb\x07\xd9\x33\x93\x2c\x42\x42\x16\x5e\x58\x54\x57\x7d\x5d\x12\xf3\x0b\x18\xb4\x2e\x20\x54\x8b\x1b\x83\x4e\x2b\x61\x05\x2f\x39\xcb\x37\xef\x99\xa1\xe9\x56\x6b\xdd\x15\x72\x56\xcc\x30\xa4\xeb\xac\x49\x4f\xd0\xbc\xd1\xb8\x40\xce\x35\x28\x29\x28\x5e\x16\x60\x86\xc5\xbb\x01\xa3\x85\xe6\x6b\xbc\x40\xce\x07\x40\xa2\xf2\x45\xaa\x65\x09\xc2\x60\x36\x67\xf9\x7b\xea\x29\x9a\x5b\x05\x39\xb3\x14\x43\x0c\x4b\x82\xbe\x5f\xd2\x94\x5a\x66\x98\xc9\x85\x64\xa1\x7a\xff\xa3\x82\xa6\x3b\x7e\x86\x9c\xa5\x88\xa7\x6f\x8d\x8f\x63\x97\xa6\xa4\x76\xe9\xa1\x64\x5b\x87\xde\x9c\xb5\x5f\xf1\x17\x9b\x94\xa2\xef\x0b\xdc\x4e\xf2\xda\x42\x19\x36\xe4\xce\x48\xcd\x71\x45\xba\xfd\xcd\xa1\x18\x08\x67\xb7\xd1\x77\x2d\x04\xe7\x81\xa5\x10\x84\x69\xa5\x50\x7e\x0f\x9b\xdd\xa4\xbf\xe3\x27\x22\x85\x44\xb5\x14\x59\x0a\x83\x16\x09\xf6\xe0\xe6\xa3\x8f\x0b\xaa\x42\x62\xe3\xf3\xf0\x0b\x5e\x93\xaa\x37\x37\x66\x70\xc1\xa5\x80\x97\x47\x6b\x52\x88\x92\xd8\x3e\xc4\xdd\xa0\x43\xa9\x5e\x1b\x43\xd1\x82\xb2\x5e\xa7\x84\x61\x93\xd7\xdb\x96\xe2\x0f\x94\xff\xc0\x2c\x9c\xfb\xb5\xb5\xa0\xe7\x19\x83\x51\x7b\x4f\x25\x88\xc6\x07\xcb\xbe\xd0\xdd\xfd\xf5\x89\x54\x7c\xea\x0f\xff\x5d\xcc\x5d\xb0\x07\x05\xe7\x65\x96\xcc\xcf\x47\xf1\x33\x00\x00\xff\xff\x5d\x34\x4f\x52\x8a\x02\x00\x00")

func golangGetAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetAllTmpl,
		"golang.get-all.tmpl",
	)
}

func golangGetAllTmpl() (*asset, error) {
	bytes, err := golangGetAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-all.tmpl", size: 650, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetCountTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x90\xbf\x4e\xc3\x30\x10\xc6\x67\xdf\x53\x1c\x91\x40\x89\x94\x46\x0c\x88\xad\x03\x42\x6c\x2c\x25\x0f\x50\xb9\xcd\xb9\x32\x24\x76\xb9\xd8\xa5\xd5\xe9\xde\x1d\x39\x88\x3f\x1b\x83\x27\x7f\xbf\x9f\xbf\xcf\x22\x2b\x1c\xc8\xf9\x40\x58\xcd\xfe\x10\x6c\xca\x4c\x15\xae\x54\xe1\x31\xe6\x90\x44\xb0\xeb\xb3\x73\xfe\x8c\xaa\xb5\x08\xee\xd3\xf9\x68\xd9\x4e\xd8\x3d\xf0\x61\x46\xd5\x06\x6b\x30\xfb\x92\x45\x1f\xd2\xfd\x5d\x8b\xc4\x5c\x4e\xe4\x06\x8a\x9e\xc2\xb0\xf8\xe0\xef\x5b\xbb\x38\x5c\x2a\x54\x95\xc2\x86\x39\xe1\x76\x3b\xa7\x29\xad\x45\xf0\xc8\x3e\x24\x87\xd5\xf5\x7b\x85\x5d\xbf\x79\x46\x55\x30\x71\xf7\xda\x8d\xf1\xd0\xa7\x29\xd5\x5f\xd1\x16\x45\xd0\x79\x1a\x87\x93\x1d\x33\xfd\xf6\x01\x30\xa5\xc1\x1a\x0b\x33\xb0\x3f\x11\x77\x9b\x4c\x7c\x79\x89\x1f\xff\xb1\x5d\xbf\xb7\xa1\xbe\x59\xe6\x34\x60\xbc\x5b\xc6\x5c\xad\x31\xf8\x11\x05\x8c\x61\x4a\x99\x03\xde\xb6\x8b\x7d\xb2\x6f\xf4\xc4\x5c\x13\x73\x03\x46\x01\xbe\xef\x17\x41\x5b\x28\x50\x10\xf9\xf9\x83\xcf\x00\x00\x00\xff\xff\x9e\xfe\x2a\x2d\x6f\x01\x00\x00")

func golangGetCountTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetCountTmpl,
		"golang.get-count.tmpl",
	)
}

func golangGetCountTmpl() (*asset, error) {
	bytes, err := golangGetCountTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-count.tmpl", size: 367, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetFirstTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\xcd\x4a\xc4\x30\x10\xc7\xcf\xc9\x53\xcc\x16\x84\x16\x76\xfb\x00\x2b\x3d\x88\xe8\x49\x84\xb5\x0f\x50\xb2\x9b\x49\x89\xb6\x89\x4e\xd3\xfd\x20\xe4\xdd\x65\xba\x5f\xea\x41\xc1\x43\x0f\x0d\xff\xf9\xfd\xfe\x64\x12\xe3\x02\x34\x1a\xeb\x10\xb2\xc1\xb6\x4e\x85\x91\x30\x83\x45\x4a\xf2\xd1\xd2\x10\x62\x84\xb2\x1e\x8d\xb1\x7b\x48\x29\x8f\x11\x36\x61\xff\xae\x48\xf5\x50\xde\x51\x3b\x40\x4a\x05\xe4\x52\xc4\x08\xa7\xd3\x17\xbf\x83\x94\xe6\x80\x44\xfc\x79\x2a\x24\x3b\xd0\xe9\x09\x2a\xbf\x0a\xd7\x5e\x1f\x32\x48\x29\x4a\xb1\xf1\x6e\x08\xd0\x34\x43\xe8\x43\xc5\x34\xb2\x2e\x18\xc8\x6e\x3e\x32\x28\xeb\xd5\x13\xa4\x24\x85\x5f\xbf\x96\x9d\x6f\xeb\xd0\x87\xfc\x18\x9d\x43\x8c\x60\x2c\x76\x7a\xab\xba\x11\xaf\xa5\xa4\x14\x4d\x43\x7e\x37\x1c\x9b\x2c\x2b\xe0\x61\x4d\x76\x8b\x54\xae\x46\xa4\xc3\x6f\x04\x06\x08\x6b\xa6\xd1\x59\x05\xce\x76\x10\xa5\x10\x84\x61\x24\xc7\xbf\xf3\x09\xd7\xab\x37\x7c\x20\xca\x91\xa8\x90\x22\x49\xa1\xd1\x20\xc1\x51\x5c\xde\x77\x7e\xc0\x9c\x9b\x58\x03\xb3\xd3\xe1\x33\xee\x43\x5e\x4c\xb4\x13\x7f\x59\x9d\x07\x18\x55\xdc\xfe\x94\xfe\x61\x65\xed\xb7\x88\xb3\x1d\x77\x99\x76\x62\x9d\x0d\xe7\x95\x48\xc1\xe0\x8b\xac\xde\x28\xc7\xfb\x54\x5a\x93\x37\x90\x9b\x4e\x85\x80\x6e\x4a\x17\xf0\xcf\x0b\x90\xe7\x04\x83\xa9\xbd\xbe\x06\x2e\x95\x64\x8c\x97\x77\xf0\x19\x00\x00\xff\xff\x1b\x12\xf5\x31\x78\x02\x00\x00")

func golangGetFirstTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetFirstTmpl,
		"golang.get-first.tmpl",
	)
}

func golangGetFirstTmpl() (*asset, error) {
	bytes, err := golangGetFirstTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-first.tmpl", size: 632, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetHasTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x90\x3d\x6e\xf3\x30\x0c\x86\x67\xf1\x14\xfc\x0c\x7c\x85\x0d\x38\xba\x41\x86\x0e\x05\x3a\x74\x49\x7d\x80\x40\x89\xa9\x44\xad\x2c\xa5\x94\x9c\x26\x20\x78\xf7\xc2\x29\xfa\xb3\x75\xe0\xf6\x3e\x0f\x5f\x52\x64\x85\x23\xf9\x90\x08\x9b\x12\x0e\xc9\xd5\x99\xa9\xc1\x95\x2a\x3c\xba\x22\x82\x76\x98\xbd\x0f\x17\x54\x6d\x45\x70\x5f\x2f\x27\xc7\x6e\x42\x7b\xcf\x87\x82\xaa\x1d\xb6\x60\x8e\xae\xe0\x2e\xe7\xd8\x23\x31\x2f\x93\xb9\x83\xc5\x4c\x69\xbc\xa9\xe0\xf7\x9a\x5d\x1e\xaf\x0d\xaa\x0a\x98\x7d\x4e\xa5\xe2\x76\x5b\xea\x54\xd7\x22\x78\xe2\x90\xaa\xc7\xe6\xff\x5b\x83\x76\xd8\x3c\xa1\x2a\x98\xbc\x7b\xb1\x31\x1f\x86\x3a\xd5\xf6\x33\xda\xa3\x08\xfa\x40\x71\x3c\xbb\x38\xd3\x4f\x19\x00\xb3\x34\x58\xe3\xc2\x8c\x1c\xce\xc4\x76\x33\x13\x5f\x9f\xf3\xfb\x5f\xac\x1d\xf6\x2e\xb5\x77\x47\x57\x3a\x30\xc1\xdf\x4e\xf9\xb7\xc6\x14\x22\x0a\x18\xc3\x54\x67\x4e\xe8\x5d\x2c\xd4\xdf\xfc\x93\x7b\xa5\x07\xe6\x96\x98\x3b\x30\x0a\x5f\x91\xa3\x2b\xfd\x82\x81\x82\xc8\xf7\x0b\x3e\x02\x00\x00\xff\xff\x2b\x77\x13\xfe\x69\x01\x00\x00")

func golangGetHasTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetHasTmpl,
		"golang.get-has.tmpl",
	)
}

func golangGetHasTmpl() (*asset, error) {
	bytes, err := golangGetHasTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-has.tmpl", size: 361, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetLastTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x90\xb1\x6e\xc2\x30\x10\x86\x67\xdf\x53\x5c\x23\x55\x4a\x24\xf0\x54\x75\x63\xaa\xba\xb1\x00\xdd\x91\x49\x2e\x91\x4b\x62\xa7\x97\xa3\x85\x9e\xfc\xee\x55\x12\x51\x85\xc1\xf2\xf2\xff\xf7\x7d\x77\xaa\x6b\xac\xa8\xf6\x81\x30\x1b\x7c\x13\x9c\x5c\x98\x32\x5c\xa7\x04\x0d\xc9\xd6\x0d\xa2\x8a\x76\x4f\x72\xe1\x60\x3f\x6e\x3d\x61\x4a\x79\x29\x57\x2c\x63\x10\xba\x8a\x7d\x9b\xff\x15\x98\xfe\x8c\x3e\xc8\xeb\x4b\x81\x39\x18\x55\xec\x1d\xbb\xee\xde\xc5\x94\x56\x48\xcc\xe3\x8b\x5c\xc0\xc8\xa5\x50\x4d\x20\x58\x4a\x9c\x62\x75\x9b\xf8\x0a\xa6\x8c\x61\x10\x3c\x1e\x07\xe9\x64\x33\x4e\x64\x1f\xa4\xc6\xec\xf9\x2b\x43\x7b\xd8\x6d\x31\x25\x30\xf1\xf4\x69\xdb\xd8\x1c\xa4\x93\x7c\x8e\xae\xb0\x3f\x17\x30\x39\xf8\xe0\x65\xa1\x00\x66\x54\xd8\xe0\xd8\xa9\xd8\x7f\x13\xdb\xdd\x85\xf8\xb6\x8f\x3f\xcb\xae\x3d\x94\x2e\xe4\xaa\xe8\xaa\x8a\x63\x8d\x79\xdd\x3a\x11\x0a\xf7\x49\x05\xa6\x54\x80\xf1\xf5\xb4\xd1\xd3\x06\x83\x6f\x51\xc1\x18\x9e\x41\xaa\xf8\x4b\x1c\x1f\x76\x1f\x91\x9d\x3b\xd3\x3b\x73\x4e\xcc\x05\x98\x04\x8b\xbc\xe3\xe6\x21\x1e\x7c\x0b\x09\x54\xff\x8f\xf4\x17\x00\x00\xff\xff\x91\x64\x56\x53\xa9\x01\x00\x00")

func golangGetLastTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetLastTmpl,
		"golang.get-last.tmpl",
	)
}

func golangGetLastTmpl() (*asset, error) {
	bytes, err := golangGetLastTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-last.tmpl", size: 425, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetLimitoffsetTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\x41\x8b\x14\x31\x10\x85\xcf\xc9\xaf\x28\x1b\x84\x6e\xe8\xed\x93\x78\x58\xe9\x83\x88\xb7\x45\x58\xe7\x07\x0c\xd9\x4e\x65\x88\xa6\x93\xb1\x3a\xbd\x33\x4b\x59\xff\x5d\xd2\xd9\x1e\x3c\x08\xa2\x87\x40\x12\x1e\xef\x7d\x79\x15\xe6\x3b\xb0\xe8\x7c\x44\x68\x16\x7f\x8a\x26\xaf\x84\x0d\xdc\x89\xe8\x07\x3f\xfb\x8c\x96\x19\x86\xc3\xea\x9c\xbf\x82\x48\xcb\x0c\x53\xbe\x9e\x0d\x99\x19\x86\x8f\x74\x5a\x44\x7a\xad\x42\x91\x82\x8f\xb9\x87\xe4\xdc\x82\xdb\xfe\xfd\xbb\x0e\x5a\xad\x28\x5d\x16\x60\x86\x25\xf8\x09\x93\x83\xe1\x6b\xba\x80\x48\x0f\x48\x54\x56\xa2\x4e\x17\x0a\x8c\x76\x8b\xd5\xbf\x23\x3d\x25\xfb\xd2\x80\x08\x6b\x35\xa5\xb8\x64\x38\x1e\x97\x3c\xe7\x91\x19\xce\xe4\x63\x76\xd0\xbc\xfd\xd1\xc0\x70\x78\x7c\x00\x11\xad\xd2\xd3\xb7\x21\xa4\xd3\x21\xcf\xb9\xad\xd2\xbe\x64\x3b\x8f\xc1\x3e\x9b\xb0\x62\x85\x86\x9f\x30\xa5\x79\x36\x20\xb2\xa1\xef\xd8\x9d\xd6\xea\x78\x2c\xc4\x15\xef\x7e\x84\xe2\x68\xc9\x3f\x23\x0d\x8f\x2b\xd2\xcb\xff\xd9\x2a\xef\x36\xc3\x37\x23\x44\x1f\x80\xb5\x52\x84\x79\xa5\x58\x8e\xfd\x16\x32\x9b\xef\xf8\x99\xa8\x45\xa2\x4e\x2b\xd1\xca\xa2\x43\x82\x8a\x33\x7c\x0a\x69\xc1\xb6\xf0\xb9\x74\xbb\xfc\x82\xd7\xdc\x76\x9b\x1b\x33\xf8\xe8\x73\xc4\xcb\x5e\xb0\x56\xaa\x24\x8e\xbb\xf8\x30\x99\x58\xc6\x67\xac\xa5\xe4\xa0\x75\xc1\xe4\x8c\x71\x93\x77\x20\xd2\x69\xf5\x07\xca\xbf\x60\x16\xce\x3a\xe1\x11\xcc\xf9\x8c\xd1\xb6\xb5\xbd\x12\x44\xa7\x9d\xa5\x3e\xe8\xd5\xfd\xfe\x86\x54\x7c\xba\x0f\xff\x5c\xcc\xab\xa0\x06\x45\x1f\xb4\x68\xe6\xdb\xff\xf9\x15\x00\x00\xff\xff\x6a\x85\xec\x85\xd2\x02\x00\x00")

func golangGetLimitoffsetTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetLimitoffsetTmpl,
		"golang.get-limitoffset.tmpl",
	)
}

func golangGetLimitoffsetTmpl() (*asset, error) {
	bytes, err := golangGetLimitoffsetTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-limitoffset.tmpl", size: 722, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetOneAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\xdf\x8a\xdc\x20\x14\x87\xaf\xf5\x29\xce\x06\x0a\x06\x66\xf3\x00\x5b\x72\x51\x4a\xe9\x4d\xbb\xb0\x9b\x07\x08\xee\x78\x0c\xb6\x46\xbb\x47\xb3\x33\x83\xf8\xee\x45\x27\xf3\xa7\x2d\x74\x4a\x2f\x72\x11\x3d\xbf\xef\x3b\x7a\x4c\xe9\x1e\x14\x6a\xe3\x10\x9a\x60\x26\x27\xe3\x42\xd8\xc0\x7d\xce\xfc\x33\xc6\x94\xa0\x1b\x16\xad\xcd\x1e\x72\x16\x29\xc1\x36\xee\x7f\x48\x92\x33\x74\x1f\x68\x0a\x90\x73\x0b\x82\xb3\x94\x60\x5d\x7d\xf6\x3b\xc8\x79\x03\x48\x54\x3e\x4f\x2d\x2f\x06\x74\xaa\x22\xf9\xb5\xee\xc5\xab\x43\x03\x39\x27\xce\xb6\xde\x85\x08\xe3\x18\xe2\x1c\xfb\x42\x23\xe3\xa2\x86\xe6\xdd\x6b\x03\xdd\xf0\xf4\x05\x72\xe6\xcc\xbf\x7c\xeb\xac\x9f\x86\x38\x47\x71\x2c\xdd\x40\x4a\xa0\x0d\x5a\xf5\x26\xed\x82\x97\xa6\x38\x67\xe3\x48\x7e\x17\x8e\x9d\x3c\xf4\x50\xc2\x8a\xcc\x1b\x52\xf7\xb4\x20\x1d\xfe\x46\x28\x00\x66\x74\x8d\xde\xf5\xe0\x8c\x85\xc4\x19\x23\x8c\x0b\xb9\xf2\xbb\xa9\xb8\x59\x7e\xc7\x4f\x44\x02\x89\x5a\xce\x32\x67\x0a\x35\x12\x1c\xc5\xdd\x47\xeb\x03\x8a\xd2\x89\xd1\x70\xb7\x2e\x3e\xe2\x3e\x8a\xb6\xd2\x56\xfe\x43\x7f\x0a\x14\x54\xfb\xfe\x77\xe9\x0d\x6b\xd1\xfe\x52\x72\xda\x0e\xaf\xb6\x10\x1f\xfd\xb3\xdf\x85\xda\x5e\x1d\x93\x71\x26\x9e\xa6\xc4\x59\x71\x9d\xfd\xc3\x56\xba\x32\x62\xa9\x14\x79\x0d\x42\x5b\x19\x23\xba\x5a\xdd\xc2\x7f\xde\x49\xcd\xfc\x79\xf8\xeb\x58\xf4\xfe\xab\x74\x87\xd2\xa7\xb8\x64\xfe\xe5\x6e\x6e\xcb\xd7\x8a\x72\x2a\x9a\x2e\xaf\xd3\x19\xcb\x33\x4f\xe9\xfc\x2e\x7f\x06\x00\x00\xff\xff\x3b\x20\x97\xf2\x06\x03\x00\x00")

func golangGetOneAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetOneAllTmpl,
		"golang.get-one-all.tmpl",
	)
}

func golangGetOneAllTmpl() (*asset, error) {
	bytes, err := golangGetOneAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-one-all.tmpl", size: 774, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetOneTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x90\x3b\x6e\xeb\x30\x10\x45\x6b\x72\x15\xf3\x04\x3c\x40\x02\x6c\xed\xc0\x45\x8a\x20\x4d\x1a\x5b\x0b\x30\x68\x73\x28\x30\x91\xc8\x64\x34\xf2\x27\x83\xd9\x7b\x40\xe5\x63\x77\x29\xd8\x10\x17\xe7\x9e\xb9\x22\x6b\xf0\x18\x62\x42\xa8\xa6\xd8\x27\xc7\x33\x61\x05\x6b\x55\xfb\x84\x2c\x02\x6d\x37\x87\x10\x2f\xa0\x5a\x8b\xc0\x91\x2f\x6f\x8e\xdc\x08\xed\x03\xf5\x13\xa8\x36\x50\x5b\x23\x02\xdf\xbf\xbb\x7c\x06\xd5\x15\x20\x51\x79\x99\x1a\x5b\x1a\x30\xf9\x05\x69\xef\xeb\x0e\xd9\x5f\x2b\x50\x15\x6b\x8e\x39\x4d\x0c\xfb\xfd\xc4\x23\x6f\x0a\x8d\x62\xe2\x00\xd5\xff\xf7\x0a\xda\x6e\xfb\x0c\xaa\xd6\xe4\xc3\x4b\x3b\xe4\xbe\xe3\x91\xeb\xaf\xe8\x0a\x44\x20\x44\x1c\xfc\xc9\x0d\x33\xde\xa4\xec\xe2\x14\x53\xe4\x1f\x25\x6b\x8a\xd2\x06\x0a\xc4\x53\x3c\x21\xb5\xdb\x19\xe9\xba\xcb\xe7\xbf\x60\x6d\x77\x74\xa9\x1c\xef\xbc\xa7\x1c\xa0\x0e\x83\x63\xc6\xb4\xa0\x9b\xa5\xce\xc4\xb0\x9c\xfc\x6f\x03\x29\x0e\x20\xd6\x18\x42\x9e\x29\x15\xe6\x07\x52\xbe\x2d\x53\x04\x46\xf7\x8a\x8f\x44\x35\x12\x35\xd6\xa8\xbd\x0b\x3b\xea\x6f\xd9\x14\x07\xab\x56\xe4\x77\xbf\xcf\x00\x00\x00\xff\xff\x1e\x44\xa6\x45\xae\x01\x00\x00")

func golangGetOneTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetOneTmpl,
		"golang.get-one.tmpl",
	)
}

func golangGetOneTmpl() (*asset, error) {
	bytes, err := golangGetOneTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-one.tmpl", size: 430, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetPagedTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x93\xdf\x8a\xdb\x3c\x10\xc5\xaf\xa5\xa7\x98\x4f\xf0\x81\x0d\x5e\xb3\xd7\x5b\x5c\x28\xa5\x77\x4b\xd9\x6d\x1e\x20\x68\xed\x91\x51\x63\x4b\xe9\x78\xbc\xc9\xa2\xea\xdd\x8b\xa4\xfc\x2b\xed\xc5\xd2\x8b\x40\xa2\x1c\xcd\x39\xbf\xf1\x71\x08\x77\x30\xa0\xb1\x0e\x41\x2d\x76\x74\x9a\x57\x42\x05\x77\x31\xca\x27\x3d\xe2\x10\x02\xb4\x9b\xd5\x18\x7b\x84\x18\xab\x10\xa0\xe7\xe3\x5e\x93\x9e\xa1\xfd\x44\xe3\x02\x31\x36\x52\x4c\x76\xb6\x0c\xd6\x71\x03\x3d\xfb\x1d\x3a\x58\x98\xac\x1b\x6b\xa8\xa4\x20\x7f\x58\x20\x04\x58\x26\xdb\xa3\x37\xd0\x7e\xf3\x87\x74\xed\x24\xf5\x2b\x9f\xd4\x0d\x20\x51\xfa\x78\xaa\x65\xca\x85\x6e\xc8\x41\xe4\x6d\xc8\x17\x3f\xbc\x29\x88\x31\x48\x61\xcd\xd9\xae\xeb\x40\x29\x08\x52\x88\xf3\x01\xa8\x7b\x25\x45\x94\x52\xf4\xde\x2d\x0c\xdb\xed\xc2\x33\x77\x21\xc0\x9e\xac\x63\x03\xea\xff\x1f\x0a\xda\xcd\xf3\x23\xc4\x28\x85\x7f\xf9\xde\x4e\x7e\xdc\xf0\xcc\x55\x91\x36\x29\xb3\xb1\x38\x0d\xaf\x7a\x5a\xf1\x84\xfb\x13\x7a\x3f\xcf\x1a\x62\x2c\x46\x0d\x64\xf6\x5a\x4a\xb1\xdd\x26\xd2\x02\xf1\xd0\x41\x9a\x38\x90\x7d\x45\x6a\x9f\x57\xa4\xb7\xf7\x8c\xfd\x63\x6a\x42\x4c\xf3\xfe\xeb\xc0\xd9\x29\x03\x12\xf2\x4a\x2e\xfd\x6c\x40\xa9\x26\xfb\xcc\x7a\x87\x5f\x88\x2a\x24\xaa\x13\xb4\x18\xd0\x20\x41\x49\xd4\x7e\x9e\xfc\x82\x55\x8a\x18\x02\x58\x67\xd9\xe1\x01\xda\x47\xbd\xf0\xd3\x2e\xc3\x1b\x7f\xd1\x7e\xc5\x23\x57\x75\x36\xba\x15\x97\x47\x26\x85\x48\x61\xba\xb3\x78\xd3\x6b\x97\x2a\xa1\x87\x81\xbc\x81\xca\x4c\x9a\x19\x5d\x96\xd7\x37\xab\xba\x4a\xae\xae\xb5\x14\x7f\x81\x7b\x07\x5d\xc2\x2b\x9d\xea\x40\xef\xf7\xe8\x86\xaa\xec\x3d\xb9\xd0\x78\xce\x5a\xf6\x70\x72\x78\xb8\x44\x4e\x73\xea\x0f\xff\xb2\xd3\x3c\xac\x14\xfd\x23\xdc\xe7\x6b\xe9\x00\x5d\xb6\xaf\x53\x05\xcb\xbf\x99\xe3\xda\xed\x0e\xcc\xcc\xed\x26\xb7\xae\x3a\x67\xfc\x6d\x0d\x51\x8a\x08\x38\x2d\x78\x53\xe0\x72\xb3\x7c\x2f\xee\xa7\x8c\x85\xf5\x22\x6a\x52\x68\x19\x65\x08\x97\xb7\xe5\x57\x00\x00\x00\xff\xff\x7d\x49\xc8\xbb\xd2\x03\x00\x00")

func golangGetPagedTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetPagedTmpl,
		"golang.get-paged.tmpl",
	)
}

func golangGetPagedTmpl() (*asset, error) {
	bytes, err := golangGetPagedTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-paged.tmpl", size: 978, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetScalarAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\xcd\x6a\xe3\x30\x10\xc7\xcf\xd2\x53\x4c\x0c\x0b\x32\x24\x7e\x80\x2c\x3e\x2c\xcb\xee\x69\xb7\x90\xf8\x01\x8c\x12\x8d\x8c\x5a\x5b\x6a\xc7\x72\x3e\x10\x7a\xf7\x22\xc7\xf9\x68\x0b\x4d\xe9\xc1\x07\x8b\xf9\xff\x7e\xa3\x19\x85\xb0\x00\x85\xda\x58\x84\xac\x37\x8d\x95\x7e\x20\xcc\x60\x11\x23\xff\x6b\xac\x0a\x01\x8a\x6a\xd0\xda\x1c\x20\x46\x11\x02\x6c\xfd\xe1\x59\x92\xec\xa0\xf8\x45\x4d\x0f\x31\xe6\x20\x38\x0b\x01\xa6\xd3\xb5\xdb\x43\x8c\x73\x40\xa2\xf4\x39\xca\x79\x52\xa0\x55\x23\x93\xdf\xfa\x36\x4e\x1d\x33\x88\x31\x70\xb6\x75\xb6\xf7\x50\xd7\xbd\xef\x7c\x99\x68\x64\xac\xd7\x90\xfd\x78\xc9\xa0\xa8\x56\xff\x20\x46\xce\xdc\xe6\xb1\x68\x5d\x53\xf9\xce\x8b\x53\xe9\x1c\x42\x00\x6d\xb0\x55\x3b\xd9\x0e\x78\x6d\x8a\x73\x56\xd7\xe4\xf6\xfd\xa9\x93\x65\x09\x29\xac\xc8\xec\x90\x8a\xd5\x80\x74\xfc\x8c\x90\x00\xcc\xe8\x31\x3a\x2b\xc1\x9a\x16\x02\x67\x8c\xd0\x0f\x64\xd3\xef\x7c\xc4\x75\xf2\x09\xff\x10\x09\x24\xca\x39\x8b\x9c\x29\xd4\x48\x70\x12\x17\xbf\x5b\xd7\xa3\x48\x9d\x18\x0d\xb3\xe9\xf0\x01\x0f\x5e\xe4\x23\x6d\xe2\x2f\xcb\x73\x20\xa1\xf2\x9f\xef\xa5\x77\xac\x49\xfb\xa6\xc4\x9a\x36\xf5\x32\xee\xc4\x58\xe3\xcf\x2b\xe1\x2c\x81\x2f\xb2\x6a\x2b\x6d\xda\xa7\x54\x8a\x9c\x06\xa1\x5b\xe9\x3d\xda\xb1\x3a\x87\x6f\x0e\x60\xcc\x7c\xbc\xe9\x6d\xcc\x3b\xf7\x5f\xda\xe3\xda\xed\x7b\x71\xcd\x7c\x65\x10\xf7\xe5\x53\x45\xba\x15\x35\xd7\xa7\x98\x26\x12\x79\x08\x97\x47\xf8\x1a\x00\x00\xff\xff\x50\xb0\x91\xb1\xf4\x02\x00\x00")

func golangGetScalarAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetScalarAllTmpl,
		"golang.get-scalar-all.tmpl",
	)
}

func golangGetScalarAllTmpl() (*asset, error) {
	bytes, err := golangGetScalarAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-scalar-all.tmpl", size: 756, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetScalarTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x90\x4d\x4e\xc3\x30\x10\x85\xd7\xf6\x29\x86\x48\x48\x89\xd4\xe6\x06\x59\xb0\x28\x2b\x84\xd4\xe6\x00\x95\x5b\x8f\x23\x43\x62\xd3\x89\xd3\x1f\x46\x73\x77\xe4\x00\x2d\x6c\x60\xe1\x8d\x35\xef\x7b\xdf\x0c\xf3\x12\x2c\x3a\x1f\x10\x8a\xd1\x77\xc1\xa4\x89\xb0\x80\xa5\x88\x7e\xf4\xc1\x32\x43\xdd\x4e\xce\xf9\x33\x88\x94\xcc\xb0\x4f\xe7\x37\x43\x66\x80\xfa\x81\xba\x11\x44\x2a\x28\xb5\x62\x86\xaf\xdf\x4d\x3c\x81\xc8\x02\x90\x28\xbf\x48\x95\xce\x15\x18\xec\xcc\xd4\x3f\xfb\x76\xd1\x5e\x0a\x10\x61\xad\xf6\x31\x8c\x09\xb6\xdb\x31\x0d\xa9\xc9\x34\xf2\x21\x39\x28\xee\x0f\x05\xd4\xed\xfa\x09\x44\xb4\x8a\xbb\x97\xba\x8f\x5d\x9b\x86\x54\x7e\x8e\x2e\x80\x19\x9c\xc7\xde\x1e\x4d\x3f\xe1\x4d\x4a\xcf\x4e\x3e\xf8\xf4\xad\xa4\x55\x56\x6a\x20\x43\x2c\xf9\x23\x52\xbd\x9e\x90\x2e\x9b\x78\xfa\x0f\x56\xb7\x7b\x13\xf2\xf2\xc6\x5a\x8a\x0e\x4a\xd7\x9b\x94\x30\xcc\xe8\x6a\xae\x53\xde\xcd\x2b\x37\x0d\x8c\x87\xbe\x5e\x11\x3d\xc7\x4d\x3c\x8d\xc0\x5a\x29\xc2\x34\x51\xc8\xf4\x77\xa4\x78\xbb\x51\xf0\xbd\x56\x72\xcd\xde\x35\xf9\xe7\xcf\x44\x96\x1f\xcc\x2b\xae\x88\x4a\x24\xaa\xe6\xf8\x6d\xd8\x50\xf7\x9b\x2e\x9a\xf9\x7a\xfb\x8f\x00\x00\x00\xff\xff\x77\xe2\x35\x5f\xeb\x01\x00\x00")

func golangGetScalarTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetScalarTmpl,
		"golang.get-scalar.tmpl",
	)
}

func golangGetScalarTmpl() (*asset, error) {
	bytes, err := golangGetScalarTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-scalar.tmpl", size: 491, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x58\x5b\x6f\xe3\x36\x16\x7e\x16\x7f\xc5\xa9\x31\x53\x48\x03\x8f\xb2\x0b\x2c\xf6\x41\x85\x1f\x12\xdb\x5d\x04\x98\x49\xa6\x89\xd3\x62\x81\x02\x2e\x2d\xd1\x1e\x35\x12\xe9\x50\xb4\xad\x40\xab\xff\xbe\x38\x24\x45\x51\xbe\xa4\x33\xbb\x4f\x96\xc9\x73\xfb\xce\xe5\x23\xa5\xab\x2b\xb8\x7e\x5a\xdc\xff\x6b\x7e\x37\x7f\xb8\x5e\xcc\x67\x70\xf3\x6f\xd8\x88\xed\xf3\x26\xce\xf9\x55\xb5\xa5\x29\x2b\x05\x7f\x66\xaf\x1b\x71\x95\xad\xea\x78\xff\x77\x72\x75\x05\xb3\x7b\xb8\xbb\x5f\xc0\x7c\x76\xbb\x88\x09\xd9\xd2\xf4\x99\x6e\x18\x34\x0d\xc4\x5f\xec\x73\xdb\x12\x92\x97\x5b\x21\x15\x84\x24\x18\xa5\x82\x2b\x56\xab\x11\x09\x46\x19\x55\x74\x45\x2b\x76\x55\xbd\x14\xf8\x9f\x49\x29\x64\x85\x4f\xeb\x52\x0b\xa8\xbc\x64\xf8\x5b\x29\x99\x0a\xbe\xb7\x8f\x39\xdf\x54\x23\x42\x9a\xe6\x23\x48\xca\x37\x0c\xe2\x79\xad\x24\xbd\xd5\x3e\x2a\xf4\x17\xa0\x7f\x7c\x40\x19\xc6\x33\x7c\x8c\x08\x86\xfb\x45\xb2\x3d\xe3\x0a\x52\xc1\xb3\x5c\xe5\x82\xd3\x02\x72\xab\xb8\x96\xa2\x84\x94\xee\xaa\x9c\x6f\x60\xb5\xcb\x8b\x0c\xd6\x34\x2f\x76\x92\x55\x64\x4f\x25\x2c\x61\x02\x36\x92\xf8\x56\x09\xea\x2f\x62\x4c\xf1\x27\x5a\xa9\x5b\x9e\xb1\xda\xed\xac\x4b\x15\x3f\x6e\x65\xce\x15\xd1\x6b\x21\x09\x7e\x93\x74\x3b\x97\x12\x37\x77\x3c\x0d\x99\x94\xf0\x61\x8e\xc0\x23\xd0\xf8\xa1\x91\x4c\xed\x24\xc7\x7f\x2d\x09\xee\xc4\x21\x08\x26\x80\x99\x88\xef\xc4\x81\x04\x9f\xc4\x66\xc3\xa4\x51\x5e\x0b\x59\x52\x65\xfd\x8f\x81\xca\x4d\x05\x71\x1c\xe7\x5c\x31\xb9\xa6\x29\x6b\xda\x88\x90\x80\x49\xb9\x10\xe2\x33\xe5\xaf\x0f\xe2\x50\xc1\xc4\xf8\xa9\xe2\x3b\x76\x08\x47\x4a\x08\x28\x29\x7f\x05\x29\x0e\xd5\x28\xd2\xd2\x4f\xbc\xda\x6d\x31\x27\x2c\x9b\xc9\x7c\xcf\xe4\x91\xce\xae\xdf\x87\x4c\x0b\x58\xc5\x79\xb9\x55\xaf\x4f\xdb\x8c\x2a\x76\xa4\xc2\x70\x07\x76\x7a\x6b\x14\x61\x31\xd4\xeb\x96\x81\x06\x3e\x15\x19\x03\x9d\xa2\x54\xf0\x4a\x77\x89\x5b\x5f\x3e\xf1\x67\x2e\x0e\xdc\x93\x9c\x40\x2e\x14\x1d\xca\x1c\xc5\xeb\x6f\xde\x09\x44\xed\xaf\x2c\xea\x99\xe0\x6c\xb0\xd2\xa7\xc7\x5f\x9e\x62\x38\x92\xe6\x5c\xfd\x9a\x8b\x82\x62\xbb\xf8\xdb\x1e\xda\x21\x20\x2c\xc8\x2e\x55\xd0\x68\x69\x93\x07\x12\xe8\xe0\x9d\x36\x09\x6c\x6a\x4d\xf1\x70\xbb\x73\xd6\x2d\xb5\x84\x60\x95\x21\x64\xae\x43\xf4\x4f\x18\x59\x09\x74\xd0\x35\x4b\x3c\x97\x32\xb6\xdb\x4e\xf3\x60\x7a\xcd\x33\x60\x5b\x8c\x04\xf9\x1a\x5c\x27\x4e\x80\xe7\x05\x2e\x3a\x6b\x24\x68\x9d\xe9\xdf\x3a\x23\xbd\xdd\x92\x3e\x33\xbd\xd4\xa1\x1b\x1a\x66\x67\x8d\xf2\xbc\xd0\x66\x19\x24\x13\xf8\x51\xc7\xd3\xcc\xa5\x4c\x6c\xa3\x57\x87\x5c\xa5\x5f\xb5\x6e\x43\x82\x94\x56\x0c\xaa\x97\x02\x21\x99\x0a\x26\x24\x08\x58\x6c\x3b\xe0\xb4\xbc\xbe\x82\x29\xf0\x05\x85\xae\xfa\x3d\xc0\xc3\x29\xc0\xdd\x71\x47\x85\x99\x5f\x2d\x0f\xee\x91\x0d\x8b\x8b\x04\x41\x07\xed\xa4\x39\xc7\x24\xd0\xbd\x90\xc0\x1b\x1d\x8c\x42\xe6\x29\xb1\x23\x36\x26\x41\xdb\x07\xc8\xfa\xde\x0b\xbf\x27\x1a\xaf\x67\xcf\xc5\x31\xdc\xf6\xfc\xa9\x7e\x42\xbe\xcb\x9f\x37\x59\xe7\xfc\x0d\xb7\x3d\x7f\xe9\xe9\xe8\xf5\xdd\x36\xf6\xb6\xff\x87\x8a\x9c\x0b\xe4\xcc\xa8\x1b\xb1\x6e\x39\xf1\x7c\xba\x50\xf5\xc8\xdb\xce\x70\xa4\xab\xc7\xbe\x66\x69\xf8\xb2\x63\xf2\xf5\x4d\x72\x86\x10\x3b\xf6\x81\x55\xbb\x42\x8d\xed\x24\x91\xe0\x17\xd4\xfb\x26\xed\x0f\x5a\x1d\x93\x37\x54\x7e\x10\x87\x6f\xd1\xef\xd4\x11\x8a\x3d\x9d\xb8\x50\xd7\x5f\x84\x96\x3a\x62\xf0\x8c\x55\x2a\xe7\x3a\x33\xc0\x85\x02\x0a\x5b\x23\x87\xdc\x5f\x88\xaa\x7a\x9d\x0a\xbe\x67\xb2\x42\x81\xa1\xaa\xde\xc5\xfc\xd9\x6d\xef\x00\x98\xdd\x78\x64\xa9\xe3\x99\xdd\x90\x20\x5b\x7d\x66\xea\xab\xc8\x2a\xd7\x0f\xf7\x5b\xc6\xed\x0c\x8e\xa1\x12\x3b\x99\x32\x57\xf9\x30\x5b\xc1\x87\xd9\x8d\xce\x41\x47\x47\x0d\x09\xaa\x97\x62\x99\xad\xcc\x6a\x32\xd1\xdc\x70\xc6\x4a\xe4\x18\xeb\x87\x73\x8c\x35\xf6\xb9\x2e\xd2\xac\x91\xb1\x75\x77\xfe\x1a\x17\x60\xe3\xd6\x5e\xcf\x58\xb3\x91\xc4\xd3\x42\x54\x2c\x8c\x48\x80\x56\x5a\xab\x8c\x07\xb4\x55\x31\x41\xa2\xe4\x97\x9c\x6f\xc2\xe8\xa7\xef\x09\x8b\x04\x58\xc1\xbc\xdc\x16\xd0\x67\xaf\x23\x55\xdb\xa2\x8d\x7f\x67\x9a\xe5\xb4\x60\xa9\xbd\x2f\x69\xf6\xc4\x4b\xd3\x1d\x2d\x19\xfc\x07\xf4\x95\x65\x0d\xa3\xf7\x2f\x23\x68\x5b\x64\x52\x6d\x79\x02\x9c\x1d\x9c\x58\xdb\x63\x18\xdc\xc5\x58\x7a\xcf\x31\xd3\xda\x32\x82\x5b\x8e\xe1\x08\xa0\x9e\x8f\xa6\x19\xf8\xc1\x0b\xdb\x29\xe6\x01\x68\x0c\x22\x1e\x22\x0f\x06\x97\x3c\xef\x11\xeb\x44\x77\x85\x4a\x8e\x12\x77\x89\xda\x6d\x16\xad\xe8\x8f\xb3\x1b\xf4\x3e\xbb\x49\x6c\xc8\xc8\x06\x2e\xb1\x89\x8e\x04\x69\x60\xac\x8f\x35\x77\x52\x8b\xd5\x9f\xd8\x8a\x11\xd8\x5a\x43\x38\xec\x49\x6b\x5d\xac\xfe\x74\x30\xf0\x79\x76\xd3\x35\x47\x74\xc6\x96\xee\xda\x54\xd5\x60\xaf\xce\xf1\xd4\xfc\x22\x01\x2c\xea\xb1\x67\x5e\xd5\xae\xdd\xad\xd9\x1b\xb6\xc9\x79\xf8\x97\x4d\xee\x07\xd4\x77\x54\x97\x8b\x45\x8d\xf2\xaa\x4e\x40\xd5\x63\xfd\xe4\xf2\x80\x8a\xc8\xb4\x8b\x3a\x54\x75\x74\x9a\x91\x19\x2b\x98\x62\xd7\x45\x71\x0e\xc0\x18\xcc\xe4\x46\x10\xe6\x5c\xfd\xf3\x1f\x17\xa0\x64\xab\xb8\x4b\xc1\x5b\x40\xfe\xa6\x15\x8e\x47\x74\x30\x94\xde\xa5\x24\xd0\xff\xd1\x76\x87\x5b\xd5\xf1\x54\x94\x65\xae\xb0\x0a\xae\xf1\x74\x87\x39\x0b\x4b\x29\x8a\x62\x45\xd3\x67\x8c\x4b\xd5\xf1\x83\xfd\x6b\x87\xb5\xdf\xf6\x3b\x38\x5f\x83\xbd\xb4\xfb\xab\xf6\x22\x8f\xc4\x8a\x29\xfa\x48\x8b\x22\x01\xa7\x8f\x2f\x1e\x2c\x4b\xe0\xfd\x7e\x34\xf6\x83\xf4\x9d\x98\x30\xdb\x8e\x4f\x22\x57\x30\x55\xc7\x99\x9f\xf7\xfe\xac\x5a\xd4\x1e\xdd\xaa\xda\x30\xd7\xa2\x26\x7d\x49\xfb\x63\xcd\xf0\xc3\x25\x0d\xd7\xa6\xb8\xe6\x64\x23\xe8\x52\x78\xa1\xf3\xbd\x64\x0f\xf2\x7d\xc9\x5c\x9f\xe0\x6f\x32\xd8\x8b\x6b\x93\x17\xe8\x4e\xaf\xbf\xcb\x56\x1a\x67\x32\x39\x65\xbd\x6a\x76\x33\x82\x8f\x96\x4f\xde\xa9\xfa\xb2\xe0\xa2\xf6\x04\x91\x14\x2e\x8b\xde\x96\xdb\x62\xa4\xdd\x6b\x99\xa6\xf1\x14\xda\xd6\xcb\xb2\x65\x6b\xf3\x73\xc4\x07\x47\x5a\x11\x14\x62\xf3\xa8\x4a\x15\x56\xaa\x1c\xbe\x08\xc6\x71\x0c\x83\xd3\xbe\x31\xaf\xc5\x96\xba\x3f\x79\x7a\x4e\xe1\x98\x7d\x4e\xbc\xbd\x75\xf1\xf7\x2f\x48\x20\x9e\x3b\x12\xca\xab\xfe\x12\x65\xde\x4f\x0c\xc1\x40\xbe\x46\x29\x9c\x05\xb0\xb5\xbc\x70\xe9\xf3\xaf\x7b\xa8\xd8\x12\xa7\x31\xe0\x2c\x3f\xb3\xb6\xb8\xc3\xbc\xba\x93\x9a\x04\xc7\xd0\x1c\xf0\xa3\x03\xce\x3f\xdd\x3f\x0c\x0d\xf7\x3d\xf8\xe3\x60\xa3\xd1\x27\x45\x02\xe6\xcc\x38\xf2\x93\x18\x61\x6f\x45\x93\x41\xd6\x5d\xf5\xb5\x4e\x8b\x3c\x7a\xa6\x14\xce\x45\x04\x8f\xe9\x57\x56\xd2\x73\x6f\x82\x7f\x60\xf8\x66\xfb\xf1\x97\x4f\xd0\xb6\x7f\xbc\x6d\xc9\xb1\x77\x37\xda\x11\x38\x32\x38\xc6\x68\x27\xc1\x62\xec\xa6\x34\xe9\xb9\xa2\x31\x87\x44\xfb\xfd\xc8\xcd\xc9\xe2\x90\xbb\x42\x3a\x97\x7e\x21\x3b\x77\x6f\xd4\xf1\x42\xab\xbf\x7d\x21\x6e\x48\x70\x75\x05\x8b\xfb\xd9\x7d\x02\x92\xf1\x8c\x49\xd8\x16\x34\x65\x5f\x45\x91\x31\x59\x91\xf3\x54\xde\x11\x79\xf5\x52\x24\xbf\xf3\xf7\xd5\xef\x1c\x8d\xe3\xe3\xcb\x68\x0c\xfd\x80\x45\x16\x9b\x77\x49\x21\x4d\xd3\x11\xd4\xa3\x86\x57\x75\xb7\x98\x77\x16\xae\xa3\x12\xc7\x32\xa9\x64\x54\x31\x6f\x7b\xaa\x17\x8c\xfe\x50\xd4\x7c\x6f\xf1\x44\xcd\xab\x9d\x27\x3a\xa0\x23\x2b\xe8\xe7\xda\x63\xd0\x9f\x73\x56\x64\xfd\xe7\x35\xab\xae\x13\xbd\xb0\xc9\xf7\x90\xb9\x9e\x1b\x18\x8e\x60\xb9\xa0\xab\x82\x79\x8d\xdb\x8d\xf2\x48\x1b\xc2\x4d\x68\xdb\x11\xd8\x3c\xe5\x6b\x88\xef\xb7\xe6\x43\xdd\x2d\xaf\x98\x54\x7d\x18\x7d\xe0\x83\x94\x5c\x08\xff\x92\x95\x13\x30\xc3\xec\x0c\x21\xf9\xa5\x73\xde\x07\x59\xbe\xe0\x5d\x27\x1e\xc1\xfd\x1f\x8e\x4f\xea\xa0\x6b\xbc\xf6\xca\x7b\x6a\xe1\x5d\xaa\x84\xbe\x44\xf5\xe7\xd0\xf2\x7d\x35\x82\xf8\xb3\xc8\x58\xa1\x25\xe3\xd3\x46\x58\x9f\x01\x13\x2c\x2b\xa6\x60\x25\x44\x41\x82\xe5\x9e\x16\x3b\x36\x28\xbd\x37\x77\xc6\x67\xdb\x86\x7b\x2d\x31\x55\x42\xfe\xaa\xe5\xb1\xfe\x47\xe6\x1b\x57\xe5\xcf\x3b\x45\x15\xfb\xd9\xbc\x35\xec\x61\xa2\x75\xbd\xc5\x70\x1f\x0d\xae\xf7\xb6\x6d\x86\xf6\x1a\xc0\x28\x13\x50\x72\xc7\xc6\x60\xc2\x4c\x50\x06\x3d\x2c\xe8\x33\xbb\xce\x32\x0c\x0d\xa9\xc8\x18\xda\x03\xc6\x6e\x25\xee\x76\x45\x61\x3b\xf0\x04\xcd\xf2\x81\x1e\x2c\xa2\x45\xc7\x9d\x27\x60\x90\x20\xf6\x67\xbe\x7d\xf9\x76\xd0\x49\x18\xf9\x1f\xa0\xfc\x9c\x9d\xc6\xfa\xa1\x8f\x35\x3a\x97\x66\x6b\xf0\x4c\x30\x7f\x99\xa2\x0e\x7b\xd7\xd2\x66\x62\xd7\x47\x1a\x11\xe8\x3c\x86\x91\x7f\x9f\x00\x1d\xe7\x0f\xeb\x58\xb7\x85\x9b\x62\xc4\xdd\xfe\xd4\xfd\x5b\xc7\xb6\x53\x06\x6c\xe0\x5b\x5e\x4e\x45\xb1\x2b\xf9\x25\x3e\x30\xbb\x3e\x21\x60\xa8\x1f\x87\xe3\xd1\x7d\xa1\x7a\x5a\x4c\x43\x65\xbe\x94\x2f\xf2\x92\x45\xfd\xa3\x97\x0c\x15\xa3\x18\x26\xf2\xbf\x01\x00\x00\xff\xff\xc4\x2b\x9d\x77\xef\x18\x00\x00")

func golangHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangHeaderTmpl,
		"golang.header.tmpl",
	)
}

func golangHeaderTmpl() (*asset, error) {
	bytes, err := golangHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.header.tmpl", size: 6383, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangMiscTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\x41\x4b\xc3\x40\x10\x85\xcf\xcd\xaf\x78\x84\x08\x2a\xa6\x3f\xa0\xe0\xa5\x07\x41\x04\x0f\x5a\x3c\x77\xcd\x4e\xc2\x48\xba\x8d\x9b\x8d\x50\xc6\xfd\xef\x32\xbb\xb2\x56\x7a\x5b\xde\x7c\xef\xbd\x99\x15\x69\x61\xa9\x67\x47\xa8\x2d\x75\x63\x8d\x18\xab\x7e\x71\x1d\xae\x8f\xef\x1f\xb8\x15\xc1\xfa\x85\x3a\xe2\x2f\xf2\x5b\x33\x13\x62\x7c\x3c\x4c\xe3\x0d\x74\xf0\xca\x83\x33\x61\xf1\xaa\x26\x61\x7b\xb4\x27\x0d\x10\x01\x39\x8b\x36\xc6\xaa\x3a\x6f\x98\x83\x5f\xba\x90\x3a\xc2\x69\xa2\xe4\x79\x36\x87\xe4\xcf\x33\x88\x9a\xbd\x71\x03\x61\xfd\xc0\x34\xda\x59\xe9\x95\x08\xb8\x2f\xf0\xb9\xef\xb7\x2b\x8b\x3b\x4d\x4d\x4f\xa5\x77\x66\x98\xd3\x12\xab\x7d\x09\x6d\xf8\x0e\x4d\xc0\xe6\xfe\x6f\x9c\xe9\x86\x2f\xd2\x9e\x48\xaf\xd9\xe8\xf3\xcd\x8c\x0b\xe1\x1b\x93\x67\x17\x7a\xd4\x57\x9f\x75\x86\x32\xbd\xd7\x0d\xdb\x72\x74\xd1\xab\x7f\x7f\xf1\x13\x00\x00\xff\xff\x1b\x36\x80\x57\x6d\x01\x00\x00")

func golangMiscTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangMiscTmpl,
		"golang.misc.tmpl",
	)
}

func golangMiscTmpl() (*asset, error) {
	bytes, err := golangMiscTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.misc.tmpl", size: 365, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangUpdateTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x55\xc1\x6e\xe3\x36\x10\x3d\x4b\x5f\x31\x15\x50\x80\x42\x1c\xa2\xe8\x71\x01\x1d\x82\x6d\x5a\x04\x48\x8d\x24\xee\xf6\xb2\x58\x08\x8c\x34\x12\x98\x4a\xa4\x4c\x52\x71\x0c\x41\xff\x5e\x0c\x29\x3b\x52\xec\xa4\x45\x7b\xd9\x83\x0f\x34\x67\xde\xbc\x99\x79\x7c\x1a\x86\x4b\x28\xb1\x92\x0a\x21\xb1\xb2\x56\xc2\xf5\x06\x13\xb8\x1c\xc7\xf8\x4b\x57\x0a\x87\xc3\x00\x7c\xd3\x57\x95\x7c\x81\x71\x64\xc3\x00\x85\x7b\xe9\x84\x11\x2d\xf0\x2b\x53\x5b\x18\xc7\x55\x1c\xf5\x3e\x14\x7c\xac\x33\x7d\xe1\x78\x48\x0e\x87\xb5\x68\x11\xc6\x31\x05\x16\x47\xc3\x00\x53\xf6\x03\xba\xde\x28\xca\x07\x34\x86\x7e\xda\xa4\x31\xf1\x41\x55\x7a\x02\xf1\x9c\xdc\xa3\x2e\xf7\x9e\xd7\x10\x47\x85\x56\xd6\x41\x9e\x5b\xd7\xba\xbc\x33\x58\xc9\x97\x8c\x80\x8d\x54\xae\x82\xe4\xc7\x6d\x02\x7c\x73\x7f\x7b\xe7\x6f\x60\x1c\xdf\x64\x58\xdf\xce\xb9\x8c\x63\xa3\x71\x1c\x3d\x0b\x03\x5b\x0b\x5f\xbf\x3d\xee\x1d\x86\xe3\xb3\x68\x7a\xa4\xbf\xa4\x72\x68\x2a\x51\xe0\x40\x91\xc3\x00\xb2\x02\x7e\xa7\xad\x74\x52\x2b\xd1\x5c\x99\xba\x6f\x51\x39\xeb\x6b\x3f\xc1\xa7\x8c\x46\xd3\xa0\x3a\xce\x8c\xf0\x3c\x56\x06\xa2\xeb\x50\x95\x2c\x9c\x57\x14\x58\x49\x6c\x4a\x7f\x3e\xc6\xa7\xbe\xca\x71\x30\x91\x28\xcb\x43\x11\x42\xaf\x7a\x55\x30\x45\x63\xb6\xce\x48\x55\xa7\x30\xc4\x51\xb4\x9d\xc1\x6f\xed\x0a\x28\x80\x73\x9e\xc6\x51\x44\x93\xfd\x88\x73\xf4\x74\x71\x71\x06\x21\x01\xdf\x09\x3f\x04\x1f\x27\x9c\x4c\xb8\x6f\x13\xac\x33\x85\x56\xcf\xfc\xc6\x69\xc1\x9e\xd2\x77\xa2\x92\x15\x24\x33\x62\xd8\x58\x0c\x2c\xfe\x75\xfd\x37\x00\xaa\xf4\xf9\x63\x1c\xe5\x04\xf0\x3a\xac\xb0\x2d\x23\x54\x8d\x4b\xa9\x8a\xc7\x06\x7f\xa5\xb9\x87\xfe\x65\x05\x41\xd3\x9c\xca\x4d\x02\xe6\xb9\x45\xe7\x27\x3b\x43\x64\x09\x45\x7c\xd6\x4d\xdf\x92\x98\x13\xe2\xf0\xde\x6e\xcf\x40\xfa\x2b\x96\xa6\x9e\xec\xb4\xe2\x31\x88\x2a\x6c\x68\x8d\x58\xda\xb5\xde\x79\x5a\x79\xae\xf4\x8e\x16\xbe\xd6\x3b\x96\xf2\x2f\x7f\x7c\x66\x4b\x65\xcc\xba\xbb\xea\x9d\x9e\x75\x74\x42\x79\x62\x40\x84\x3f\xd0\x22\xbf\x51\xd2\xfd\x29\x9a\x85\x06\xc7\x57\xd5\x2b\xed\x4e\x4a\xc9\x8a\xb4\xce\xb6\x36\x85\x2c\x83\x9f\xfc\xc4\x4c\x78\xed\x4a\x36\x2b\xc0\xb6\x73\xfb\x60\x10\xec\x5c\xe3\x47\xdc\x73\xea\xbc\xfc\x3f\x8f\xc7\x17\x08\x2e\x40\x53\x5c\x38\x08\x5c\x4c\x8f\x87\x6d\xed\xd7\x4f\x53\x03\x97\x3f\x7f\x4b\xe1\x62\x69\x1c\x71\xa4\x1f\x9f\x78\xa3\xeb\x8d\x6b\x1d\x0b\x57\xab\xc9\x1b\xbc\x08\x43\x0f\x4a\xba\x99\xc9\x1d\x5d\x62\xd3\x77\x9d\x36\xce\x86\x1b\xa9\x6a\x7f\x49\x0e\x98\x01\xe1\x96\x46\x3e\xa3\xe1\xf7\x3d\x9a\xfd\x83\xde\x9d\xc1\xe7\x9b\x42\x28\x72\x62\x51\x96\x46\x57\xc0\xaa\x46\x38\x47\xe6\x12\x30\xd3\xd0\xb2\xac\xbc\xaf\x66\x19\xd8\x6d\xc3\xaf\x8d\x59\xeb\x07\xbd\xb3\x27\xdb\x50\xb2\xf1\x3b\x98\xe2\x7f\xc8\xe8\x9f\x93\x28\xa2\xd6\x8a\xbf\xf0\xda\x18\x86\xc6\xbc\xae\x8d\xde\xaa\xdf\x49\x1e\x7c\x7c\xd1\xc5\xf5\x0b\x16\xe7\x26\xf4\x5f\x8a\x1d\x2c\xbc\x46\xe7\x01\x4f\xfc\xfb\x37\x74\x9b\xfb\x5b\x3f\xce\xf9\x82\x12\x76\xf3\xfb\xdd\xed\xcd\xf5\x2f\x29\x24\x7e\x95\x07\x80\xf7\xe5\xf2\xf1\x3e\xfe\x31\xff\xfb\x5a\xd0\xc1\x19\xa6\x60\xa2\x65\xea\xc5\xe7\x97\x0a\x8c\x8b\x2f\xef\xdf\x01\x00\x00\xff\xff\x43\x1d\x89\xf9\x16\x08\x00\x00")

func golangUpdateTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangUpdateTmpl,
		"golang.update.tmpl",
	)
}

func golangUpdateTmpl() (*asset, error) {
	bytes, err := golangUpdateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.update.tmpl", size: 2070, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"golang.create.tmpl": golangCreateTmpl,
	"golang.delete-all.tmpl": golangDeleteAllTmpl,
	"golang.delete-world.tmpl": golangDeleteWorldTmpl,
	"golang.delete.tmpl": golangDeleteTmpl,
	"golang.dialect-postgres.tmpl": golangDialectPostgresTmpl,
	"golang.dialect-sqlite3.tmpl": golangDialectSqlite3Tmpl,
	"golang.footer.tmpl": golangFooterTmpl,
	"golang.get-all.tmpl": golangGetAllTmpl,
	"golang.get-count.tmpl": golangGetCountTmpl,
	"golang.get-first.tmpl": golangGetFirstTmpl,
	"golang.get-has.tmpl": golangGetHasTmpl,
	"golang.get-last.tmpl": golangGetLastTmpl,
	"golang.get-limitoffset.tmpl": golangGetLimitoffsetTmpl,
	"golang.get-one-all.tmpl": golangGetOneAllTmpl,
	"golang.get-one.tmpl": golangGetOneTmpl,
	"golang.get-paged.tmpl": golangGetPagedTmpl,
	"golang.get-scalar-all.tmpl": golangGetScalarAllTmpl,
	"golang.get-scalar.tmpl": golangGetScalarTmpl,
	"golang.header.tmpl": golangHeaderTmpl,
	"golang.misc.tmpl": golangMiscTmpl,
	"golang.update.tmpl": golangUpdateTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"golang.create.tmpl": &bintree{golangCreateTmpl, map[string]*bintree{}},
	"golang.delete-all.tmpl": &bintree{golangDeleteAllTmpl, map[string]*bintree{}},
	"golang.delete-world.tmpl": &bintree{golangDeleteWorldTmpl, map[string]*bintree{}},
	"golang.delete.tmpl": &bintree{golangDeleteTmpl, map[string]*bintree{}},
	"golang.dialect-postgres.tmpl": &bintree{golangDialectPostgresTmpl, map[string]*bintree{}},
	"golang.dialect-sqlite3.tmpl": &bintree{golangDialectSqlite3Tmpl, map[string]*bintree{}},
	"golang.footer.tmpl": &bintree{golangFooterTmpl, map[string]*bintree{}},
	"golang.get-all.tmpl": &bintree{golangGetAllTmpl, map[string]*bintree{}},
	"golang.get-count.tmpl": &bintree{golangGetCountTmpl, map[string]*bintree{}},
	"golang.get-first.tmpl": &bintree{golangGetFirstTmpl, map[string]*bintree{}},
	"golang.get-has.tmpl": &bintree{golangGetHasTmpl, map[string]*bintree{}},
	"golang.get-last.tmpl": &bintree{golangGetLastTmpl, map[string]*bintree{}},
	"golang.get-limitoffset.tmpl": &bintree{golangGetLimitoffsetTmpl, map[string]*bintree{}},
	"golang.get-one-all.tmpl": &bintree{golangGetOneAllTmpl, map[string]*bintree{}},
	"golang.get-one.tmpl": &bintree{golangGetOneTmpl, map[string]*bintree{}},
	"golang.get-paged.tmpl": &bintree{golangGetPagedTmpl, map[string]*bintree{}},
	"golang.get-scalar-all.tmpl": &bintree{golangGetScalarAllTmpl, map[string]*bintree{}},
	"golang.get-scalar.tmpl": &bintree{golangGetScalarTmpl, map[string]*bintree{}},
	"golang.header.tmpl": &bintree{golangHeaderTmpl, map[string]*bintree{}},
	"golang.misc.tmpl": &bintree{golangMiscTmpl, map[string]*bintree{}},
	"golang.update.tmpl": &bintree{golangUpdateTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

