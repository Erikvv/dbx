// Code generated by go-bindata.
// sources:
// golang.count.tmpl
// golang.delete-all.tmpl
// golang.delete.tmpl
// golang.footer.tmpl
// golang.get-last.tmpl
// golang.has.tmpl
// golang.header.tmpl
// golang.insert.tmpl
// golang.lru.tmpl
// golang.misc.tmpl
// golang.select-all.tmpl
// golang.select-paged.tmpl
// golang.select.tmpl
// golang.update.tmpl
// postgres.tmpl
// sqlite3.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _golangCountTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x90\x31\x4f\xc3\x30\x10\x85\x67\xdf\xaf\x78\x74\x40\x8e\x94\x46\x0c\x88\x01\x29\x03\x42\x6c\x2c\xa5\x03\x63\xea\x26\x97\x28\xa8\xb5\xa3\x8b\x23\xa8\xac\xfb\xef\x28\x69\x45\x11\x1b\x83\xa7\x77\xef\xfb\xce\x97\xd2\x1a\x0d\xb7\xbd\x67\xac\xc6\xbe\xf3\x2e\x4e\xc2\x2b\xac\x55\xe9\x39\x4c\x3e\xa6\x84\x62\x3b\xb5\x6d\xff\x05\x55\x9b\x12\x06\x27\xee\x88\xe2\x49\xba\x11\xaa\x19\x6c\x3d\x8f\xa1\xf7\xf1\xe1\x3e\x07\x8b\xcc\x2f\x48\x46\x33\x99\x7d\xb3\xa0\xe8\xb7\x66\x1f\x9a\xd3\x0a\xaa\x89\x4c\x1d\xfc\x18\x51\x55\x63\x3c\xc6\x72\xb7\xb8\x36\xaf\x50\xdd\x91\xa9\xaa\x41\x78\x70\xc2\x4d\x8e\xaa\x12\x1e\x0e\xae\xe6\xb3\xe0\xb1\x44\xd8\x7f\x14\x97\xdc\x9e\xeb\x19\x99\xbe\x5d\xe2\x9b\x12\xbe\x3f\x20\x91\x31\xc2\x71\x12\x8f\xbb\x1c\xef\xe2\x86\x17\x11\xcb\x22\x19\x19\x25\xd3\x70\xcb\x72\x25\xdb\x8c\xcc\x0c\x3d\x84\x6e\x1b\x8f\xf1\x02\xcd\x91\x12\x9c\x74\xd7\xff\x12\x01\x58\x34\x25\xae\x2b\x16\x9b\x89\xe5\xf4\x16\x3e\xed\xdf\xf9\x62\x5b\x3b\x6f\x6f\x97\x23\xfd\x73\xc5\x59\x74\x49\x97\x7a\x3e\x77\x48\x29\xa5\x9f\xbb\x7e\x07\x00\x00\xff\xff\xe4\x94\x1b\x5e\xbe\x01\x00\x00")

func golangCountTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangCountTmpl,
		"golang.count.tmpl",
	)
}

func golangCountTmpl() (*asset, error) {
	bytes, err := golangCountTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.count.tmpl", size: 446, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeleteAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x91\x31\x6b\xf3\x30\x10\x86\x67\xdf\xaf\xb8\x2f\x93\x0c\x8e\xf9\x86\xd2\xa1\xe0\x21\xd0\x6c\x5d\xda\x0c\x1d\x1d\xc5\x3e\x19\x15\x47\x32\x67\x99\xa6\x1c\xfa\xef\xc5\xb2\x49\x02\xdd\x62\xf0\xf4\xf2\x3e\xcf\x2b\x49\x64\x8b\x2d\x19\xeb\x08\x37\xa3\xed\x9c\x0e\x13\xd3\x06\xb7\x31\xc2\x2b\xf5\x14\x48\x04\xcb\xc3\x64\x8c\xbd\x60\x8c\x4a\x04\x07\xcd\xfa\x8c\xe5\x8e\xbb\x11\x63\xcc\x51\x35\x7e\x72\x01\xad\x0b\xcf\x4f\x05\x12\xf3\xfc\x7b\xce\x61\x46\x93\x6b\x13\x0b\xee\x3d\x27\xdf\xfe\x24\x85\x40\xd6\x78\x37\x06\xac\xeb\x31\x9c\x43\x75\x4c\xb2\xf7\x37\x8c\xf1\x08\x59\x5d\x0f\x4c\x83\x66\x6a\x0b\xac\x6b\xa6\xa1\xd7\x0d\x2d\x86\x97\x0a\xfd\xe9\xab\x5c\x73\xb5\xd4\x73\xc8\xac\x49\xf1\xbf\x0a\x9d\xed\x51\x00\xd7\x8f\x29\x4c\xec\xf0\x7f\x81\x9f\xac\x87\x3d\xb3\x22\xe6\x1c\xb2\x08\x59\x4b\x86\xf8\xc6\x57\x39\x64\x33\xba\xf7\xdd\x21\x9c\xc3\x8a\x2e\x50\x04\x35\x77\xb7\x63\x43\x62\xcf\xb5\xf1\x3a\xe9\x36\xb8\xdc\x5f\xa8\x51\x7f\x3a\x8f\xec\x4b\xb7\xbb\x28\xaa\xc5\x57\x7e\xf8\xef\x71\x67\x0c\x35\x81\x5a\xf5\x10\x15\xee\xe2\x55\xe0\x6c\x0f\x11\x44\xae\x4f\xf6\x1b\x00\x00\xff\xff\xb5\xbc\xf4\xac\x1a\x02\x00\x00")

func golangDeleteAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteAllTmpl,
		"golang.delete-all.tmpl",
	)
}

func golangDeleteAllTmpl() (*asset, error) {
	bytes, err := golangDeleteAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete-all.tmpl", size: 538, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeleteTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x91\xb1\x6a\xc3\x30\x10\x86\x67\xdf\x53\x5c\x33\xc9\xe0\x98\xce\x85\x14\x02\xcd\xd6\xa5\xcd\xd0\x51\x51\xac\x93\x71\x71\x24\x73\x92\x69\xca\xa1\x77\x2f\x76\x4c\x12\xe8\x16\x81\xa6\xbb\xff\xfb\x7e\x21\x91\x35\x5a\x72\x9d\x27\x5c\xc5\xae\xf5\x26\x8d\x4c\x2b\x5c\xe7\x0c\x6f\xd4\x53\x22\x11\xac\xf7\xa3\x73\xdd\x19\x73\x56\x22\x38\x18\x36\x27\xac\xb7\xdc\x46\xcc\xb9\x44\x65\xe7\x3d\x8b\xc7\x10\xfa\x0a\x89\x79\xba\x81\x4b\x98\xd8\xe4\xed\x0c\x83\x7b\xd1\x31\xd8\xdf\xd9\x21\x50\x34\xc1\xc7\x84\x5a\xc7\x74\x4a\x9b\xc3\x6c\xfb\x78\xc7\x9c\x0f\x50\x68\x3d\x30\x0d\x86\xc9\x56\xa8\x35\xd3\xd0\x9b\x86\x2e\x86\x97\x0d\x86\xe3\x77\xbd\xcc\xd5\x25\x5e\x42\xd1\xb9\x79\xfc\xb4\x41\xdf\xf5\x28\x80\xcb\x61\x4a\x23\x7b\x74\xa6\x8f\x54\xe1\x17\x9b\x61\xc7\xac\x88\xb9\x84\x22\x43\x61\xc9\x11\xdf\x1c\xaa\x84\x62\xc2\xf7\xa1\xdd\xa7\x53\x5a\xf0\x15\x8a\xa0\xe1\xf6\xf6\x76\x98\xf9\x53\x2c\x5e\x6b\xdd\x4a\xd7\xbb\x33\x35\xea\x5f\xe6\xd1\x8e\x5a\x37\x61\xf4\xe9\x4e\xc4\x14\xeb\xcf\xf0\x13\xb7\xce\x51\x93\xc8\xaa\x87\xe1\x70\xb7\xb2\x78\xf0\x15\x9f\xab\x09\x02\x19\x44\xae\xff\xf8\x17\x00\x00\xff\xff\x7c\xd0\xa9\x1e\x30\x02\x00\x00")

func golangDeleteTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteTmpl,
		"golang.delete.tmpl",
	)
}

func golangDeleteTmpl() (*asset, error) {
	bytes, err := golangDeleteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete.tmpl", size: 560, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xce\x41\xca\xc2\x30\x10\xc5\xf1\x75\xe6\x14\x6f\xd9\x7e\xd0\x1c\xe3\xdb\xb9\xd2\x0b\xa4\xc9\x98\x06\xec\xa8\x49\x84\xca\x30\x77\x97\x82\xdd\xb9\xfb\xc3\x83\x1f\x8f\xa8\xbf\x1f\x8c\x95\xfb\x72\x4f\x0d\x45\x3a\xd7\x6b\x88\x0c\x25\xd5\x09\x35\x48\x66\xf8\xff\x97\xc4\x06\x33\x02\x00\x55\xf8\xbd\xf7\x9d\x25\x61\x32\x03\x40\xf6\xa5\xd2\x7c\xfa\x81\xb9\x73\x5c\x78\x0d\xc3\x88\xd6\x6b\x91\x4c\x6e\xe6\x5c\x64\xe8\x1b\xfe\xda\xf3\xe6\x2f\xdb\x78\x9c\x20\x77\x84\xd1\x27\x00\x00\xff\xff\x0d\x06\x52\x05\x9f\x00\x00\x00")

func golangFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangFooterTmpl,
		"golang.footer.tmpl",
	)
}

func golangFooterTmpl() (*asset, error) {
	bytes, err := golangFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.footer.tmpl", size: 159, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetLastTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x91\x31\x6f\xfa\x30\x10\xc5\x67\xdf\xa7\xb8\x3f\x93\x2d\x41\xa6\xbf\x3a\x54\xca\xd8\x8d\x05\xa8\xd4\x31\x18\x7c\x89\x5c\x82\x6d\x5d\x8c\x2a\x6a\xf9\xbb\x57\x4e\xa0\x90\x46\xca\x60\xdf\xbd\xdf\x7b\x77\x4e\x69\x85\x86\x5a\xeb\x08\x17\x83\xed\x9c\x8e\x17\xa6\x05\xae\x72\x86\x8e\xe2\x5a\x0f\x31\x25\xac\xb6\x14\x2f\xec\xaa\xf7\x6b\x20\xcc\x59\x86\x13\x5a\x17\x5f\xfe\x2b\x94\x29\x61\xd0\xac\xcf\xf7\x1e\xcc\x79\x89\xc4\x5c\x7e\xcf\x0a\x0a\x9f\x9c\x19\x81\xf0\x6c\x76\xf0\xe6\x3a\xfa\x24\x10\x47\xef\x86\x88\x4d\x33\xc4\x73\xac\xf7\xc5\x70\xb7\x59\x63\xce\x7b\x10\x4d\x13\x98\x82\x66\x32\x4b\x6c\x1a\xa6\xd0\xeb\x23\x4d\x0e\xaf\x35\xfa\xc3\x67\x75\xab\xcb\x49\xae\x40\xd8\x76\x2c\xff\xab\xd1\xd9\x1e\x13\x08\x51\x8e\x35\x7e\xb0\x0e\x6f\xcc\x92\x98\x15\x08\xc1\x63\x5e\x10\x19\x84\xa1\x96\xf8\x81\x97\x0a\x44\x21\xf7\xbe\xdb\xc5\x73\xbc\x91\x97\x18\x4e\x0a\x00\x11\x31\x25\xb4\xce\xc6\xa7\x99\xc7\xeb\xc9\xe6\x91\xb8\xda\x5c\x88\xaf\x5b\xff\x25\xc3\x49\x55\xbb\xa3\x76\x65\x5d\xda\x18\xf6\x2d\xca\xb6\xd7\x31\x92\xbb\x43\x14\xe6\xac\x46\xcc\xdf\xfc\x78\xfb\xa6\xc0\xc5\xfc\x9b\xd8\xcf\x16\x3e\x1b\xad\xf4\x4e\x81\x1e\x0a\xcd\xdd\x4c\xe0\x6c\x0f\x19\x52\xfa\x7d\x9b\x9f\x00\x00\x00\xff\xff\xd9\x88\x00\x0e\x08\x02\x00\x00")

func golangGetLastTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetLastTmpl,
		"golang.get-last.tmpl",
	)
}

func golangGetLastTmpl() (*asset, error) {
	bytes, err := golangGetLastTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-last.tmpl", size: 520, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangHasTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x90\x31\x6e\xe3\x30\x10\x45\x6b\xce\x29\xfe\xba\x58\x50\x80\xac\x03\x2c\xa0\x62\x8b\x05\xb6\x48\xe3\xb8\x48\x29\x8f\xad\x91\xac\x40\x26\x85\x21\x85\xc4\x20\x78\xf7\x40\xb2\x11\x07\x29\x53\xb0\x9a\xf9\xef\x7d\x4e\x4a\x5b\xb4\xd2\x0d\x4e\xb0\x09\x43\xef\x38\xce\x2a\x1b\x6c\x73\xa6\xff\x1c\x52\x42\xb5\x9f\xbb\x6e\x78\x47\xce\x36\x25\x4c\xac\x7c\x41\xf5\x57\xfb\x80\x9c\x0b\xd8\x33\x07\x1c\xbd\x1f\x4b\x88\xea\xf2\xbc\x16\xb4\x40\xc5\xb5\x2b\x85\xbe\x1a\x8e\xbe\xbd\x6e\x90\x73\x22\x73\xf2\x2e\x44\x34\x4d\x88\x97\x58\x1f\x56\xd1\xee\x09\x39\x1f\xc8\x34\xcd\xa4\x32\xb1\x4a\x5b\xa2\x69\x54\xa6\x91\x4f\x72\x13\xfc\xa9\xe1\x8f\xaf\xd5\x7d\x6e\x6f\xf1\x82\xcc\xd0\xad\xe3\x5f\x35\xdc\x30\x22\x91\x31\x2a\x71\x56\x87\x8e\xc7\x20\x25\x5e\x94\xa7\x7f\xaa\x56\x54\x0b\x32\x99\x4c\x2b\x9d\xe8\x83\x6e\x0b\x32\x0b\x78\xf4\xfd\x3e\x5e\xe2\x1d\x5c\x22\x25\xb0\xf6\x8f\x0f\x13\x01\x58\x55\x35\x1e\x35\xab\xdd\x2c\x7a\x7d\xf6\x6f\xf6\xfb\x7e\xb5\x3f\xb1\xb3\xbf\xcf\x1c\x7e\x50\x72\x51\xdd\x37\xce\x1c\xca\x25\x45\x99\x52\xfa\xbc\xed\x47\x00\x00\x00\xff\xff\xbf\x66\x68\xe3\xbd\x01\x00\x00")

func golangHasTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangHasTmpl,
		"golang.has.tmpl",
	)
}

func golangHasTmpl() (*asset, error) {
	bytes, err := golangHasTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.has.tmpl", size: 445, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x57\x5b\x6f\xa4\xb8\x12\x7e\xc6\xbf\xa2\x4e\x6b\xd2\x82\x9c\x1e\xfa\x3c\x1c\xed\x03\xab\x7e\x48\x0f\xbd\xa3\x91\xb2\xc9\x6c\xd2\xa3\xd5\x4a\x23\xed\xd0\x60\x08\x13\x63\x88\x6d\x3a\x64\x59\xfe\xfb\xaa\xcc\xcd\xf4\x65\xf6\x2e\xcd\x4b\x1a\xe2\xaa\xaf\xea\xab\xfa\x5c\x36\xcb\x25\x5c\x7d\xd8\xde\xbe\xdd\xdc\x6c\xee\xae\xb6\x1b\x1f\xd6\x3f\x41\x92\x17\x8f\x89\x9b\xf2\xa5\x2c\x82\x90\x66\x39\x7f\xa4\x2f\x49\xbe\x8c\x76\x95\xbb\xff\x1f\x59\x2e\xc1\xbf\x85\x9b\xdb\x2d\x6c\xfc\x77\x5b\x97\x90\x22\x08\x1f\x83\x84\x42\x5d\x83\xfb\xbe\x7b\x6e\x1a\x42\xd2\xac\xc8\x85\x02\x9b\x58\xb3\x28\x50\xc1\x2e\x90\x74\x29\x9f\xd8\x8c\x58\xb3\x38\x53\xf8\x23\x5f\x78\x88\xbf\x2a\xcd\xe8\x8c\x90\xba\x7e\x0d\x22\xe0\x09\x05\x77\x53\x29\x11\xbc\xd3\x00\x12\xc1\x2c\x04\xbf\xc2\x47\x98\x4d\xe3\xcc\xb4\x1b\xe5\x11\x9a\x39\x84\xec\x03\x01\x3f\x8a\xa0\xd8\x08\x01\x2b\x88\x4b\x1e\xda\x54\x08\xa0\x42\xe4\xc2\x69\x7f\xa0\x16\x54\x95\x82\xe3\x5b\xa3\x1d\xae\xf3\x24\xa1\xa2\xb5\x8e\x73\x91\x05\x0a\xa4\x12\x29\x4f\x16\x10\x88\x44\x82\xeb\xba\x29\x57\x54\xc4\x41\x48\xeb\xc6\xd1\x3e\x37\xf9\x33\xac\x00\x53\x77\x6f\xf2\x67\x42\xd0\x19\x58\x9e\x50\x33\x5e\x4d\xac\x34\xee\xe1\xff\xb3\x02\x9e\x32\x98\xcf\x71\xb5\x7f\xab\x89\x65\xb5\xeb\xf6\xac\xcd\x2e\x64\xb9\x4c\x79\x02\x52\x05\x8a\x66\x94\x2b\x0f\x2e\xf6\xb3\x05\x3a\x39\xc4\x6a\x48\x43\x88\x7a\x29\x28\xf8\x6b\x4c\xb2\x0c\x15\x62\x5c\xca\x27\xe6\xfa\x6b\x62\x31\x51\xc2\x25\x13\x25\xb1\xa2\xdd\xf7\x54\x3d\xe4\x91\x44\x0f\x9d\xdd\x6d\x41\xb9\x1d\x89\x74\x4f\xc5\x02\x64\x5e\x8a\x90\x0e\x3c\x99\x28\x7f\x96\xe9\x2f\x14\x52\xae\x1c\xb0\x2f\xfd\xf5\xc2\x20\x11\xed\xf4\x1b\x78\x2b\xc0\x40\x27\x80\x1c\xcd\xf4\x80\x58\x57\x67\x9e\xb2\x45\xdf\x14\xbb\xa7\x61\xb5\xb9\x7a\x2b\xe0\xf4\xf9\xfa\xee\x83\x8d\x31\xfa\x2c\x1c\x42\x2c\x2c\x72\x9a\x15\x0c\x46\x22\x96\x7c\x4e\x55\xf8\x00\x6d\x68\xa8\x4d\xc9\xf8\x69\xc0\x68\xd8\xc9\x25\x0c\x64\x2b\xc8\x9b\x20\xa3\xf0\x2b\x14\x22\xe5\x2a\x86\xd9\xc5\xd3\x0c\x9a\xc6\x23\x96\xa5\x91\x57\x30\x1f\x8c\x9a\xc6\x5f\xd7\x4c\x94\x1e\x26\xd1\x98\xaa\xb2\x22\x1a\x07\x25\x53\xde\x19\x46\x71\xa6\xdc\x0d\x96\x2a\xb6\x67\x25\x97\x65\x81\xb2\xa5\x51\x9f\xe5\x85\x9c\x2d\xba\x67\x47\x33\x27\x3d\xca\xdc\x5f\x63\x95\xfc\xb5\x07\xd1\x6e\x41\x2c\xab\x0f\x8f\xcf\x03\x6b\x4f\x57\x61\x41\xac\x66\x81\x71\x87\x6e\xda\xf9\xee\x33\x5c\xfa\x6b\x07\xde\xb0\x5c\x52\xdb\x81\x03\xe5\xe5\xbb\xcf\x2e\x13\xa5\xfb\xbe\x14\x09\xb5\x9d\x21\x6c\x9f\x37\xae\xfb\x6b\xb7\xf3\x76\x4e\x00\xfb\x94\x51\x45\xaf\x18\x43\x70\x95\xab\x80\xa1\x3c\xbe\xf9\x7f\x2b\x86\x21\x92\xd1\x85\x7b\xad\x48\x79\x47\xf7\x54\x48\x3d\x07\x50\x16\x7c\x50\x8f\x8e\xa9\x51\xeb\x1a\x0a\x56\x8a\x80\xa1\xe8\xfa\x16\xd8\xce\xb7\xda\x72\x35\x6a\xa8\x0d\xfb\xdf\x15\x70\x62\x35\x40\x19\x36\x76\x6c\x84\x5e\x3d\x16\x97\xd9\xbd\xa9\xe5\xe9\x0a\x6a\x41\xa3\xec\xb7\x95\x29\x7b\x55\x4d\x13\x5f\xbb\x6b\x9a\xa4\xdc\xfe\xd3\x62\x1f\x5b\xbe\xad\x6a\x55\x79\x80\xc8\x59\xdf\x5f\xc4\xde\x69\x60\x55\x39\x63\x97\xf5\x2e\xdf\x56\xc6\x2e\x57\x15\xe8\x8d\xbe\xad\x88\x95\x1d\x6c\x6e\x1b\x17\xb7\x95\x03\x6f\xf2\x2c\x4b\xd5\xb1\x1c\x0e\xba\xaf\x2a\x57\x55\x6e\x6f\xec\x1c\xe3\xdc\xe5\x8c\xed\x82\xf0\xf1\x0f\x22\x8d\xe6\x27\xb0\xfe\x79\x21\xa9\xea\xab\xd0\xd1\x99\x01\x44\xea\x1a\x5e\x45\x3b\xdd\x41\x6f\x75\x3c\x86\xa4\xbf\xc6\x41\xa4\xcd\x54\x75\xde\x6c\x5b\x69\xb3\x56\x0a\x06\x66\xd3\x18\xaa\x18\x46\xfe\x54\xd7\x13\x73\x07\xee\xc3\x07\x9a\x05\xb6\xd3\x4d\x7c\xa8\x49\x47\xe8\x93\x26\xe1\xb6\xeb\xf7\x3f\x5c\xc3\xeb\xa6\x21\x9f\xbe\x0c\x56\x08\x5a\x04\x82\xda\x52\x65\xfd\x51\xe9\x80\xdd\xfd\x37\x6a\x45\x7a\xaf\x32\xb5\x00\x41\x0b\x16\x84\xb4\x3d\x5b\x9d\x83\x7e\x5b\x94\x2b\xf1\x32\xd9\x63\x38\xb0\xde\x52\xa5\x91\x7f\x77\x9b\xe9\x3f\x54\x08\x7d\x9e\xf4\x87\x3a\x42\x76\xc1\xdb\xa0\x50\x0f\xc8\x77\x6d\x36\xb6\x36\x72\xe0\xe4\x44\x3d\xa0\xca\xf2\x04\xc1\x4c\xaa\xed\xad\xc0\x75\x5d\x30\x6f\x05\x98\x9d\x71\x9a\x5c\x1b\x7e\x83\xc3\xe1\x90\x3d\x88\xd5\x0f\x81\x7e\x97\x3b\xfd\x8c\x30\x76\xdd\xdc\xd0\x4c\xd3\x68\x65\xb7\xf3\xa4\x3f\x3f\x3a\xae\x0b\xf3\xae\x30\xf1\x39\x33\x50\xbe\x20\xa3\xc1\xf5\xab\xee\x3c\x82\xa8\x4a\x47\xb7\x47\x15\x38\x7f\x43\x06\x06\xef\x7f\x49\x06\x67\x2c\xbf\x78\xfd\xc4\x08\xcb\x25\x6c\x6f\xfd\x5b\x0f\x04\xe5\x11\x15\xa0\xf9\x3c\xe4\x2c\xa2\x42\x9e\xb8\x73\x9a\xb7\x4c\xf9\xc4\xbc\x8f\xfc\x42\x7e\xe4\x08\x8e\x8f\x78\xbb\x1c\xf3\xeb\x2f\x99\xc6\xec\xc3\x39\x35\x9d\xcb\xfd\xf0\xea\xa4\x34\x0c\xaf\xc9\xb0\xea\x16\x4d\xc5\x19\xf3\xf2\xbb\x94\xb2\x68\xbc\xdd\x77\xee\xba\x22\xdb\xb6\xea\x66\x0a\x5d\x42\x69\x0c\xee\x87\x42\x7f\x4f\x30\x3a\x22\x0c\x31\xdb\x45\xda\x66\xd9\x43\x9e\x8a\x7e\x02\x04\x57\x5f\xc5\x23\xa3\x71\x0c\x5f\x48\x6d\x35\x1b\x28\x0d\x64\x27\xa9\x6b\xcd\xc4\x03\xeb\x69\xfa\xd3\x72\x9e\xa8\xc2\x5f\x09\x3f\xd6\x3a\x3e\x2e\x36\xec\xcd\x62\x42\x33\x28\x6e\x6c\x8c\x91\xbd\x3d\xb1\x76\xf0\x05\x8b\x7d\x53\x32\x86\x65\x82\xa6\x41\x7a\x2d\x83\x83\x80\x35\x74\x3b\xf0\xd8\x67\x7e\xc6\xa7\xde\x7b\xb0\x1f\x72\xb2\xcb\x03\x0e\x0e\x84\x39\x2b\x33\x8e\xb9\x19\x47\x56\x1f\x47\x7f\x03\xbe\xd1\x16\xf8\x09\x68\xc0\x5c\x1e\xe2\xec\x03\x56\x22\x84\xb1\x81\xa0\x06\xbd\x45\x4a\xf3\x7a\x30\x0e\x17\x73\xa4\x94\xee\xbe\x6b\x1d\x5e\x3e\x72\x35\xe1\x76\x36\xf7\x3b\x1a\xdb\xce\x61\x2a\x63\xf6\xf3\x12\x8e\xe5\x80\xcf\xaf\xa7\x9a\xf9\x2d\x00\x00\xff\xff\xa6\xb4\x2c\x33\x9c\x0f\x00\x00")

func golangHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangHeaderTmpl,
		"golang.header.tmpl",
	)
}

func golangHeaderTmpl() (*asset, error) {
	bytes, err := golangHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.header.tmpl", size: 3996, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangInsertTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x53\xcf\x6a\xdc\x3c\x10\x3f\x5b\x4f\x31\x5f\x4e\x12\x6c\xf4\x00\x01\x1f\x3e\x42\x0a\x81\xb0\x90\x6c\x4a\x8f\x8a\xb2\x1a\x19\xb5\x5e\x49\x8c\xb4\x38\x8b\xd1\xbb\x17\xd9\x8e\xe3\x36\xa7\x42\x0c\x3e\x68\xc6\xfa\xfd\x9b\xf1\x38\x5e\x83\x41\xeb\x3c\xc2\x55\x72\x9d\xd7\xf9\x4c\x78\x05\xd7\xa5\xb0\x5b\x42\x9d\x71\x1c\x41\x1e\xce\xd6\xba\x37\x28\x85\x8f\x23\x44\x4d\xfa\x04\xf2\x7f\xea\x12\x94\x22\x60\x53\x7b\xc2\x7c\x26\x0f\xa5\xec\x00\x89\xea\x1b\x48\xb0\x4a\x81\xde\x4c\x98\x6c\xcb\xf7\x1a\xcc\x65\xa2\x1a\x19\x00\x40\x6d\x39\x0b\x72\x8f\x68\xd2\x3e\x0c\x50\xca\x54\x57\xca\x87\x01\x6e\x5a\xd8\x87\x81\x0b\xf9\xfd\xf9\x96\x8b\xe5\xc2\x8a\xbb\x1c\x9d\x77\xd9\xe3\x00\xf2\x9b\xc3\xde\x54\x7d\xac\x39\x06\x9f\x32\x28\x95\xf2\x29\xb7\x2f\x93\x9d\xc7\x07\x28\xe5\x85\x35\x4a\x45\xc2\xa8\x09\xcd\x0e\x94\x22\x8c\xbd\x3e\xe2\xac\xfd\xa6\x85\xf0\xfa\x53\x2e\x7d\x3e\x5f\x17\xac\x71\x76\x6a\xff\xd7\x82\x77\x3d\xcc\xc2\xeb\x43\xb3\x75\xef\xfa\x1d\xfc\x20\x1d\xef\x88\x38\x12\x09\xd6\x14\xd6\x18\xb4\x48\x1f\x0c\x5c\xb0\xa6\x82\xf7\xa1\x3b\xe4\x53\x5e\xc0\x77\xd5\x80\xa6\x6e\x23\x5e\xb0\xd5\x98\xad\x53\x88\x31\x50\x4e\x73\xca\xce\x77\xf0\xa7\xf1\x4d\xfe\x53\xb9\xea\x6c\xe1\xc3\xa3\x7c\x3c\x23\x5d\x9e\xc2\xc0\x3f\x13\xc9\xc3\x51\xfb\xa9\x6e\x0c\x05\x0b\xdc\xf6\x3a\x67\xf4\xef\x98\x62\x52\x53\x51\xff\x39\x80\xda\x9c\x05\x2d\x9f\xbc\xb3\x6f\xb6\xc5\xbb\x7e\x9d\x68\x9f\x70\x1d\x69\x8d\x2c\xad\x03\xd9\x58\xb9\x7b\xc3\xe3\x5f\x36\xbe\x40\xa0\x52\xf1\xd7\x86\x8d\x30\xc9\x07\x9d\xf2\xbd\x4f\x48\xf9\xde\xf0\xaf\x4a\xa0\x0e\xbf\xc3\x5c\xb1\xeb\x3e\xce\x41\xc8\xe7\x4b\xc4\xfa\x8f\x55\x15\x9f\x16\xbc\xb0\xcd\xe1\x77\x00\x00\x00\xff\xff\xbc\x5e\xcc\x40\xb5\x03\x00\x00")

func golangInsertTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangInsertTmpl,
		"golang.insert.tmpl",
	)
}

func golangInsertTmpl() (*asset, error) {
	bytes, err := golangInsertTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.insert.tmpl", size: 949, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangLruTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x55\x5f\x6f\xdc\x36\x0c\x7f\x96\x3e\x05\xdb\x87\xc1\x6e\x1c\x5f\x9e\xaf\xed\x06\xec\x0f\xf6\xd2\x01\x45\x87\x62\x0f\x45\x51\xc8\x36\x9d\x08\x96\x25\x4f\xa2\x73\xf1\x82\x7c\xf7\x81\x92\xec\xf8\x72\x1b\xd0\x7b\x39\x8b\x14\xc9\x1f\xc9\x1f\xa9\xc3\x01\x8c\x9f\x41\x8f\x93\xc1\x11\x2d\x29\xd2\xce\x42\xef\x3c\x4c\x1e\x27\xe5\xb1\x83\x40\x8a\xa2\x2e\x48\x5a\x26\x8c\xf7\x03\xf9\xb9\x25\x78\x94\x62\x9c\x21\xfd\xc2\x62\xdb\xfa\x8f\x99\xf0\x41\x8a\xae\xc9\xc2\x37\xe1\x6f\x53\xff\xfa\xb3\x14\xad\x9a\x54\xab\x69\x01\x6d\x49\x0a\xef\x1c\x45\x3d\x5a\xf2\x8b\x14\xda\x76\xf8\xc0\xe7\x51\x4d\x5f\x02\x79\x6d\x6f\xbf\xbe\x49\xba\x27\x29\x0f\x07\xb0\x78\xfa\xf0\xe9\x33\x78\xa4\xd9\xdb\x00\xca\x82\xb6\x9a\xb4\x32\xfa\x1f\xec\x18\x51\x2d\xfb\xd9\xb6\xf9\x5e\xd1\x35\x6b\xe4\x0a\xf6\x91\x4b\x78\xc3\xe8\x1f\xa5\x30\x70\x7c\x0f\x3f\x18\x3f\x3f\x4a\x21\xba\xe6\x98\xf1\x76\x4d\x25\xc5\x06\xf6\xb8\x19\xb3\x34\x82\x3c\x26\x94\x03\x16\x17\x50\xcb\x4a\x8a\x27\x29\x4c\xcd\xd9\xd5\x16\x1f\x08\x38\x44\x3c\x6e\xe2\xc9\xe3\xfd\x5e\x9c\x32\x02\x93\xf3\xd4\x36\xa0\xa7\xfc\x17\x00\x41\xf5\x84\x1e\x14\x55\xa0\x6d\xeb\x53\x1b\xc0\xd4\x06\x6d\xce\xb8\x30\x31\xa7\x32\xdb\x14\x58\x81\x22\xc8\x88\x38\x53\xcb\x99\xaa\x04\x48\x0a\xb5\x21\x43\x29\x70\x85\xa3\x88\x0f\x59\x61\xa5\xb0\xab\x02\x33\x2e\x8f\xa3\xbb\xc7\xfc\xc7\xb8\x7a\xef\x46\xd0\x8c\x45\x07\xaa\xa0\xc3\x73\x70\x2f\xb0\x25\xbb\x02\xf7\xb8\x52\xf0\x0d\x4d\xc6\x97\xfe\xb7\xf0\xf1\x63\x8f\x4d\x1b\x38\x1c\x40\xdd\x3b\xdd\xc1\x88\xa3\xf3\x0b\x18\x54\x43\xd8\x25\xf3\xff\x77\x9e\xe4\x0b\x5c\x78\xaf\x5b\x2a\xce\x19\xf2\x28\x85\xee\x9f\x59\xf3\x0e\x6e\x58\x94\x1b\xc5\x1d\x96\x82\xdc\xb7\x68\xc9\x95\x35\x68\x0b\x53\x47\x6e\x94\x70\xbd\xd9\x49\xd1\xce\xde\xa3\xa5\xc4\xb3\xdc\x6d\x9e\x2b\xcd\x92\x9b\xb7\xa0\xe1\x1d\xac\x8e\xde\x82\xbe\xba\x8a\x61\x56\xab\xf7\x90\xbf\x72\x05\x22\xa6\x55\xb7\x79\x8c\x26\x62\x52\x56\xb7\xc5\xeb\x34\x44\x6e\x26\x70\x3d\x9c\xee\x54\x3b\xd4\xe0\x55\x8b\xd0\x3a\xdb\x69\x9e\xeb\xf0\xd3\xeb\x52\x0a\x26\xe9\xce\x5d\xed\xb1\x0f\xf0\x63\x4e\x53\xb4\xce\x92\xb6\x33\xe6\x7b\x87\x03\x9c\xee\x9c\x82\xc6\x2d\xa0\x03\xd0\x9d\x0e\x10\xe6\x86\x0c\xd6\x60\xea\x4c\x8b\xc6\xb8\x53\x00\x75\x52\xcb\xe6\x34\xf6\x4b\xd9\x2e\xb9\xd8\xe7\x52\x43\x33\xd3\xd9\xbd\xd4\xb8\x93\x36\x06\x1a\x84\x71\xe6\x7d\xd3\x01\x39\x68\xf0\xd2\x3c\xee\x26\xba\x43\x88\x11\x34\xa1\x8f\x2b\xeb\x95\x14\x82\x25\xdf\x76\x65\xdf\xc7\x90\x52\x88\x15\x6f\x91\x15\x5c\x8b\x0e\x0d\x12\xae\x1d\xac\x36\x9b\x01\x17\x56\x1b\x77\xbb\x5d\xaf\xff\xa4\x91\xea\x5f\x8c\x0b\x58\x94\xa5\x3c\x6b\xd6\x3e\x34\x73\xe4\x82\x69\xbf\x23\x15\x03\x2e\x90\x36\x46\x09\x45\x9a\x84\x0a\xd0\x7b\xe7\x23\xeb\x4c\x3d\xce\xf5\x07\xd7\x0e\x45\x29\x45\x87\x3d\x7a\x88\xa2\xcf\xd6\x24\xa1\x14\x58\x81\x1b\x22\xeb\x12\xde\x2f\x03\x2e\x5f\x23\x5f\xdd\x10\xdb\xb7\xa5\x88\x11\x7d\xfd\xbc\x14\x32\x63\x58\x8c\xb1\xe5\x57\x57\x72\xa3\x35\x60\xc5\x63\x93\xd8\x1d\x68\xa4\x88\x2b\x05\xea\x9a\xfa\x63\x7a\x0a\x8a\x54\x14\xdd\x47\xe5\xab\x34\x69\xcf\xb3\xc1\xc7\x0a\xfe\xf2\x6a\xfa\xcd\xfb\x02\xbd\x2f\x93\x3f\xe4\x7d\x17\xb3\xe5\xbb\x5c\xc4\x23\xc4\x18\x52\x88\x01\x17\xde\xa8\x03\x2e\xeb\xf2\xfc\x2f\xc4\xfb\x6c\xd7\xcd\xb5\xa5\x70\x9e\xc1\x45\xe1\x3f\xe1\x64\x54\xfb\x62\xf7\x7c\x4f\xa9\x63\x84\xeb\x6b\xbe\x9c\xd6\x84\xa9\xd7\xe1\x2e\x2f\xc3\x7c\x9c\xfd\x2d\x16\xdf\xeb\x7c\x75\x79\x13\x3d\xc5\x57\x35\x82\xdb\xbd\xab\x5c\xa7\xf4\x88\xf1\x97\x94\x91\xdd\x15\xc4\x11\xc8\x4f\x23\x57\x0f\xd6\xd7\x37\xf2\x8a\xab\xd1\x87\x2c\xe2\x97\xf6\xe9\xdf\x00\x00\x00\xff\xff\x2a\x6d\x8f\x29\xe0\x07\x00\x00")

func golangLruTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangLruTmpl,
		"golang.lru.tmpl",
	)
}

func golangLruTmpl() (*asset, error) {
	bytes, err := golangLruTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.lru.tmpl", size: 2016, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangMiscTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x90\x41\x4b\xc3\x40\x10\x85\xcf\xed\xaf\x78\x84\x08\x2a\xa6\x3f\xa0\xe0\x25\x88\x17\xc1\x83\x06\xcf\x5d\xb3\x93\x30\x12\xb7\x75\xb3\x11\xcb\x98\xff\x2e\xb3\x2b\x6b\xa5\x87\xdc\x86\x37\xef\x7b\xfb\x66\x45\x2a\x58\xea\xd8\x11\x0a\x4b\xed\x50\x60\x9e\xd7\xdd\xe4\x5a\x5c\xee\x5f\xdf\x70\x2d\x82\xcd\x13\xb5\xc4\x9f\xe4\x6b\x33\x12\xe6\xf9\xae\xbe\x82\xca\xcf\xdc\x3b\x13\x26\xaf\x5a\x14\xea\xbd\x3d\x2a\xbe\xc0\x37\x5f\x0b\xbc\x08\xc8\x59\x54\x1a\x75\xda\x6f\x0c\x7e\x6a\x43\x6c\x18\x8e\x07\x8a\xcc\xa3\x79\x8f\x7c\xda\x41\x14\xf6\xc6\xf5\x84\xcd\x3d\xd3\x60\x47\x75\xaf\x44\xc0\x5d\x36\x9f\x72\xbf\x6f\x25\xb1\xd1\xd4\x38\xaa\xbb\x31\xfd\x18\x4b\xac\x76\x39\xb4\xe4\x1b\x94\x01\xdb\xdb\xbf\x75\x72\x97\x7c\x96\xf6\x40\x7a\xcd\x56\xc7\x17\x33\x4c\x84\x6f\x1c\x3c\xbb\xd0\xa1\xb8\xf8\x28\x92\x29\xb9\x77\xda\xb0\xca\x47\x67\x7d\xfd\xef\x2f\x7e\x02\x00\x00\xff\xff\x15\xe5\x41\x39\xab\x01\x00\x00")

func golangMiscTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangMiscTmpl,
		"golang.misc.tmpl",
	)
}

func golangMiscTmpl() (*asset, error) {
	bytes, err := golangMiscTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.misc.tmpl", size: 427, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangSelectAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x92\xcf\x8a\xdb\x30\x10\xc6\xcf\x33\x4f\x31\xcd\x49\x86\xac\x1f\x60\x8b\x0f\x4b\x29\xbd\x94\xc2\x36\x87\x1e\xbd\xda\x68\x14\x54\x14\xc9\x8c\x14\xb2\x8b\xd0\xbb\x17\xd9\xce\x1f\x5a\xda\x4b\x0d\xbe\x68\x34\xdf\xf7\x9b\x4f\x53\xca\x03\x19\xb6\x2e\x30\x6d\x92\x3b\x04\x9d\x4f\xc2\x1b\x7a\xa8\x15\xbf\x70\x7e\xf2\xbe\x14\xea\x77\x27\x6b\xdd\x1b\xd5\xaa\x4a\xa1\x49\x8b\x3e\x52\xff\x24\x87\x44\xb5\x76\xa4\x24\x9e\x13\x95\x42\xc9\xbb\x3d\x47\x4b\xfd\xf7\x78\xa6\x5a\xb7\xc4\x22\xed\x8f\xd2\x61\xb3\xe1\x60\x66\x5d\xbc\xf7\x7c\x8d\xe6\x7d\x43\xb5\x16\x84\x7d\x0c\x29\xd3\x38\xa6\x7c\xcc\xc3\xcb\xec\xfb\xfc\x95\x6a\x7d\x41\x18\xc7\x49\x78\xd2\xc2\x66\x4b\xe3\x28\x3c\x79\xbd\xe7\xc5\xe0\x71\xa0\xf8\xfa\xb3\x5f\xeb\x6a\x69\xef\x10\x9c\x9d\xcb\x1f\x06\x0a\xce\x53\x41\x5a\x3f\xe1\x7c\x92\xd0\x0e\xb7\xf4\x43\xf4\xf4\x59\x44\xb1\x48\x87\x50\x11\x0c\x5b\x96\x9b\x83\xea\x10\x9a\xb8\x8f\x87\x5d\x3e\xe6\x55\x7c\xdb\x86\xd5\x72\xb8\x65\x80\x8d\xb0\xc5\x70\x45\xba\x01\xf7\xcf\x27\x96\x77\x75\xdf\xd2\x3a\xfe\x93\x2f\x9e\x53\xff\xc9\xc7\xd4\x10\x11\x6c\xbc\x1e\x7e\xe3\xb7\xac\x3a\x2a\x08\x50\x0a\xb9\xe0\x72\xe0\xf3\xe5\x49\x10\xa0\x79\x0e\x97\xcb\xbb\xbd\x0e\x33\x99\x31\x12\x2d\x29\xeb\x75\xce\x1c\xe6\xeb\xdd\x3c\x18\xfc\xc1\x09\x00\x7f\x47\x6c\x8c\x30\xef\xc3\x40\x7a\x9a\x38\x18\xb5\xc4\x72\x19\x7f\xe1\x58\x86\x59\x95\x1f\xaf\x38\x4d\xa7\xfb\xf8\xbb\xdd\x3f\x03\x59\x8b\x8b\x49\x70\x1e\x2b\x96\x72\xdd\xb4\x5f\x01\x00\x00\xff\xff\x24\x35\xb8\x50\xdd\x02\x00\x00")

func golangSelectAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangSelectAllTmpl,
		"golang.select-all.tmpl",
	)
}

func golangSelectAllTmpl() (*asset, error) {
	bytes, err := golangSelectAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.select-all.tmpl", size: 733, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangSelectPagedTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x53\xc1\x6a\xdc\x30\x10\x3d\x5b\x5f\xf1\xea\x43\xb1\x83\xed\xa4\xd7\x82\x0b\x69\x77\x9b\x1e\x52\x92\xd6\x81\x1e\x42\x20\x8e\x3d\x36\x4a\x6d\xd9\xc8\x32\x84\x0a\xfd\x7b\x91\x64\x6f\x92\x6d\x9a\xa6\x64\x61\xc1\x1a\xcd\xbc\x79\xef\xcd\x48\xeb\xc3\x03\x96\xbf\xf2\xc7\x80\x62\x7b\xba\xfd\x74\x81\xf3\xe3\x93\xed\x06\x5f\xb7\x17\x5f\xce\x36\xaf\x87\x3d\x38\x34\x86\x69\x8d\x9a\x1a\x2e\x08\xe1\x44\x1d\x55\x2a\x1d\xcb\x96\xea\x10\xc6\xb0\x66\x16\x15\xa2\xe1\xe6\x16\x07\x5a\x23\xdb\xf0\xd2\x26\xc0\x98\xcd\xc7\x18\x5a\x43\x51\x3f\x76\xa5\xda\x2b\x4d\x6d\x59\x88\xcc\x22\xfc\x1d\xe2\xe2\xee\x85\x10\x5a\x83\x44\xed\xc0\xb4\x4e\x9f\x24\xeb\xd2\x53\x51\xf6\x14\x22\x35\x86\x9d\xdb\xe0\x09\x29\xad\x31\x76\xb3\x2c\x3b\xfe\x8b\x90\x15\x4a\xce\xae\xb5\x25\xf2\x79\x16\x55\x31\x37\x0d\xbf\xf3\x3d\x52\xd7\x24\xfd\x77\x97\x89\xb7\xbe\xc9\xf3\xe4\x17\x36\x56\x41\x64\x53\xc7\x52\x96\x3d\xb2\x63\xd9\x4e\x9e\x01\x6f\x76\xa7\x64\xd5\x68\x61\x01\xa0\x52\xc3\x4f\x12\x98\x94\xe4\xa2\x4d\xd0\xf1\x9e\x2b\x70\xa1\x62\x44\xee\x5e\xd2\x34\x77\x0a\x97\x57\xce\xd3\x9d\xae\x64\x29\x1c\x66\xb5\xab\x25\x29\xed\x7f\x90\xf1\x7f\x88\x5c\x05\xa6\xcf\x2a\x74\x4e\x58\x81\xd0\x8c\x05\xd5\x20\x26\xdb\xb6\x57\xf9\xb5\x63\xf5\xed\x14\xc6\x5c\xb3\x60\x94\x34\x96\x92\xea\x04\x92\xc6\xae\xac\xc8\x93\x7a\x9f\x63\xb8\xb9\xcd\x96\xdb\xc8\x16\xc6\x2c\xe0\x8d\xbb\x7c\x93\x43\xf0\x0e\x9a\x05\x81\x3d\xe6\xf8\x21\xcb\x71\x2b\x65\x44\x52\xc6\x2c\x08\x24\xa9\x59\x0a\x16\x18\x16\xd4\xd4\x90\x5c\xa1\xa3\xd8\xf9\x63\x81\xbb\xa1\x2d\x54\xaf\x1c\x70\x82\xc7\x86\x6b\x8d\x52\xb6\xf7\xfe\x43\x6b\x12\xb5\x31\xde\xbe\xc5\xf0\x98\x39\x2c\xde\xac\xe3\xc8\x73\x84\x21\xb4\x8b\x3e\x98\x52\x8e\xf0\x28\x74\x41\xc3\xd8\x42\x77\xd5\x9c\x15\xce\xb5\xe8\xad\x9f\xd8\x4b\x79\x60\x8f\xc8\x13\xb6\x78\x07\xec\x31\x41\x18\x26\x7b\x06\x99\x1d\x77\xbf\x3b\x1f\x70\xf4\x80\xb8\x0d\x93\x88\x3c\xa7\xd8\xea\xf2\x59\xf7\x19\xf7\xf2\xec\x2e\xe5\x68\x7a\x95\x15\xa3\xe4\x42\x2d\x55\x97\xae\x22\x7d\x77\x95\xd9\x59\xbb\xf7\x76\x26\x60\x4c\xbc\x83\xf0\x9b\x6c\x40\xdd\x44\x7f\x98\xe6\x51\xfd\xf7\x6a\x9d\x5f\x6c\xa7\x6a\xf5\xe5\xbb\x3b\x4e\x8f\x57\x3b\xb1\xa2\xd9\xde\x9b\x65\xbf\x03\x00\x00\xff\xff\xb9\x78\xd4\xc4\x69\x05\x00\x00")

func golangSelectPagedTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangSelectPagedTmpl,
		"golang.select-paged.tmpl",
	)
}

func golangSelectPagedTmpl() (*asset, error) {
	bytes, err := golangSelectPagedTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.select-paged.tmpl", size: 1385, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangSelectTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x91\xb1\x6e\xe3\x30\x0c\x86\x67\xf1\x29\x78\x99\x6c\x20\xf1\x03\x1c\xe0\xe1\x86\xe0\x96\xa2\x40\x92\xa1\xa3\xa3\xc4\xb4\xa1\xc2\x91\x5c\x5a\x46\x9a\x12\x7c\xf7\xc2\x4a\x52\x07\x1d\x3a\x74\xd0\x42\x4a\xdf\xc7\x9f\x12\x59\x61\x4d\x8d\xf3\x84\x8b\xc1\xb5\xde\xc6\x91\x69\x81\x2b\x55\xf8\x4f\x51\x04\x8b\xdd\xd8\x34\xee\x1d\x55\x33\x11\xec\x2d\xdb\x13\x16\xff\xb8\x1d\x50\x35\xc7\x87\xda\x36\x9c\x51\x75\x89\xc4\x3c\x9d\xc0\x39\x4c\x70\xf2\x75\xa2\xc1\xa3\xe9\x10\xea\xcb\x02\x55\x05\xcc\x31\xf8\x21\x62\x55\x0d\xf1\x14\xcb\x7d\x12\x6e\x9e\x50\x75\x0f\xa6\xaa\x7a\xa6\xde\x32\xd5\x4b\xac\x2a\xa6\xbe\xb3\x47\xba\x0a\xfe\x96\x18\x0e\xaf\xc5\xad\x9f\x5d\x9f\xe7\x60\x5c\x93\xda\x7f\x4a\xf4\xae\x43\x01\x63\x98\xe2\xc8\x1e\x45\xf0\x83\x38\xcc\x63\xbe\xb0\xed\xd7\xcc\x19\x31\xe7\x60\x14\x4c\x4d\x0d\xf1\xec\xc9\x72\x30\x93\xa2\x0b\xed\x2e\x9e\xe2\x4d\xb1\x9c\x40\x96\xdb\x79\x05\x00\x46\x04\x9d\x77\xf1\xce\x06\x44\x4c\x53\x94\x38\x27\x28\x36\x23\xf1\x65\x1b\xce\xd9\x77\x40\xb1\x3b\x5a\x9f\xaa\x75\xcd\xa1\xc1\xac\xe9\x6c\x8c\xe4\x13\x2e\x4f\x8a\x7b\xac\xb2\xc4\xe1\xad\x2b\xd6\xcc\xcf\x61\x1b\xce\xc3\x8f\x01\xbd\xeb\x52\xae\xdf\xaf\x64\xca\x31\xdf\x4d\x43\x3f\xc2\x15\x44\xbe\xbe\xf7\x33\x00\x00\xff\xff\x09\xf8\x5a\x90\x48\x02\x00\x00")

func golangSelectTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangSelectTmpl,
		"golang.select.tmpl",
	)
}

func golangSelectTmpl() (*asset, error) {
	bytes, err := golangSelectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.select.tmpl", size: 584, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangUpdateTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x55\x4d\x6f\xdb\x38\x10\x3d\x4b\xbf\x62\x56\x27\x09\xb1\x89\xc5\x1e\x03\xf8\x10\x14\x59\x20\x40\x11\xb4\x4d\xbb\x7b\x28\x0a\x85\x31\x47\x02\xb3\x32\x29\x0f\xa9\x7c\x40\xe0\x7f\x5f\x0c\x29\xbb\x52\xe2\x2c\xb6\x39\xf8\x40\x73\xf8\xe6\xbd\x37\x1f\x1a\xc7\x35\x28\x6c\xb4\x41\x28\x9c\x6e\x8d\xf4\x03\x61\x01\xeb\x10\xf2\x6f\xbd\x92\x1e\xc7\x11\xc4\xcd\xd0\x34\xfa\x09\x42\x28\xc7\x11\x7a\x49\x72\x07\xe2\x82\x5a\x07\x21\xac\x60\x88\x61\x10\xe3\x3c\x0d\x5b\x2f\xd2\xc3\x74\xb8\x96\x3b\x84\x10\x2a\x98\x3d\xfd\x82\x7e\x20\x13\x1f\x23\x11\xff\x2c\x55\x39\x33\x41\xa3\x62\xea\x7c\x4e\xeb\xce\xaa\xe7\xc8\x68\xcc\x33\xfe\x5f\x37\x20\xae\x11\x95\xbb\xb6\x8f\x10\x42\x9e\xd5\xb5\xb1\x8f\x70\xbe\x81\x6b\xfb\x58\x56\xe2\xdb\xd7\x0f\x65\xc5\xa1\x47\xb8\x6c\x6b\x8d\xf3\x50\xd7\xce\xef\x7c\xdd\x13\x36\xfa\x69\x73\x1b\x19\x7f\xfe\xf8\x29\x1e\x21\x84\xdb\x17\x71\x2e\xaa\x3e\xc6\x1d\x4d\xb8\xcd\xf3\xec\x41\x12\xec\x1d\x7c\xff\x71\xf7\xec\x31\x1d\x1f\x64\x37\x20\xff\xa5\x8d\x47\x6a\xe4\x16\xc7\x90\x47\x1a\x4c\xf8\x93\x75\xda\x6b\x6b\x64\x77\x41\xed\xb0\x43\xe3\x5d\xe4\x7e\xcf\xbc\xc7\x11\x3a\x34\x47\x4f\x19\x2f\x62\x6d\x40\xf6\x3d\x1a\x55\xa6\xf3\x8a\x03\x25\xb5\xc7\xc0\xa5\xca\x3c\x93\x4a\x1d\xd0\x19\xb6\x19\xcc\xb6\x34\x5c\x00\xe7\x49\x9b\xb6\x82\x31\xcf\xb2\xfd\x0c\x77\xef\x56\xc0\x01\x42\x88\x2a\xcf\x8e\xee\xbe\x45\x36\xbb\x3f\x3b\x3b\x81\x50\x40\x94\x20\x0e\xc1\x47\x47\x8b\x09\xf7\xe5\x03\xe7\x69\x6b\xcd\x83\xb8\xf2\x56\x96\xf7\xd5\x1b\x51\xc5\x0a\x8a\x19\x31\xec\x1c\x26\x16\xff\x3b\xff\x0b\x00\xa3\xe2\xfb\xa9\x2a\x24\x4d\x8b\xcb\x9e\x95\x77\x1d\xfe\xa9\xb1\x53\x49\xae\x6e\xa6\xe6\x16\x8c\x3e\x75\x32\xfc\xb6\x01\xa3\xbb\x68\xe5\xcc\xef\xb2\xe0\x98\x0f\xb6\x1b\x76\xdc\xd9\x05\x27\x7d\xab\x8a\xaf\x41\x45\xbc\x2a\xab\x8a\xd9\x1d\x6a\x1a\x96\x44\x2f\x06\x6f\x67\xe4\x5e\xe5\x9e\xa0\x38\xf3\x7f\xb4\x8f\xb8\x32\xda\xff\x25\xbb\x45\xf7\x84\x9f\x8d\x6a\xac\x7f\x95\x4a\x37\xdc\x9e\xe5\xde\x55\xb0\xd9\xc0\xef\x51\x3a\xa5\x19\x36\xba\x5b\xc1\xdf\x24\xfb\x4b\xa2\xb2\xd9\x79\x71\xc9\xc3\xdc\x94\x85\x41\x54\xe0\xed\x61\x3b\x48\x0f\x1d\x4a\xe7\xc1\x1a\x84\x86\xa1\x8b\xd3\x62\x0f\x14\x4e\xb5\xe0\xfa\x5d\xa3\x11\x91\xd3\x48\xf3\x50\x2c\x96\x00\x9c\x4d\xa3\x51\xee\xdd\xf7\xf3\x49\xe4\xfa\x8f\x1f\x15\x9c\x2d\xb7\x00\x23\xf4\x84\xbd\x24\x54\x2b\xa8\x6b\xc2\xbe\x93\x5b\x4c\x0b\xec\x7c\x03\xf6\xee\x5e\x4c\xf7\x65\x7a\x58\x45\xdf\xf8\x7a\xd6\x30\xa7\x5c\x43\xa2\xe4\x84\xc2\x06\xe9\x27\x36\xef\x30\x86\xed\x6c\x7b\xe3\x77\x7e\x82\x3d\x21\xf4\xb8\x63\x6e\x86\xbe\xb7\xe4\x5d\xda\xaf\xda\xb4\xb1\x7a\x7c\x69\xb4\x9f\xad\xdd\x3c\x63\x5a\x6c\xc5\x41\x92\xf8\x3c\x20\x3d\x7f\xb1\x8f\x93\x9d\x95\xb8\xd9\x4a\xc3\x2b\x5b\x2a\x45\xb6\x81\xb2\xe9\xa4\xf7\xbc\xa3\x12\x4a\x95\x2c\xfe\x45\x85\xd3\xe5\x41\xc1\xec\x3b\x60\x74\x97\x0a\xc6\x43\xbe\x4e\x4b\x9d\xb8\xac\x93\xbf\x33\xaa\x97\x4f\xb8\x3d\xd0\xfc\x65\x06\x75\xdd\xff\x33\x03\x25\x74\xe2\xa3\x74\xfe\xca\x38\x24\x7f\xa5\xca\x77\x6b\xe2\x4a\xb5\xe8\x19\x8c\xa7\x2c\x49\x13\x5f\x9f\x7b\x9e\xc9\x92\xd3\x2e\x97\x75\x58\x7c\xef\xfe\x0d\x00\x00\xff\xff\xba\x0a\x0f\x45\x86\x07\x00\x00")

func golangUpdateTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangUpdateTmpl,
		"golang.update.tmpl",
	)
}

func golangUpdateTmpl() (*asset, error) {
	bytes, err := golangUpdateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.update.tmpl", size: 1926, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x4d\x8f\xda\x38\x18\x3e\xc3\xaf\x78\x55\x71\x60\xd0\x90\xde\x77\x55\x8d\x32\xe0\xe9\xa6\x0d\x0e\x93\x98\xad\xe6\x98\x12\x53\xbc\x4a\x1c\x36\x18\x8d\x90\xf1\x7f\x5f\xd9\xce\x27\x4d\xd8\xe9\x6a\x0e\x7b\x73\xec\xc7\xcf\xfb\xbc\x9f\x8e\x94\x1f\x67\xb0\x0e\x22\xf2\x39\x44\xd1\xb3\x0f\x11\x71\x09\x5a\x21\x4c\x80\xa0\xd5\xda\x77\x09\x8a\x00\x66\x1f\x95\x1a\x8f\xa5\x9c\x43\x42\x77\x8c\x53\xf8\x70\xdc\xee\x69\x16\x7f\x80\xb9\x52\x66\xbf\x88\xf9\x0f\x0a\x0e\x89\xbf\xa7\xf4\x08\x4a\x8d\x17\x21\x72\x09\x02\xe2\x3e\xfa\x08\xa4\x04\x07\xc7\x19\x05\xa5\x60\xda\xc2\x4f\xd8\x3d\x4c\xb6\x79\x0a\xbf\x7d\x02\x67\x91\xa7\xa7\x8c\x9b\xcb\x52\xb2\x1d\x4c\x98\x52\xf7\x52\x52\x9e\x28\x35\x92\x12\x5e\x99\xd8\x5b\xb4\x36\x3a\x6a\x73\xea\x35\x39\x1f\x68\x75\x32\x07\xb6\x03\x07\xe7\x02\x9f\xd2\x54\x03\x70\x40\x00\x6f\x7c\x1f\xf4\x19\xe5\x49\x17\x18\xd2\x1d\x2d\x28\xdf\x1a\xae\x10\x3d\xa1\x10\xe1\x05\x8a\x0c\x6d\x7d\x66\x7d\x03\xa5\xa6\xdd\x6d\x2b\x1b\x94\xba\x83\x00\xc3\x12\xf9\x88\xa0\xab\x9b\x01\x5f\xd2\x94\x0a\x7d\xb9\x6d\x7f\x78\x6d\x54\xad\x0b\x96\xc5\xc5\xf9\x2b\x3d\xeb\x90\xdc\x8f\xd6\xa1\xb7\x72\xc3\x17\xf8\x8a\x5e\x60\x3a\x10\xc3\xce\x9d\x26\x8a\x50\x86\x51\x4a\x0b\x35\x2b\x6d\x4e\xa9\xbb\x6b\xd3\x65\x26\x37\x9c\xfd\x7d\xa2\xd6\xf2\x06\x7b\xcf\x1b\x34\x68\xf4\x97\x4d\x29\x35\xbe\xfb\x7d\x5c\xef\xb7\x56\x9d\x1a\x4b\x72\xc1\xe3\x8c\x56\x45\x06\x75\x06\x1c\xfd\x51\xc7\xbd\xe3\x40\x87\x20\xa5\x3b\xf1\x57\xce\xb8\x65\xf0\xd1\x13\x81\x2f\x81\x87\x6d\x76\xd8\x8f\xbd\xa8\x19\x75\xea\xa4\x04\x41\xb3\x43\x1a\x8b\xb6\x6d\xc7\xa7\x3b\xa1\x11\x9f\x86\x00\x86\xe9\xa6\x8e\x6d\xce\x13\x26\x58\xce\x9b\x7e\xd1\x09\xb6\x1e\x2c\xb2\x43\x5d\xd0\x7d\xf4\x35\xaa\x56\xd2\x78\xaf\x77\x83\x03\x2d\x62\x91\x17\xfa\xe4\xe1\xa7\x9a\xea\xd8\x29\x43\xf6\x26\x6b\x76\xd1\x6f\xb3\x3c\x6b\x5b\x7e\x23\x5d\x6f\xac\xba\x3a\xbd\xb7\x08\xf4\x1a\x65\x1e\xd6\x85\xd9\xc2\x1e\x69\x4a\xb7\xa2\x0d\xf5\x78\x4f\xa1\x0f\xe4\xea\x75\x4f\x0b\x7a\x3d\xd7\xca\x72\xe7\x89\xad\xf7\x4a\x1f\xdb\x01\xcf\x05\x4c\x18\x28\xf5\xed\x0f\x14\x9a\xbe\xa7\xe9\xd1\x54\x94\x8b\x97\x50\x17\x76\x47\x60\xab\x1c\x2c\xe9\xad\x61\xd0\x9d\xba\xc6\xb5\xf9\xeb\x3e\x16\x75\x57\x4c\x84\xa9\x61\x2d\xac\xaa\xe6\x2a\xa2\x29\xe5\xe0\x7c\xdb\xc7\xa2\x56\xdc\x72\x47\x93\x98\x5b\x06\x60\x24\x9a\x1e\x06\xdb\xc4\x8d\xf0\xd2\x80\x6d\x3b\x7b\xad\xd5\xd4\x56\xac\xf6\xb9\xb2\xd1\xe0\x67\xbf\xe2\x95\x75\x28\x42\x3e\x5a\x10\xe8\x49\x68\xe9\xb5\xa3\x14\x3c\x85\xc1\x0a\xda\x03\xc1\x8e\xf2\x72\x72\xe9\xc2\xf8\x92\x33\xfb\x92\x8c\xba\x75\xd4\x4c\x04\xa7\xbe\xf6\xd3\x73\xb0\xa8\xf2\xd3\xc7\x50\xd6\xc7\x35\xa8\x97\x28\x28\x12\x5a\x3c\x9e\x2d\x4b\x10\x2e\x51\x08\x8f\x2f\x43\xad\x52\x82\x9b\xb9\x06\x6e\xb4\x18\x20\xf6\x59\xc6\x84\xa5\xf5\xbd\x95\x47\xe0\xa1\x0b\xbc\x31\x89\x4e\xbc\x1b\x69\xb3\x33\x9d\xdd\xfd\xdf\x83\xfa\x6f\x3d\xf1\x3d\x3e\xb6\xda\xb6\x17\x99\x98\x47\xd8\x82\xca\x77\x7a\xc0\xe9\x7e\xc1\xef\xa3\x97\xf1\x23\x2d\xca\x1c\x78\x38\x42\x21\x01\x0f\x93\x60\x50\x85\xfd\x29\x32\xb1\x1c\x0d\xbd\xc0\xcd\xaf\xd3\x70\x17\x5f\x3f\xc6\xf0\xa7\xeb\x6f\x50\x34\x35\xae\xfd\x27\xd6\x87\xd6\xcb\x5e\xfb\x6e\xfe\xa0\xc8\x26\xc4\x1e\xfe\x0c\xb3\xe1\x30\x9c\x0e\x49\x5c\x25\x63\xb3\x5e\xba\xe5\x4f\x53\xfd\x20\x47\x88\xc0\xe5\x72\x79\x8e\x2e\x97\xcb\xbb\x24\xe5\x86\xb0\x7f\x02\x00\x00\xff\xff\x5f\xa3\x67\x2b\x04\x0b\x00\x00")

func postgresTmplBytes() ([]byte, error) {
	return bindataRead(
		_postgresTmpl,
		"postgres.tmpl",
	)
}

func postgresTmpl() (*asset, error) {
	bytes, err := postgresTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.tmpl", size: 2820, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlite3Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x4d\x6f\xea\x38\x14\x5d\xc3\xaf\xb8\x7a\x62\x01\xa8\xe4\x2d\x66\x37\xa3\xa7\x2a\x05\x57\x93\xd7\x90\xd0\xc4\x4c\xd5\x65\x4a\x4c\xf1\x28\x71\x98\x60\x54\x21\xe3\xff\x3e\xb2\x9d\x4f\x9a\x30\xed\xa8\x8b\xb7\x73\xec\xe3\x73\xcf\xfd\x74\x84\xf8\x3e\x85\xf0\xd1\x75\x30\xfa\x0d\x42\x6c\x63\xb4\x44\x1e\x06\x8c\x96\x2b\xd7\xc6\x28\x04\x98\x7e\x97\x72\x38\x14\x62\x06\x31\xd9\x52\x46\xe0\xdb\x61\xb3\x23\x69\xf4\x0d\x66\x52\xea\xfd\x3c\x62\xaf\x04\x2c\x1c\xbd\x24\xe4\x00\x52\x0e\xe7\x01\xb2\x31\x02\x6c\xdf\xb9\x08\x84\x00\xcb\x8b\x52\x02\x52\xc2\xb8\x81\x1f\xd1\x1b\x18\x6d\xb2\x04\x7e\xff\x01\xd6\x3c\x4b\x8e\x29\xd3\x97\x85\xa0\x5b\x18\x51\x29\x6f\x84\x20\x2c\x96\x72\x20\x04\xbc\x51\xbe\x33\x68\x65\x74\xd0\xe4\x54\x6b\x7c\xda\x93\xf2\x64\x06\x74\x0b\x96\x97\x71\xef\x98\x24\x0a\xe0\xf9\x18\xbc\xb5\xeb\x82\x3a\x23\x2c\x6e\x03\x03\xb2\x25\x39\x61\x1b\xcd\x15\xa0\x7b\x14\x20\x6f\x8e\x42\x4d\x5b\x9d\x19\xdf\x40\xca\x71\x7b\xdb\xc8\x06\x29\x27\xe0\x7b\xb0\x40\x2e\xc2\xe8\xe2\xa6\xcf\x16\x24\x21\x5c\x5d\x6e\xda\xef\x5f\x6b\x55\xab\x9c\xa6\x51\x7e\x7a\x20\x27\x15\x92\x9b\xc1\x2a\x70\x96\x76\xf0\x0c\x0f\xe8\x19\xc6\x3d\x31\x6c\xdd\xa9\xa3\x08\x45\x18\x85\x30\x50\xbd\x52\xe6\xa4\x9c\x5c\x9a\x2e\x32\xb9\x66\xf4\x9f\x23\x31\x96\xd7\x9e\xf3\xb8\x46\xbd\x46\x3f\x6d\x4a\xca\xe1\xe4\x8f\x61\xb5\xdf\x58\xb5\x6a\x2c\xce\x38\x8b\x52\x52\x16\x19\x54\x19\xb0\xd4\x47\x15\xf7\x96\x03\x2d\x82\x84\x6c\xf9\xdf\x19\x65\x86\xc1\x45\xf7\x18\x7e\xfa\x8e\x67\xb2\x43\x5f\x77\xbc\x62\x54\xa9\x13\x02\x38\x49\xf7\x49\xc4\x9b\xb6\x2d\x97\x6c\xb9\x42\xfc\xe8\x03\x68\xa6\xab\x3a\x36\x19\x8b\x29\xa7\x19\xab\xfb\x45\x25\xd8\x78\x30\x4f\xf7\x55\x41\x77\xd1\x57\xa8\x4a\x49\xed\xbd\xda\xf5\xf7\x24\x8f\x78\x96\xab\x93\xdb\x77\x35\xd5\xb2\x53\x84\xec\x43\xd6\xcc\xa2\xdb\x66\x71\xd6\xb4\xfc\x41\xba\xce\x58\xb5\x75\x3a\x1f\x11\xe8\xd4\xca\x1c\x4f\x15\x66\x03\x7b\x20\x09\xd9\xf0\x26\xd4\x61\x1d\x85\xde\x93\xab\xb7\x1d\xc9\xc9\xe5\x5c\x2b\xca\x9d\xc5\xa6\xde\x4b\x7d\x74\x0b\x2c\xe3\x30\xa2\x20\xe5\xd3\x9f\x28\xd0\x7d\x4f\x92\x83\xae\x28\xdb\x5b\x40\x55\xd8\x2d\x81\x8d\x72\x30\xa4\xd7\x86\x41\x7b\xea\x6a\xd7\x66\x6f\xbb\x88\x57\x5d\x31\xe2\xba\x86\x95\xb0\xb2\x9a\xcb\x88\x26\x84\x81\xf5\xb4\x8b\x78\xa5\xb8\xe1\x8e\x22\xd1\xb7\x34\x40\x4b\xd4\x3d\x0c\xa6\x89\x6b\xe1\x85\x01\xd3\x76\xe6\x5a\xa3\xa9\x8d\x58\xe5\x73\x69\xa3\xc6\x4f\x3f\xe3\x95\x71\x28\x44\x2e\x9a\x63\xe8\x48\x68\xe1\xb5\x25\x25\xdc\x07\xfe\x12\x9a\x03\xc1\x8c\xf2\x62\x72\xa9\xc2\xf8\x99\x51\xf3\x92\x0c\xda\x75\x54\x4f\x04\xab\xba\xf6\xee\x39\x98\x97\xf9\xe9\x62\x28\xea\xe3\x12\xd4\x49\xe4\xe7\x31\xc9\xef\x4e\x86\xc5\x0f\x16\x28\x80\xbb\xe7\xbe\x56\x29\xc0\xf5\x5c\x03\x3b\x9c\xf7\x10\xbb\x34\xa5\xdc\xd0\xba\xce\xd2\xc1\x70\xdb\x06\x5e\x99\x44\x47\xd6\x8e\xb4\xde\x19\x4f\x27\xbf\x7a\x50\xff\xab\x27\x5e\xa2\x43\xa3\x6d\x3b\x91\xb1\x7e\x84\x0d\xa8\x78\xa7\x7b\x9c\xee\x16\xfc\x35\x7a\x29\x3b\x90\xbc\xc8\x81\xe3\x85\x28\xc0\xe0\x78\xd8\xef\x55\x61\x7e\x8a\x74\x2c\x07\x7d\x2f\x70\xfd\xeb\xd4\xdf\xc5\x97\x8f\x31\xfc\x65\xbb\x6b\x14\x8e\xb5\x6b\xff\x8b\xf5\xb6\xf1\xb2\x57\xbe\x5f\x73\xfd\xb8\x8f\xa3\x32\x01\xeb\xd5\xc2\x2e\x7e\x94\xaa\x47\x38\x44\x18\xce\xe7\xf3\x63\x78\x3e\x9f\xbf\x24\x11\x17\x62\xfe\x0d\x00\x00\xff\xff\x98\xb8\x02\x49\xe9\x0a\x00\x00")

func sqlite3TmplBytes() ([]byte, error) {
	return bindataRead(
		_sqlite3Tmpl,
		"sqlite3.tmpl",
	)
}

func sqlite3Tmpl() (*asset, error) {
	bytes, err := sqlite3TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sqlite3.tmpl", size: 2793, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"golang.count.tmpl": golangCountTmpl,
	"golang.delete-all.tmpl": golangDeleteAllTmpl,
	"golang.delete.tmpl": golangDeleteTmpl,
	"golang.footer.tmpl": golangFooterTmpl,
	"golang.get-last.tmpl": golangGetLastTmpl,
	"golang.has.tmpl": golangHasTmpl,
	"golang.header.tmpl": golangHeaderTmpl,
	"golang.insert.tmpl": golangInsertTmpl,
	"golang.lru.tmpl": golangLruTmpl,
	"golang.misc.tmpl": golangMiscTmpl,
	"golang.select-all.tmpl": golangSelectAllTmpl,
	"golang.select-paged.tmpl": golangSelectPagedTmpl,
	"golang.select.tmpl": golangSelectTmpl,
	"golang.update.tmpl": golangUpdateTmpl,
	"postgres.tmpl": postgresTmpl,
	"sqlite3.tmpl": sqlite3Tmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"golang.count.tmpl": &bintree{golangCountTmpl, map[string]*bintree{}},
	"golang.delete-all.tmpl": &bintree{golangDeleteAllTmpl, map[string]*bintree{}},
	"golang.delete.tmpl": &bintree{golangDeleteTmpl, map[string]*bintree{}},
	"golang.footer.tmpl": &bintree{golangFooterTmpl, map[string]*bintree{}},
	"golang.get-last.tmpl": &bintree{golangGetLastTmpl, map[string]*bintree{}},
	"golang.has.tmpl": &bintree{golangHasTmpl, map[string]*bintree{}},
	"golang.header.tmpl": &bintree{golangHeaderTmpl, map[string]*bintree{}},
	"golang.insert.tmpl": &bintree{golangInsertTmpl, map[string]*bintree{}},
	"golang.lru.tmpl": &bintree{golangLruTmpl, map[string]*bintree{}},
	"golang.misc.tmpl": &bintree{golangMiscTmpl, map[string]*bintree{}},
	"golang.select-all.tmpl": &bintree{golangSelectAllTmpl, map[string]*bintree{}},
	"golang.select-paged.tmpl": &bintree{golangSelectPagedTmpl, map[string]*bintree{}},
	"golang.select.tmpl": &bintree{golangSelectTmpl, map[string]*bintree{}},
	"golang.update.tmpl": &bintree{golangUpdateTmpl, map[string]*bintree{}},
	"postgres.tmpl": &bintree{postgresTmpl, map[string]*bintree{}},
	"sqlite3.tmpl": &bintree{sqlite3Tmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

