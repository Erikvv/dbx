// Code generated by go-bindata.
// sources:
// golang.delete-all.tmpl
// golang.delete.tmpl
// golang.footer.tmpl
// golang.header.tmpl
// golang.insert.tmpl
// golang.select.tmpl
// golang.update.tmpl
// postgres.tmpl
// sqlite3.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _golangDeleteAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\x4d\x6b\xb3\x40\x10\xc7\xcf\xee\xa7\x98\x27\xa7\xf5\xc1\x48\x0f\xa5\x87\x82\x87\x94\xe4\xd6\x4b\x9b\x42\x8f\x66\xa3\xb3\x61\x83\xee\xca\xb8\xd2\x94\x65\xbe\x7b\x59\x95\xbc\x50\xe8\x21\x82\x17\xff\xcc\xef\x37\x2f\x86\xb0\x84\x1a\xb5\xb1\x08\x8b\xde\x1c\xac\xf2\x03\xe1\x02\x96\xcc\x62\x8d\x0d\x7a\x0c\x01\xf2\xed\xa0\xb5\x39\x01\xb3\x0c\x01\x3a\x45\xaa\xed\x21\x5f\xd1\xa1\x07\xe6\x14\x64\xe5\x06\xeb\xc1\x58\xff\xf4\x98\x01\x12\xc5\xd7\x51\x2a\x22\x1b\x6d\x3d\xc2\xc4\xb5\x68\xef\xea\xef\xd1\x11\x44\x52\x39\xdb\x7b\x28\xcb\xde\xb7\xbe\xd8\x8d\xb6\xb7\x57\x60\xde\x89\xa4\x2c\x3b\xc2\x4e\x11\xd6\x19\x94\x25\x61\xd7\xa8\x0a\x27\xc3\x73\x01\x6e\x7f\xcc\xe7\x5c\x4e\xe5\xa9\x48\x8c\x1e\xe3\x7f\x05\x58\xd3\x40\x10\x30\x3f\x84\x7e\x20\x0b\x0f\x19\x7c\x92\xea\x36\x44\x12\x89\x52\x91\xb0\x48\x6a\xd4\x48\x17\xbe\x4c\x45\x12\xd1\x8d\x3b\x6c\x7d\xeb\x67\x74\x06\x21\x80\x8a\x13\x9f\xe7\x16\x23\x3c\xd6\xf5\xe7\x9e\x2e\x1d\xe7\x9b\x13\x56\xf2\x77\xd1\x3d\x1d\x8e\xfb\x9d\x1c\xc5\x24\xcc\xdf\xdd\x57\xbf\xd2\x1a\x2b\x8f\xb5\xbc\x8b\x2a\xae\xe2\x59\x60\x4d\x23\xf8\xf6\x6a\x7a\xb0\x15\x48\xb7\x3f\xc2\xff\x78\x9a\xb5\x51\x0d\x56\x1e\x98\xd7\x2f\x69\x5c\x89\xc7\xb6\x6b\x94\xbf\xfd\x79\x72\x60\xbe\x0d\xa7\x83\xc7\xef\x7f\x20\x3f\x4e\x77\x22\x7f\x02\x00\x00\xff\xff\x32\xc6\xc5\x4b\xc4\x02\x00\x00")

func golangDeleteAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteAllTmpl,
		"golang.delete-all.tmpl",
	)
}

func golangDeleteAllTmpl() (*asset, error) {
	bytes, err := golangDeleteAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete-all.tmpl", size: 708, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeleteTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\x4f\x6b\xeb\x30\x0c\xc0\xcf\xf1\xa7\xd0\xeb\xc9\x79\xa4\xe1\x9d\x1f\x74\xd0\xd1\xde\x76\xd9\x3a\xd8\xd1\x75\x62\xb9\xa4\x38\x76\x90\x1d\xd6\x61\xfc\xdd\x87\xd3\xd0\x3f\x0c\x76\x68\x20\x97\x48\xfa\xfd\xa4\x48\x31\x2e\x41\xa1\xee\x2c\xc2\xc2\x77\x07\x2b\xc3\x48\xb8\x80\x65\x4a\x6c\x83\x06\x03\xc6\x08\xf5\x6e\xd4\xba\x3b\x41\x4a\x3c\x46\x18\x24\xc9\xde\x43\xbd\xa6\x83\x87\x94\x4a\xe0\x6a\x4a\x54\xd0\x38\x67\x2a\x40\xa2\xfc\x3a\x2a\x59\x86\xa3\x55\x13\x8d\xdd\x9a\x1a\xa7\xbe\x26\x49\x64\x45\xeb\xac\x0f\x20\x84\x0f\x7d\x58\xed\x27\xdd\xeb\x0b\xa4\xb4\x67\x85\x10\x03\xe1\x20\x09\x55\x05\x42\x10\x0e\x46\xb6\x78\x36\xfc\x5f\x81\x6b\x8e\xf5\x1c\xe7\xe7\xf2\x92\x15\x9d\x9e\xc2\x7f\x56\x60\x3b\x03\x91\xc1\xfc\x10\x86\x91\x2c\x68\x69\x3c\x56\xf0\x41\x72\xd8\x12\x71\x24\x2a\x59\x91\x58\xa1\x50\x23\x5d\x1d\xbc\x64\x45\xc6\x1b\x77\xd8\x85\x3e\xcc\xf8\x0a\x62\x04\x99\xc7\xbe\x0c\xcf\x26\x41\xae\xf3\x97\xbe\xae\x5d\xd7\xdb\x13\xb6\xfc\x67\xd1\xa3\x5d\x0a\xd1\xba\xd1\x86\x1b\x13\xa1\xaf\xdf\xdc\xa7\x5f\x6b\x8d\x6d\x40\xc5\x1f\x86\xb3\x9b\x94\xd9\x03\x4f\xf0\xaf\xca\x10\x96\xee\x57\xa9\x47\xdb\x02\x77\xcd\x11\xfe\xe6\x7d\x6d\x3a\x69\xb0\x0d\x90\xd2\xe6\xb9\xcc\xff\x28\x60\x3f\x18\x19\xee\x4f\xaa\x86\x94\xee\x83\xe7\x2b\xc8\xdf\x7f\x41\xbe\x9f\x1e\x44\x7e\x07\x00\x00\xff\xff\xab\x20\xe0\x80\xda\x02\x00\x00")

func golangDeleteTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteTmpl,
		"golang.delete.tmpl",
	)
}

func golangDeleteTmpl() (*asset, error) {
	bytes, err := golangDeleteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete.tmpl", size: 730, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8e\x41\x0a\xc2\x30\x10\x45\xd7\x9d\x53\xfc\x65\x2b\x34\xc7\x70\xe7\x4a\x2f\x90\x26\x63\x1a\xb0\xa3\x26\x11\x22\x61\xee\x2e\x01\xbb\xeb\xee\xc1\xe7\x3f\x1e\x51\xf9\xbe\x18\x1b\x97\xf5\xe9\x33\xa2\x14\x4e\x77\xeb\x18\x8d\x5a\x9b\x91\xac\x04\x86\x39\x7f\xc4\x65\xa8\x12\x00\xb4\x06\xd3\xb9\xef\x2c\x1e\xb3\x2a\x00\xd2\xbf\xca\x2f\x97\x03\x59\x3f\x5e\xdd\xca\x9b\x1d\x27\xe4\x92\xa2\x04\x1a\x16\x0e\x51\xc6\x52\x71\xca\xef\x47\x35\xb7\x3a\xed\x21\x34\xec\xa0\xf4\x0b\x00\x00\xff\xff\x76\x16\xd1\x5b\xa3\x00\x00\x00")

func golangFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangFooterTmpl,
		"golang.footer.tmpl",
	)
}

func golangFooterTmpl() (*asset, error) {
	bytes, err := golangFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.footer.tmpl", size: 163, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\xdd\x6f\xdb\x46\x12\x7f\xe6\xfe\x15\x53\xa1\x31\x48\x47\xa6\xf2\x70\xb8\x07\xb5\xbe\x43\x14\xf9\x8a\x00\xa9\x9d\x73\x14\x1c\x0e\x6d\x91\xae\xc8\x91\xbc\xd1\x72\x57\x59\x2e\x65\xa9\x3a\xfe\xef\x87\xd9\xe5\xc7\xea\xc3\xbe\x14\x87\x02\xcd\x43\x24\x2e\x67\x67\x7e\x33\xf3\x9b\x0f\x6b\x34\x82\xd7\x1f\x67\x77\x3f\xdc\xdc\xde\xdc\xbf\x9e\xdd\x4c\x61\xf2\x6f\x58\xea\xf5\x6a\x99\x0a\x35\x2a\xd7\x3c\xc3\x42\xab\x15\xee\x96\x7a\x94\xcf\xb7\xe9\xe6\x15\x1b\x8d\x60\x7a\x07\xb7\x77\x33\xb8\x99\xbe\x9d\xa5\x8c\xad\x79\xb6\xe2\x4b\x84\xfd\x1e\xd2\xf7\xcd\xf7\xba\x66\x4c\x14\x6b\x6d\x2c\xc4\x2c\x1a\xe4\xdc\xf2\x39\x2f\x71\x54\x7e\x91\x03\x16\x0d\x16\x85\x1d\xb0\x68\x34\x1a\x94\xd6\x08\xb5\x2c\xe9\xac\xdc\xa9\x8c\x3e\xad\x28\x70\xc0\x58\x34\x58\x0a\xfb\x50\xcd\xd3\x4c\x17\xa3\xcf\x85\x16\x46\x2b\xba\xbe\x1d\xb0\xfd\xfe\x0a\x0c\x57\x4b\x84\xf4\x66\x6b\x0d\x7f\xeb\x0c\x95\x64\x14\x00\x1c\x8e\xd7\xf4\x04\x83\x43\x48\xfe\x26\xaa\x9c\x24\x13\x46\x9e\x48\x53\x81\x28\xd6\x12\x0b\x54\x96\x5b\xa1\x15\x2c\xb4\x81\xb5\xc1\x35\x37\x98\x43\x69\xb9\x75\xef\x4a\x66\x77\x6b\x74\xf2\xa5\x35\x55\x66\x61\xcf\xa2\xa2\x02\xff\x8f\xb0\xa7\x3f\x56\x16\xb7\x2c\xca\xe7\xcd\xe1\x25\xa1\x4d\xa7\x13\x16\x65\x7c\xcd\x33\x61\x77\x20\x94\x65\x91\xd1\xda\x3a\x01\x54\xd6\xec\x58\x24\x54\x8e\x5b\x7a\x2e\xf8\xfa\x27\x1f\x90\x5f\x2e\xfd\xbb\xda\x81\x54\xf8\xf8\xee\xfe\x23\x18\xb4\x95\x51\x25\x70\x05\x42\x09\x2b\xb8\x14\xbf\x61\x4e\x90\x52\xb6\xa8\x54\xd6\xc8\xc5\xf9\xbc\x33\x3d\x84\xd0\x74\x02\x97\x84\x7f\xcf\x22\x09\xe3\x6b\xb8\x90\xa6\xda\xb3\x28\xca\xe7\xe3\x06\x71\x3e\x1f\xb2\xa8\x43\x3b\xee\x2e\xd3\xa9\x43\x39\xf6\x30\x57\x18\x9f\x60\x4d\x86\x2c\xaa\x59\x24\x53\x72\x2f\x55\xb8\xb5\x40\x26\xdc\x63\x77\xbc\x36\xb8\x09\x8f\xbd\x4b\x20\x1b\x47\x85\x2a\xd1\xd8\xe6\xa3\x04\x04\xbe\xb0\x68\x80\xdb\x21\x08\x95\x19\x9f\x08\x90\xa9\x44\xd5\xb8\x1c\x4b\xe7\x53\xd2\xdc\x89\x71\x08\xdc\x42\x83\x88\x3c\x55\xe4\x29\xf7\x80\x58\xc4\x3b\x64\xc8\x22\x6c\xe1\x70\x4b\x0f\xcd\x0b\xc5\x22\xd5\xbe\xc0\x06\x97\xc1\x42\x6f\xb0\xf9\x20\x5c\x0b\xa3\x0b\x10\x84\x45\x94\x76\x08\x39\x1e\x82\x3b\xc2\xe6\xef\xc5\x18\xe2\xf2\xc6\x3b\x34\x0d\x3e\xff\xd9\x99\x77\x5f\x42\x6c\x42\xc2\x68\x04\x7c\xa3\x45\x0e\x05\x16\xda\xec\x40\x22\x5f\x95\x81\x33\x4f\xcb\xd4\xec\x08\x17\x6e\x44\x66\xe3\x43\x86\xec\x59\x24\x16\x3d\x6b\xbe\x87\x57\x74\xd4\x24\x8a\x32\xcc\x22\xab\x3f\xb9\x9b\x14\x59\x89\x2a\x96\xa9\xe3\x46\x02\x57\xdd\x3d\x16\x65\x95\x31\xa8\xac\xe7\x59\x93\x6d\xaa\x2c\x41\x27\xaf\xbe\x03\x01\xdf\x43\xab\xe8\x3b\x10\x2f\x5f\x3a\x33\xed\xad\x6b\x68\xbe\x35\x11\x70\x98\xda\x77\x9d\x46\x77\x25\x5a\x73\x25\xb2\x78\xe0\xab\x48\x57\x16\xf4\x02\x1e\x1f\x78\xb6\x4a\xc1\xf0\x0c\x21\xd3\x2a\x17\x54\xd9\xe5\xdf\x07\x09\x8b\x88\xa4\x81\xba\xd4\xe0\xa2\x84\xbf\x35\x6e\x46\x99\x56\x56\xa8\x0a\x1b\xb9\xd1\x08\x1e\x1f\x34\x87\xb9\xde\x81\x28\xc1\x3e\x88\x12\xca\x6a\x6e\x25\xa6\x20\xd3\x86\x16\x73\xa9\x1f\x4b\xe0\x8f\x7c\xd7\x29\x75\xf9\xe2\x2a\xf7\x2a\x42\x5f\x52\x98\x57\xf6\x40\xce\x27\xee\x51\x48\x09\x73\x84\xa2\xa2\x8e\x93\x83\xd5\x30\xc7\xd3\xeb\xae\x3b\xd9\x07\x04\x67\x41\x58\x34\xae\x69\x7d\xc3\xa2\x88\x4e\x3e\x05\x61\x0f\x6d\x30\x16\x45\x2d\xde\xb8\x79\x41\xb1\xc8\x51\xa2\xc5\x36\x83\xc3\xee\xce\x0a\x77\xf4\x5a\xea\x65\x27\x9e\x7e\xb0\x85\x4d\xdf\x48\x5d\x62\x9c\x24\xec\x20\x59\xa1\x69\xe2\xc8\x09\xd3\x7e\x40\x1b\xaf\x70\x07\xbe\x63\x24\x10\xfb\x4a\x18\x02\x1a\xa3\x8d\x63\x9d\x4c\x8b\x2a\x7d\xa7\xb3\x55\x9c\xb0\x28\xc7\x05\x1a\x70\x47\x1f\x95\xf4\x87\x2c\xc2\x21\xe8\x95\x63\x9d\xc7\xfb\xd3\x0a\x77\xbf\x38\xbe\xea\x95\x4b\x5f\xe7\x22\x3a\xf4\x69\xdf\x14\x1a\xc6\xd0\x31\xba\x94\xbf\x7c\xc9\x3a\x5a\x03\x0e\xa9\x6c\x3c\xbb\x4b\x5b\x58\x87\xcb\x1b\xca\xe7\xe9\x7b\x3f\x0c\xb6\xb1\x7b\xba\xc7\xb9\x50\x39\x79\x93\x24\xce\x36\x89\x7e\xe3\xeb\xae\xaf\x14\x7a\x1c\xc2\xbf\x0c\x5f\xdf\x18\x13\xa3\x31\x89\xd7\x8e\xd4\xfd\x9c\xef\x24\x4b\x21\x1d\x83\xb3\xc8\xa2\x68\x85\x3b\xea\xaf\x2b\xdc\xb5\xad\xf4\x1c\xfe\xd0\xf7\xb6\x8f\x75\x0e\x1d\xfa\x73\x92\x86\x7b\x5c\x4b\x9e\x1d\x75\xa2\xaf\x09\xbc\xb3\x70\x75\x45\xc2\xbe\x69\xc8\xb4\x2d\xf5\xe4\xd4\xcc\xfb\xca\x2c\x31\xfe\x5a\xe5\xad\xca\x57\x4e\x93\x9b\xb2\x0e\x5c\x30\x67\x29\x4e\xcd\x4c\xa3\xaf\x8c\x39\xb2\x0f\xc1\x55\x44\x33\x2a\x29\x7c\xd0\x8e\x63\x47\x33\x0a\xc7\xa2\x6c\x8e\x68\xf2\xd6\x8c\x6d\xb8\x69\xb3\x02\xd7\x40\xb0\x29\x39\x2d\x0d\xdd\x07\xec\xdb\x28\x1a\x53\xbb\x0b\xef\xf4\x72\x89\xc6\x4b\x2f\xb4\x29\xb8\x6d\x2c\x0c\x81\x9b\x65\x09\x69\x9a\x0a\x65\xd1\x2c\x78\x86\xfb\x3a\x71\x77\x6e\xf5\x23\x5c\x03\xed\x32\xe9\xad\x7e\x6c\x22\xe4\xea\x29\xb0\xe7\x9b\x6d\xa3\xbe\xe1\xd0\xc5\xc5\x31\xa3\xfc\xfb\x78\xe0\xd1\x65\x52\x97\x42\x2d\xfb\xcd\x64\x0c\x2f\x36\x03\xc7\xd8\xa4\xa9\x3d\x17\xc3\xe9\x24\x08\x60\xb7\x8a\x50\x28\x68\x07\xa0\x44\x31\x3f\xf2\x7f\x44\xfb\xa0\xf3\x7e\x3c\xdc\xad\x51\xc5\xb9\x11\x1b\x34\x43\x28\x75\x65\x32\xec\xdc\x95\xa6\xfa\x54\x8a\xdf\xd0\xcf\x8a\xf8\x92\x36\x8c\xde\x97\x7c\xde\x15\x8e\xb3\xf7\x46\x2b\x85\x99\x3d\x52\xf6\xbb\xab\x26\xea\x50\x8f\xaf\xfb\x1d\xa7\x07\x93\x30\x27\x40\x51\xa7\x55\x2e\x70\xc9\x71\xe1\x51\xd8\xec\x01\x3c\x06\xd8\x87\xcb\xe3\x54\x70\x89\x59\xbf\x38\x66\xbc\xf4\x5b\xec\x2d\x2f\x10\xfe\x03\x6b\x23\x94\x5d\xc0\xe0\xc5\x97\x01\xd4\xf5\x98\xe6\x06\xe9\xbf\x86\x8b\x4e\xa8\xae\xa7\x93\xbd\x34\xd5\x98\xd0\xd4\xe1\x7e\xe9\x82\x8b\x0b\x5e\x49\x3b\x66\x2d\x31\xcf\xb9\xb9\x28\x6c\x7a\x43\x31\x5c\xc4\x83\x4a\x95\xd5\x9a\x96\x59\xcc\x5b\xc4\x2f\xca\xc1\xb0\xf9\x9e\x24\x4e\x51\xdd\x17\xfa\xc5\x74\x42\xd1\x9b\x4e\xc6\xcd\xee\xd6\x42\x19\x76\x26\xbb\x68\x8c\x5d\x74\xa8\xb5\x1c\x75\x07\x3d\xff\x0c\x97\xd3\x49\x02\x4d\x73\x87\x23\x8a\xea\xf9\xe7\x94\x96\xcc\xa6\xac\x3b\xe3\xad\x03\xf4\x7e\x3a\xe9\x47\xc3\xa9\xe2\xa9\x1b\x33\xaf\xa5\x24\xe5\x56\x5b\x2e\x89\x40\x7f\xfd\x8b\xa7\x4b\x67\x29\x48\xcd\x07\x47\xdd\xf2\x1e\x37\x68\x4a\x6c\xe3\x29\x16\xa0\x3a\x8a\x39\xb3\x4e\xf1\x7e\x0f\x6b\x59\x19\xb7\x0f\x77\x79\x89\x93\xef\x9c\xe4\x75\x4b\xb2\x36\x20\xde\xfe\x4b\xda\xf4\x5c\x34\x01\x25\xa5\xfd\x38\x47\x4e\xec\x88\x8c\x3e\xfa\x47\x49\x3e\x94\x3f\x1f\x59\x57\x53\x54\x30\xb3\x6d\x58\x30\x76\x7b\xe8\xcd\x24\x9d\xe0\x52\xa8\x6d\xfc\xfb\x27\x4b\x80\xe4\x62\xb6\xdd\xcf\xb6\x63\x20\xed\x45\x9b\x7b\xd2\x3f\x27\xe5\xb1\xdd\x26\x3d\x03\x5c\xab\x98\x6d\x4f\x5a\xc5\x6c\xeb\x34\x16\x47\xbd\x21\xb6\x5b\xb8\x9c\x6d\x13\x78\xa3\x8b\x42\xd8\x53\xae\x1c\x51\xc3\x92\xa6\xb4\x15\x4e\x4e\xf5\xdc\x6b\x29\xe7\x9c\x26\xc1\x57\x69\xea\xc5\xcf\xe8\xfa\x43\x58\x66\xb7\x7f\x5e\x92\x3d\xd1\xca\xd8\x7e\x0f\xdf\xe6\x73\x97\xda\xf1\xf5\x69\x37\x2b\xa7\x13\xea\x67\x4e\xcc\x6e\x9f\x16\x9b\x6d\x9d\x98\xe7\x48\xa0\xb3\xae\x03\xba\x74\xc3\xe4\x90\xf4\x07\xe2\x09\x7c\xc8\x1e\xb0\xe0\x71\xd2\x0c\x12\xd8\xb3\xc6\xa1\x5f\x9d\x13\xa9\x7f\xff\xe1\x9f\xef\xe0\xaa\xae\xd9\xaf\xcf\x2b\x6b\xfe\x38\x8f\x69\x6f\xea\x37\xca\xee\x4f\xf6\x7e\x4f\x18\x82\xf1\x0b\x8f\x1f\xdd\xc9\x11\x11\xa2\x7e\x07\x6d\x2b\x90\xda\x1c\xed\xaa\xa4\xfa\x7f\xd6\xa0\xfb\x0f\x8d\x71\x33\xaa\xdd\x19\x48\x65\x63\xdc\x1b\x85\x7d\xa7\xb9\x5b\xbf\xfc\xee\x75\xb6\x0f\x1f\xf9\x2a\xf5\x92\x94\x85\xbe\xfa\xa5\x23\x4d\x53\x08\x97\x0e\x42\x17\x4c\xa5\x77\xc1\xbd\xee\xc2\x71\x6b\x3e\xb2\xd5\xb6\x07\x68\x5b\x40\xd2\xd6\x7f\x50\x8f\x17\x01\x6b\xea\x9a\x42\x62\x7d\xab\x69\x87\x4f\xe3\xec\x30\xdc\x45\x0e\xee\x04\xe4\x09\x6c\x3d\xcb\xa4\xee\xee\x9f\x3b\xf9\xa4\xc4\x7a\xeb\xdb\xb8\x67\x42\xf2\x7f\x50\x21\xf0\xfc\x0f\xa2\xc2\x13\x92\xcf\x6e\xb8\x64\x61\x34\x82\xd9\xdd\xf4\x6e\x0c\x06\x55\x8e\x06\x9c\x3f\x0f\x5a\xe6\x68\xca\x33\x6b\x6d\xb8\xc8\x96\x5f\xe4\xf8\x67\xf5\xa2\xfc\x59\x91\x72\xfa\x4a\x0b\x6c\x8f\xaf\xdd\x63\x83\x1e\x48\xcd\xea\xb0\x69\xb7\x1d\xac\x61\x53\xd7\xc1\x0e\x3a\x56\xf3\x32\x24\x5d\xd0\x34\xff\x21\x50\xe6\x4e\x51\x18\x2f\x17\x91\x99\x8f\x7a\x08\xa1\x69\xac\x0b\xd7\x1e\xc7\xd7\x10\x74\x4a\xa7\x68\x00\x71\xc6\x0b\x94\xb9\x7e\x54\xad\xe5\x84\x2e\x76\x68\xfc\xd5\xba\xee\xb3\x45\x61\xc9\xb4\xac\x0a\x45\xc6\xbb\xfe\xc8\xa2\x0d\x97\x15\x3d\x07\x51\x67\xd1\xda\x88\x0d\x77\x93\xa8\x77\x2c\x4e\xd8\x59\x87\xdf\xb6\x3f\xa5\xf5\x96\x9a\xdf\x46\x7b\x18\x7e\xda\x39\x41\x3e\x97\xf8\x94\xaa\x8f\xeb\x9c\x5b\xfc\x0a\x55\xd5\xda\xfd\xce\xdb\x6a\x3a\x1b\x69\x3a\xfc\x76\xd1\x27\xad\x0f\x62\x17\xc6\xd6\xf2\x99\x7c\x2e\x4e\x13\x0a\x9b\x30\x61\x50\x77\xac\xee\x1d\x08\x92\x1b\x1f\x48\x27\xf4\x20\x16\x90\xde\x56\x52\x12\x70\xa8\x6b\x2a\x3b\x9f\xf1\x23\x83\xfb\x76\x08\x9f\xde\xb9\x78\xe2\xce\x7e\x33\x86\x4d\x87\x29\xae\x7c\x4d\xf7\xef\x13\x38\x93\xfc\xde\x90\xfb\xf9\xfa\x8d\x93\x80\xba\x1e\x3c\xa7\xe7\x0c\x5f\x7a\x3d\x55\xba\x79\xee\xee\x79\x5a\xc1\xbe\x49\x21\xf9\xfa\xb6\x23\x09\xe5\xe3\x9c\x26\x52\x14\x52\x89\xae\xb7\xc5\x73\x55\x07\xaa\x3e\xb6\x24\x79\x4e\x53\xc0\xa4\xb3\x8a\x4e\x1e\xea\x9a\xfd\x37\x00\x00\xff\xff\x24\xa4\xaf\x02\xca\x18\x00\x00")

func golangHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangHeaderTmpl,
		"golang.header.tmpl",
	)
}

func golangHeaderTmpl() (*asset, error) {
	bytes, err := golangHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.header.tmpl", size: 6346, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangInsertTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\x5f\x6b\xdb\x30\x10\x7f\x96\x3f\xc5\x2d\x0f\x43\x1e\x89\x3f\x40\xc1\x0f\x2d\xfd\x43\xa1\x84\xb5\x1d\xec\x71\x55\xed\x4b\x70\x63\x4b\xe6\x24\x93\x04\xa1\xef\x3e\x4e\x8a\xbd\xba\xa4\x8c\xed\x21\x0f\xe7\xd3\xfd\xfe\x9d\x94\xcd\xa0\x2b\x90\xe6\xf5\x0d\xbe\x79\x0f\xc5\x75\xa3\x5a\xac\x1c\x84\x70\x7d\x95\x83\xf7\xe0\xb0\xeb\x5b\xe5\x10\x16\x8d\xb6\x48\x6e\xc5\x03\x0b\x28\x20\x84\x2c\xfb\x74\xf8\xc7\xe1\xef\xc3\xde\xaf\xa0\xc6\x4d\xa3\xe7\xed\x95\x6d\xb6\x0b\x58\x85\x90\x31\xe4\xed\xa0\xab\xb5\xea\x10\x42\x90\xfc\xa1\x57\xa4\x3a\x0b\xc5\x25\x6d\x2d\x84\x90\x83\xcc\x00\x00\x08\xed\xd0\xba\xa4\xe2\xd9\xd1\x10\x45\x2c\x01\x89\xf8\x67\x28\x8f\x6c\xa8\xeb\x08\xfc\x19\xf5\x44\x7b\x56\x77\x12\xc6\xda\xc1\x27\x88\x66\x03\xc5\xe5\xe0\xcc\x6d\x83\x6d\xcd\x72\xa2\x96\xb1\xb3\x46\xac\xed\xda\xec\xc7\xef\xda\xec\xe1\xa2\x84\xb5\xd9\xcb\x7c\x3a\x38\x4a\x1a\x6b\x52\x7a\x8b\xe7\x51\xa1\x38\x05\xc1\x28\x5c\xde\xeb\xc6\xbd\x27\x1d\xb1\x66\x56\x45\x65\xb4\x75\x60\x5d\xe7\xca\x97\x18\xcf\xe3\x03\x84\xf0\x92\x89\x9e\xb0\x57\x84\xf5\x12\x08\xfb\x56\x55\x98\xf2\xba\x28\xc1\xbc\xbe\x15\xa7\xae\xe4\xc1\x3c\x13\xcd\x26\x36\xbf\x94\xa0\x9b\x16\x7c\x26\x04\x97\x25\xfc\x24\xd5\xdf\x10\x49\x24\xca\x33\x21\x08\xdd\x40\x3a\x13\x21\x13\x35\x6e\x90\x46\x68\x99\x67\x82\x51\x5b\xb3\x7d\x76\x9d\x8b\xa8\x4b\x36\xa1\x78\x8f\xd3\x36\xa7\x58\xb5\x71\x50\x3c\x45\xb0\xab\x23\x7b\x14\xa7\x0d\x97\xf0\x75\xb6\x63\x9f\xec\x27\x31\xa3\xa3\xe2\x71\x40\x3a\x3e\x99\xfd\x41\x4e\x14\x29\xcd\x10\xf2\xd3\xec\x73\xa5\xb4\x4c\xa0\x67\xed\x25\x27\x5c\x2e\x3f\x98\x8c\x62\x62\x33\x8d\x2f\xf9\x50\x0a\xbd\xb5\x38\x2e\x84\xd0\x4e\x79\x4e\xba\x6e\x0e\x58\x9d\x91\xf4\xaf\xfc\xde\xc7\x0b\x36\xe6\x53\x7c\xdf\xc5\x88\xfa\xdd\xc4\x48\x68\x8b\x07\x65\xdd\x7d\xbc\xbe\xf7\xb5\xfc\x6f\x8f\xbc\xb5\x3b\x74\xb3\xd0\xaf\x8e\x5c\xce\xe9\x65\xbf\xe3\x47\x36\x65\x20\x7e\x41\x94\x31\x03\x9a\x3d\x2d\x8b\xfc\x67\x91\x9e\x96\x56\x1d\x2e\xde\x41\xde\xa1\x73\x48\x0c\x3b\xa5\xf5\xa1\xf7\xe7\xce\x30\xe9\x99\x9b\x3f\xaf\x7e\x07\x00\x00\xff\xff\x16\xa8\x72\x64\xe7\x04\x00\x00")

func golangInsertTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangInsertTmpl,
		"golang.insert.tmpl",
	)
}

func golangInsertTmpl() (*asset, error) {
	bytes, err := golangInsertTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.insert.tmpl", size: 1255, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangSelectTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x57\x6d\x6f\xdb\x36\x10\xfe\x2c\xfe\x8a\x9b\x10\x14\x72\x60\xab\xd9\xd7\x01\x1a\x90\x25\x6e\x33\x20\x6b\xda\x28\xc3\x3e\x14\x05\xca\xd8\x94\xcb\x8e\xa6\x34\x8a\x42\xb3\x09\xfa\xef\xc3\x91\x94\xac\x17\xcb\x2f\xc9\x8c\x35\x40\x82\x88\xbc\x97\xe7\x8e\xf7\x3c\xa2\x92\x42\x2e\x20\x48\x1f\xbf\xc2\x79\x59\x42\x78\xcd\xa9\x60\x0b\x0d\x55\x75\xfd\xcb\x04\xca\x12\x34\x5b\x67\x82\x6a\x06\x7e\xce\x70\x67\x86\x0e\x3e\x84\x50\x55\x84\x8c\x3a\x3f\x3c\xed\x77\x2e\xcb\x19\x2c\x59\xc2\x65\x77\x7b\x26\xe9\x9a\xf9\x30\xab\x2a\xf2\x96\x69\x0c\xfb\xa6\x90\x8b\xb8\x48\x12\xfe\x84\x7e\xe8\xc6\xe4\xd2\x18\x8c\xc6\xc8\xf9\xca\x86\x18\x03\xe1\xb2\x20\x92\x00\x8d\x32\xaa\xe8\x3a\x87\xf0\x52\xad\x72\xa8\xaa\x09\x74\x56\xef\x99\x2e\x94\xc4\x8d\x29\x30\xa5\xf0\x37\x55\x93\x83\xa0\xd4\x30\x66\x23\x38\x0c\x52\x84\x01\x25\x21\xde\x22\x95\xb9\x86\x5c\xaf\x75\xf4\x19\x4b\x8f\x3f\xdc\x42\x55\x7d\x26\x5e\xa6\x58\x46\x15\x5b\x4e\x41\xb1\x4c\xd0\x05\xb3\x40\x7e\x8a\x20\x7d\xfc\x1a\xba\xdd\x00\x1d\x27\xc4\xe3\x89\xd9\xfc\x21\x02\xc9\x05\x94\xc4\xf3\xf0\x31\x82\x3f\x14\xcd\xe6\x4a\x05\x4c\xa9\x09\xf1\x3c\x65\xaa\x22\x5e\x45\xbc\x25\x4b\x98\xaa\x43\x07\x13\xe2\x61\x54\x91\xae\x62\xbd\xd6\x26\xea\x14\x8f\x93\x62\x73\x9a\x16\x61\xc9\xa0\xa8\x5c\xb1\x76\x83\x08\x00\xa0\x2d\x9a\x61\x55\x91\x79\xf8\x55\x72\xdd\x3e\xbc\xaa\x22\x16\x52\x5d\x57\xf8\xa1\x60\xea\xef\xfb\xf4\xdb\x53\x30\x48\x14\xc6\x0b\x2a\x03\x17\x78\xe6\x52\x9e\x71\x35\x85\x33\x5b\x02\xb6\xa1\x81\x30\x73\x18\xfa\xe6\xc9\x14\xce\x12\xce\xc4\x12\xad\x9d\x63\xf8\x06\x17\xba\x3e\x0e\x3f\x4f\x20\x55\x98\x05\x5d\xcd\xc1\x97\xa5\x83\xfe\xaa\x2c\x5d\x28\x57\x64\x27\x5f\x3d\x10\xdb\x9e\x37\x67\x13\x45\x90\xff\x25\xc2\xb9\x52\xef\xd2\xfb\xf4\x5b\x6e\x4e\xc9\x55\x23\xb9\x98\xe2\x1f\x73\x32\xc3\xb3\x6c\x5b\x75\x4f\xd4\x26\x71\xfb\x4d\x1b\xdb\xc3\x8b\x51\x07\x14\x7a\x7d\x4e\xa2\x17\xfe\x10\x80\x78\x7e\x3b\xbf\x7a\x80\xcb\xdb\x5b\xf8\x6d\xfe\x70\x73\x77\xfd\xf2\xa0\xe7\xaf\x2d\x83\x7b\xb4\xa2\x42\xf8\xd8\xf5\xa3\xa5\x8b\x0a\xf1\x32\xf9\xea\x05\x68\x26\x62\x2b\xfb\x6b\xe3\x81\xa0\x65\xa2\x50\x54\xf0\x7f\x18\x84\xb1\x56\x85\xc9\x78\xbc\xce\x35\xe1\x77\x6a\x5d\x0f\xc4\x2e\xbd\xb3\xb3\x93\x17\x42\xc3\xc7\x4f\xa6\x21\x0d\xba\xa3\x54\x6f\xd3\xa4\x51\xe5\xeb\x62\x77\xea\x77\x32\xf1\xdb\x45\x98\x67\x2a\x1f\xf6\xaa\x27\x60\xb1\x29\x2d\x78\x65\x5b\xb8\xcd\xeb\x58\x68\x6e\xb3\x0e\x78\x7a\xee\xbe\xbf\x7c\x3b\xbf\x3e\x35\x7b\x33\xba\x62\xcb\xe7\xf1\xd7\xb8\xbe\x8c\xc1\x83\x10\xbb\x39\xbc\x31\x6f\xb1\xf8\x3d\x2e\xfe\x97\x54\x6e\x65\xd9\x49\xe6\x01\x9a\x31\x3a\xdb\xf7\x57\xfd\x34\xad\x8b\xac\x5f\x43\x0b\x9d\xfe\xc9\x24\xe4\x5a\x71\xb9\x9a\x82\xe0\x6b\xae\x81\x4b\xbd\x57\x05\xac\x63\x5a\xe8\xc6\xf7\x08\x5d\x68\xb7\x7e\x54\x19\xfa\xad\xf8\xee\x6e\x46\xd8\x9f\xad\x12\xd1\x6a\x78\x9f\xfa\xb8\xcf\xe4\xb2\xaa\x6c\xff\x5c\xc7\x9d\x8c\xf0\xa4\x3e\x8f\x28\x02\xdf\x87\xb2\xb9\x4d\xd4\xcb\xe0\x5f\xf8\x66\xb1\x22\xc4\xdb\xaf\x3a\x87\x00\x81\x1e\x92\x3d\xd2\xe4\xfb\x43\x79\xaa\xc1\xdb\xe9\xf9\x19\x2e\x5a\xc8\x71\x99\xc9\xc0\x82\x9a\x60\x61\xd6\xaa\xec\xdc\xb2\x36\xd3\x14\x41\xb2\xd6\x61\x9c\x29\x2e\xb5\xf3\xfa\x68\x3c\x66\x3f\x7e\x0a\xf1\xb4\x0d\xe5\xee\xa4\x91\xd1\xda\xdd\xce\x72\x05\x4c\xe4\x6c\xd0\x35\x1b\xd5\xfe\x5f\xf7\x6e\xdf\xe5\xa8\xf1\x3c\xa9\xd6\x5e\xdd\xfd\xfe\xee\xe1\x64\x22\xbb\x48\x0b\xa9\x8f\x54\x57\xe3\xf3\x4c\x59\x1d\xf8\x8e\xe8\xe9\xc6\xae\x25\xa4\x57\xb8\xd8\x91\x98\x23\xb4\xb3\x15\x71\xbb\x68\x0e\x52\x86\x07\xdd\x7d\xb8\xd4\x87\xc9\x5a\xbb\xf4\xa1\x9e\xf5\xe1\x9d\xfa\x92\x73\x9a\x2f\xbc\x2d\xf7\x9c\xbd\x1f\x6a\x4e\x8b\x76\x89\xca\xc5\xff\x7a\xdb\xb9\xb9\x8c\x4f\xc6\xbf\x2f\x34\x3f\x92\x7d\x5f\x68\xfe\x4c\xee\xf5\x3c\x47\x98\x57\x5b\xb5\x78\x77\x43\xf3\xe7\xb2\xae\x89\xb6\x9d\x73\xbd\x64\x07\x7e\x6e\x3c\xa6\xa9\x38\x8c\x73\x9b\x92\x87\x8c\xeb\x42\x73\x7c\x33\x34\x6c\x98\x64\xa8\x74\x80\xea\x0c\x47\x7b\xc7\x30\x27\x54\xe4\x96\xac\xed\x39\x36\x89\xf1\xb5\xb8\x75\x94\xff\x0d\x00\x00\xff\xff\x39\x53\xdb\xa7\x76\x13\x00\x00")

func golangSelectTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangSelectTmpl,
		"golang.select.tmpl",
	)
}

func golangSelectTmpl() (*asset, error) {
	bytes, err := golangSelectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.select.tmpl", size: 4982, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangUpdateTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x54\xdf\x6b\xe3\x38\x10\x7e\x96\xfe\x8a\x39\x3f\x1c\xf6\x9d\x23\xb8\xd7\x1e\xe6\xe8\x5d\x5b\xb8\x65\x09\x34\xd9\x65\x1f\x42\x69\x55\x7b\x1c\xdc\xda\x92\x23\xd9\x4d\x16\x47\xff\xfb\x32\x92\x9d\x1f\xdb\x2d\x5d\xd8\x40\x42\xa4\x99\xef\xd3\x37\xdf\x8c\x54\xf6\x2a\x87\x58\x3f\x3e\xc1\x1f\xc3\x00\xe2\xaa\x92\x35\xe6\x1d\x38\x77\xf5\x6f\x02\xc3\x00\x1d\x36\x6d\x2d\x3b\x84\xa8\x6f\x0b\xd9\xe1\x8c\x00\x11\x08\x70\x8e\xf3\x37\xc1\x9f\x76\xef\x83\x87\x61\x06\x05\x96\x95\x3a\x0f\xcf\x94\x6c\x30\x82\x99\x73\xfc\xb3\xdf\x25\xe6\x65\x67\x7a\x4f\x4c\x8b\x9b\x5e\xe5\xcb\xbe\x2c\xab\x1d\xf1\x10\x0d\xaa\xc2\x03\xde\xe4\xb4\xd5\x3a\x50\xbe\x25\x6a\x3c\x95\x94\xc5\x94\xd4\x4a\x23\x1b\x0b\xe2\xd2\xac\x2d\x38\x97\x72\x00\x80\x90\x6f\x41\x08\x71\x26\x2a\xe8\x4c\x20\xf6\x59\x06\x6d\x5f\x77\xc1\x91\x43\x4a\x0a\x68\x0c\x7d\xb5\x49\x7e\x4a\xf2\x3b\x72\x7d\x41\xa4\x16\x06\xce\xd9\x8b\x34\xb0\xb1\xb0\xba\xb3\x9d\xa9\xd4\x3a\x6c\xbc\xc8\xba\x47\xda\xac\x54\x87\xa6\x94\x39\x0e\x8e\x33\x8b\xa8\xe0\x22\x83\x46\xb6\xab\x90\x4d\x71\x8a\xc8\xa2\xf0\x10\x8a\xd2\x19\x31\x59\x02\x21\x27\x0d\x6c\x70\x42\x95\xc0\xc0\x19\xab\x4a\xa8\x8a\x5d\x0a\xfa\x99\x60\x44\xbe\x22\xd8\xdd\xdf\xa0\x9f\x29\xce\x82\x8a\x55\x55\xec\xee\x20\x0b\x2c\x9c\x31\xc7\x19\x3b\x26\x43\x06\x35\xaa\x38\xa4\x26\xde\x44\xfa\x6c\x2c\x64\x20\xdb\x16\x55\x11\x6f\x6c\x0a\x5e\xcf\x9f\x10\x41\x06\xff\x44\x09\x9f\xb8\x8f\x49\x61\x3d\x6a\x4d\x38\x0b\xc3\x51\x95\x20\xe6\x88\x85\x9d\xeb\x2d\x0d\x0c\x53\x7a\x4b\x62\xe7\x7a\x1b\x9f\xf7\x82\xfe\x1b\xa9\xd6\x08\xe2\xb2\xef\xf4\x4d\x85\x75\x61\x3d\x64\xf2\x26\x8e\xa8\xab\xff\xe9\xba\x6f\x14\x38\x17\xa5\x34\xe5\xe2\x7f\x55\x51\x8f\x8f\x64\x04\x29\xb5\x81\xfb\x74\x9c\x19\x3a\x2f\x30\x4f\x33\x44\xe6\x1c\x58\xc3\xa6\xc8\x3d\xef\x5c\x36\x18\x27\x13\x52\x84\x8c\xc4\x97\xe3\xad\xb1\x5d\xd3\x79\xb3\x7d\x67\xac\x58\x60\x5b\xcb\x1c\xe3\x87\x61\x10\xcb\xdb\x8f\xce\x3d\xa4\x07\x0b\xa3\xfd\x7e\x7f\xbb\xdc\xef\xf7\xd1\x71\x6f\xc2\x7d\xd0\x95\xf2\xbe\x46\x29\x44\x49\x0a\x7f\x25\x9c\xb5\x06\x5b\x69\xb0\x48\xc1\x04\xd6\x30\xb7\x17\x19\xe8\xc7\x27\x31\x46\x63\x52\x90\x70\xea\x3d\x05\x7f\xcb\x40\x55\xb5\x2f\x88\x96\x19\x7c\x31\xb2\xbd\x36\x26\x46\x63\xa8\x4b\x06\xbb\xde\x28\x92\xcf\x0a\x2c\xd1\x4c\xd4\x71\xc2\x99\xa4\xeb\x75\xf1\xaa\x81\xe4\xa3\x0f\x85\xfb\x37\x73\x2e\x61\x9c\x91\x84\x5a\xaf\x97\x5d\xd3\x79\x09\xa9\xcf\x11\x42\x24\xfc\xd0\xe8\x65\xdf\xb6\xda\x74\x76\xe1\x0f\xad\xd4\x9a\x7a\x71\x72\x2b\x33\xf8\xfd\xfc\x3d\x09\xd1\x20\x7c\xaa\x5e\xdc\xf6\x68\xbe\x2e\xf4\x76\x17\x4f\x27\x8c\x88\x65\x2e\x55\x1c\xa8\xc2\x9c\x8e\x1e\x64\x19\xd8\x4d\x2d\xae\x8d\x99\xeb\x85\xde\x52\x7b\x27\xbb\x43\xf9\x64\x51\x4a\x3f\x7e\xdf\x9d\x62\x0f\xfe\xfd\x08\x71\xe6\xe5\x11\x3a\xa6\x04\x25\x81\xd7\xcf\x5e\x6d\x71\x2a\xf8\x3e\xfd\xbe\xaa\xeb\x1d\xe6\x87\x82\x7e\x45\xc1\xd8\x52\x3f\x13\x67\x2f\x94\x45\x7a\xff\x5f\x3d\xa8\xc3\x70\xda\xcd\xd3\x8b\x42\xb7\xee\xfc\x09\xff\x16\x00\x00\xff\xff\x79\xd5\x0a\x44\x90\x06\x00\x00")

func golangUpdateTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangUpdateTmpl,
		"golang.update.tmpl",
	)
}

func golangUpdateTmpl() (*asset, error) {
	bytes, err := golangUpdateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.update.tmpl", size: 1680, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x4d\x8f\xda\x38\x18\x3e\xc3\xaf\x78\x55\x71\x60\xd0\x90\xde\x77\x55\x8d\x32\xe0\xe9\xa6\x0d\x0e\x93\x98\xad\xe6\x98\x12\x53\xbc\x4a\x1c\x36\x18\x8d\x90\xf1\x7f\x5f\xd9\xce\x27\x4d\xd8\xe9\x6a\x0e\x7b\x73\xec\xc7\xcf\xfb\xbc\x9f\x8e\x94\x1f\x67\xb0\x0e\x22\xf2\x39\x44\xd1\xb3\x0f\x11\x71\x09\x5a\x21\x4c\x80\xa0\xd5\xda\x77\x09\x8a\x00\x66\x1f\x95\x1a\x8f\xa5\x9c\x43\x42\x77\x8c\x53\xf8\x70\xdc\xee\x69\x16\x7f\x80\xb9\x52\x66\xbf\x88\xf9\x0f\x0a\x0e\x89\xbf\xa7\xf4\x08\x4a\x8d\x17\x21\x72\x09\x02\xe2\x3e\xfa\x08\xa4\x04\x07\xc7\x19\x05\xa5\x60\xda\xc2\x4f\xd8\x3d\x4c\xb6\x79\x0a\xbf\x7d\x02\x67\x91\xa7\xa7\x8c\x9b\xcb\x52\xb2\x1d\x4c\x98\x52\xf7\x52\x52\x9e\x28\x35\x92\x12\x5e\x99\xd8\x5b\xb4\x36\x3a\x6a\x73\xea\x35\x39\x1f\x68\x75\x32\x07\xb6\x03\x07\xe7\x02\x9f\xd2\x54\x03\x70\x40\x00\x6f\x7c\x1f\xf4\x19\xe5\x49\x17\x18\xd2\x1d\x2d\x28\xdf\x1a\xae\x10\x3d\xa1\x10\xe1\x05\x8a\x0c\x6d\x7d\x66\x7d\x03\xa5\xa6\xdd\x6d\x2b\x1b\x94\xba\x83\x00\xc3\x12\xf9\x88\xa0\xab\x9b\x01\x5f\xd2\x94\x0a\x7d\xb9\x6d\x7f\x78\x6d\x54\xad\x0b\x96\xc5\xc5\xf9\x2b\x3d\xeb\x90\xdc\x8f\xd6\xa1\xb7\x72\xc3\x17\xf8\x8a\x5e\x60\x3a\x10\xc3\xce\x9d\x26\x8a\x50\x86\x51\x4a\x0b\x35\x2b\x6d\x4e\xa9\xbb\x6b\xd3\x65\x26\x37\x9c\xfd\x7d\xa2\xd6\xf2\x06\x7b\xcf\x1b\x34\x68\xf4\x97\x4d\x29\x35\xbe\xfb\x7d\x5c\xef\xb7\x56\x9d\x1a\x4b\x72\xc1\xe3\x8c\x56\x45\x06\x75\x06\x1c\xfd\x51\xc7\xbd\xe3\x40\x87\x20\xa5\x3b\xf1\x57\xce\xb8\x65\xf0\xd1\x13\x81\x2f\x81\x87\x6d\x76\xd8\x8f\xbd\xa8\x19\x75\xea\xa4\x04\x41\xb3\x43\x1a\x8b\xb6\x6d\xc7\xa7\x3b\xa1\x11\x9f\x86\x00\x86\xe9\xa6\x8e\x6d\xce\x13\x26\x58\xce\x9b\x7e\xd1\x09\xb6\x1e\x2c\xb2\x43\x5d\xd0\x7d\xf4\x35\xaa\x56\xd2\x78\xaf\x77\x83\x03\x2d\x62\x91\x17\xfa\xe4\xe1\xa7\x9a\xea\xd8\x29\x43\xf6\x26\x6b\x76\xd1\x6f\xb3\x3c\x6b\x5b\x7e\x23\x5d\x6f\xac\xba\x3a\xbd\xb7\x08\xf4\x1a\x65\x1e\xd6\x85\xd9\xc2\x1e\x69\x4a\xb7\xa2\x0d\xf5\x78\x4f\xa1\x0f\xe4\xea\x75\x4f\x0b\x7a\x3d\xd7\xca\x72\xe7\x89\xad\xf7\x4a\x1f\xdb\x01\xcf\x05\x4c\x18\x28\xf5\xed\x0f\x14\x9a\xbe\xa7\xe9\xd1\x54\x94\x8b\x97\x50\x17\x76\x47\x60\xab\x1c\x2c\xe9\xad\x61\xd0\x9d\xba\xc6\xb5\xf9\xeb\x3e\x16\x75\x57\x4c\x84\xa9\x61\x2d\xac\xaa\xe6\x2a\xa2\x29\xe5\xe0\x7c\xdb\xc7\xa2\x56\xdc\x72\x47\x93\x98\x5b\x06\x60\x24\x9a\x1e\x06\xdb\xc4\x8d\xf0\xd2\x80\x6d\x3b\x7b\xad\xd5\xd4\x56\xac\xf6\xb9\xb2\xd1\xe0\x67\xbf\xe2\x95\x75\x28\x42\x3e\x5a\x10\xe8\x49\x68\xe9\xb5\xa3\x14\x3c\x85\xc1\x0a\xda\x03\xc1\x8e\xf2\x72\x72\xe9\xc2\xf8\x92\x33\xfb\x92\x8c\xba\x75\xd4\x4c\x04\xa7\xbe\xf6\xd3\x73\xb0\xa8\xf2\xd3\xc7\x50\xd6\xc7\x35\xa8\x97\x28\x28\x12\x5a\x3c\x9e\x2d\x4b\x10\x2e\x51\x08\x8f\x2f\x43\xad\x52\x82\x9b\xb9\x06\x6e\xb4\x18\x20\xf6\x59\xc6\x84\xa5\xf5\xbd\x95\x47\xe0\xa1\x0b\xbc\x31\x89\x4e\xbc\x1b\x69\xb3\x33\x9d\xdd\xfd\xdf\x83\xfa\x6f\x3d\xf1\x3d\x3e\xb6\xda\xb6\x17\x99\x98\x47\xd8\x82\xca\x77\x7a\xc0\xe9\x7e\xc1\xef\xa3\x97\xf1\x23\x2d\xca\x1c\x78\x38\x42\x21\x01\x0f\x93\x60\x50\x85\xfd\x29\x32\xb1\x1c\x0d\xbd\xc0\xcd\xaf\xd3\x70\x17\x5f\x3f\xc6\xf0\xa7\xeb\x6f\x50\x34\x35\xae\xfd\x27\xd6\x87\xd6\xcb\x5e\xfb\x6e\xfe\xa0\xc8\x26\xc4\x1e\xfe\x0c\xb3\xe1\x30\x9c\x0e\x49\x5c\x25\x63\xb3\x5e\xba\xe5\x4f\x53\xfd\x20\x47\x88\xc0\xe5\x72\x79\x8e\x2e\x97\xcb\xbb\x24\xe5\x86\xb0\x7f\x02\x00\x00\xff\xff\x5f\xa3\x67\x2b\x04\x0b\x00\x00")

func postgresTmplBytes() ([]byte, error) {
	return bindataRead(
		_postgresTmpl,
		"postgres.tmpl",
	)
}

func postgresTmpl() (*asset, error) {
	bytes, err := postgresTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.tmpl", size: 2820, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlite3Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x4d\x6f\xea\x38\x14\x5d\xc3\xaf\xb8\x7a\x62\x01\xa8\xe4\x2d\x66\x37\xa3\xa7\x2a\x05\x57\x93\xd7\x90\xd0\xc4\x4c\xd5\x65\x4a\x4c\xf1\x28\x71\x98\x60\x54\x21\xe3\xff\x3e\xb2\x9d\x4f\x9a\x30\xed\xa8\x8b\xb7\x73\xec\xe3\x73\xcf\xfd\x74\x84\xf8\x3e\x85\xf0\xd1\x75\x30\xfa\x0d\x42\x6c\x63\xb4\x44\x1e\x06\x8c\x96\x2b\xd7\xc6\x28\x04\x98\x7e\x97\x72\x38\x14\x62\x06\x31\xd9\x52\x46\xe0\xdb\x61\xb3\x23\x69\xf4\x0d\x66\x52\xea\xfd\x3c\x62\xaf\x04\x2c\x1c\xbd\x24\xe4\x00\x52\x0e\xe7\x01\xb2\x31\x02\x6c\xdf\xb9\x08\x84\x00\xcb\x8b\x52\x02\x52\xc2\xb8\x81\x1f\xd1\x1b\x18\x6d\xb2\x04\x7e\xff\x01\xd6\x3c\x4b\x8e\x29\xd3\x97\x85\xa0\x5b\x18\x51\x29\x6f\x84\x20\x2c\x96\x72\x20\x04\xbc\x51\xbe\x33\x68\x65\x74\xd0\xe4\x54\x6b\x7c\xda\x93\xf2\x64\x06\x74\x0b\x96\x97\x71\xef\x98\x24\x0a\xe0\xf9\x18\xbc\xb5\xeb\x82\x3a\x23\x2c\x6e\x03\x03\xb2\x25\x39\x61\x1b\xcd\x15\xa0\x7b\x14\x20\x6f\x8e\x42\x4d\x5b\x9d\x19\xdf\x40\xca\x71\x7b\xdb\xc8\x06\x29\x27\xe0\x7b\xb0\x40\x2e\xc2\xe8\xe2\xa6\xcf\x16\x24\x21\x5c\x5d\x6e\xda\xef\x5f\x6b\x55\xab\x9c\xa6\x51\x7e\x7a\x20\x27\x15\x92\x9b\xc1\x2a\x70\x96\x76\xf0\x0c\x0f\xe8\x19\xc6\x3d\x31\x6c\xdd\xa9\xa3\x08\x45\x18\x85\x30\x50\xbd\x52\xe6\xa4\x9c\x5c\x9a\x2e\x32\xb9\x66\xf4\x9f\x23\x31\x96\xd7\x9e\xf3\xb8\x46\xbd\x46\x3f\x6d\x4a\xca\xe1\xe4\x8f\x61\xb5\xdf\x58\xb5\x6a\x2c\xce\x38\x8b\x52\x52\x16\x19\x54\x19\xb0\xd4\x47\x15\xf7\x96\x03\x2d\x82\x84\x6c\xf9\xdf\x19\x65\x86\xc1\x45\xf7\x18\x7e\xfa\x8e\x67\xb2\x43\x5f\x77\xbc\x62\x54\xa9\x13\x02\x38\x49\xf7\x49\xc4\x9b\xb6\x2d\x97\x6c\xb9\x42\xfc\xe8\x03\x68\xa6\xab\x3a\x36\x19\x8b\x29\xa7\x19\xab\xfb\x45\x25\xd8\x78\x30\x4f\xf7\x55\x41\x77\xd1\x57\xa8\x4a\x49\xed\xbd\xda\xf5\xf7\x24\x8f\x78\x96\xab\x93\xdb\x77\x35\xd5\xb2\x53\x84\xec\x43\xd6\xcc\xa2\xdb\x66\x71\xd6\xb4\xfc\x41\xba\xce\x58\xb5\x75\x3a\x1f\x11\xe8\xd4\xca\x1c\x4f\x15\x66\x03\x7b\x20\x09\xd9\xf0\x26\xd4\x61\x1d\x85\xde\x93\xab\xb7\x1d\xc9\xc9\xe5\x5c\x2b\xca\x9d\xc5\xa6\xde\x4b\x7d\x74\x0b\x2c\xe3\x30\xa2\x20\xe5\xd3\x9f\x28\xd0\x7d\x4f\x92\x83\xae\x28\xdb\x5b\x40\x55\xd8\x2d\x81\x8d\x72\x30\xa4\xd7\x86\x41\x7b\xea\x6a\xd7\x66\x6f\xbb\x88\x57\x5d\x31\xe2\xba\x86\x95\xb0\xb2\x9a\xcb\x88\x26\x84\x81\xf5\xb4\x8b\x78\xa5\xb8\xe1\x8e\x22\xd1\xb7\x34\x40\x4b\xd4\x3d\x0c\xa6\x89\x6b\xe1\x85\x01\xd3\x76\xe6\x5a\xa3\xa9\x8d\x58\xe5\x73\x69\xa3\xc6\x4f\x3f\xe3\x95\x71\x28\x44\x2e\x9a\x63\xe8\x48\x68\xe1\xb5\x25\x25\xdc\x07\xfe\x12\x9a\x03\xc1\x8c\xf2\x62\x72\xa9\xc2\xf8\x99\x51\xf3\x92\x0c\xda\x75\x54\x4f\x04\xab\xba\xf6\xee\x39\x98\x97\xf9\xe9\x62\x28\xea\xe3\x12\xd4\x49\xe4\xe7\x31\xc9\xef\x4e\x86\xc5\x0f\x16\x28\x80\xbb\xe7\xbe\x56\x29\xc0\xf5\x5c\x03\x3b\x9c\xf7\x10\xbb\x34\xa5\xdc\xd0\xba\xce\xd2\xc1\x70\xdb\x06\x5e\x99\x44\x47\xd6\x8e\xb4\xde\x19\x4f\x27\xbf\x7a\x50\xff\xab\x27\x5e\xa2\x43\xa3\x6d\x3b\x91\xb1\x7e\x84\x0d\xa8\x78\xa7\x7b\x9c\xee\x16\xfc\x35\x7a\x29\x3b\x90\xbc\xc8\x81\xe3\x85\x28\xc0\xe0\x78\xd8\xef\x55\x61\x7e\x8a\x74\x2c\x07\x7d\x2f\x70\xfd\xeb\xd4\xdf\xc5\x97\x8f\x31\xfc\x65\xbb\x6b\x14\x8e\xb5\x6b\xff\x8b\xf5\xb6\xf1\xb2\x57\xbe\x5f\x73\xfd\xb8\x8f\xa3\x32\x01\xeb\xd5\xc2\x2e\x7e\x94\xaa\x47\x38\x44\x18\xce\xe7\xf3\x63\x78\x3e\x9f\xbf\x24\x11\x17\x62\xfe\x0d\x00\x00\xff\xff\x98\xb8\x02\x49\xe9\x0a\x00\x00")

func sqlite3TmplBytes() ([]byte, error) {
	return bindataRead(
		_sqlite3Tmpl,
		"sqlite3.tmpl",
	)
}

func sqlite3Tmpl() (*asset, error) {
	bytes, err := sqlite3TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sqlite3.tmpl", size: 2793, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"golang.delete-all.tmpl": golangDeleteAllTmpl,
	"golang.delete.tmpl": golangDeleteTmpl,
	"golang.footer.tmpl": golangFooterTmpl,
	"golang.header.tmpl": golangHeaderTmpl,
	"golang.insert.tmpl": golangInsertTmpl,
	"golang.select.tmpl": golangSelectTmpl,
	"golang.update.tmpl": golangUpdateTmpl,
	"postgres.tmpl": postgresTmpl,
	"sqlite3.tmpl": sqlite3Tmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"golang.delete-all.tmpl": &bintree{golangDeleteAllTmpl, map[string]*bintree{}},
	"golang.delete.tmpl": &bintree{golangDeleteTmpl, map[string]*bintree{}},
	"golang.footer.tmpl": &bintree{golangFooterTmpl, map[string]*bintree{}},
	"golang.header.tmpl": &bintree{golangHeaderTmpl, map[string]*bintree{}},
	"golang.insert.tmpl": &bintree{golangInsertTmpl, map[string]*bintree{}},
	"golang.select.tmpl": &bintree{golangSelectTmpl, map[string]*bintree{}},
	"golang.update.tmpl": &bintree{golangUpdateTmpl, map[string]*bintree{}},
	"postgres.tmpl": &bintree{postgresTmpl, map[string]*bintree{}},
	"sqlite3.tmpl": &bintree{sqlite3Tmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

