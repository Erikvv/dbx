// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// golang.create-raw.tmpl
// golang.create.tmpl
// golang.decl.tmpl
// golang.delete-all.tmpl
// golang.delete-world.tmpl
// golang.delete.tmpl
// golang.dialect-cockroach.tmpl
// golang.dialect-pgx.tmpl
// golang.dialect-pgxcockroach.tmpl
// golang.dialect-postgres.tmpl
// golang.dialect-sqlite3.tmpl
// golang.footer.tmpl
// golang.get-all.tmpl
// golang.get-count.tmpl
// golang.get-first.tmpl
// golang.get-has.tmpl
// golang.get-last.tmpl
// golang.get-limitoffset.tmpl
// golang.get-one-all.tmpl
// golang.get-one.tmpl
// golang.get-paged.tmpl
// golang.get-scalar-all.tmpl
// golang.get-scalar.tmpl
// golang.header.tmpl
// golang.misc.tmpl
// golang.update.tmpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _golangCreateRawTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\xcf\x8a\xdb\x30\x10\xc6\xcf\xf6\x53\x4c\x73\xb2\x21\xeb\x07\x28\xec\xa1\x2c\x5b\x08\x94\x42\x93\xde\x8d\x62\x8d\x5d\x35\xb2\xe4\x1d\x4f\xfe\x21\xf4\xee\x45\x92\x63\xbc\xa4\xbb\x2c\xb4\xb7\xc9\x8c\xe7\x9b\xdf\x7c\x52\xe4\xdc\x03\x48\x6c\x95\x41\x58\x19\xd1\xe3\x0a\x1e\xbc\xcf\xb7\xe2\xec\x1c\xa8\x16\xaa\x2d\x0e\x5a\x34\x08\xde\x4f\x91\x73\x80\x7a\x0c\x89\x27\x42\xc1\xf1\xb7\x91\xe0\x7d\x6a\x30\x96\x43\x13\x1f\xc9\x80\xf7\xdf\x6d\x0a\xe7\x8f\x6a\xe7\xa0\xda\x1d\xdb\x56\x5d\xc0\xfb\x3c\x4c\x0f\x85\x30\x33\x5f\xa2\x8c\xaa\x33\x82\x8f\x34\xf1\x84\x12\x63\x3f\x68\xc1\x33\x67\x05\xde\x17\xce\x41\xc3\x97\x41\x90\xe8\xa1\xfa\x42\x1d\x78\x5f\x42\x91\x67\x33\xfd\x04\xe2\x1c\x4c\x1f\xcd\xa9\x35\xcc\x54\x48\x04\x48\x64\xa9\x7c\x9b\x48\x99\x93\x3d\x7c\x0c\x47\x50\x37\xc3\xe4\xd3\x90\x3b\xbd\xbd\x95\xd7\xa4\x16\x61\x8d\x62\x83\x67\xa8\xbe\x2a\xd4\x72\x0c\xde\xc4\x3c\xf6\x7b\x94\xd1\xf7\x5f\x56\x4b\xa4\x11\xaa\x8d\x69\x2d\x4c\x6d\xb1\x3c\xbe\xe8\x29\xbb\xaa\xeb\x98\xa9\x47\xee\x79\x95\x44\x4e\x82\xa0\x8e\x09\x78\x0c\xc1\x8b\xde\x1f\x8d\xd4\x58\x6f\xd1\x48\xa4\xc2\xee\x7f\x57\x52\x09\x8d\x0d\xaf\x61\xd9\x5f\xe6\x59\xa8\x69\xdb\xed\xb8\xe7\x22\x69\x44\xd3\xe2\x7e\x33\x68\x99\xdf\xec\x7e\x7d\xf6\x79\x56\xaf\x83\xab\xf0\x08\x71\x06\xa9\x13\x52\xf5\x7c\xc1\xe6\xc9\x1a\xc6\x0b\x17\x0d\x5f\xd6\xf0\x77\xdd\x20\x9b\xa9\x36\xf6\x7f\x7a\x04\xa3\x34\xb8\x3c\xcb\x28\x89\x07\xbd\x5e\x1c\xf0\x99\xa8\x40\xa2\x32\xcf\x7c\x7e\xab\x19\xa5\x93\x35\xe1\x92\xce\xf6\xb6\xe1\xd6\x0d\x83\x25\x1e\x13\xa0\x32\x1d\x2c\xbc\x7f\xc5\x7d\x07\xfd\xe3\x88\x74\xdd\xda\xf3\x07\xc0\x83\x21\xd5\xae\x11\x26\xdc\x05\x21\x25\xd9\x16\x8a\x56\x0b\x66\x34\xb7\x21\x25\xbc\xbf\x9e\x51\x7a\xfd\xee\x8e\xb7\x91\x8b\xbb\x7c\xbf\x76\x5d\x13\x8e\xe9\x04\x3e\xff\xff\x23\x78\x9b\xb1\xae\x87\xc3\x3c\x36\x42\x54\xdf\xc4\xc8\x1b\x33\x22\xf1\x46\x16\xff\xb4\x79\xa8\x75\xc8\x41\x30\xbc\x24\xc9\x80\xea\xe7\x75\x08\x0f\xd2\x6d\x9b\xe1\x50\x26\x2f\xa6\xff\xdd\x32\x5e\x84\x7f\x02\x00\x00\xff\xff\x2b\xe7\xe2\xf3\xfb\x04\x00\x00")

func golangCreateRawTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangCreateRawTmpl,
		"golang.create-raw.tmpl",
	)
}

func golangCreateRawTmpl() (*asset, error) {
	bytes, err := golangCreateRawTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.create-raw.tmpl", size: 1275, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangCreateTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x4d\x6f\xe3\x36\x10\x3d\x4b\xbf\x62\xaa\x93\x04\xd8\x44\xcf\x01\x82\x62\x91\xcd\xa2\x29\x0c\x03\x89\x93\x5e\x16\x0b\x82\x96\x46\x2e\x6b\x8a\xd4\x52\x54\xec\x40\xe0\x7f\x2f\x86\x92\x15\xcb\x1f\x9b\x05\xb6\x37\x89\x33\xf3\xe6\xbd\x21\xf9\xd8\x75\x73\x28\xb0\x94\x1a\x21\xd1\xa2\xc2\x04\xe6\xde\xc7\x5d\x07\xb2\x04\xf6\x84\xb5\x12\x39\x82\xf7\xc3\x57\xd7\x01\xaa\x86\x16\xee\x2c\x0a\x17\xfe\x75\x01\xde\xf7\x05\xda\x38\x2a\x72\xad\xd5\xe0\xfd\xd2\xf4\x9f\x63\x12\xef\x3a\x60\xab\xb6\x2c\xe5\x1e\x42\x93\x79\x08\x50\xc3\xf8\x98\x47\x23\x37\x5a\xb8\xd6\x8e\x64\xe6\xe0\xb0\xaa\x95\x70\x23\x49\x06\xde\xa7\x5d\x07\xb9\xdb\xd7\xc2\x8a\x0a\xd8\x27\xbb\x69\xc0\xfb\x0c\xd2\x38\x1a\xe9\x0f\x4c\xba\x0e\x86\xac\x71\x69\x06\x23\x2d\xb4\x16\xd0\x5a\x63\xb3\xeb\x94\xa4\x7e\x35\xdb\x9f\xe3\x23\xec\xe6\x9d\x4d\x3c\x74\x39\x03\x5c\x9b\xe2\xad\x87\x8b\x68\x99\xe8\x2e\x11\x8b\x66\x69\x76\x34\x9b\x88\x73\x6d\x76\x70\x73\x0b\x66\xfd\x2f\x2b\xd6\xec\x4f\x63\xb6\x0d\x5b\x9a\x5d\x9a\xb1\x97\xe7\xbb\x34\x0b\x2a\x0f\xd0\x41\xb1\x96\x4e\xe3\x0e\xd8\xca\x09\x27\xf3\x2f\x12\x55\x41\x1c\xe2\x3e\xb3\x5a\x63\x11\xf6\xf0\x1f\xa3\x0a\xb4\x0d\xb0\x07\x5d\x1a\x18\x8a\x43\xb8\xf9\xae\x86\xd5\x84\xf3\xb0\xc2\x1b\x57\xb9\xa4\x07\x79\x15\x16\x38\x7f\x15\xaa\xc5\x06\xbe\x7e\x93\xda\xa1\x2d\xe9\x4c\x04\xb6\xc3\xfa\x2d\x88\xba\x46\x5d\xa4\x87\x95\x30\xe7\x30\x92\x13\x5a\x59\x3c\xee\xd3\xca\xd9\x36\x77\xec\x41\x37\x68\x9d\x58\x2b\xfc\xfc\xa6\x45\x35\xe6\xce\xfb\x79\x98\xda\x49\xa3\x85\xe2\xb9\x51\x6d\xa5\x1b\x1a\x0e\xe7\xcd\x77\xb5\x6e\x75\xa1\x90\x2f\xa4\x43\x2b\x54\xd3\xfd\x65\xa4\xbe\x81\x64\x06\xc9\xb4\x6e\xa2\xfe\xa7\x8a\xbb\x0e\xac\xd0\x1b\xfc\x90\x22\x31\x94\x25\x1c\x5a\x31\x3a\xe8\x4b\x51\xd1\x45\x61\xbc\x41\x07\x5d\x1c\xfd\x70\x48\x17\x2b\x43\x30\xcd\xb2\x50\x7b\x2a\x9f\xad\x1e\x17\x13\xa8\x8b\x09\xb3\x4b\x2a\xd3\x84\xba\xdc\x85\x34\xf0\x3e\x39\xed\x70\x3c\xa8\xeb\x6d\xce\xb2\xae\xf4\xfa\x23\xe0\xfb\xf1\xbc\x0e\xb3\x52\xa8\xaf\x91\xce\xe0\xf6\x16\x7e\x0f\x33\x93\x25\xf0\xe3\x18\x45\xb4\x54\x21\x16\x71\x9e\x2b\xd1\x36\xd8\x07\x2e\x77\xff\x7c\xff\xe5\xd3\xcb\xe2\x19\xfe\xfe\xb4\x78\xb9\x5f\x25\xa4\xd4\xc7\x91\xef\x6d\xac\xdf\x95\x09\xfc\x47\xa7\x62\x06\xc4\xf0\x06\xbe\x7e\x3b\x4e\x5c\x3d\x2e\xba\x09\x10\xcd\xe2\x54\x1b\x09\x8f\xf8\xd9\xdc\x7e\xad\xe7\x29\xda\xa4\xf1\x71\x90\xba\xfb\x89\x69\x1c\xae\x34\xdd\xf1\x13\x12\x4f\xa8\x0b\xb4\x69\xf0\x1e\x29\x14\xe6\x8e\x70\xdf\x2d\x21\x8b\x23\x8a\x29\xb3\x59\xb9\xca\xa5\x3d\xc6\x6c\xb4\x07\xc6\xd8\xfb\xf5\x9e\x3e\x0a\x71\xc4\x67\xe4\xb6\x30\x38\x9b\x95\xaf\x68\xd9\xfd\x1e\xf3\x3b\xa3\x1d\xee\x5d\x9a\xbb\xfd\x0c\x2e\x22\xd2\x69\xa0\xd2\xdf\xde\xcf\x80\xed\x71\x09\xaa\x12\x5b\xbc\xb7\x36\x45\x6b\xfb\xf3\x36\xc4\xb4\x54\xbd\x6c\xda\xf1\xd1\x2c\xc9\x76\xda\xba\x36\xd6\x35\x3d\x37\xa9\x37\x70\xe4\xa4\x13\xca\x67\x7c\x1f\x5b\xb4\x6f\x4f\x66\xf7\x21\x67\xb6\xca\x85\xa6\x87\x41\x14\x85\x35\x25\xa4\xa5\x12\xce\xa1\x3e\xc0\x67\xc1\x09\xaf\x0b\xd3\x52\xcd\x7e\xa8\xee\xe0\xae\x47\x0f\xdb\xb9\x60\xce\x2d\x99\x0c\xb5\xb8\xf9\x5f\xe7\x7e\x9d\x1e\xe7\xf5\x76\xec\x18\xfa\xb3\x85\x68\x5c\x6f\xa0\x0f\x45\xfa\x4b\xa2\x29\xb6\x41\x47\x80\xe4\x64\xbd\x76\xf6\xfc\x56\x93\x6d\x1e\x84\xd4\xdb\xf3\x37\xf2\xf0\x7d\xf4\xf9\x5f\x00\x00\x00\xff\xff\x19\xfa\xaf\xed\x01\x09\x00\x00")

func golangCreateTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangCreateTmpl,
		"golang.create.tmpl",
	)
}

func golangCreateTmpl() (*asset, error) {
	bytes, err := golangCreateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.create.tmpl", size: 2305, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeclTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xd6\x55\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\x49\x4d\xce\x51\x52\xa8\xad\xe5\x4a\x2b\xcd\x4b\x56\xd0\xc8\x4f\xca\x52\xd0\xaa\xae\x56\xd0\x0b\x4a\x4d\x4e\xcd\x2c\x4b\x2d\x72\x4a\x2c\x4e\x55\xa8\xad\xf5\xcc\x2d\xc8\xd1\x54\x00\x49\x04\x67\xa6\xe7\x25\x96\x94\x16\x81\x44\x15\xaa\xb9\x40\x42\x4e\xf9\x29\x95\x20\x23\x6a\x41\xbc\xd4\xbc\x14\x05\xdd\xda\x5a\x2e\x40\x00\x00\x00\xff\xff\x9b\x28\x5e\xfd\x65\x00\x00\x00")

func golangDeclTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeclTmpl,
		"golang.decl.tmpl",
	)
}

func golangDeclTmpl() (*asset, error) {
	bytes, err := golangDeclTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.decl.tmpl", size: 101, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeleteAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\xc1\x8b\xd5\x30\x10\xc6\xcf\xc9\x5f\x31\xf6\xd4\x42\x37\x78\x10\x0f\xc2\x3b\x2c\xba\x07\xaf\xbb\x47\x91\x90\xd7\x4c\x9e\x71\xd3\x64\x77\x32\x7d\x56\x42\xff\x77\x49\x5b\xb5\xc2\x82\xb0\x87\x40\x98\x6f\xf2\xfb\xbe\xc9\x94\x72\x03\x16\x9d\x8f\x08\x4d\xf6\x97\x68\x78\x22\x6c\xe0\x66\x59\xe4\x27\x0c\xc8\xa8\x4b\x01\xf5\x30\x39\xe7\x67\x58\x96\xb6\x14\x18\x78\x7e\x32\x64\x46\x50\xb7\x74\xc9\xb0\x2c\x1d\xb4\x52\x0c\x69\x8a\x0c\x3e\xf2\xfb\x77\x3d\x20\x51\x3d\x89\x3a\x59\x0d\x30\xda\x95\x28\x8f\x6e\x3e\x5e\xd3\xe3\xff\xad\x0c\x5d\xfe\x1a\xc9\x52\x5e\x86\x9d\x93\xfd\xb9\xa1\x44\x6d\x19\xcf\x68\x9f\x82\x19\xf0\x5b\x0a\x16\x29\x83\xfa\x1c\x5d\x82\xa3\x9c\x9f\xc3\x5e\x6d\xb4\x5e\x2b\x3a\xf3\xc8\x4d\x6d\x92\xe2\x6a\x08\xb4\xbe\x9a\x30\x61\x86\x2f\x5f\x7d\x64\x24\x67\x06\x2c\x07\xc2\xae\x6e\xe1\x9a\xdf\xdd\xff\x00\x2a\x11\x4e\xf5\xf2\x1c\xce\x53\xb4\x01\xf5\x3d\x46\x8b\xd4\xa6\xf3\x77\x65\xbd\x09\x38\x70\x0f\xc7\x00\x9d\x14\x55\x0b\xe9\xf2\xc0\x23\xb7\x1b\xa3\xff\x13\x46\x29\xd5\x49\x29\xb4\x26\xcc\xdb\x3f\x7f\x38\xc1\x0a\x23\x7f\x45\x52\x77\x33\x0e\x1f\x53\x64\x9c\xb9\x1d\x78\xee\xe1\x45\x80\xf0\x6e\x7d\xfb\xe6\x04\xd1\x07\x28\x52\x08\x42\x9e\x28\xc2\xdb\x7e\xa5\x8d\xe6\x11\xef\x88\x5a\x24\xea\xa4\xa8\x03\xad\xfb\xdd\x1c\xeb\x40\x84\x59\xdd\xa7\x1f\xf9\xd6\x39\x1c\x18\x6d\xfb\x2a\xe8\xae\xef\xec\xe8\xc3\x71\xc1\xbf\x02\x00\x00\xff\xff\xcf\xc9\x94\xdb\x9b\x02\x00\x00")

func golangDeleteAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteAllTmpl,
		"golang.delete-all.tmpl",
	)
}

func golangDeleteAllTmpl() (*asset, error) {
	bytes, err := golangDeleteAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete-all.tmpl", size: 667, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeleteWorldTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\xb1\x6a\xc3\x30\x10\x86\x67\xe9\x29\xae\x86\x82\x4d\x13\xd1\xa1\x74\xcb\x10\x4a\xb6\x2e\x4d\x1f\x20\x38\xd6\x39\xa8\x55\x4f\xcd\xe9\x9c\xa6\x08\xbf\x7b\x91\x1c\x87\xcc\x1d\x8c\x41\xf0\x7f\xdf\x7f\x7f\x4a\x4b\xb0\xd8\x3b\x42\xa8\xa2\x3b\x50\x2b\x03\x63\x05\xcb\x71\xd4\x16\x3d\x0a\xae\xbd\xaf\x3b\x39\x43\x17\x48\xf0\x2c\xe6\x65\xfa\x37\x50\x77\x61\x20\x01\x47\xf2\xfc\xb4\x00\x64\xce\x5f\xe0\x46\x67\x24\x92\x2d\x0c\x7d\xcb\xdf\x07\xfb\x3b\xa1\xd5\xa9\x65\xd8\xed\x18\x23\xc4\xa3\x37\x5b\x8c\x83\x97\xf9\xf5\x86\x3b\xe5\xb9\xa5\x03\x82\x79\x7f\x7b\x8d\x90\xc3\x25\x38\x29\x57\x10\xf6\x1f\xc6\xb2\x3b\x21\x9b\xcd\x19\xbb\x4b\xbd\x5c\x79\x01\x29\xc1\x37\x3b\x92\x1e\xaa\xfb\x63\x05\x06\xc6\xb1\xd1\xca\xf5\x25\x7a\xb7\x02\x72\x1e\x92\x56\x8a\x51\x06\x26\x78\x5c\x14\xda\x57\xfb\x89\x1b\xe6\x1a\x99\x1b\xad\x46\x9d\x85\xa5\xd3\xac\x2c\x7e\xb3\x0d\x3f\x71\xdd\xf7\xd8\x09\xda\xfa\x1f\x58\x35\xdd\xf9\xb0\x9a\x4f\xbe\x0e\x97\x77\x9b\xc3\x17\x31\x39\xaf\x53\xba\xce\xfa\x17\x00\x00\xff\xff\x29\xc5\xc6\xdd\xb6\x01\x00\x00")

func golangDeleteWorldTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteWorldTmpl,
		"golang.delete-world.tmpl",
	)
}

func golangDeleteWorldTmpl() (*asset, error) {
	bytes, err := golangDeleteWorldTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete-world.tmpl", size: 438, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeleteTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\xc1\x8a\xd5\x30\x14\x86\xd7\xc9\x53\x1c\xbb\x6a\xa1\x13\x5c\x0b\x57\x18\x74\x16\x6e\x67\x96\x22\x21\x4d\x4e\xae\x71\xd2\x64\xe6\x24\xbd\x56\x42\xdf\x5d\x92\x5b\xc7\x0a\x8a\x30\x8b\x42\xc9\xf9\xf3\x7d\x3f\x27\xa5\xdc\x80\x41\xeb\x02\x42\x97\xdc\x39\xa8\xbc\x10\x76\x70\xb3\x6d\xfc\x23\x7a\xcc\x28\x4b\x01\xf1\xb0\x58\xeb\x56\xd8\xb6\xbe\x14\xd0\x79\x7d\x52\xa4\x66\x10\xb7\x74\x4e\xb0\x6d\x03\xf4\x9c\x99\x96\x36\x30\xc5\xe8\x47\x40\xa2\xfa\x45\x1a\x78\x35\x60\x30\x0d\xc9\x8f\x3a\x17\x2e\xf1\xf1\xff\x2e\x45\xe7\xdf\xa6\x7f\xd3\xa6\x68\x7e\x5c\x59\xac\x14\xc0\x79\x42\xf3\xe4\x95\xc6\xaf\xd1\x1b\xa4\x04\xe2\x53\xb0\x11\x8e\xe3\xf4\xec\xf7\xd3\x4e\xca\x76\x22\x53\x9e\x73\x57\x43\x9c\x5d\x14\x81\x94\x17\xe5\x17\x4c\xf0\xf9\x8b\x0b\x19\xc9\x2a\x8d\xe5\x40\xd8\xa7\xd7\x76\xdd\xaf\xf4\x1f\x80\x4a\x84\x53\xfd\x79\xf6\xd3\x12\x8c\x47\x79\x8f\xc1\x20\xf5\x71\xfa\x26\x8c\x53\x1e\x75\x1e\xe1\x58\x60\xe0\xac\xce\x7c\x3c\x3f\xe4\x39\xf7\x57\xc6\xf8\x52\x46\x08\x31\x70\xce\xa4\x24\x4c\xd7\x45\xbf\x3b\x41\x83\x91\xbb\x20\x89\xbb\x15\xf5\x87\x18\x32\xae\xb9\xd7\x79\x1d\xe1\xaf\x00\xe6\x6c\xbb\xfb\xe6\x04\xc1\x79\x28\x9c\x31\xc2\xbc\x50\x00\xab\x7c\xc2\xb1\x11\x67\xf5\x88\x77\x44\x3d\x12\x0d\x9c\x6d\xcd\xaa\xe3\x12\xf2\x8b\xb7\xb5\x10\xf7\xf1\x7b\xba\xb5\x16\x75\x46\xd3\xbf\x9a\xbd\x67\x76\x05\xbc\x87\xb7\x63\xbd\xcf\xeb\xb6\xf7\x17\xff\x19\x00\x00\xff\xff\x18\xf4\xb6\xb0\xae\x02\x00\x00")

func golangDeleteTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteTmpl,
		"golang.delete.tmpl",
	)
}

func golangDeleteTmpl() (*asset, error) {
	bytes, err := golangDeleteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete.tmpl", size: 686, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDialectCockroachTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\xcd\xae\x9b\x30\x10\x85\xd7\xf8\x29\x4e\xbd\x82\x2b\x42\xa4\x76\xd7\x2a\x9b\xa6\x5d\x57\xea\x1b\x38\x66\x00\xeb\x12\x9b\xcc\x98\x56\x15\xe2\xdd\x2b\x3b\xe4\x6f\x71\x25\x36\xcc\xcc\x37\x67\xce\xf1\xb2\xec\xd0\x52\xe7\x3c\x41\xbb\xf3\x14\x38\x6a\xac\xab\x2a\x74\xef\xe2\x30\x9f\x1a\x1b\xce\xfb\xd1\x9d\xf6\xd3\x45\xab\x65\x01\xf9\x16\xbb\x75\x55\xea\x85\x93\x9d\x0d\x5e\x22\x1b\xe7\xe3\x8e\x98\x03\xe7\x25\xdd\xec\x2d\x4a\x77\x9e\x46\x2c\x0b\x9a\xdf\x64\xc9\xfd\x21\xc6\xba\x56\x70\x72\xbc\x23\x3f\x13\x51\x12\x33\x32\x5b\xa1\x54\xc5\x63\x21\x24\xb2\xf3\x7d\x8d\xf0\x8e\x53\x08\x63\x85\x45\x15\xae\x03\xe5\xca\xd7\x43\x82\x9a\xf2\x6d\xba\x34\x79\x4f\xf5\x2d\x95\x17\x55\x14\x79\xa8\x39\x86\x96\x9a\xe3\x68\x44\xca\x0a\x87\x03\xf4\xe7\x2f\xfa\xda\x2e\x98\xe2\xcc\x3e\xcf\xdc\xc4\x6a\x44\x9e\x29\x75\x57\x95\xbe\x6d\x44\xeb\x1a\x9d\x19\x85\xd4\xfa\x61\x0a\x61\x22\xff\xb0\x9d\xfe\x6c\xb0\xef\x1c\x8c\x1d\x4a\x09\x33\x5b\xda\x9c\x54\x28\xdf\xe4\x32\x36\x3f\xbe\xd7\x37\xc3\x8b\x2a\xf6\x7b\x44\xfe\x87\xce\xb1\x44\xfc\x75\x71\x80\xbe\xf3\x1a\x46\x60\xd0\x72\x8e\xcf\x79\x58\x23\x04\x09\x67\x0a\x9e\x30\x18\x01\x53\xef\x24\x12\x53\x9b\x37\xa5\x16\x64\x22\xeb\xcc\x08\x89\x73\xd7\x35\x70\x1d\xe2\x60\x22\x3a\xe3\x46\xa9\x11\x07\xf2\x59\xd1\xf4\xc6\xf9\x4d\x71\x0a\x12\x7b\x26\x49\x82\xd7\x93\x06\xda\x64\x1b\x55\xb4\xa7\x7c\x70\xca\x3c\xdd\xff\x6b\x22\x5f\x3e\x1d\x59\xe3\x6a\xb3\xba\x3e\x0f\x33\x3e\x1d\xe0\xdd\x98\xd3\xbe\xb1\xcf\xe8\x5d\xed\x89\x7c\x64\xbe\x11\xaf\x89\xff\x0f\x00\x00\xff\xff\x62\xb9\xbc\x1a\xaf\x02\x00\x00")

func golangDialectCockroachTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDialectCockroachTmpl,
		"golang.dialect-cockroach.tmpl",
	)
}

func golangDialectCockroachTmpl() (*asset, error) {
	bytes, err := golangDialectCockroachTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.dialect-cockroach.tmpl", size: 687, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDialectPgxTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xcb\x6a\xeb\x30\x10\x86\xd7\xd6\x53\x0c\x5a\xc9\xc1\x17\xc8\x39\xab\x94\x6c\x9a\x76\xdb\x96\x6e\x4b\x29\x8e\x3c\x76\xd5\xd8\x92\x3a\x92\x43\x40\xe8\xdd\x8b\x9c\x1b\x81\x16\xb4\x91\xfe\xf9\xe6\xe3\x57\x08\x25\xb4\xd8\x29\x8d\xc0\xd5\x68\x0d\x79\x0e\x31\xb2\x8c\xf7\xca\x7f\x4e\xdb\x4a\x9a\xb1\xfe\x6a\xe4\x4e\xd6\xb6\x97\x46\x6b\xce\xb2\x0f\xf8\x2d\x3c\xd4\xfb\xff\xb5\xf3\xed\xa0\xb6\x9c\x85\x00\xa8\x5b\x28\x63\x64\xec\xc6\xe0\x4a\x69\xb4\xf3\xd4\x28\xed\x4b\x24\x32\x34\xeb\xba\x49\x4b\x10\x6a\xb4\x03\x84\x00\xd5\x2b\x4a\x54\x7b\x24\x88\x31\x07\xe5\x36\x17\xe4\x31\x11\x02\x89\x60\x66\x73\x10\x2c\xbb\x2e\x04\xe7\x49\xe9\xbe\x00\xb3\x83\xad\x31\x43\x0e\x81\x65\xaa\x03\x9c\x5f\x56\xeb\x04\x55\x62\x71\x2c\x52\xbd\xf4\xf3\xb6\xfc\x2e\x85\x81\x65\xd9\x3c\x5a\x6d\x4c\x8b\x6f\xab\xe5\x3b\xac\xd7\xc0\x97\xff\xf8\x31\xca\x08\xfd\x44\x7a\xce\xcf\xba\xa7\x66\xc4\x02\x3c\x4d\x98\x26\x22\x4b\xe7\x34\xc6\x79\x01\x5d\x33\x38\x64\xf1\xcf\xbf\x30\x16\xf5\xb5\x7c\xba\xd9\xfe\x20\x9c\x99\x48\xe2\xa9\x49\x0e\x62\xe1\xbe\x87\xea\xe1\xbe\x38\x17\x0e\x17\x47\x0a\x9e\x2d\x6a\xc1\x6d\x7f\xe0\x05\x1c\xc9\xfc\xd6\xf8\x13\x00\x00\xff\xff\x19\x67\x0f\xeb\xdf\x01\x00\x00")

func golangDialectPgxTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDialectPgxTmpl,
		"golang.dialect-pgx.tmpl",
	)
}

func golangDialectPgxTmpl() (*asset, error) {
	bytes, err := golangDialectPgxTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.dialect-pgx.tmpl", size: 479, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDialectPgxcockroachTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x41\x8f\x94\x40\x10\x85\xcf\xf4\xaf\x78\xf6\x09\x36\x0c\x24\xab\xa7\x35\x73\x71\xf5\xaa\xc6\xab\x31\xa6\xa7\x29\xa0\x1d\xa6\x1b\xab\x9b\x75\x0c\xe1\xbf\x9b\x6e\x98\x9d\xd9\xc4\x4d\xb8\xc0\xab\x57\x5f\xbd\xc7\x3c\xef\xd0\x50\x6b\x2c\x41\x9a\xd3\xe8\x38\x48\x2c\x8b\xc8\x64\x67\x42\x3f\x1d\x2a\xed\x4e\xf5\x2f\xa5\x8f\xba\x1e\x3b\xed\xac\x95\x22\xfb\x89\xff\x89\xe7\xfa\xe9\x5d\xed\x43\x33\x98\x83\x14\xf3\x0c\xb2\x0d\x76\xcb\x22\xc4\x0b\x82\xdf\x69\x67\x7d\x60\x65\x6c\xd8\x11\xb3\xe3\x84\x6b\x27\xab\x91\x9b\xd3\x38\x60\x9e\x51\x7d\x23\x4d\xe6\x89\x18\xcb\x52\xc0\xf8\xc7\x67\xcb\xa7\xe8\xc8\x89\x19\xc9\x5b\x20\x17\xd9\x75\x21\x7c\x60\x63\xbb\x12\xee\x88\x83\x73\x43\x81\x59\x64\xa6\x05\xa5\x2f\x0f\xfb\x68\xaa\xf2\xbb\x35\x48\xf5\xb5\x4b\xdb\x8a\xf7\x51\x9c\x45\x96\xa5\xd1\xea\xd1\x35\xf4\xfd\xe1\xfe\x07\xf6\x7b\xc8\xfb\xb7\x72\x95\x32\xa6\x30\xb1\x4d\xfa\x05\xf7\x59\x9d\xa8\x44\xe0\x89\xe2\xc4\x22\xe2\xb3\x8d\x49\x59\xa2\x55\x83\x27\xb1\xbc\xda\x85\x1b\xc9\x5e\xc3\xc7\xb7\xb1\x3b\x6b\xa7\x8f\xec\x94\xee\x73\xef\x26\xd6\xb4\x45\x2a\x90\xdf\xf9\xdf\x43\xf5\xf1\x43\x79\x49\x3e\x8b\xac\xae\x11\xf8\x2f\x5a\xc3\x3e\xe0\x8f\x09\x3d\xe4\xb3\x5f\x42\x79\x28\x34\x9c\x7a\x34\x16\x5a\x79\x82\x77\x27\x72\x96\xd0\x2b\x0f\xa6\xce\xf8\x40\x4c\x4d\xda\x14\x25\xf8\x91\xb4\x51\x03\x7c\x98\xda\xb6\x82\x69\x11\x7a\x15\xd0\x2a\x33\xf8\x12\xa1\x27\x9b\x88\xaa\x53\xc6\x6e\xc4\xb1\x3b\x47\xd6\x7a\x4d\x4f\x1b\xb1\x12\x59\x73\x48\xb7\xc6\xde\xe3\xe9\x5f\x46\xb2\xf9\xcd\x7d\x25\xd6\x84\xc5\xfa\x8b\x98\xf1\x66\x0f\x6b\x86\xd4\xf7\xc5\x7b\x6b\x8d\xa0\x1b\xd3\xb5\xec\x6d\xf8\x65\xd5\xff\x02\x00\x00\xff\xff\xa2\x52\x28\x9b\xd8\x02\x00\x00")

func golangDialectPgxcockroachTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDialectPgxcockroachTmpl,
		"golang.dialect-pgxcockroach.tmpl",
	)
}

func golangDialectPgxcockroachTmpl() (*asset, error) {
	bytes, err := golangDialectPgxcockroachTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.dialect-pgxcockroach.tmpl", size: 728, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDialectPostgresTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x31\x6f\xc3\x20\x14\x84\x67\xf8\x15\x4f\x4c\x10\xd9\x44\x6a\xb7\x56\x59\x9a\x76\xae\xd4\x7f\x90\x38\xcf\x29\x2a\x06\xfc\xc0\x5d\x10\xff\xbd\x82\xc4\x89\x32\x54\xf2\xe2\x77\xf7\xdd\xe9\xc8\xb9\x87\x13\x8e\xc6\x21\x08\x33\x05\x4f\x49\x40\x29\x9c\x89\xb3\x49\xdf\xcb\x51\x0f\x7e\xda\x5a\x73\xdc\x86\x59\xf0\x9c\x01\xdd\x09\xfa\x52\x38\x7f\xe0\x62\x3f\x78\x17\x13\x1d\x8c\x4b\x3d\x12\x79\x6a\x21\xe3\xe2\x06\x90\x66\x0a\x16\x72\x06\xfd\x85\x03\x9a\x5f\x24\x28\x45\x81\x89\xfb\x1b\xf2\x51\x09\x89\x44\xd0\x58\x05\x92\xb3\x7b\x20\xc4\x44\xc6\x9d\x3b\xf0\x3f\x70\xf4\xde\x2a\xc8\x9c\x99\x11\xb0\x5d\x5e\x76\x15\xd2\x72\x13\x66\xdd\x72\xd4\x6b\x3d\x67\xce\x58\x33\xe9\xbd\x3f\xa1\xde\xdb\x43\x8c\x52\xc1\x6e\x07\xe2\xe9\x59\x5c\x64\x46\x98\x16\x72\xcd\xb3\x96\x75\x90\x68\xc1\xaa\x16\x5e\xbf\xab\x45\x88\x0e\xc6\x83\x8d\xc8\xcb\xbf\xaf\xe0\x03\xba\xfb\xec\xfa\x17\x7c\x4c\x67\xc2\x28\xa3\x5f\x68\xc0\xeb\x10\x05\x72\x13\x67\xab\xdf\xdf\xba\x75\x6f\xbe\x15\x55\xe1\x33\xa0\x93\x62\x85\x45\x07\x17\x5c\x3d\x74\xff\x05\x00\x00\xff\xff\xc1\x0a\x5b\x7f\xb8\x01\x00\x00")

func golangDialectPostgresTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDialectPostgresTmpl,
		"golang.dialect-postgres.tmpl",
	)
}

func golangDialectPostgresTmpl() (*asset, error) {
	bytes, err := golangDialectPostgresTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.dialect-postgres.tmpl", size: 440, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDialectSqlite3Tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x4d\x6f\xdb\x38\x10\x3d\x8b\xbf\x62\x96\xc0\x2e\xc4\x5d\x59\x46\x10\x60\x0f\x2e\x74\x48\x93\xa0\x1f\xc8\x47\x6b\x17\xe8\x21\x08\x0c\x5a\x1a\xc9\xac\x29\x52\x21\xa9\xc4\x86\xa0\xff\x5e\x90\x92\x13\xbb\x4d\x0b\x14\xd0\x45\x7c\x33\x6f\x3e\xde\x9b\xae\x9b\x40\x81\xa5\x50\x08\x54\xd4\x8d\x36\x8e\x42\xdf\x93\x88\xd6\xdc\xad\xa7\x86\xab\x82\x92\x88\x56\xc2\xad\xdb\x55\x9a\xeb\x7a\x5a\x73\xe7\xd4\xb4\xd2\x13\xfb\x20\x85\xc3\x53\x4a\xba\x0e\x50\x15\x30\xe9\x7b\x42\x8e\xe8\xec\x24\xd7\xca\x3a\xc3\x85\x72\x13\x34\x46\x9b\xc0\x5d\xb6\x2a\x87\x58\xd4\x8d\x84\xae\x83\x74\x8e\x39\x8a\x47\x34\xd0\xf7\x0c\x84\x3d\x7f\x4e\xb9\xf4\x19\x31\x1a\x03\x21\x97\x41\x4c\xa2\x17\x42\xb0\xce\x08\x55\x25\xa0\x37\xb0\xd2\x5a\x32\xe8\x48\x24\x4a\xc0\xf0\x32\xcb\x7c\x52\x1a\x8f\x4d\xa6\x81\x8b\xbd\xf1\x50\x47\xa2\x28\x04\xa6\xe7\xba\x40\xc8\x32\x38\x08\x7a\xa9\x3e\xc4\x45\xb5\xad\xf6\x64\x43\x3f\x2c\x3c\xe7\x5a\x6a\xe5\x81\xa1\x0b\x9b\x5e\x71\xeb\x3e\xa8\x02\xb7\x71\x6d\xab\x04\xe8\x8c\x0e\x81\xa2\x84\x21\xf6\xaf\x0c\x26\x27\x23\x69\x64\xd0\xb5\x46\x3d\x27\x7f\x31\xa2\x5e\x34\x3c\x47\x9f\x7c\x17\xe2\x67\xf7\x2c\x01\x67\x5a\x0c\x09\x3d\x39\xc8\xa2\xf4\x05\xe9\x89\xff\x0e\x80\x92\x4b\x8b\xa4\xff\xa5\x28\xba\x41\x15\x54\x78\xe4\x66\x3f\xf8\x85\xf1\xfb\xbf\xe1\x35\x42\x06\x5e\x9d\x98\x8d\xad\xf9\x7e\x7d\xa0\x28\xe0\xee\xe4\xff\xfb\xd5\xce\x21\x89\xbc\x29\xd2\x39\xf2\x22\x16\xc5\xdd\xec\x9e\x3d\xd7\x2f\x6b\x97\x2e\x1a\x23\x94\x2b\x63\x3a\x72\x2f\xff\xde\xd2\x64\x64\x1b\xe3\x19\xe9\x63\x46\x06\x1b\x08\x25\x5c\x1c\xa4\xb3\x0f\x32\x9d\x63\x25\xac\x43\x13\xff\xd4\x58\x02\xff\xec\x55\x5a\x7c\xbe\x12\x0e\x07\xc8\xaf\xf3\x5c\x2b\x85\xb9\x7b\xaf\xf5\x66\xb6\x9f\x68\x81\xae\x6d\x3c\x90\x90\xa8\x67\xa4\x27\x64\x3a\x85\x21\xf1\xf4\xa3\x6e\x8d\xe2\xf2\xda\x8b\x9f\x6b\xe5\x8c\x96\x16\xdc\x1a\xe1\xdb\x00\x2c\x6b\x8f\x34\x86\x57\x35\x87\x52\x1b\xe0\x52\x82\xc2\x27\x1f\xec\x0b\x09\xad\x6c\x1a\xf8\x84\xca\x11\x84\x03\x61\xc1\x20\x2f\xe0\x49\xb8\xb5\x6e\x1d\x70\xa8\x5b\x87\xdb\xc4\x63\x75\x6b\x1d\xac\x10\xf2\x35\x57\x15\x16\xe0\x74\xa8\xf5\xc8\x65\x8b\xb0\xd3\x2d\x3c\x71\xe5\x3c\xdb\x0a\x4b\x6d\x10\xb8\xda\xc1\x6d\x83\x0a\x72\x2e\xa5\x4d\x83\x4c\xaf\x34\x9e\x01\xfd\x7a\x76\x45\xc7\x2d\xfe\x38\x75\xec\x5b\x85\x7f\x8f\x37\xe6\x01\x06\x87\xf7\xd4\x91\x68\x99\xf8\x1f\xc8\xc2\x70\xe9\xe5\x16\xf3\x98\x7e\x9a\x9f\xbd\xbb\x3e\xf3\xa3\xa3\xa8\xd4\x72\x83\x3b\x0b\x19\xdc\xde\xd0\x04\x94\x90\x6c\xb8\x32\x63\xbc\xa3\x95\x90\xc1\xd2\xa3\x01\x6a\xbe\xc1\x4b\x13\x6e\x96\x05\x63\xfe\x86\xfe\x68\xdb\x19\x50\xf8\xef\x95\x39\xff\xbc\xe2\xf8\xae\x84\xf4\xaa\x87\xed\x78\xcb\x8f\xab\x88\xad\x6e\x4d\x8e\xa3\x1f\x19\xc4\x7e\x47\xe9\xc5\xdb\xe4\x60\x25\xfb\xdb\x7c\x90\xa9\x17\xe2\x35\x2f\x0e\x2c\xec\xe8\xcc\xbe\x07\x00\x00\xff\xff\xee\x90\xf0\xb1\x49\x05\x00\x00")

func golangDialectSqlite3TmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDialectSqlite3Tmpl,
		"golang.dialect-sqlite3.tmpl",
	)
}

func golangDialectSqlite3Tmpl() (*asset, error) {
	bytes, err := golangDialectSqlite3TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.dialect-sqlite3.tmpl", size: 1353, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\x3f\x8f\x9b\x40\x10\xc5\xeb\x9d\x4f\x31\xe9\xc0\xba\x50\x45\x29\x12\xb9\xc8\xdd\xa5\x48\x11\x45\xb2\x49\x1d\xf1\x67\xf0\xad\x8c\x17\x6e\x19\x2e\x1b\xad\xf8\xee\xd1\xf2\xdf\x80\x63\xa5\x38\xc1\x0d\x3b\xef\xfd\x1e\x33\xd8\x5a\x94\x19\x06\xc7\xba\x2c\x0b\xcd\x07\x83\x4d\x03\xfc\xa7\x24\x3c\x18\xac\x58\xd7\x09\xa3\x05\x91\xc6\xb8\x7b\x7e\x04\xc1\x06\x77\xa1\x81\x06\x20\xab\x55\x82\x9e\x36\xb8\x3b\x18\x1f\x7f\xaa\x2a\xca\x28\x34\x5e\xc2\x06\x93\x42\x31\x19\x0e\x9e\xba\xab\x8f\x5e\xdd\x3e\xfe\xe5\xba\xab\xd7\x3c\x08\xcd\x03\x92\xd6\xee\xaf\xd0\xbe\xd3\xe7\xbe\xf2\x69\x8f\xda\x04\x27\xe2\x4e\xca\x07\x21\xb3\xf6\xc1\xbb\x3d\x2a\x99\xbb\xa3\x42\x13\xd7\x5a\xb9\x7f\xdb\x1e\x10\x0d\x0c\x35\x36\xad\xb6\x92\xf9\x1a\x71\x14\xdd\xe0\xeb\x62\x2d\xa1\x64\xe6\x60\xd8\xe0\x7e\x32\x1f\x6a\xdd\xd9\x96\x36\x8d\x83\x1f\x25\xa9\x96\xf7\xf3\x12\x76\x4d\xeb\x70\x27\xe2\x5e\x6c\x93\xf8\x40\xb1\x54\xa9\x57\xb9\x39\x48\x75\xf2\xfb\xab\xd3\x9d\xba\xd3\x38\x18\xce\xf9\x6b\x89\xa7\xe2\x72\x91\xec\xf9\xe8\xdd\x88\x36\x43\x1d\x03\xb1\x09\x86\x3e\xf7\xba\xbb\x57\xd0\x22\xce\xc0\x5d\x96\x35\x71\x91\xe7\x71\x94\x9c\xff\xdf\x70\xea\xbc\x6b\x69\x2d\xea\x48\x9d\x08\x83\xef\xc4\x2f\x45\x5a\xb9\x95\xbd\xe6\xb0\x16\x83\xa3\x3c\xa9\x88\x6b\x4d\xd8\x34\xce\xee\x2d\xd2\xd8\xaf\xaf\xa3\xb9\x1a\xe1\xb4\x70\xab\x01\xf6\xde\x8b\x2d\x73\x06\xdf\xd4\x5b\x71\x76\xea\xd0\x38\x26\x52\xa9\xbb\x9f\xee\xba\xcf\x68\x60\x94\x8a\x49\x67\x51\x42\x68\xc1\xda\xf7\x1b\x11\xc4\x92\x7a\xa6\x35\xa8\x85\x66\x4b\x4f\xf4\x45\x00\x71\x63\x67\x40\x8c\x9b\xd0\xce\x04\xc4\x6c\x54\x5d\x65\xb0\xe0\x6d\x8b\xd1\x19\x40\xa4\x94\x13\xd3\x97\x3c\xbf\xf1\x39\x49\xc5\x1f\x3f\x3c\xf4\xd3\x07\x71\x89\xce\xf4\x55\xeb\xf9\x46\x5c\x5b\x3e\x3f\xde\x49\x75\x4c\x5e\xe8\x12\x79\x53\x9a\x21\xe6\x6b\xbe\x0c\x3a\x68\xa6\xf1\xa6\xe6\x68\x05\x20\x7e\xeb\xa8\x0c\x8d\x37\xfd\x2a\xf9\x53\xf8\x7f\x52\xff\x0d\x00\x00\xff\xff\x20\xf7\x92\xb8\x34\x05\x00\x00")

func golangFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangFooterTmpl,
		"golang.footer.tmpl",
	)
}

func golangFooterTmpl() (*asset, error) {
	bytes, err := golangFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.footer.tmpl", size: 1332, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xc1\x6a\xdc\x30\x10\x86\xcf\xd2\x53\x4c\xf7\x64\x83\xa3\x07\x48\xf1\x21\x84\x1e\x7a\x29\x34\x7b\x2c\xc5\x68\xad\xd1\x56\x8d\x2c\x6d\xc6\xf2\xee\x06\xa1\x77\x2f\x63\x7b\xb7\x1b\x48\x09\x3d\x18\xec\x99\xf1\xf7\xff\x1a\xfd\x39\xdf\x81\x41\xeb\x02\xc2\x66\x74\xfb\xa0\xd3\x44\xb8\x81\xbb\x52\xe4\x83\xf7\x5d\xce\xa0\xb6\x93\xb5\xee\x0c\xa5\x54\x39\x43\x9f\xce\x07\x4d\x7a\x00\xf5\x40\xfb\x11\x4a\xa9\xa1\x92\x82\xe2\x69\x84\x9c\x61\xf4\xae\xc7\x68\x41\x3d\xc5\x13\x94\xd2\x00\x12\xf1\x13\xa9\x96\xac\x84\xc1\xcc\x68\x79\x2b\xeb\xc2\x31\x3e\x7f\xa0\xa9\x69\xff\x57\xf1\xdf\xa8\x5d\x34\xaf\x1b\x28\x45\x8a\x9c\x01\x87\x1d\x9a\x83\xd7\x3d\xfe\x8a\xde\x20\x8d\xa0\xbe\x06\x1b\xdf\xb4\xc7\x17\xbf\x56\x37\x5d\x37\x57\xba\x31\x0d\x69\x66\x48\x71\xd4\x04\x5d\x77\xd4\x7e\xc2\x11\x7e\xfc\x74\x21\x21\x59\xdd\x63\xbe\x21\xac\xdd\xc5\xdc\xe6\x32\xfd\x06\xc0\x44\x68\xf9\xe5\xc5\xef\xa6\x60\x3c\x76\x4f\x18\x0c\x52\x15\x77\xbf\x95\x71\xda\x63\x9f\x1a\xb8\x35\x50\x4b\xc1\x3d\x1f\xf7\xdb\x34\xa4\x6a\x61\x34\x57\x33\x4a\xa9\x5a\x4a\xd1\x75\xbc\xf8\x65\xcb\xf7\x2d\xcc\x34\x72\x47\x24\xf5\x7d\x42\x7a\x7d\x8c\x21\xe1\x39\x55\x7d\x3a\x37\xf0\x2e\x42\x38\x3b\xff\xfc\xa9\x85\xe0\x3c\x64\x29\x04\x61\x9a\x28\xf0\x67\x33\x03\x07\xfd\x8c\x5f\x88\x2a\x24\xaa\xa5\x28\x52\x18\xb4\xc8\xa7\x62\x69\xf5\xe8\xe3\x88\x15\x7b\xb1\xf1\x5a\xfc\xc6\xa2\xf5\x4c\xcb\x19\x5c\x70\x29\xe0\xe9\x92\x09\x29\x04\x2b\xb6\x97\xe1\x6d\xaf\x03\x5f\xb2\x36\x86\xa2\x85\xca\x7a\x9d\x12\x86\x79\xbc\x9e\x6f\x5b\xbc\xe3\xf2\x03\x9b\xec\x73\x09\x65\x0b\xfa\x70\xc0\x60\xaa\x65\x53\x2c\xc4\x51\x5a\xbc\x2c\x07\x5a\xe9\xf7\x57\x4b\xcc\xa9\x3f\xff\xf7\x62\xd6\x81\x45\x28\x38\x2f\x39\x22\x6b\x4a\xff\x04\x00\x00\xff\xff\xa6\x37\x49\x0c\x67\x03\x00\x00")

func golangGetAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetAllTmpl,
		"golang.get-all.tmpl",
	)
}

func golangGetAllTmpl() (*asset, error) {
	bytes, err := golangGetAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-all.tmpl", size: 871, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetCountTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xb1\xab\xdb\x30\x10\xc6\x67\xe9\xaf\xb8\x7a\x28\x36\x38\xa2\x43\xe9\x96\xa1\x84\x0e\x1d\x9b\x8c\xa5\x18\xd9\x3a\xbb\x6a\x64\x29\x39\xcb\xae\x83\xd0\xff\x5e\xa4\xb8\x6d\x02\xef\xf1\x06\x83\xb9\xef\xee\x77\x9f\xee\x0b\x61\x07\x0a\x7b\x6d\x11\x8a\x49\x0f\x56\xfa\x99\xb0\x80\x5d\x8c\xfc\xe0\x66\xeb\x9b\x10\x40\x9c\xe6\xbe\xd7\x2b\xc4\x58\x86\x00\x9d\x5f\x2f\x92\xe4\x08\xe2\x33\x0d\x13\xc4\x58\x41\xc9\x59\x97\x9a\x41\x5b\xff\xe9\x63\x0d\x48\x94\x3e\x47\x15\x4f\x7c\xb4\x2a\x03\xf9\xe3\x32\x6d\x17\x77\x7e\x73\x93\xa4\xe1\xff\x9e\xd7\x61\xad\x53\xb7\x02\x62\xe4\x2c\x04\xc0\xb1\x45\x75\x31\xb2\xc3\x9f\xce\x28\xa4\x09\xc4\x57\xdb\xbb\x27\x79\xba\x9a\xad\x5a\x34\x4d\xae\x34\x93\x1f\x7d\x66\x70\xb6\x48\x82\xa6\x59\xa4\x99\x71\x82\xef\x3f\xb4\xf5\x48\xbd\xec\x30\x3c\x10\x36\xf5\x6e\xae\xf8\xdb\xfd\x04\x48\x44\xd8\xa7\x9f\xab\x69\x67\xab\x0c\x36\x47\xb4\x0a\xa9\x74\xed\x2f\xa1\xb4\x34\xd8\xf9\x1a\x1e\x0d\x54\x9c\x25\xcd\xb8\xe1\xe4\x47\x5f\xde\x19\xf5\x3f\x33\x42\x88\x8a\x73\x96\xee\xbb\x87\x0c\x21\xbd\x20\x89\x6f\x33\xd2\xed\xe8\x7e\x1f\x9c\xf5\xb8\xfa\xb2\xf3\x6b\x0d\x2f\x0d\x8b\x53\x27\x6d\xf9\x3e\xa7\x55\x71\xa6\xfb\x9c\xd5\xbb\x3d\x58\x6d\x20\x70\xc6\x08\xfd\x4c\x16\x3e\xd4\x19\x3f\xca\x33\x7e\x21\x2a\x91\xa8\xe2\x2c\xbd\x6c\xd3\x33\xa0\x4e\x53\x3c\x1d\x64\xcb\xe4\x4f\x00\x00\x00\xff\xff\x1c\x98\x89\xcb\x4d\x02\x00\x00")

func golangGetCountTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetCountTmpl,
		"golang.get-count.tmpl",
	)
}

func golangGetCountTmpl() (*asset, error) {
	bytes, err := golangGetCountTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-count.tmpl", size: 589, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetFirstTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\xc1\x6a\xdc\x30\x10\x86\xcf\xd2\x53\x4c\x7c\xb2\xc1\xf1\x03\xa4\xec\xa1\x84\x16\x7a\x29\x34\x7b\x2c\xc5\x68\xad\xd1\x56\x8d\x2c\x25\x63\x79\xb3\x41\xe8\xdd\xcb\x68\xed\x74\xb7\xb4\x2c\xe4\x60\xb0\x67\x46\xdf\xff\x7b\xf4\xa7\x74\x0b\x1a\x8d\xf5\x08\xd5\x64\xf7\x5e\xc5\x99\xb0\x82\xdb\x9c\xe5\x67\x4b\x53\xec\x53\x82\x6e\x3b\x1b\x63\x8f\x90\x73\x9d\x12\x0c\xf1\xf8\xa4\x48\x8d\xd0\x7d\xa4\xfd\x04\x39\x37\x50\x4b\x91\x12\x2c\xd5\x87\xf0\x02\x39\xb7\x80\x44\xfc\x04\x6a\x24\x8b\xa0\xd7\x85\x2a\xcf\x15\xad\x3f\x84\xc7\xab\x72\x8a\xf6\x7f\xc4\xfe\x0f\xdb\x05\xfd\x5a\x41\xce\xc5\x0c\x8e\x3b\xd4\x4f\x4e\x0d\xf8\x33\x38\x8d\x34\x41\xf7\xc5\x9b\x70\xd1\x9e\x9e\xdd\x52\xad\xfa\xbe\x54\xfa\x29\x8e\xb1\x30\xa4\x38\x28\x82\xbe\x3f\x28\x37\xe3\x04\xdf\x7f\x58\x1f\x91\x8c\x1a\x30\x9d\x11\x96\xee\xc9\x5c\xb5\x4e\x5f\x00\x98\x08\x1b\x7e\x79\x76\xbb\xd9\x6b\x87\xfd\x03\x7a\x8d\x54\x87\xdd\xaf\x4e\x5b\xe5\x70\x88\x2d\x9c\x1b\x68\xa4\xe0\x9e\x0b\xfb\x6d\x1c\x63\x7d\x62\xb4\x6f\x66\xba\xae\x6b\xa4\x14\x7d\x4f\xe1\x65\x3a\xed\xf9\x6e\x03\x85\x46\xf6\x80\xd4\x7d\x9b\x91\x5e\xef\x83\x8f\x78\x8c\xf5\x10\x8f\x2d\xfc\x13\x21\xac\x29\x87\x6f\x36\xe0\xad\x83\x24\x85\x20\x8c\x33\x79\xfe\x6c\x0b\x70\x54\x8f\xf8\x89\xa8\x46\xa2\x46\x8a\x2c\x85\x46\x83\xfc\x57\x2c\xdd\xdd\xbb\x30\x61\xcd\x5e\xac\x81\x9b\xa5\xf8\x95\x45\x9b\x42\x5b\xf8\x77\x9b\xf5\x00\xa3\x9a\x0f\x7f\x8b\x5e\x51\x65\xd9\x8b\x11\x6f\x1d\x7b\x29\xb7\x60\xbd\x8d\x6b\xe4\xa4\x60\xf0\x9b\xd8\x76\x50\x9e\x03\xa4\xb4\xa6\x60\xa0\x36\x4e\xc5\x88\xbe\x4c\x37\x25\x49\xef\x58\x80\x5c\x27\x18\xcc\xb1\x5c\xd3\xce\xa6\x38\x15\x4b\x30\x7f\x07\x00\x00\xff\xff\x0f\x9c\x88\x07\x57\x03\x00\x00")

func golangGetFirstTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetFirstTmpl,
		"golang.get-first.tmpl",
	)
}

func golangGetFirstTmpl() (*asset, error) {
	bytes, err := golangGetFirstTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-first.tmpl", size: 855, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetHasTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xc1\x8a\xdc\x30\x0c\x86\xcf\xf6\x53\xa8\x39\x94\x04\xb2\x7e\x83\x39\x94\x52\x68\x8f\xdd\x39\x96\x12\x94\x58\x49\xdc\x75\xec\x5d\xd9\x49\xb3\x18\xbf\x7b\x71\x76\xa6\x9d\x81\x96\x1e\x0c\x46\xbf\xf4\xfd\x3f\x52\x4a\x0f\xa0\x69\x34\x8e\xa0\x0a\x66\x72\x18\x57\xa6\x0a\x1e\x72\x96\x9f\x31\x74\x29\x81\x3a\xaf\xe3\x68\x76\xc8\xb9\x4e\x09\x86\xb8\x3f\x23\xe3\x02\xea\x03\x4f\x01\x72\x6e\xa0\x96\x62\xc6\x00\xbd\xf7\xb6\x05\x62\x2e\xcf\x73\x23\x0b\x9a\x9c\x3e\x58\xf2\xd6\xc7\xb8\xcd\x3f\xfd\xc7\x04\x79\xfa\x63\xf1\x6f\x54\xef\xf5\x6b\x05\x39\x4b\x91\x12\xd0\xd2\x93\x7e\xb6\x38\xd0\xec\xad\x26\x0e\xa0\xbe\xb8\xd1\xdf\xc9\xe1\xc5\x5e\xaa\x55\xd7\x1d\x95\x2e\xc4\x25\x1e\x0c\x29\x36\x64\xe8\xba\x0d\xed\x4a\x01\xbe\x7d\x37\x2e\x12\x8f\x38\x50\xba\x21\x5c\xd4\xb7\x70\xd5\xb5\xfb\x0e\x50\x88\x70\x2a\x9f\x17\xdb\xaf\x4e\x5b\xea\x1e\xc9\x69\xe2\xda\xf7\x3f\x94\x36\x68\x69\x88\x2d\xdc\x06\x68\xa4\x28\x9a\xf5\xd3\x39\x2e\xb1\x7e\x63\xb4\xbf\xc3\x28\xa5\x1a\x29\x45\xd9\xee\x09\x0e\x08\x9b\x8d\x58\x7d\x5d\x89\x5f\x1f\xfd\xcf\x8f\xde\x45\xda\x63\x3d\xc4\xbd\x85\xbf\x0d\xab\xf3\x80\xae\x7e\x3f\x63\x68\xa4\x30\xe3\x71\xa7\x77\x27\x70\xc6\x42\x92\x42\x30\xc5\x95\x1d\x8c\x68\x03\xb5\x87\xc1\x82\x4f\xf4\x89\xb9\x26\xe6\x46\x8a\x2c\xaf\x2d\x33\x86\xb6\x8c\xc9\xb2\x8f\xcb\x49\x7e\x05\x00\x00\xff\xff\x42\x8f\xcb\x54\x45\x02\x00\x00")

func golangGetHasTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetHasTmpl,
		"golang.get-has.tmpl",
	)
}

func golangGetHasTmpl() (*asset, error) {
	bytes, err := golangGetHasTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-has.tmpl", size: 581, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetLastTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x91\x41\x6f\xa3\x30\x10\x85\xcf\xf6\xaf\x98\xe5\x04\x12\xe1\xb4\xda\x5b\x4e\xab\x1e\x2a\xf5\xd2\xa4\x77\x64\xf0\x40\xdd\x18\x9b\x0c\x43\x9a\xd4\xf2\x7f\xaf\x0c\x89\x44\x0e\x08\x6b\xe6\xcd\xfb\x3c\xcf\x21\xec\x40\x63\x67\x1c\x42\x36\x99\xde\x29\x9e\x09\x33\xd8\xc5\x28\x7b\xe4\x37\x35\x71\x08\x50\x1d\x90\x67\x72\xd5\xc7\x6d\x44\x88\x31\x6f\xf9\x0a\xad\x77\x8c\x57\xae\xfe\xaf\xff\x52\x8a\xf1\x04\xc6\xf1\xbf\xbf\x05\xe4\x52\x84\x00\xa3\x22\x35\x3c\x66\x21\xc6\x12\x90\x28\x7d\x9e\x0a\x99\xb8\xe8\xf4\x02\x92\xdb\x4b\x34\x5e\xdf\x56\x7e\xf2\xc0\xa1\x41\x3d\x5a\xd5\xe2\xa7\xb7\x1a\x69\x82\xea\xd5\x75\x1e\xb6\xed\xe9\x6c\xef\xd5\xac\xae\x97\x4a\x3d\xf1\xc0\x59\x12\x49\x71\x51\x04\xf5\x52\x80\x7d\x3a\x9c\x6d\x33\x3b\x6d\xb1\x3e\xa0\xd3\x48\xb9\x6f\xbe\x2a\x6d\x94\xc5\x96\x4b\xd8\xce\x17\x52\xa4\x9e\xf5\xfd\x91\x07\xce\x57\x8f\x12\xc6\x53\x21\x17\xb6\x71\x86\x37\xdb\x49\x91\xb6\xdb\xc3\xe2\x47\xe6\x82\x54\xbd\xcf\x48\xb7\x83\xff\xbe\x47\x94\x62\x2b\x61\xe3\x53\x1d\x5b\xe5\xf2\x10\x40\x69\x4d\xbe\x83\xbc\xb3\x8a\x19\xdd\xc3\xb5\x80\x18\x0b\x29\x4c\xb7\x04\xf7\x67\x0f\xce\x58\x08\x52\x08\x5a\xa1\x21\xc0\x0f\x92\x7f\x8a\x38\xe1\x07\x75\xc2\x17\xa2\x1c\x89\x0a\x29\xa2\xdc\xe8\x15\xf5\x4f\x72\x67\xac\x4c\x39\xde\x5f\xe2\x37\x00\x00\xff\xff\x00\xbd\x50\x68\x0e\x02\x00\x00")

func golangGetLastTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetLastTmpl,
		"golang.get-last.tmpl",
	)
}

func golangGetLastTmpl() (*asset, error) {
	bytes, err := golangGetLastTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-last.tmpl", size: 526, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetLimitoffsetTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x41\x8f\xd3\x30\x10\x85\xcf\xf6\xaf\x18\x7a\x4a\xa4\x6c\x4e\x88\xc3\xa2\x1e\xd0\x8a\x03\x12\x42\x62\xf7\x88\x50\xe4\xc6\xe3\x62\xd6\xb1\xbb\x13\xa7\xed\xca\xf2\x7f\x47\xe3\x34\xa1\xc0\x4a\xc0\x21\x92\x33\x1e\xbf\xf7\xd9\xf3\x52\xba\x01\x8d\xc6\x7a\x84\xcd\x68\xf7\x5e\xc5\x89\x70\x03\x37\x39\xcb\x8f\x76\xb0\x11\x75\x97\x12\xb4\x0f\x93\x31\xf6\x0c\x39\x57\x29\x41\x1f\xcf\x07\x45\x6a\x80\xf6\x1d\xed\x47\xc8\xb9\x91\xc2\x71\x33\x58\x1f\x1b\x08\xc6\x8c\x58\xd6\x6f\x5e\xd7\x50\x49\x41\xe1\x34\x42\x4a\x30\x3a\xdb\x63\x30\xd0\xde\x87\x13\x9f\x02\x24\xe2\x2f\x50\x2d\x99\x03\xbd\x2e\xc6\x52\x5e\x53\x59\x7f\x0c\x8f\xff\x80\xa4\x68\xff\x13\x08\x0a\xcf\xc2\xf2\x9b\xfc\xb5\xfa\x2e\xe8\xe7\x0d\xe4\x2c\x45\x4a\x80\xc3\x0e\xf5\xc1\xa9\x1e\xbf\x05\xa7\x91\x46\x68\x3f\x78\x13\x7e\xd9\x1e\x9f\xdc\xa5\xba\xe9\xba\x52\xe9\xc6\x38\xc4\xa2\x21\xc5\x51\x11\x74\xdd\x51\xb9\x09\x47\xf8\xf2\xd5\xfa\x88\x64\x54\x8f\xe9\x4a\xe1\xb2\x3b\xb3\x6e\x96\xee\x19\x62\x3d\xbb\x05\x75\x38\xa0\xd7\xd5\x52\xf9\xe3\x4a\x8b\x19\xbb\xc3\x96\x17\x4f\x6e\x37\x79\xed\xb0\xbb\x47\xaf\x91\xaa\xb0\xfb\xde\x6a\xab\x1c\xf6\xb1\x81\x6b\xd8\x5a\x0a\xde\x73\x61\xff\x10\x87\x58\xcd\x1a\xcd\x0a\xde\xb6\x2d\xcb\x77\x1d\x0f\x6e\x9e\xd2\xed\x16\x8a\x1a\xd9\x23\x52\xfb\x79\x42\x7a\xbe\x0b\x3e\xe2\x39\x56\x7d\x3c\x37\xf0\xa2\x84\xb0\xa6\x1c\x7e\xb5\x05\x6f\x1d\x24\x29\x04\x61\x9c\xc8\xf3\x6f\x53\x04\x07\xf5\x88\xef\x89\x2a\x24\xaa\xa5\xc8\x52\x68\x34\xc8\xb7\x62\xeb\xf6\xce\x85\x11\x2b\x66\x31\x61\x2d\x7e\x62\xd3\xba\xa8\xa5\x04\xd6\xdb\xe8\xf1\xb4\x64\x4a\x0a\xc1\x8e\xdb\xa5\xf9\xa1\x57\x9e\xf3\xa1\xb4\xa6\x60\xa0\x32\x4e\xc5\x88\xbe\xb4\xd7\x90\x73\x2d\xc5\x0b\x94\x7f\xc1\x64\xce\x39\xd4\xeb\x94\xe6\x97\x62\x23\x4e\xe1\xcc\x32\x5f\xe8\xa2\x7e\xbb\x22\xb1\x4e\xfd\xf6\xbf\x1f\xe6\xd2\x30\x1b\x79\xeb\x24\xc7\xe9\x92\xe8\x1f\x01\x00\x00\xff\xff\x2b\x27\xd3\x57\xc5\x03\x00\x00")

func golangGetLimitoffsetTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetLimitoffsetTmpl,
		"golang.get-limitoffset.tmpl",
	)
}

func golangGetLimitoffsetTmpl() (*asset, error) {
	bytes, err := golangGetLimitoffsetTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-limitoffset.tmpl", size: 965, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetOneAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\xdb\x8a\xdb\x30\x10\x86\xaf\xad\xa7\x98\x35\x14\x6c\xc8\xfa\x01\xb6\xe4\xa2\x2c\xa5\xf4\xa2\x0b\x4d\x2e\x4b\x31\x8a\x35\x4a\xd5\x55\xa4\x64\x2c\xe7\x80\xd0\xbb\x97\x51\x9c\x5d\xa7\x07\x52\xf6\xc2\x60\xcf\xe1\xfb\x7f\xc9\x33\x31\xde\x83\x42\x6d\x1c\x42\xd9\x9b\xb5\x93\x61\x20\x2c\xe1\x3e\x25\xf1\x09\x43\x1b\x23\x34\xcb\x41\x6b\x73\x84\x94\xaa\x18\xa1\x0b\xc7\xad\x24\xb9\x81\xe6\x03\xad\x7b\x48\xa9\x86\x4a\x14\x31\xc2\x18\x5d\xf8\x03\xa4\x34\x03\x24\xe2\xc7\x53\x2d\x58\x02\x9d\xca\x4c\x31\xd5\x33\x6e\xef\x9f\x6f\x88\x49\x5a\xbf\x4a\xfd\x1b\xb5\xf2\xea\x54\x42\x4a\xd9\x0a\x6e\x56\xa8\xb6\x56\x76\xf8\xc3\x5b\x85\xd4\x43\xf3\xd9\x69\x7f\x95\xee\x77\x76\x8c\x96\x6d\x9b\x23\x6d\x1f\x36\x21\x33\x44\xb1\x97\x04\x6d\xbb\x97\x76\xc0\x1e\xbe\x7d\x37\x2e\x20\x69\xd9\x61\x9c\x10\xc6\xec\xd9\x5c\x79\xa9\xbe\x02\x30\x11\xe6\xfc\xb2\xb3\xab\xc1\x29\x8b\xed\x02\x9d\x42\xaa\xfc\xea\x67\xa3\x8c\xb4\xd8\x85\x19\x4c\x0d\xd4\xa2\xe0\x9c\xf5\xeb\x65\xd8\x84\xea\xcc\x98\xbd\x98\x69\x9a\xa6\x16\xa2\x68\x5b\xf2\x87\xfe\x7c\xcb\x0f\x73\xc8\x34\x32\x7b\xa4\xe6\xeb\x80\x74\x7a\xf4\x2e\xe0\x31\x54\x5d\x38\xce\xe0\xaf\x88\xc2\xe8\xdc\x7c\x37\x07\x67\x2c\x44\x51\x14\x84\x61\x20\xc7\x9f\xb3\x0c\xdc\xc8\x67\xfc\x48\x54\x21\x51\x2d\x8a\x24\x0a\x85\x1a\xf9\x54\x2c\xdd\x3c\x5a\xdf\x63\xc5\x5e\x8c\x86\xbb\x31\xf8\xc4\xa2\x75\xa6\x8d\xfc\x87\xf9\xa5\x81\x51\xf5\xfb\xdf\x45\x6f\xa8\xb2\xec\x55\xc9\x25\xdd\xef\x2c\x13\x9f\xfc\xc2\x1f\xfa\x6c\x2f\xff\x18\xe3\x4c\xb8\xcc\xa0\x28\x58\xeb\x45\x7f\xd9\x49\xc7\x33\x25\x95\x22\xaf\xa1\xd2\x56\x86\x80\x2e\x57\xd7\x79\xb8\xde\x70\x27\xb9\xe7\xcf\xc3\x4f\xdb\x82\xf7\x5f\xa4\x3b\xb1\x4f\x96\xdf\x92\x71\x41\x43\xf9\x6e\x57\x4e\x86\xfd\x15\xf6\x3f\x97\x76\xdb\xd5\x58\xc1\xc7\xe5\xfd\xb9\x2c\xa5\x33\x56\xf0\xf8\x8e\x1b\xf4\x2b\x00\x00\xff\xff\xb2\x0b\x1d\xfb\xfc\x03\x00\x00")

func golangGetOneAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetOneAllTmpl,
		"golang.get-one-all.tmpl",
	)
}

func golangGetOneAllTmpl() (*asset, error) {
	bytes, err := golangGetOneAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-one-all.tmpl", size: 1020, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetOneTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x41\x6b\xdc\x30\x10\x85\xcf\xd2\xaf\x98\xfa\x64\xc3\x46\xff\x60\x0f\xa5\x94\xd2\x63\x77\x8f\xa5\x18\xad\x35\xda\xaa\x91\xa5\x64\x3c\x76\x9c\x0a\xfd\xf7\x22\xc5\xdb\x38\xd0\x92\x83\x40\xcc\x0c\xdf\x7b\xbc\x97\xd2\x1d\x18\xb4\x2e\x20\x34\x93\xbb\x06\xcd\x33\x61\x03\x77\x39\xcb\x2f\xc8\x7d\x4a\xa0\xce\xb3\xb5\x6e\x85\x9c\xdb\x94\x60\xe0\xf5\x41\x93\x1e\x41\x7d\xa4\xeb\x04\x39\x77\xd0\x4a\x91\x12\x6c\xd3\x53\x7c\x82\x9c\x0f\x80\x44\xe5\x45\xea\x64\x91\xc0\x60\x2a\x53\xee\xf5\x5c\x58\xe2\xfd\x3b\x62\x9a\xae\xaf\x52\xff\x47\x5d\xa2\x79\x6e\x20\xe7\x6a\x05\xc7\x0b\x9a\x07\xaf\x07\xfc\x19\xbd\x41\x9a\x40\x7d\x0d\x36\xbe\x59\x4f\x8f\x7e\x9b\x36\x7d\x5f\x27\xfd\xc4\x23\x57\x86\x14\x8b\x26\xe8\xfb\x45\xfb\x19\x27\xf8\xfe\xc3\x05\x46\xb2\x7a\xc0\xb4\x23\x6c\xdb\x17\x73\xcd\xed\xfa\x0d\xa0\x10\xe1\x58\x3e\x8f\xfe\x32\x07\xe3\xb1\x3f\x61\x30\x48\x6d\xbc\xfc\x52\xc6\x69\x8f\x03\x1f\x60\x6f\xa0\x93\xa2\xec\x7c\xbc\x9e\x79\xe4\xf6\x85\x71\xf8\x6b\x46\x29\xd5\xc9\xea\xc1\x05\xc7\xb7\xb8\xa5\x28\x71\x1f\xa1\x52\xc9\x2d\x48\xea\xdb\x8c\xf4\x7c\x8a\x4f\x9f\x62\x60\x5c\xb9\x1d\x78\x3d\xc0\xbf\x68\xea\x3c\xe8\x50\xc2\xd6\xc6\x50\xb4\xd0\x5a\xaf\x99\x31\x54\x76\x57\x53\x17\xce\xd6\x3e\x3f\x1c\x21\x38\x0f\x49\x0a\x41\xc8\x33\x05\x48\x09\x7e\x23\xc5\xd7\xda\x8b\x83\x51\xdf\xe3\x67\xa2\x16\x89\x3a\x29\xb2\xdc\x1d\xd7\x36\x6f\xb7\xc1\x79\x59\xc2\xdc\xfa\xfc\x13\x00\x00\xff\xff\x46\xc2\x87\x13\x8a\x02\x00\x00")

func golangGetOneTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetOneTmpl,
		"golang.get-one.tmpl",
	)
}

func golangGetOneTmpl() (*asset, error) {
	bytes, err := golangGetOneTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-one.tmpl", size: 650, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetPagedTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xc1\x6e\xdb\x38\x10\x3d\x8b\x5f\x31\xeb\x43\x20\x2f\x14\x61\xf7\x9a\x85\x0f\x8b\xa0\x05\x7a\x09\xda\xa4\xb7\xa2\x10\x68\x71\xe4\xb2\xa1\x48\x67\x48\x39\x0e\x68\xfe\x7b\x31\x94\xec\xd8\x49\x9a\x14\x39\xd8\x80\xc8\xc7\x37\x6f\xe6\x3d\x32\xc6\x73\x50\xd8\x69\x8b\x30\xf3\x7a\x65\x65\x18\x08\x67\x70\x9e\x92\xf8\x2c\x57\xa8\x9a\x18\xa1\xbe\x19\xba\x4e\x6f\x21\xa5\x32\x46\x68\xc3\x76\x2d\x49\xf6\x50\xff\x4f\x2b\x0f\x29\x55\xa2\x30\xba\xd7\x01\xb4\x0d\x15\xf8\x20\x29\xc0\xdf\x7c\xec\xd2\xd9\xa0\xed\x20\x83\x76\xb6\xfe\xfa\xb0\x46\x48\x69\x0e\xa5\x28\xc8\xdd\x7b\x88\x11\xbc\xd1\x2d\xba\x0e\xea\x6b\x77\xcf\x44\x60\x71\xfb\xca\xd9\x0a\x90\x88\x7f\x8e\xe6\x82\x85\xa3\x55\x59\xa9\x38\xee\x42\xdb\x8d\xbb\x7d\xb3\x05\x49\xab\xc7\x06\x20\xeb\x9f\xb4\xbf\x42\xbd\x74\xea\x61\x06\x29\x89\x22\x46\xc0\x7e\x89\x6a\x6d\x64\x8b\x3f\x9c\x51\x48\x1e\xea\x4f\xb6\x73\x27\xdb\xfe\xce\x4c\xab\xb3\xa6\xc9\x2b\x8d\x0f\x7d\x98\x3d\x07\x7d\xd4\xe4\xc3\x29\xb2\xe3\xa5\x47\xbc\x28\x36\x92\xa0\x69\x36\xd2\x0c\xe8\xe1\xdb\x77\x6d\x03\x52\x27\x5b\x8c\x47\x64\xd3\xee\xd8\xda\x6c\x8f\x3e\x21\x60\x46\xf0\x81\xb4\x5d\x89\x42\x77\x93\x63\x7f\x2d\xc0\x6a\x03\x67\x67\xe3\x77\xdd\x78\x0c\x10\x45\x51\x1c\x2a\x2e\x40\xae\xd7\x68\x55\xb9\x5f\xa9\xe0\xa9\x53\xb0\x03\x42\x2b\x7b\x0e\x13\xb3\xcc\x60\x07\x9d\x91\x21\x20\x6f\x65\xbb\xe1\x1f\x38\xff\x17\x76\x90\x29\x60\x07\xad\xeb\x7b\x09\x29\x65\x0b\xe6\xb9\x5e\x16\xb8\x60\xa5\x77\x66\x39\x58\x65\xb0\xb9\x46\xab\x90\x4a\xb7\xfc\x59\x2b\x2d\x0d\xb6\xa1\x82\xe3\x89\xce\x45\x91\x00\x8d\xc7\x37\x25\xbf\xbf\xce\xa3\x1f\x5c\x4d\x14\x0c\x32\x6e\x75\x13\xfa\x50\x8e\x64\xd5\xc1\x9e\xba\xae\xe7\x42\x14\x4d\xc3\x51\x1f\x73\x7b\xb1\x80\x4c\x4b\x7a\x83\x54\x7f\x19\x90\x1e\x78\x74\xb8\x0d\x65\x1b\xb6\x15\xbc\x48\xc1\xfe\xf0\xe1\xc9\x1d\x6e\x8e\x30\x0c\x64\xf9\xb3\x1a\xff\x98\xb5\x97\xb7\xf8\x81\xa8\x44\xa2\x51\x9c\xc2\x0e\xd9\x6c\xae\x5f\x5f\x1a\xe7\xb1\x64\x41\x31\x82\xc2\xd6\x48\xc2\x27\xc6\x4d\x81\x3c\xbd\x77\x57\xec\x64\x4a\x63\x16\x16\x10\x68\x40\x21\x8a\xce\x1d\x88\xaf\x58\xfd\x3c\xcb\x8a\x11\xb4\xd5\xc1\xe2\xfd\xfe\x3a\x8b\xa2\x60\xe9\x8b\x3d\xf8\xa6\x95\x96\x6f\x5f\xde\x3e\xce\x85\x54\x8a\x5c\x77\x94\x85\x17\x62\xf5\x9b\x14\x4d\x47\x53\x62\x47\x9f\xcf\xea\x4f\x86\xc5\xd3\x1a\x5f\xa4\x43\x5a\x46\xd3\x62\x84\xfc\x4a\x8c\xdd\x30\x32\x3f\x4f\x8b\xbc\x31\xd6\x7d\x3e\xc3\x74\xb0\xec\xe2\xd0\x38\xd7\x9a\xff\xf7\x2e\x1f\xc5\x1e\x36\x4a\x62\x01\x19\x2d\xf8\xbe\x4f\x4f\xd4\xaf\x00\x00\x00\xff\xff\x35\xb9\xb9\xe2\xc3\x05\x00\x00")

func golangGetPagedTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetPagedTmpl,
		"golang.get-paged.tmpl",
	)
}

func golangGetPagedTmpl() (*asset, error) {
	bytes, err := golangGetPagedTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-paged.tmpl", size: 1475, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetScalarAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\xcd\x8a\xdb\x30\x10\xc7\xcf\xd2\x53\xcc\x1a\x0a\x36\x64\xfd\x00\x5b\x72\x28\x4b\x0b\x3d\xb4\xd0\xcd\xb1\x14\xa3\x58\xa3\x54\x5d\x45\x4a\xc6\x72\x3e\x10\x7a\xf7\x32\x8a\xb3\x9b\xf4\x83\x94\x1e\x0c\xf6\x68\xe6\xf7\xff\x6b\x3c\x93\xd2\x3d\x68\x34\xd6\x23\x54\x83\x5d\x79\x15\x47\xc2\x0a\xee\x73\x96\x1f\xac\xd7\x5d\x4a\xd0\x2e\x46\x63\xec\x01\x72\xae\x53\x82\x3e\x1e\x36\x8a\xd4\x1a\xda\x77\xb4\x1a\x20\xe7\x06\x6a\x29\x52\x82\x29\xfa\x14\xf6\x90\xf3\x0c\x90\x88\x9f\x40\x8d\x64\x0d\xf4\xba\x40\xe5\xa5\xa0\xf5\xbb\xf0\x7c\x4b\x4d\xd1\xea\x55\xeb\xef\xac\x65\xd0\xc7\x0a\x72\x2e\x5e\x70\xbd\x44\xbd\x71\xaa\xc7\xef\xc1\x69\xa4\x01\xda\x8f\xde\x84\xab\xe3\x61\xeb\xa6\x68\xd5\x75\x25\xd2\x0d\x71\x1d\x0b\x43\x8a\x9d\x22\xe8\xba\x9d\x72\x23\x0e\xf0\xf5\x9b\xf5\x11\xc9\xa8\x1e\xd3\x05\x61\x3a\x3d\x99\xab\xce\xd9\x57\x00\x26\xc2\x9c\x5f\xb6\x6e\x39\x7a\xed\xb0\x7b\x42\xaf\x91\xea\xb0\xfc\xd1\x6a\xab\x1c\xf6\x71\x06\x97\x06\x1a\x29\xf8\xcc\x85\xd5\x22\xae\x63\x7d\x62\xcc\x5e\xcc\xb4\x6d\xdb\x48\x29\xba\x8e\xc2\x7e\x38\xb5\xf9\x61\x0e\x85\x46\x76\x87\xd4\x7e\x19\x91\x8e\x8f\xc1\x47\x3c\xc4\xba\x8f\x87\x19\xfc\x11\x21\xac\x29\xc5\x77\x73\xf0\xd6\x41\x92\x42\x10\xc6\x91\x3c\x7f\xce\x0a\x70\xad\x9e\xf1\x3d\x51\x8d\x44\x8d\x14\x59\x0a\x8d\x06\xf9\x56\x2c\xdd\x3e\xba\x30\x60\xcd\x5e\xac\x81\xbb\x29\xf8\x99\x45\x9b\x42\x9b\xf8\x0f\xf3\x73\x01\xa3\x9a\xb7\xbf\x8a\xde\x50\x65\xd9\xab\x14\x6f\x1d\x7b\x29\x7f\xc1\x7a\x1b\xcf\x13\x27\x05\x83\x5f\xc4\x16\xbd\xf2\x3c\x40\x4a\x6b\x0a\x06\x6a\xe3\x54\x8c\xe8\x4b\x76\x53\x26\xe9\x3f\x1a\x50\x6a\x7e\xbf\xe9\x65\x59\x0c\xe1\x93\xf2\xc7\xa7\xb0\x1f\x58\x7e\x43\xd6\x47\x03\xd5\x9b\x6d\x75\x31\xd9\xaf\xb0\x7f\xe9\xd0\x6d\x57\x53\x06\x5f\x97\x97\xe5\xbc\x82\xdc\x2a\x9e\xd5\x69\x5d\x7e\x06\x00\x00\xff\xff\xb7\xc7\x6c\x80\xeb\x03\x00\x00")

func golangGetScalarAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetScalarAllTmpl,
		"golang.get-scalar-all.tmpl",
	)
}

func golangGetScalarAllTmpl() (*asset, error) {
	bytes, err := golangGetScalarAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-scalar-all.tmpl", size: 1003, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetScalarTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\xc1\x6a\xdc\x30\x10\x86\xcf\xd2\x53\x4c\x7d\xb2\x61\xa3\x37\xf0\xa1\x94\x14\x7a\x29\x74\xf7\x58\x8a\xd1\x5a\xa3\xad\x1a\x59\xca\x8e\xe4\x5d\xa7\x42\xef\x5e\xa4\x38\x59\x07\xda\xe6\x60\x30\x33\x9a\xef\xff\xf9\x67\x52\xba\x03\x85\xda\x38\x84\x26\x98\x93\x93\x71\x26\x6c\xe0\x2e\x67\xfe\xd9\x38\x35\xa4\x04\xe2\x30\x6b\x6d\x16\xc8\xb9\x4d\x09\xc6\xb8\x3c\x4a\x92\x13\x88\x8f\x74\x0a\x90\x73\x07\x2d\x67\x29\xc1\x5a\xdd\xfb\x2b\xe4\xbc\x03\x24\x2a\x9f\xa7\x8e\x17\x0d\x74\xaa\x42\xf9\x56\xd0\xb8\x8b\x7f\x78\x4f\x4d\xd2\xe9\xa6\xf5\x6f\xd6\xd1\xab\xa7\x06\x72\xae\x5e\x70\x3a\xa2\x7a\xb4\x72\xc4\x9f\xde\x2a\xa4\x00\xe2\x8b\xd3\xfe\x4d\x3b\x9c\xed\x5a\x6d\x86\xa1\x56\x86\x10\xa7\x58\x19\x9c\x5d\x24\xc1\x30\x5c\xa4\x9d\x31\xc0\xf7\x1f\xc6\x45\x24\x2d\x47\x4c\x1b\xc2\xda\x7d\x36\xd7\xbc\xbc\x7e\x03\x28\x44\xe8\xcb\xcf\xd9\x1e\x67\xa7\x2c\x0e\x7b\x74\x0a\xa9\xf5\xc7\x5f\x42\x19\x69\x71\x8c\x3b\xd8\x1a\xe8\x38\x2b\x3d\xeb\x4f\x87\x38\xc5\xf6\x99\xb1\x7b\x35\x23\x84\xe8\x78\xf5\x60\x9c\x89\x2f\x79\x73\x56\xf2\xee\xa1\x52\xc9\x5c\x90\xc4\xb7\x19\xe9\x69\xef\xaf\x9f\xbc\x8b\xb8\xc4\x76\x8c\xcb\x0e\xfe\x46\x13\x87\x51\xba\x12\xb6\x54\x8a\xbc\x86\x56\x5b\x19\x23\xba\xca\xee\x6a\xea\xcc\xe8\xba\xd0\xbe\x87\x70\xb6\xe2\x9e\xe8\xab\xdf\xfb\x6b\x80\xc4\x19\x23\x8c\x33\x39\x48\x09\x7e\x23\xf9\xdb\x05\x38\x63\x39\xcb\xaf\xb3\x1f\xfa\x52\xf9\xef\x44\x71\x3f\xc9\x07\xbc\x27\x6a\x91\xa8\xab\xe3\xb7\xc7\xf5\x12\xb6\xf4\xb2\x88\xf5\x16\xfe\x04\x00\x00\xff\xff\xa6\xb4\x5d\x8f\xc8\x02\x00\x00")

func golangGetScalarTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetScalarTmpl,
		"golang.get-scalar.tmpl",
	)
}

func golangGetScalarTmpl() (*asset, error) {
	bytes, err := golangGetScalarTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-scalar.tmpl", size: 712, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x59\x6d\x6f\xe3\x36\x12\xfe\x2c\xfd\x8a\x59\xdf\xee\x42\x0a\xbc\x4c\x81\x1e\x0e\x38\x17\x39\x60\x13\x67\xef\x82\xcb\x26\xdb\xc4\x69\x71\x68\x0b\x57\xb6\xa8\x44\x8d\x4c\x3a\x24\x65\x2b\xe7\xea\xbf\x1f\x66\x48\x49\x94\x5f\xd2\xdd\xee\xe5\x4b\x24\x72\xde\x67\xf8\xcc\x50\xde\x6c\xde\xc1\x6b\xb9\x34\xb9\x14\x1a\x46\x27\xc0\xae\xdd\xf3\xbb\xba\x0e\xc3\xe3\x63\x78\x7f\x37\xb9\xfe\xe7\xf9\xd5\xf9\xcd\xfb\xc9\xf9\x18\x4e\xff\x03\xda\x48\xf5\x1b\xcb\xe5\x71\x3a\xab\x90\x60\x7c\x0d\x57\xd7\x13\x38\x1f\x5f\x4c\x58\x18\x2e\x93\xf9\x63\x72\xcf\x61\xb3\x01\xf6\xc9\x3d\xa3\xa4\x7c\xb1\x94\xca\x40\x14\x06\x83\xd9\xb3\xe1\x7a\x10\x06\x83\xb9\x14\x86\x57\x06\x1f\xd3\xc4\x24\xb3\x44\xf3\x63\xfd\x54\xe0\x3b\x57\x4a\x2a\x22\xca\x16\x44\xa0\x78\x56\xf0\x39\x3d\x6a\xa3\xe6\x52\xac\xdc\x63\x2e\xee\x89\xce\xe4\x0b\x8e\xff\x4b\x91\xcf\x65\x4a\x8f\xfa\x59\xcc\x07\x61\x88\x2e\xaa\x44\xdc\x73\x60\xe7\x95\x51\xc9\x05\x99\xa2\xd1\xac\x00\xcd\xc4\x07\xa4\xe1\x22\xc5\xc7\x98\xdc\xfe\xa4\xf8\x8a\x0b\x03\x73\x29\xd2\x1c\x23\x92\x14\x90\x3b\xc6\x4c\xc9\x05\xcc\x93\x52\xe7\xe2\x1e\x66\x65\x5e\xa4\x90\x25\x79\x51\x2a\xae\x59\xb8\x4a\x14\x4c\xe1\x04\x9c\x95\xec\xc2\xc8\xc4\x5f\x44\x7b\xd9\x65\xa2\xcd\x85\x48\x79\xd5\xee\x64\x0b\xc3\x6e\x97\x2a\x17\xc6\x2d\xa1\xf1\xec\x63\x69\x78\x15\xd2\x4a\x14\x06\x3f\xaa\x64\x79\xae\x14\x52\x97\x62\x1e\x71\xa5\xe0\xe8\x1c\x03\x15\x03\xc5\x0b\x36\x8a\x9b\x52\x09\x7c\xab\xc3\xe0\x52\xde\xdf\x73\x65\x69\x33\xa9\x16\x89\x71\xfa\x87\x90\xa8\x7b\x0d\x8c\xb1\x5c\x18\xae\xb2\x64\xce\x37\x75\x1c\x86\x01\x57\x6a\x22\xe5\xc7\x44\x3c\xdf\xc8\xb5\x86\x13\x2b\x56\xb3\x2b\xbe\x8e\x06\x46\x4a\x58\x24\xe2\x19\x94\x5c\xeb\x41\x4c\xd4\x77\x42\x97\x4b\x0c\x0a\x4f\xc7\x2a\x5f\x71\xb5\xc5\x53\x76\xfb\x90\x12\x81\x63\x3c\x5f\x2c\xcd\xf3\xdd\x32\x4d\x0c\xdf\x62\xe1\xb8\x03\x25\x6d\x0d\x62\xcc\x06\x3a\x00\x85\xbc\x27\x57\x3f\xc7\x13\xd8\x84\x41\x9e\x81\xf3\xff\xd5\x09\x88\xbc\xc0\x35\x17\x11\x27\xc2\xf2\x32\xc6\xe2\x30\xa8\xc3\x3a\x0c\xcd\xf3\x92\x03\x29\x39\x93\x29\x07\x4c\x45\x38\x97\x42\x53\xd5\xb6\xeb\xd3\x3b\xf1\x28\xe4\x5a\x78\x94\x27\x90\x4b\x93\xf4\x69\xb6\xe2\xe2\x6f\x5e\x49\x8c\xae\xbf\x32\xa9\xc6\x52\xf0\xde\x4a\x97\x06\x7f\xf9\x0c\xcd\x51\x49\x2e\xcc\x0f\xb9\x2c\x12\xac\x4b\x7f\xdb\x8b\x2a\x06\xae\x73\x08\xc3\x55\xce\x0d\x06\x01\x0b\x88\xe2\x1d\x06\x64\x7c\xcb\x1d\x06\x2e\x85\x36\xb4\xb8\xdd\x28\x6b\x97\xbe\x2f\xb9\x7a\xbe\x2d\xb3\x2c\xaf\x9a\xb5\xda\x25\x28\xe2\x6d\x31\xda\x44\xc5\x8e\x02\x95\x36\x75\xc9\xce\x95\x62\x6e\xbb\xe5\x5c\xdb\xb2\xf6\x04\xb8\x6a\xa6\x2c\xb6\x45\xdf\xa5\xb1\x91\x86\x79\x6b\x5e\x7e\x6c\x84\x74\x72\x17\xc9\x23\xa7\xa5\xc6\xe3\xbe\x60\xbe\x57\xa8\xc8\x0b\x12\xcb\x11\x0c\xdf\x92\x3d\x9b\x73\xa5\x46\xee\x4c\xe9\x75\x6e\xe6\x0f\xc4\xbb\x09\x83\x79\xa2\x39\xe8\xa7\x02\x5d\xb2\x59\x1d\x85\x41\xc0\x99\xab\x8a\xdd\x94\xfb\x0c\x36\xe9\x07\x18\x9a\x8a\xe8\x1c\x5c\xef\x3a\x58\x6e\x57\x59\x94\xfa\x19\xf4\xdc\xdd\x92\xe1\xfc\x0a\x83\xa0\x71\x6d\xa7\x60\x87\x61\x40\xf5\x31\x82\x17\xaa\x1a\x89\xec\xd3\xc8\x1d\xef\x61\x18\xd4\x9d\x81\xbc\xab\xc7\xe8\x4b\xac\xf1\xea\x78\x9f\x1d\xfd\x6d\x4f\x9f\xe9\x4e\x4d\xf4\x84\xa5\x3a\xd5\x7e\xad\x7e\x89\x09\xde\x01\xdc\x67\xc2\xd6\xb6\x77\x2e\x46\xe0\x6b\xee\xdb\x37\xdf\x3d\xbe\x5d\x75\x0e\xbd\xed\x3f\x61\xf0\x3e\x2b\xf7\xc0\x85\x25\x6b\x96\x47\x9e\xce\xd6\x54\x82\x0d\x57\x49\x2d\xac\x12\x74\x54\x7c\x7e\x66\x7b\x76\x34\x37\x15\xb8\xfe\xcd\xdc\xda\xd0\x7a\xfe\x32\x34\x47\x58\xfd\x37\x5c\x97\x85\x19\xba\x53\xe9\x60\xe5\xab\x25\x1f\x91\x68\xcc\x48\x5f\xf0\x8d\x5c\x7f\xad\xec\x46\x34\x86\xc7\x35\x63\x21\xcd\xfb\x4f\x92\xa8\xb6\x3a\x58\xca\xb5\xc9\x05\x45\x1b\x84\x34\x90\xc0\xd2\xd2\x61\xef\x2b\xa4\xd6\xe8\xea\x8a\x2b\x8d\x04\x7d\x56\xda\x45\x0b\xdd\xb6\x6d\x80\x94\x90\xf1\xa9\x07\xe2\x64\xcf\xf8\x34\x0c\xd2\xd9\x47\x6e\x1e\x64\xaa\xc3\x30\xf8\x97\x94\x8f\xda\x23\x0a\xae\xe4\xda\x76\xff\x18\x70\x3a\x62\x93\x7c\xc1\x5d\xaf\xa3\x72\xbc\x5e\x72\xe1\x20\x63\x08\x5a\x96\x6a\xce\xdb\xc2\x8b\xd2\x19\x1c\x8d\x4f\x29\x94\x0d\x7a\x6e\xc2\x00\x9d\xd7\x4f\xc5\x14\x77\x1b\x1b\x1c\x26\xba\x8a\xd9\xf8\xf3\xd6\x38\x4f\x70\x6a\xb3\xb3\x16\x81\x1f\x0e\x5c\x57\xc9\x82\xc3\xef\x40\xd3\x4e\x06\x83\x37\x4f\x03\xa8\x6b\x04\x42\x2b\xd9\xea\x3c\x01\xb9\xe4\xa2\x25\xaf\xeb\xc8\x5a\x18\xfb\xb3\x5a\x90\xf2\x2c\x29\x0b\x33\xea\x01\xf8\xf0\x20\x32\x52\xab\x6f\xc0\xff\xd5\x3e\xf0\x1f\xfa\x6d\xc3\x92\xa7\x3c\x6b\xc6\xa8\xbe\xeb\x14\x91\x3d\xd2\x02\x1a\xf5\x88\x94\x9d\x15\x52\xf3\x28\x0e\x03\x94\x54\x3b\x01\x38\x6b\x39\xb6\x51\x4b\xf9\x29\x17\xf7\x51\xfc\xdd\x97\x98\x86\xf9\x87\x13\x78\x3b\x3e\x45\xca\xf1\xe9\xc8\xc9\x1a\x5a\xbb\x67\x8c\x4a\x82\x61\x1d\x9c\xd8\x12\xb8\x92\xeb\xf0\xff\x99\xb1\x74\xc6\xda\x12\x84\x13\x10\x7c\xed\x67\x0c\x3d\xfd\xda\x6c\xb5\xd0\x87\x85\x81\xdd\xb9\x1d\x38\xe4\xec\x37\x2c\xd1\x18\x5c\x8c\x21\xea\xd7\xaa\xe3\x93\xb3\xdf\x58\x13\x38\x7c\x1e\x9f\x36\x49\x89\xf7\xc8\xa2\x33\xb1\x07\x26\x10\x5f\x26\xd5\xd0\x13\x6f\xec\x1b\x66\xd0\x89\x3d\xe5\xf7\xb9\x98\x54\xc8\x4e\xa6\xc6\x7f\x54\x6a\xbe\x69\x5d\x4e\x1d\xc5\xdb\x49\x85\xf4\x93\x6a\x04\x06\xfb\x48\x60\x2a\x17\xe8\x11\x31\x62\x2b\x98\x54\x91\xa9\x62\x4c\x77\x13\x9b\xcd\x06\xf2\xac\xbd\xd1\xb1\x5b\x1b\xd8\x9b\x0a\xe3\xbf\xe5\xea\x15\x5f\xdf\x54\x51\x0c\x47\x37\x95\x17\xae\xb7\x37\xd5\x26\x9d\x91\x8a\xda\xca\x73\xd9\x23\xee\x31\x2f\xb8\xe1\xef\x8b\x62\x3f\x94\x5a\xd0\x88\x21\xca\x85\xf9\xdb\x5f\x0f\x44\x2b\x9d\xb1\x26\xca\x2f\x45\xe8\x1b\x62\xd8\x3e\x81\xbd\x33\xe7\x8d\x6f\x81\xc5\x8c\x74\xd6\x06\xd4\x54\xec\x4c\x2e\x16\xb9\xc1\x44\x07\x8d\x58\x3a\x88\xad\x84\xa9\x92\x45\x31\x4b\xe6\x8f\x68\x97\xa9\xd8\x8d\x7b\x75\xe7\xb0\xdb\xf6\x4f\x77\x7b\x15\x19\xa4\x14\x8d\x77\x49\x51\x8c\xa0\x25\xc5\xab\x20\x4f\x47\xf0\x66\x35\x18\xfa\xf6\xf8\xf2\xe2\x16\x10\xe2\x36\xf0\xa6\x62\xa9\x1f\xdd\xae\x17\x4f\x2a\x0f\xd5\x27\x95\x85\x9f\x49\x15\x76\x15\xd1\xb5\x6d\x7b\x7c\x7b\x1c\xa6\xe3\x68\xeb\x1d\xd7\x5a\xda\x18\x9a\x40\x1d\x38\x42\x5e\x48\x7b\x51\x3d\x24\xae\x0b\xe3\x67\x09\xec\xc8\x49\xe4\x01\x34\xa2\xf5\xd7\xe9\x8c\xfc\x1c\x9d\xec\x82\x92\x1e\x9f\x0e\xe8\xb3\x05\x11\x9a\xea\x30\xe1\xa4\xf2\x08\xf3\xc5\xb2\x38\x4c\x7a\xb1\x58\x16\x03\x52\x4f\x34\x9b\x8d\xc7\x50\xd7\x5e\x94\xd3\x19\xd0\xdf\x11\xb5\x65\x6b\x37\x4c\xa7\xfa\xa9\x98\x95\x22\x2d\xf8\xd4\x03\xc6\x30\x70\xd0\xeb\x20\x78\x0b\x87\xb6\x94\xc4\x70\xc3\x67\xb9\x48\x23\xdd\x76\xe7\x9d\x9b\x15\x02\x82\x53\xca\x1a\xea\x6d\x78\xdb\x11\x5b\xc8\xfb\x5b\xb3\x30\x91\x36\x8b\xfe\x85\x9a\x31\x06\xdb\x17\x6a\xcf\xfc\x4b\x8f\xcf\xbb\x45\xff\x81\xb6\x97\xae\x63\xde\x14\x0a\xf2\xb1\x81\xd4\x5c\x77\x93\xaa\x3d\x71\x16\x24\xf3\x0c\x89\x3c\xa8\x38\x30\x57\xfb\x13\x75\xec\xdf\xa5\x7a\x98\xeb\xa7\xd6\x55\xd7\x76\x62\x29\xa7\xdb\x1e\xb5\xfe\xee\x34\x3d\x8b\x81\x47\x7d\x81\x1e\xc2\xf6\x36\x36\xd4\x45\x47\x40\x5d\x3b\xd8\xd2\x31\xb2\xc4\xde\x0a\x21\x10\xd2\xd3\x9f\x65\x72\xd5\x34\xc2\x77\x36\x3e\xc5\xa5\x7a\xe8\x0f\x7a\x5d\x46\x5a\xb5\x31\xdc\xce\x1f\xf8\x22\xd9\x77\x4d\xff\x15\xdd\xb1\xdb\xb7\xdf\x5f\x42\x5d\xff\xfa\xb2\xa4\xb6\x13\x35\x38\x13\x43\x8b\x4c\xdb\x7e\xbb\x63\xe9\xfc\x6e\x20\x63\xd4\x01\xd7\xc6\x50\xc3\xab\xff\x44\x34\xe8\x10\x6c\x45\xc4\xb6\xce\x36\x1c\x6d\xa6\x5b\x3b\xfc\x4c\x37\x36\xbc\x90\xec\x03\xc7\xe0\x0f\xbf\x47\x1d\x1f\xc3\xe4\x7a\x7c\x3d\x02\xc5\x45\xca\x15\x2c\x8b\x64\xce\x1f\x64\x91\x72\xa5\x0f\x7c\xad\x92\xa5\xc1\x93\xd0\x7d\x19\xcc\xa2\x01\xea\x1a\xc1\x1b\xfd\xb3\x40\x45\xd8\x64\x7e\x16\x83\x21\xd8\x93\xb8\x54\xdc\x98\xe7\x08\x77\xa8\xc1\xb8\xcf\x5d\xb2\x34\xcd\x27\x2e\x6f\x18\xb3\xa1\xb0\x2c\xf0\xd3\x2f\x9e\xbd\x4d\xaa\x97\x6e\x37\x86\x0f\xf4\xc1\x2c\xca\xac\x2d\x06\xef\xdd\x30\x07\x55\x0a\x4e\xbe\xe1\xea\x07\xb2\x30\xca\x86\x30\xf8\x69\x10\x87\x82\x57\x66\x95\x14\xa3\x30\xc8\xa4\x82\x7c\x08\xab\xa4\x40\x67\x2c\xae\x2f\x9b\x26\x9e\xc3\x3f\xe0\x1b\xdb\x55\xb7\x84\x0c\x61\xe0\x7a\x64\xa0\x56\xc4\x69\x3f\x00\xb3\x1f\x92\xa2\xe4\xd7\x59\xb4\x4a\x70\xbe\x42\x21\x6a\xc5\xfe\x8d\x80\x17\xe3\x3c\xd0\x90\x7d\x32\xca\xca\xb5\x04\x17\xfa\x2a\x2f\xdc\xf0\xb0\xa3\xeb\xea\xee\xf2\x92\xb4\x05\x08\x44\x26\x17\x25\xc7\x17\xd4\x1d\xa0\xdd\x27\x28\xe1\xbc\xe0\x8b\x28\x66\x17\x4d\x9c\x9a\x99\xbe\x19\xa6\xc9\xc8\x55\x52\xb0\x08\x03\x6b\x35\xd9\xcf\x3d\x54\x19\xa3\xbe\x8f\x19\x29\x7e\xf3\x34\x18\xc2\x2a\x6e\x28\xdb\x4b\xda\x7e\x62\x8d\xc4\xcc\xe5\x82\x68\x6f\x3e\x9c\x7d\xfb\xed\xb7\x7f\xbf\x4a\x84\x8c\x5b\x29\x3f\xfd\x32\x7b\x36\x4e\x84\x54\x30\x1d\xc2\xac\x8b\xfc\xca\x45\x20\xcf\xe0\x95\xfb\x52\xce\x2e\xf4\x27\x0a\x05\xe6\x33\x9a\xc5\x4d\x90\x76\x0d\xf8\x4b\xd5\x98\xeb\x45\x0a\x5c\xaa\x69\xb5\x6e\xe3\x76\xd8\x55\xef\x12\xb0\x4b\xb5\x6a\xa8\x6a\xc2\xeb\xad\x44\xfd\x32\x70\x03\x42\x33\x1f\xdc\xd2\xd9\xd5\xcd\x17\xfc\xd7\xee\x2c\xb7\x9d\xbc\x6d\xf2\x73\xc5\x13\xc3\xbd\xed\x33\x5a\xb0\xfc\x7d\x52\xfb\xe9\xd9\x23\xb5\x5f\x9a\x3c\xd2\xde\x34\xe0\x08\x7d\x20\xf1\x06\x98\x0f\x39\x2f\xd2\xee\xa7\x06\xc7\x4e\x28\x32\x71\xc8\xe2\x9d\x49\x7c\xdc\x33\xbd\xdf\x69\xae\xd2\xc4\x24\xa4\x38\x28\xdd\xdb\x74\x51\xfa\x3f\x12\xb4\xeb\x88\x84\xfe\x69\x76\xf2\x3d\x0c\x8b\x7a\x76\xc7\x30\x9d\x24\xb3\x82\x7b\x9d\x00\x1c\x62\x0f\xc8\x4e\xdc\x84\xba\x1e\x80\x03\x90\x3c\x03\x76\x21\x34\x57\x06\x77\xec\xef\x45\x49\xd1\x79\xda\xc5\xa6\x17\xf5\x03\x11\x7a\x49\xd2\x4e\xcc\xfa\x49\xf0\x22\xb7\x0f\xdb\xd0\x82\x5e\x32\x0f\x58\x40\xf9\x45\x03\xbe\x42\xf1\x4e\xba\xa9\x94\x32\xaf\x8a\x76\x25\xbc\x9e\x1b\x49\x17\xa2\x6e\xda\x9c\xbe\xd1\x03\x60\x1f\x65\xca\x0b\xa2\x64\xbb\xf5\x96\xed\x71\x26\x98\x6a\x6e\x60\x26\x65\x11\x06\x53\x51\x16\x45\xf3\xbc\x42\xb0\xec\x55\x9b\xd7\xc7\xac\xfe\xba\x8e\x56\x44\x71\x66\xa4\x22\x70\xa5\x9a\xd8\x52\xb5\x69\x33\xff\xb1\x44\xfc\xff\x20\x28\x4c\x2b\x38\x21\x5e\x6f\x31\x5a\xf5\xef\xfc\xae\x94\xfa\xf2\x36\x80\x16\x8f\xc0\xa8\x92\x0f\xc1\x9a\x39\x02\x7b\x77\x65\x93\xe4\x91\xbf\x4f\x53\x34\xed\x6d\x7b\xfd\x5c\x41\xdd\xde\x6e\xd9\x55\x59\x14\xae\x2a\x77\xbc\x99\xde\x24\x6b\xe7\xd1\xa4\x19\x50\x76\x9c\x41\xfc\x5b\xed\xf9\xfa\xef\xcb\x41\x25\x51\x6f\x6c\xf4\x63\xb6\x6b\xeb\x51\x67\x6b\xbc\x2f\xcc\x4e\xe0\x1e\x63\x3e\x27\x44\x98\x55\xfb\x02\xde\x41\xce\xb6\x98\x62\xc8\xb5\xb0\x6a\xb0\x02\x60\xd3\xc8\x7e\x95\x31\xaa\x91\xdf\x7f\x87\x8c\xd9\x12\xb1\x8f\xb6\x42\x5c\x24\xfc\xeb\xfe\x41\x0d\xc4\x11\xc5\x3e\xc6\x00\x05\x63\x8f\x8e\x16\x49\x48\xfa\x77\xcd\x5b\xab\xb7\x87\x48\xbe\x92\xe9\x99\x2c\xca\x85\x38\x84\x49\x76\xd7\x07\x25\xb4\xfa\x5d\xff\x68\x36\xbf\x09\xdc\x4d\xce\x22\xd3\x35\x57\xef\x63\xa8\x17\x7c\xc3\x90\xcc\xff\x29\x61\x9c\x18\xfe\x02\xdf\xf1\x31\x3c\x72\xbe\x84\x72\x09\xe6\x81\xc3\x22\x17\xa5\xe1\x80\x70\x9d\x4b\x01\x5a\x82\x79\x48\x0c\x18\x95\x08\x6d\x6f\x24\x1a\x66\xdc\xac\x39\x17\x24\xe7\xbf\x52\x70\x0d\xeb\xbc\x28\x48\x54\xdb\x4d\x8d\x6c\x46\x18\x58\x2a\xb9\xe4\xaa\x78\x66\x9e\x91\x13\x55\x8a\x39\x19\x86\xb6\x7c\x24\xa5\x64\xf4\xf1\x71\x78\x7c\x8c\x23\x19\x6e\x80\xfb\x9e\x06\x38\x00\xd0\x0f\xd4\x18\x42\xfd\x54\x80\xc6\x73\xba\xe0\xc2\x68\xe4\x08\x09\xda\xbe\xbf\x74\x7d\x06\xea\x56\x10\x86\xf0\x0b\x85\xfd\x2f\x00\x00\xff\xff\x86\x27\xf7\x69\x4a\x20\x00\x00")

func golangHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangHeaderTmpl,
		"golang.header.tmpl",
	)
}

func golangHeaderTmpl() (*asset, error) {
	bytes, err := golangHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.header.tmpl", size: 8266, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangMiscTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xc1\xca\x83\x30\x10\x84\xcf\xbf\x4f\x31\x04\xff\x5b\xf5\x01\x84\x5e\x7b\x29\xf4\x24\x3d\x1b\xea\x2a\x01\x1b\xac\x89\x07\xd9\xee\xbb\x97\x35\x25\x2d\xf4\x36\x99\xf9\x66\xb2\xcc\x15\x7a\x1a\x9c\x27\x98\x10\x97\xf5\x16\x0d\x44\x8a\xb8\xcd\x04\x66\xd4\x17\x7b\x27\x88\x20\x65\xe0\x82\x19\x8b\xf5\x23\xa1\x3e\x39\x9a\xfa\xa0\xf4\x1f\x33\xdc\x90\xe1\xef\x1e\x33\xc8\xf7\x6f\xb3\xd5\xd5\x5d\x2a\xdd\xda\x31\xa0\xd2\x7a\x97\x47\x4b\x77\x40\x19\xd1\x1c\x3f\x71\xa2\x4b\xf7\xb3\x76\xa6\x0d\x22\x8d\xca\xab\x9d\x56\xc2\x13\xf3\xe2\x7c\x1c\x60\xfe\x1f\x26\x41\x89\xee\xf4\xc2\x6a\x7f\xe8\x7f\xd9\x2f\xb2\x56\xfb\x15\x00\x00\xff\xff\x8e\x34\xcf\xa7\x0b\x01\x00\x00")

func golangMiscTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangMiscTmpl,
		"golang.misc.tmpl",
	)
}

func golangMiscTmpl() (*asset, error) {
	bytes, err := golangMiscTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.misc.tmpl", size: 267, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangUpdateTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x51\x6f\xe4\x34\x10\x7e\x4e\x7e\xc5\x90\xa7\x44\xa4\x16\xcf\x27\xad\xd0\xa9\x14\x28\x2a\x2b\xae\xcb\xf1\x82\x50\xe4\xdd\x4c\x16\x53\xc7\x0e\x8e\xd3\xdd\x2a\xf2\x7f\x47\x63\x7b\xb3\xc9\xde\xb6\x70\x12\x48\xbc\xa5\x9e\xf1\x37\xdf\x7c\xf3\x8d\xb7\xe3\x78\x03\x35\x36\x42\x21\x64\x8a\xb7\x98\xc1\x8d\x73\xe9\xc7\xae\xe6\x16\xc7\x11\x44\x03\x4a\x5b\x60\x8f\x68\x07\xa3\xc0\xb9\xb5\x0e\x9f\xe3\x08\xa8\x6a\x70\xae\x1a\x47\x60\x9b\xa1\x69\xc4\x11\x9c\x4b\x09\x8f\x02\x84\x92\xce\xc1\x7b\xb1\x57\xdc\x0e\x26\x56\xa0\x90\xc5\xb6\x93\xdc\x4e\x95\x19\x38\x97\x8f\x23\xec\xec\xb1\xe3\x86\xb7\xc0\xde\x9b\x7d\x0f\xce\x95\x69\x32\x78\x46\xe0\x8b\x59\x33\xec\x2c\x0b\x1c\xc3\x1f\x6b\xde\x22\x38\x57\x40\x9e\x26\x81\xf5\x99\xf1\x38\x42\x44\x9b\x8e\x4a\x98\xe8\xa3\x31\x80\xc6\x68\x53\xbc\x4e\x5d\xa8\x67\xfd\xf4\xcf\x78\x73\xb3\x3f\xb3\x86\x40\xfa\x0d\xe4\xad\xae\x5f\x02\x2e\xd1\xc6\x76\x8b\x75\x27\xf9\x0e\x7f\xd7\xb2\x46\xd3\x03\xbb\x57\x8d\x86\x79\xb8\xff\x53\xc6\xd3\xac\xaa\xfc\x49\xd5\xdb\xd6\x66\x94\x94\x26\x55\xd5\xa3\xed\x2b\x4a\x7a\xb7\x82\x8a\x3e\xb6\x83\xaa\x25\x56\x0f\xc2\xa2\xe1\xb2\x1f\x7f\xd0\x42\xbd\x83\xac\x84\xcc\xa5\xc9\x33\x37\x50\x55\xcf\x5c\x0e\xd8\xc3\xaf\xbf\x09\x65\xd1\x34\x7c\x87\xe3\x14\xe3\xd4\xcb\x32\xe2\xc9\x18\xae\xf6\xb8\x9c\x05\xdf\x4a\xfc\x56\xa0\xac\x7b\xcf\x58\x34\xb1\x7f\x46\x43\x8b\x13\x62\x44\x10\xc6\x34\x49\xa6\xb2\x2b\xe0\x5d\x87\xaa\xce\x4f\x27\xe5\xb5\x7b\x3e\x94\x17\x85\xbf\x79\x6a\x92\x6d\x3e\x3c\x2c\x00\x16\x81\xf2\x9a\x00\x79\x46\xa8\xb7\x5a\x0e\x2d\x39\x01\x56\xf0\x75\x46\xa8\x51\x62\xef\x09\xdf\xe1\x8d\x77\xd1\x1a\xb1\xee\xd7\xfa\xe0\x3b\xaa\x2a\xa5\x0f\x24\xac\xde\xfe\xc1\xea\x2d\xfb\x5e\xeb\xa7\x9e\xad\xf5\x21\x2f\xd8\xc7\x9f\x6f\xf3\x62\xc2\x38\x4d\x34\xaa\xf4\x7e\xb0\x7a\xa6\xcc\x5b\xad\x13\xbb\x7b\x25\xec\x2f\x5c\x92\xa1\xd3\x7f\xa3\xdb\xa8\xe1\xd4\xeb\xb2\xd1\x69\xc7\x2f\x58\x8a\x06\x24\xaa\xcb\x32\x05\xac\x56\xf0\x95\x9f\xe0\x49\xa3\x69\xad\xd2\x24\x31\xe1\x5b\x09\x59\x02\xb6\x9d\x7d\x09\x5b\x4a\xd2\xf8\x7c\x94\x3d\x2e\x32\xaf\x26\x05\x72\x9f\xce\x24\xac\x40\x14\x2f\xac\x59\x16\x2c\x3a\xf9\xff\x75\x65\x43\x22\x63\x6c\x12\x95\x1a\x02\xbf\x26\xb1\xc3\xf4\xe4\x7a\x5a\x29\x58\x2e\xd0\x23\xaa\x1a\x4d\xee\x47\x2f\xb8\xc4\x9d\x25\xc8\xf3\x06\x16\x69\x42\x31\xa9\xf7\x1b\xdb\xda\x3c\x60\x94\xd3\x76\x85\xba\x51\xb2\xe5\x93\x4a\xbc\x4b\x7a\x84\x20\x3a\xcb\x88\x67\x34\xec\xee\x88\xbb\x5b\xad\x2c\x1e\x6d\xbe\xb3\xc7\x12\xae\x43\x8a\xc6\x5f\xfd\x62\x45\xa2\xfb\xb9\x44\x65\x09\xaa\xe5\x4f\x78\x67\x4c\x8e\xc6\x04\x8f\x9f\xe7\x93\x2e\xe6\x11\x8c\xa0\xc4\x82\xd7\x34\xe1\xcd\xd0\x75\xda\xd8\x3e\x84\x84\xda\xfb\xe8\x27\x8c\x3f\x0c\x68\x5e\x1e\xf5\xe1\x6f\x59\xb3\xcd\x8e\x2b\x7a\x31\x79\x5d\x1b\xdd\x40\xde\x48\x6e\x2d\xaa\x53\xf1\x22\x58\x3f\xb6\xb6\x5a\x01\xb9\xef\xce\x98\xb5\x7e\xd4\x87\x7e\xde\xa4\x37\x9a\xef\xc6\xbd\x21\x85\xcf\xba\xaa\xc7\xc2\x93\xff\xc5\x14\x5e\x2d\x7d\xe5\x49\xff\x0e\xed\xf2\x55\xaf\xf6\x18\x5e\xf6\x99\x2d\xe9\xec\x33\xad\x49\x57\x2e\xec\x99\xe5\xf7\x3f\xfe\xf4\x70\x7f\xf7\x4d\x01\x19\x7c\x39\x83\x5e\xec\xc9\xe7\xcd\xf8\xf2\xfa\xff\x6c\xca\xf1\x51\x89\xc9\x44\x8b\x7e\xab\x67\xff\x13\x9c\x97\x22\xa4\xce\x7f\xb5\xff\x0a\x00\x00\xff\xff\xf6\x79\xb7\x43\x27\x09\x00\x00")

func golangUpdateTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangUpdateTmpl,
		"golang.update.tmpl",
	)
}

func golangUpdateTmpl() (*asset, error) {
	bytes, err := golangUpdateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.update.tmpl", size: 2343, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"golang.create-raw.tmpl":           golangCreateRawTmpl,
	"golang.create.tmpl":               golangCreateTmpl,
	"golang.decl.tmpl":                 golangDeclTmpl,
	"golang.delete-all.tmpl":           golangDeleteAllTmpl,
	"golang.delete-world.tmpl":         golangDeleteWorldTmpl,
	"golang.delete.tmpl":               golangDeleteTmpl,
	"golang.dialect-cockroach.tmpl":    golangDialectCockroachTmpl,
	"golang.dialect-pgx.tmpl":          golangDialectPgxTmpl,
	"golang.dialect-pgxcockroach.tmpl": golangDialectPgxcockroachTmpl,
	"golang.dialect-postgres.tmpl":     golangDialectPostgresTmpl,
	"golang.dialect-sqlite3.tmpl":      golangDialectSqlite3Tmpl,
	"golang.footer.tmpl":               golangFooterTmpl,
	"golang.get-all.tmpl":              golangGetAllTmpl,
	"golang.get-count.tmpl":            golangGetCountTmpl,
	"golang.get-first.tmpl":            golangGetFirstTmpl,
	"golang.get-has.tmpl":              golangGetHasTmpl,
	"golang.get-last.tmpl":             golangGetLastTmpl,
	"golang.get-limitoffset.tmpl":      golangGetLimitoffsetTmpl,
	"golang.get-one-all.tmpl":          golangGetOneAllTmpl,
	"golang.get-one.tmpl":              golangGetOneTmpl,
	"golang.get-paged.tmpl":            golangGetPagedTmpl,
	"golang.get-scalar-all.tmpl":       golangGetScalarAllTmpl,
	"golang.get-scalar.tmpl":           golangGetScalarTmpl,
	"golang.header.tmpl":               golangHeaderTmpl,
	"golang.misc.tmpl":                 golangMiscTmpl,
	"golang.update.tmpl":               golangUpdateTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"golang.create-raw.tmpl":           &bintree{golangCreateRawTmpl, map[string]*bintree{}},
	"golang.create.tmpl":               &bintree{golangCreateTmpl, map[string]*bintree{}},
	"golang.decl.tmpl":                 &bintree{golangDeclTmpl, map[string]*bintree{}},
	"golang.delete-all.tmpl":           &bintree{golangDeleteAllTmpl, map[string]*bintree{}},
	"golang.delete-world.tmpl":         &bintree{golangDeleteWorldTmpl, map[string]*bintree{}},
	"golang.delete.tmpl":               &bintree{golangDeleteTmpl, map[string]*bintree{}},
	"golang.dialect-cockroach.tmpl":    &bintree{golangDialectCockroachTmpl, map[string]*bintree{}},
	"golang.dialect-pgx.tmpl":          &bintree{golangDialectPgxTmpl, map[string]*bintree{}},
	"golang.dialect-pgxcockroach.tmpl": &bintree{golangDialectPgxcockroachTmpl, map[string]*bintree{}},
	"golang.dialect-postgres.tmpl":     &bintree{golangDialectPostgresTmpl, map[string]*bintree{}},
	"golang.dialect-sqlite3.tmpl":      &bintree{golangDialectSqlite3Tmpl, map[string]*bintree{}},
	"golang.footer.tmpl":               &bintree{golangFooterTmpl, map[string]*bintree{}},
	"golang.get-all.tmpl":              &bintree{golangGetAllTmpl, map[string]*bintree{}},
	"golang.get-count.tmpl":            &bintree{golangGetCountTmpl, map[string]*bintree{}},
	"golang.get-first.tmpl":            &bintree{golangGetFirstTmpl, map[string]*bintree{}},
	"golang.get-has.tmpl":              &bintree{golangGetHasTmpl, map[string]*bintree{}},
	"golang.get-last.tmpl":             &bintree{golangGetLastTmpl, map[string]*bintree{}},
	"golang.get-limitoffset.tmpl":      &bintree{golangGetLimitoffsetTmpl, map[string]*bintree{}},
	"golang.get-one-all.tmpl":          &bintree{golangGetOneAllTmpl, map[string]*bintree{}},
	"golang.get-one.tmpl":              &bintree{golangGetOneTmpl, map[string]*bintree{}},
	"golang.get-paged.tmpl":            &bintree{golangGetPagedTmpl, map[string]*bintree{}},
	"golang.get-scalar-all.tmpl":       &bintree{golangGetScalarAllTmpl, map[string]*bintree{}},
	"golang.get-scalar.tmpl":           &bintree{golangGetScalarTmpl, map[string]*bintree{}},
	"golang.header.tmpl":               &bintree{golangHeaderTmpl, map[string]*bintree{}},
	"golang.misc.tmpl":                 &bintree{golangMiscTmpl, map[string]*bintree{}},
	"golang.update.tmpl":               &bintree{golangUpdateTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
