// Code generated by go-bindata.
// sources:
// golang.delete-all.tmpl
// golang.delete.tmpl
// golang.footer.tmpl
// golang.funcs.tmpl
// golang.get-last.tmpl
// golang.header.tmpl
// golang.insert.tmpl
// golang.select.tmpl
// golang.update.tmpl
// postgres.tmpl
// sqlite3.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _golangDeleteAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x91\x31\x6b\xf3\x30\x10\x86\x67\xdf\xaf\xb8\x2f\x93\x0c\x8e\xf9\x86\xd2\xa1\xe0\x21\xd0\x6c\x5d\xda\x0c\x1d\x1d\xc5\x3e\x19\x15\x47\x32\x67\x99\xa6\x1c\xfa\xef\xc5\xb2\x49\x02\xdd\x62\xf0\xf4\xf2\x3e\xcf\x2b\x49\x64\x8b\x2d\x19\xeb\x08\x37\xa3\xed\x9c\x0e\x13\xd3\x06\xb7\x31\xc2\x2b\xf5\x14\x48\x04\xcb\xc3\x64\x8c\xbd\x60\x8c\x4a\x04\x07\xcd\xfa\x8c\xe5\x8e\xbb\x11\x63\xcc\x51\x35\x7e\x72\x01\xad\x0b\xcf\x4f\x05\x12\xf3\xfc\x7b\xce\x61\x46\x93\x6b\x13\x0b\xee\x3d\x27\xdf\xfe\x24\x85\x40\xd6\x78\x37\x06\xac\xeb\x31\x9c\x43\x75\x4c\xb2\xf7\x37\x8c\xf1\x08\x59\x5d\x0f\x4c\x83\x66\x6a\x0b\xac\x6b\xa6\xa1\xd7\x0d\x2d\x86\x97\x0a\xfd\xe9\xab\x5c\x73\xb5\xd4\x73\xc8\xac\x49\xf1\xbf\x0a\x9d\xed\x51\x00\xd7\x8f\x29\x4c\xec\xf0\x7f\x81\x9f\xac\x87\x3d\xb3\x22\xe6\x1c\xb2\x08\x59\x4b\x86\xf8\xc6\x57\x39\x64\x33\xba\xf7\xdd\x21\x9c\xc3\x8a\x2e\x50\x04\x35\x77\xb7\x63\x43\x62\xcf\xb5\xf1\x3a\xe9\x36\xb8\xdc\x5f\xa8\x51\x7f\x3a\x8f\xec\x4b\xb7\xbb\x28\xaa\xc5\x57\x7e\xf8\xef\x71\x67\x0c\x35\x81\x5a\xf5\x10\x15\xee\xe2\x55\xe0\x6c\x0f\x11\x44\xae\x4f\xf6\x1b\x00\x00\xff\xff\xb5\xbc\xf4\xac\x1a\x02\x00\x00")

func golangDeleteAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteAllTmpl,
		"golang.delete-all.tmpl",
	)
}

func golangDeleteAllTmpl() (*asset, error) {
	bytes, err := golangDeleteAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete-all.tmpl", size: 538, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeleteTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x91\xb1\x6a\xc3\x30\x10\x86\x67\xdf\x53\x5c\x33\xc9\xe0\x98\xce\x85\x14\x02\xcd\xd6\xa5\xcd\xd0\x51\x51\xac\x93\x71\x71\x24\x73\x92\x69\xca\xa1\x77\x2f\x76\x4c\x12\xe8\x16\x81\xa6\xbb\xff\xfb\x7e\x21\x91\x35\x5a\x72\x9d\x27\x5c\xc5\xae\xf5\x26\x8d\x4c\x2b\x5c\xe7\x0c\x6f\xd4\x53\x22\x11\xac\xf7\xa3\x73\xdd\x19\x73\x56\x22\x38\x18\x36\x27\xac\xb7\xdc\x46\xcc\xb9\x44\x65\xe7\x3d\x8b\xc7\x10\xfa\x0a\x89\x79\xba\x81\x4b\x98\xd8\xe4\xed\x0c\x83\x7b\xd1\x31\xd8\xdf\xd9\x21\x50\x34\xc1\xc7\x84\x5a\xc7\x74\x4a\x9b\xc3\x6c\xfb\x78\xc7\x9c\x0f\x50\x68\x3d\x30\x0d\x86\xc9\x56\xa8\x35\xd3\xd0\x9b\x86\x2e\x86\x97\x0d\x86\xe3\x77\xbd\xcc\xd5\x25\x5e\x42\xd1\xb9\x79\xfc\xb4\x41\xdf\xf5\x28\x80\xcb\x61\x4a\x23\x7b\x74\xa6\x8f\x54\xe1\x17\x9b\x61\xc7\xac\x88\xb9\x84\x22\x43\x61\xc9\x11\xdf\x1c\xaa\x84\x62\xc2\xf7\xa1\xdd\xa7\x53\x5a\xf0\x15\x8a\xa0\xe1\xf6\xf6\x76\x98\xf9\x53\x2c\x5e\x6b\xdd\x4a\xd7\xbb\x33\x35\xea\x5f\xe6\xd1\x8e\x5a\x37\x61\xf4\xe9\x4e\xc4\x14\xeb\xcf\xf0\x13\xb7\xce\x51\x93\xc8\xaa\x87\xe1\x70\xb7\xb2\x78\xf0\x15\x9f\xab\x09\x02\x19\x44\xae\xff\xf8\x17\x00\x00\xff\xff\x7c\xd0\xa9\x1e\x30\x02\x00\x00")

func golangDeleteTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteTmpl,
		"golang.delete.tmpl",
	)
}

func golangDeleteTmpl() (*asset, error) {
	bytes, err := golangDeleteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete.tmpl", size: 560, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xce\x41\x0a\xc2\x30\x10\x85\xe1\x75\xe6\x14\x6f\xd9\x0a\xcd\x31\xdc\xb9\xd2\x0b\xa4\xc9\x98\x06\xec\xa8\x49\x84\x48\x98\xbb\x4b\xc1\xee\xba\xfb\xe1\xc1\xc7\x23\xaa\xdf\x17\x63\xe5\xba\x3c\x43\x41\x92\xca\xf9\xee\x3c\xa3\x53\xef\x13\xb2\x93\xc8\xb0\xe7\x8f\xf8\x02\x55\x02\x80\xde\x61\xb7\xde\x76\x96\x80\x49\x15\x00\xe9\x9f\x0a\xf3\xe5\x00\x33\x57\xbf\xf0\xea\x86\x11\xa5\xe6\x24\x91\xcc\xcc\x31\xc9\x50\x1b\x4e\xe5\xfd\x68\xf6\xd6\xc6\xfd\x05\x99\x3d\x94\x7e\x01\x00\x00\xff\xff\xbc\xfa\x73\x3e\xa0\x00\x00\x00")

func golangFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangFooterTmpl,
		"golang.footer.tmpl",
	)
}

func golangFooterTmpl() (*asset, error) {
	bytes, err := golangFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.footer.tmpl", size: 160, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangFuncsTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\xd6\x55\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\x49\x4d\xce\x51\x52\xa8\xad\xe5\x4a\x2b\xcd\x4b\x56\xd0\xc8\x4f\xca\x52\xd0\xaa\xae\x56\xd0\x0b\x4a\x4d\x4e\xcd\x2c\x4b\x2d\x72\x4a\x2c\x4e\x55\xa8\xad\x75\x71\xd2\x54\x00\x09\x07\x67\xa6\xe7\x25\x96\x94\x16\x81\xc4\xc0\x02\x4e\xf9\x29\x95\x20\xed\x04\xf4\x87\x54\x10\xd0\x5f\x5d\xad\x90\x9a\x97\xa2\xa0\x5b\x5b\xcb\x05\x08\x00\x00\xff\xff\xac\x94\x36\x05\x9f\x00\x00\x00")

func golangFuncsTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangFuncsTmpl,
		"golang.funcs.tmpl",
	)
}

func golangFuncsTmpl() (*asset, error) {
	bytes, err := golangFuncsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.funcs.tmpl", size: 159, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetLastTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x91\x31\x6f\xfa\x30\x10\xc5\x67\xdf\xa7\xb8\x3f\x93\x2d\x41\xa6\xbf\x3a\x54\xca\xd8\x8d\x05\xa8\xd4\x31\x18\x7c\x89\x5c\x82\x6d\x5d\x8c\x2a\x6a\xf9\xbb\x57\x4e\xa0\x90\x46\xca\x60\xdf\xbd\xdf\x7b\x77\x4e\x69\x85\x86\x5a\xeb\x08\x17\x83\xed\x9c\x8e\x17\xa6\x05\xae\x72\x86\x8e\xe2\x5a\x0f\x31\x25\xac\xb6\x14\x2f\xec\xaa\xf7\x6b\x20\xcc\x59\x86\x13\x5a\x17\x5f\xfe\x2b\x94\x29\x61\xd0\xac\xcf\xf7\x1e\xcc\x79\x89\xc4\x5c\x7e\xcf\x0a\x0a\x9f\x9c\x19\x81\xf0\x6c\x76\xf0\xe6\x3a\xfa\x24\x10\x47\xef\x86\x88\x4d\x33\xc4\x73\xac\xf7\xc5\x70\xb7\x59\x63\xce\x7b\x10\x4d\x13\x98\x82\x66\x32\x4b\x6c\x1a\xa6\xd0\xeb\x23\x4d\x0e\xaf\x35\xfa\xc3\x67\x75\xab\xcb\x49\xae\x40\xd8\x76\x2c\xff\xab\xd1\xd9\x1e\x13\x08\x51\x8e\x35\x7e\xb0\x0e\x6f\xcc\x92\x98\x15\x08\xc1\x63\x5e\x10\x19\x84\xa1\x96\xf8\x81\x97\x0a\x44\x21\xf7\xbe\xdb\xc5\x73\xbc\x91\x97\x18\x4e\x0a\x00\x11\x31\x25\xb4\xce\xc6\xa7\x99\xc7\xeb\xc9\xe6\x91\xb8\xda\x5c\x88\xaf\x5b\xff\x25\xc3\x49\x55\xbb\xa3\x76\x65\x5d\xda\x18\xf6\x2d\xca\xb6\xd7\x31\x92\xbb\x43\x14\xe6\xac\x46\xcc\xdf\xfc\x78\xfb\xa6\xc0\xc5\xfc\x9b\xd8\xcf\x16\x3e\x1b\xad\xf4\x4e\x81\x1e\x0a\xcd\xdd\x4c\xe0\x6c\x0f\x19\x52\xfa\x7d\x9b\x9f\x00\x00\x00\xff\xff\xd9\x88\x00\x0e\x08\x02\x00\x00")

func golangGetLastTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetLastTmpl,
		"golang.get-last.tmpl",
	)
}

func golangGetLastTmpl() (*asset, error) {
	bytes, err := golangGetLastTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-last.tmpl", size: 520, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\x5f\x6f\xdb\x46\x12\x7f\xe6\x7e\x8a\xa9\xd0\x18\xa4\x23\x53\x79\x38\xdc\x83\x5a\xdf\x21\x8a\x7c\x45\x81\xd4\xee\x39\x0a\x0e\x87\xb6\x68\x57\xe4\x48\xde\x68\xb9\xab\x2c\x97\xb2\x54\x1e\xbf\xfb\x61\x76\xf9\x67\x25\xd9\x69\x7a\x87\x02\xed\x43\x45\x72\x67\x67\x7e\x33\xf3\x9b\x3f\xf1\x64\x02\xaf\xdf\x2f\xee\xbe\xb9\xb9\xbd\xb9\x7f\xbd\xb8\x99\xc3\xec\xdf\xb0\xd6\xdb\xcd\x3a\x15\x6a\x52\x6e\x79\x86\x85\x56\x1b\x3c\xac\xf5\x24\x5f\xee\xd3\xdd\x2b\x36\x99\xc0\xfc\x0e\x6e\xef\x16\x70\x33\xff\x76\x91\x32\xb6\xe5\xd9\x86\xaf\x11\xea\x1a\xd2\xef\xdb\xe7\xa6\x61\x4c\x14\x5b\x6d\x2c\xc4\x2c\x1a\xe5\xdc\xf2\x25\x2f\x71\x52\x7e\x94\x23\x16\x8d\x56\x85\x1d\xb1\x68\x32\x19\x95\xd6\x08\xb5\x2e\xe9\x5b\x79\x50\x19\xfd\x5a\x51\xe0\x88\xb1\x68\xb4\x16\xf6\xa1\x5a\xa6\x99\x2e\x26\x1f\x0a\x2d\x8c\x56\x74\x7d\x3f\x62\x75\x7d\x05\x86\xab\x35\x42\x7a\xb3\xb7\x86\x7f\xeb\x0c\x95\x64\x14\x00\x1c\x8e\xd7\xf4\x06\xa3\x63\x48\xfe\x26\xaa\x9c\x24\x13\x46\x9e\x48\x53\x81\x28\xb6\x12\x0b\x54\x96\x5b\xa1\x15\xac\xb4\x81\xad\xc1\x2d\x37\x98\x43\x69\xb9\x75\x67\x25\xb3\x87\x2d\x3a\xf9\xd2\x9a\x2a\xb3\x50\xb3\xa8\xa8\xc0\xff\x47\xd8\xd3\xef\x2a\x8b\x7b\x16\xe5\xcb\xf6\xe3\x25\xa1\x4d\xe7\x33\x16\x65\x7c\xcb\x33\x61\x0f\x20\x94\x65\x91\xd1\xda\x3a\x01\x54\xd6\x1c\x58\x24\x54\x8e\x7b\x7a\x2f\xf8\xf6\x07\x1f\x90\x9f\x2e\xfd\x59\xe3\x40\x2a\x7c\x7c\x7b\xff\x1e\x0c\xda\xca\xa8\x12\xb8\x02\xa1\x84\x15\x5c\x8a\x5f\x31\x27\x48\x29\x5b\x55\x2a\x6b\xe5\xe2\x7c\xd9\x9b\x1e\x43\x68\x3a\x81\x4b\xc2\x5f\xb3\x48\xc2\xf4\x1a\x2e\xa4\xa9\x6a\x16\x45\xf9\x72\xda\x22\xce\x97\x63\x16\xf5\x68\xa7\xfd\x65\xfa\xea\x50\x4e\x3d\xcc\x0d\xc6\x67\x58\x93\x31\x8b\x1a\x16\xc9\x94\xdc\x4b\x15\xee\x2d\x90\x09\xf7\xda\x7f\xde\x1a\xdc\x85\x9f\xbd\x4b\x20\x5b\x47\x85\x2a\xd1\xd8\xf6\xa7\x04\x04\xbe\xb2\x68\x80\xdb\x31\x08\x95\x19\x9f\x08\x90\xa9\x44\xd5\xba\x1c\x4b\xe7\x53\xd2\xde\x89\x71\x0c\xdc\x42\x8b\x88\x3c\x55\xe4\x29\xf7\x80\x58\xc4\x7b\x64\xc8\x22\xec\xe0\x70\x4b\x2f\xed\x81\x62\x91\xea\x0e\xb0\xc5\x65\xb0\xd0\x3b\x6c\x7f\x08\xd7\xca\xe8\x02\x04\x61\x11\xa5\x1d\x43\x8e\xc7\xe0\x4e\xb0\xf9\x7b\x31\x86\xb8\xbc\xf1\x1e\x4d\x8b\xcf\xff\xf6\xe6\xdd\x43\x88\x4d\x48\x98\x4c\x80\xef\xb4\xc8\xa1\xc0\x42\x9b\x03\x48\xe4\x9b\x32\x70\xe6\x79\x99\x86\x9d\xe0\xc2\x9d\xc8\x6c\x7c\xcc\x90\x9a\x45\x62\x35\xb0\xe6\x6b\x78\x45\x9f\xda\x44\x51\x86\x59\x64\xf5\xcf\xee\x26\x45\x56\xa2\x8a\x65\xea\xb8\x91\xc0\x55\x7f\x8f\x45\x59\x65\x0c\x2a\xeb\x79\xd6\x66\x9b\x2a\x4b\xd0\x97\x57\x5f\x81\x80\xaf\xa1\x53\xf4\x15\x88\x97\x2f\x9d\x99\xee\xd6\x35\xb4\x4f\x6d\x04\x1c\xa6\xee\xac\xd7\xe8\xae\x44\x5b\xae\x44\x16\x8f\x7c\x15\xe9\xca\x82\x5e\xc1\xe3\x03\xcf\x36\x29\x18\x9e\x21\x64\x5a\xe5\x82\x2a\xbb\xfc\xfb\x28\x61\x11\x91\x34\x50\x97\x1a\x5c\x95\xf0\xb7\xd6\xcd\x28\xd3\xca\x0a\x55\x61\x2b\x37\x99\xc0\xe3\x83\xe6\xb0\xd4\x07\x10\x25\xd8\x07\x51\x42\x59\x2d\xad\xc4\x14\x64\xda\xd2\x62\x29\xf5\x63\x09\xfc\x91\x1f\x7a\xa5\x2e\x5f\x5c\xe5\x5e\x45\xe8\x4b\x0a\xcb\xca\x1e\xc9\xf9\xc4\x3d\x0a\x29\x61\x89\x50\x54\xd4\x71\x72\xb0\x1a\x96\x78\x7e\xdd\x75\x27\xfb\x80\xe0\x2c\x08\x8b\xc6\x35\xad\x2f\x58\x14\xd1\x97\x9f\x83\xb0\x87\x36\x18\x8b\xa2\x0e\x6f\xdc\x1e\x50\x2c\x72\x94\x68\xb1\xcb\xe0\xb8\xbf\xb3\xc1\x03\x1d\x4b\xbd\xee\xc5\xd3\x77\xb6\xb0\xe9\x1b\xa9\x4b\x8c\x93\x84\x1d\x25\x2b\x34\x4d\x1c\x39\x63\xda\x37\x68\xe3\x0d\x1e\xc0\x77\x8c\x04\x62\x5f\x09\x63\x40\x63\xb4\x71\xac\x93\x69\x51\xa5\x6f\x75\xb6\x89\x13\x16\xe5\xb8\x42\x03\xee\xd3\x7b\x25\xfd\x47\x16\xe1\x18\xf4\xc6\xb1\xce\xe3\xfd\x61\x83\x87\x9f\x1c\x5f\xf5\xc6\xa5\xaf\x77\x11\x1d\xfa\x74\x68\x0a\x2d\x63\xe8\x33\xba\x94\xbf\x7c\xc9\x7a\x5a\x03\x8e\xa9\x6c\x3c\xbb\x4b\x5b\x58\x87\xcb\x1b\xca\x97\xe9\xf7\x7e\x18\xec\x63\xf7\x76\x8f\x4b\xa1\x72\xf2\x26\x49\x9c\x6d\x12\xfd\xc2\xd7\xdd\x50\x29\xf4\x3a\x86\x7f\x19\xbe\xbd\x31\x26\x46\x63\x12\xaf\x1d\xa9\xfb\x39\xdf\x49\x96\x42\x3a\x05\x67\x91\x45\xd1\x06\x0f\xd4\x5f\x37\x78\xe8\x5a\xe9\x53\xf8\x43\xdf\xbb\x3e\xd6\x3b\x74\xec\xcf\x59\x1a\xee\x71\x2b\x79\x76\xd2\x89\x3e\x27\xf0\xce\xc2\xd5\x15\x09\xfb\xa6\x21\xd3\xae\xd4\x93\x73\x33\xdf\x57\x66\x8d\xf1\xe7\x2a\xef\x54\xbe\x72\x9a\xdc\x94\x75\xe0\x82\x39\x4b\x71\x6a\x67\x1a\x3d\x32\xe6\xc8\x3e\x06\x57\x11\xed\xa8\xa4\xf0\x41\x37\x8e\x1d\xcd\x28\x1c\xab\xb2\xfd\x44\x93\xb7\x61\x6c\xc7\x4d\x97\x15\xb8\x06\x82\x4d\xc9\xe9\x68\xe8\x7e\xa0\xee\xa2\x68\x4c\xe3\x2e\xbc\xd5\xeb\x35\x1a\x2f\xbd\xd2\xa6\xe0\xb6\xb5\x30\x06\x6e\xd6\x25\xa4\x69\x2a\x94\x45\xb3\xe2\x19\xd6\x4d\xe2\xee\xdc\xea\x47\xb8\x06\xda\x65\xd2\x5b\xfd\xd8\x46\xc8\xd5\x53\x60\xcf\x37\xdb\x56\x7d\xcb\xa1\x8b\x8b\x53\x46\xf9\xf3\x78\xe4\xd1\x65\x52\x97\x42\xad\x87\xcd\x64\x0a\x2f\x76\x23\xc7\xd8\xa4\xad\x3d\x17\xc3\xf9\x2c\x08\x60\xbf\x8a\x50\x28\x68\x07\xa0\x44\x31\x3f\xf2\xbf\x43\xfb\xa0\xf3\x61\x3c\xdc\x6d\x51\xc5\xb9\x11\x3b\x34\x63\x28\x75\x65\x32\xec\xdd\x95\xa6\xfa\xb9\x14\xbf\xa2\x9f\x15\xf1\x25\x6d\x18\x83\x2f\xf9\xb2\x2f\x1c\x67\xef\x8d\x56\x0a\x33\x7b\xa2\xec\x77\x57\x4d\xd4\xa3\x9e\x5e\x0f\x3b\xce\x00\x26\x61\x4e\x80\xa2\x4e\xab\x5c\xe0\x92\xe3\xc2\xa3\xb0\xd9\x03\x78\x0c\x50\x87\xcb\xe3\x5c\x70\x89\xd9\xb0\x38\x66\xbc\xf4\x5b\xec\x2d\x2f\x10\xfe\x03\x5b\x23\x94\x5d\xc1\xe8\xc5\xc7\x11\x34\xcd\x94\xe6\x06\xe9\xbf\x86\x8b\x5e\xa8\x69\xe6\xb3\x5a\x9a\x6a\x4a\x68\x9a\x70\xbf\x74\xc1\xc5\x15\xaf\xa4\x9d\xb2\x8e\x98\x4f\xb9\xb9\x2a\x6c\x7a\x43\x31\x5c\xc5\xa3\x4a\x95\xd5\x96\x96\x59\xcc\x3b\xc4\x2f\xca\xd1\xb8\x7d\x4e\x12\xa7\xa8\x19\x0a\xfd\x62\x3e\xa3\xe8\xcd\x67\xd3\x76\x77\xeb\xa0\x8c\x7b\x93\x7d\x34\xa6\x2e\x3a\xd4\x5a\x4e\xba\x83\x5e\x7e\x80\xcb\xf9\x2c\x81\xb6\xb9\xc3\x09\x45\xf5\xf2\x43\x4a\x4b\x66\x5b\xd6\xbd\xf1\xce\x01\x3a\x9f\xcf\x86\xd1\x70\xae\x78\xee\xc6\xcc\x6b\x29\x49\xb9\xd5\x96\x4b\x22\xd0\x5f\xff\xe2\xe9\xd2\x5b\x0a\x52\xf3\xce\x51\xb7\xbc\xc7\x1d\x9a\x12\xbb\x78\x8a\x15\xa8\x9e\x62\xce\xac\x53\x5c\xd7\xb0\x95\x95\x71\xfb\x70\x9f\x97\x38\xf9\xca\x49\x5e\x77\x24\xeb\x02\xe2\xed\xbf\xa4\x4d\xcf\x45\x13\x50\x52\xda\x4f\x73\xe4\xc4\x4e\xc8\xe8\xa3\x7f\x92\xe4\x63\xf9\xa7\x23\xeb\x6a\x8a\x0a\x66\xb1\x0f\x0b\xc6\xee\x8f\xbd\x99\xa5\x33\x5c\x0b\xb5\x8f\x7f\xff\x64\x09\x90\x5c\x2c\xf6\xf5\x62\x3f\x05\xd2\x5e\x74\xb9\x27\xfd\x4b\x52\x1e\xdb\x7d\x32\x30\xc0\xb5\x8a\xc5\xfe\xac\x55\x2c\xf6\x4e\x63\x71\xd2\x1b\x62\xbb\x87\xcb\xc5\x3e\x81\x37\xba\x28\x84\x3d\xe7\xca\x09\x35\x2c\x69\x4a\x3b\xe1\xe4\x5c\xcf\xbd\x96\x72\xc9\x69\x12\x7c\x96\xa6\x41\xfc\x09\x5d\x7f\x08\xcb\xec\xfe\xcf\x4b\xb2\x67\x5a\x19\xab\x6b\xf8\x32\x5f\xba\xd4\x4e\xaf\xcf\xbb\x59\x39\x9f\x51\x3f\x73\x62\x76\xff\xbc\xd8\x62\xef\xc4\x3c\x47\x02\x9d\x4d\x13\xd0\xa5\x1f\x26\xc7\xa4\x3f\x12\x4f\xe0\x5d\xf6\x80\x05\x8f\x93\x76\x90\x40\xcd\x5a\x87\x7e\x71\x4e\xa4\xfe\xfc\xdd\x3f\xdf\xc2\x55\xd3\xb0\x5f\x3e\xad\xac\xfd\xc7\x79\x4c\x7b\xd3\xb0\x51\xf6\xff\x64\x1f\xf6\x84\x31\x18\xbf\xf0\xf8\xd1\x9d\x9c\x10\x21\x1a\x76\xd0\xae\x02\xa9\xcd\xd1\xae\x4a\xaa\x7f\xb3\x06\xdd\xff\xd0\x18\x37\xa3\xba\x9d\x81\x54\xb6\xc6\xbd\x51\xa8\x7b\xcd\xfd\xfa\xe5\x77\xaf\x27\xfb\xf0\x89\xaf\x52\xaf\x49\x59\xe8\xab\x5f\x3a\xd2\x34\x85\x70\xe9\x20\x74\xc1\x54\x7a\x1b\xdc\xeb\x2f\x9c\xb6\xe6\x13\x5b\x5d\x7b\x80\xae\x05\x24\x5d\xfd\x07\xf5\x78\x11\xb0\xa6\x69\x28\x24\xd6\xb7\x9a\x6e\xf8\xb4\xce\x8e\xc3\x5d\xe4\xe8\x4e\x40\x9e\xc0\xd6\x27\x99\xd4\xdf\xfd\x73\x27\x9f\x94\x58\x6f\x7d\x1f\x0f\x4c\x48\xfe\x0f\x2a\x04\x9e\xff\x41\x54\x78\x46\xf2\x93\x1b\x2e\x59\x98\x4c\x60\x71\x37\xbf\x9b\x82\x41\x95\xa3\x01\xe7\xcf\x83\x96\x39\x9a\xf2\x89\xb5\x36\x5c\x64\xcb\x8f\x72\xfa\xa3\x7a\x51\xfe\xa8\x48\x39\x3d\xd2\x02\x3b\xe0\xeb\xf6\xd8\xa0\x07\x52\xb3\x3a\x6e\xda\x5d\x07\x6b\xd9\xd4\x77\xb0\xa3\x8e\xd5\x1e\x86\xa4\x0b\x9a\xe6\x3f\x04\xca\xdc\x29\x0a\xe3\xe5\x22\xb2\xf0\x51\x0f\x21\xb4\x80\xc4\x0a\xd2\xf7\x5b\xf7\x07\x4d\x89\x83\x06\x6f\xd3\x1d\xe0\x6f\x5b\x7e\x42\x01\x9d\x7e\xb9\x1a\xbc\x19\xfa\xf0\x8b\xd2\x49\x8d\x7a\xa5\xbd\xa3\x47\xb0\x1d\x5f\x56\xbd\xdd\x63\xe8\xc7\xa1\x7c\x22\x02\xff\x8b\xf9\x21\xce\xab\x73\x77\x61\x17\x06\x12\x9a\x9e\x6d\x43\x68\x02\xf4\xf1\x91\x74\x42\x2f\x14\xe8\xdb\x4a\x4a\x0a\x13\x34\x0d\xb9\xe7\x3d\x38\x31\x58\x77\xc3\xf1\xfc\xce\xc5\x33\x77\xea\xdd\x14\x76\x3d\xa6\xb8\x3a\xf1\x21\x81\x4c\xcb\xaa\x50\x84\x2d\x98\x59\x9d\x1d\xf7\x57\xe5\x37\x4e\x02\x9a\x66\x14\xa8\xb9\x3c\xd5\xb3\xe3\xb2\x22\x15\x41\xf1\x40\x0d\xae\x3c\xaa\x61\x69\x08\x3b\x4b\xd8\x4f\xaa\x74\xd7\xa6\x8e\x56\x12\x6d\x8f\x7c\x7b\x16\xfb\x3d\xae\xe2\xe4\x14\xca\x80\xfe\xa2\x82\x73\x3a\xd0\xf3\xd5\x31\x67\xfe\x1b\x00\x00\xff\xff\x97\x95\xb6\x8b\x19\x18\x00\x00")

func golangHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangHeaderTmpl,
		"golang.header.tmpl",
	)
}

func golangHeaderTmpl() (*asset, error) {
	bytes, err := golangHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.header.tmpl", size: 6169, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangInsertTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x93\xc1\x6a\x1b\x31\x10\x86\xcf\xab\xa7\x98\xe6\xb4\x0b\x8e\x1e\x20\xe0\x43\x09\x29\x04\x82\x21\x71\x4a\x8f\x8a\x62\x8d\x16\xb5\x6b\x49\x8c\x64\x36\xae\xd0\xbb\x17\x69\xdd\xf5\xa6\x86\x1e\xda\x18\x7c\xd0\xcc\xce\xfc\xdf\x3f\x23\xa5\x74\x0d\x0a\xb5\xb1\x08\x57\xc1\xf4\x56\xc6\x03\xe1\x15\x5c\xe7\xcc\x6e\x09\x65\xc4\x94\x80\x6f\x0f\x5a\x9b\x37\xc8\xb9\x4d\x09\xbc\x24\xb9\x07\xfe\x99\xfa\x00\x39\x77\xb0\x88\x3d\x61\x3c\x90\x85\x9c\x57\x80\x44\xe5\xef\xa8\x63\x45\x02\xad\xaa\x3d\xd9\x52\xef\xd5\xa9\x63\x95\x4a\x0c\x00\xa0\xa4\x8c\x06\xbe\x41\x54\x61\xe3\x46\xc8\xb9\xc6\x85\xb0\x6e\x84\x9b\x35\x6c\xdc\xd8\x76\xfc\xeb\xf3\x6d\xdb\x9d\x0a\xe6\xbe\xa7\xa3\xb1\x26\x5a\x1c\x81\x7f\x31\x38\xa8\xc2\xc7\x9a\x9d\xb3\x21\x82\x10\x21\xee\xe3\xfa\xa5\xda\x79\x7c\x80\x9c\x5f\x58\x23\x84\x27\xf4\x92\x50\xad\x40\x08\x42\x3f\xc8\x1d\x4e\xec\x37\x6b\x70\xaf\xdf\xf9\x29\xdf\x4e\xe5\x1d\x6b\x8c\xae\xe9\x4f\x6b\xb0\x66\x80\x09\xbc\xfc\x68\xb2\x9e\x12\xfc\x44\x72\xef\x46\xf1\x8d\xa4\xbf\x23\x6a\x91\xa8\x63\x4d\x66\x8d\x42\x8d\x74\x16\x6c\x3b\xd6\x14\xad\xc1\xf5\xdb\xb8\x8f\x27\xad\x55\xe9\x25\xa9\x5f\x78\xe9\xd8\xec\x53\x97\xa5\x78\xef\x28\x86\x49\xc9\xd8\x1e\xde\xcf\x61\xc1\x50\xc3\x05\x7b\x0d\x67\xcb\xfc\xf1\x80\x74\x7c\x72\x63\x7b\x29\xc4\xb7\x3b\x69\x6b\x5c\x29\x72\x1a\x5a\x3d\xc8\x18\xd1\xfe\xee\xd9\x55\x9a\xd2\xf5\x7f\xe7\x51\xbe\x9d\xf8\xce\x15\x15\x66\x51\x60\xcd\x30\xef\x7b\x08\x38\x2f\xbc\x4c\x30\xcc\xeb\x5a\x38\xbb\x7b\xc3\xdd\x1f\xae\xfe\x8d\xf7\x2f\xb8\x42\xf8\x1f\x0b\x6d\xc2\xc0\x1f\x64\x88\xf7\x36\x20\xc5\x7b\xd5\x7e\xc8\x78\xe0\x72\x3e\xe5\xa6\xf4\x18\x8b\x56\xb9\xcb\x53\x21\x7f\x3e\x7a\x2c\xef\xb3\x50\x5d\x3c\x8e\xcc\x16\x87\x5f\x01\x00\x00\xff\xff\x6e\xfe\x3e\xc1\xf1\x03\x00\x00")

func golangInsertTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangInsertTmpl,
		"golang.insert.tmpl",
	)
}

func golangInsertTmpl() (*asset, error) {
	bytes, err := golangInsertTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.insert.tmpl", size: 1009, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangSelectTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x57\x5d\x6f\xdb\x36\x14\x7d\x16\x7f\xc5\x9d\x10\x14\x72\x60\xab\xd9\xeb\x00\x0d\xc8\x12\xb7\x19\xe0\x35\x6d\xe4\x61\x0f\x45\x81\x32\x36\xe5\xb0\xa3\x29\x8d\xa2\x90\x6c\x02\xff\xfb\xc0\x0f\xc9\xb2\x24\xdb\xb2\x33\x63\x0d\x90\x20\x22\xef\xc7\xb9\x97\xf7\x1c\x51\x65\x39\x81\x25\x49\x28\x27\xe0\xe7\x84\x91\x85\x9c\x24\x05\x5f\x4c\x38\x5e\x13\x1f\x26\x4a\xa1\xf7\x44\x96\x25\x84\xef\x0a\xbe\x88\x8b\x24\xa1\x2f\xa0\x14\xd2\x6e\x84\x2f\x8d\x01\xda\x15\x23\xa7\x2b\x1b\xa2\x2c\x41\x92\x75\xc6\xb0\xec\xcd\x12\x82\x52\x81\x36\xca\xb0\xc0\x6b\x08\xaf\xc5\x2a\x07\xa5\x46\xd0\x5c\x7c\x20\xb2\x10\x5c\xaf\x8f\x81\x08\xa1\x7f\x53\x31\x1a\x04\xa4\x02\x31\xd9\x81\xc2\xe0\xd4\x20\xa0\x44\xc8\x5b\xa4\x3c\x97\x90\xcb\xb5\x8c\xbe\xea\xc2\xe3\x4f\x33\x50\xea\x2b\xf2\x32\x41\x32\x2c\xc8\x72\x0c\x82\x64\x0c\x2f\x88\x05\xf2\x53\x04\xe9\xe3\xb7\xd0\xed\x06\xda\x71\x84\x3c\x9a\x98\xcd\x1f\x22\xe0\x94\x41\x89\x3c\x4f\x3f\x46\xf0\x87\xc0\xd9\x54\x88\x80\x08\x31\x42\x9e\x27\x4c\x55\xc8\x53\xc8\x5b\x92\x84\x88\x2a\x74\x30\x42\x9e\x8e\xca\xd2\x55\x2c\xd7\xd2\x44\x1d\x43\x59\x02\x16\xab\x4d\x83\x74\xc5\x20\x30\x5f\x91\x66\x7f\x10\x00\x68\x53\x6d\xa6\x8b\x8a\xcc\xc3\xaf\x9c\xca\xe6\xc9\x29\x85\x2c\xa2\xaa\xac\xf0\x53\x41\xc4\xdf\x0f\xe9\xf3\x4b\xd0\xce\x13\xc6\x0b\xcc\x03\x17\x77\xe2\x32\x5e\x50\x31\x86\x0b\x5b\x80\x6e\x42\x8d\x60\xe2\x20\xb4\xcd\x93\x31\x5c\x24\x94\xb0\xa5\xb6\x76\x8e\xe1\x3b\xbd\xb0\xed\xe3\xe0\xd3\x04\x52\xa1\xb3\x68\x57\x73\xec\x65\xe9\x90\xbf\x29\x4b\x17\xca\xd5\xb8\x95\xaf\x1a\x87\xbe\xe7\xcd\xc9\x44\x11\xe4\x7f\xb1\x70\x2a\xc4\x87\xf4\x21\x7d\xce\xcd\x19\xb9\x6a\x38\x65\x63\xfd\xc7\x9c\x4b\xf7\x24\x9b\x56\xdb\xe7\x69\x93\xb8\xfd\xaa\x8b\xcd\xc9\xd5\x41\x3b\xec\x79\x7b\x89\xa2\x57\xfe\x20\x80\x78\x3a\x9b\xde\xcc\xe1\x7a\x36\x83\xdf\xa6\xf3\xbb\xfb\xdb\xd7\x07\xbd\x7c\x6b\xc9\xdb\xe2\x14\x66\xcc\xd7\x4d\xd7\xe4\x81\x20\x7d\xfc\x06\x97\x7a\xc2\x6e\x29\xd6\xdb\xa0\xd4\xed\x2f\x23\xe8\xe3\x3c\x66\xcc\x11\x52\xb3\x0d\xed\x0e\x30\x7f\x19\x14\xa0\x1e\x88\x5e\xea\x57\xc6\x1d\x2d\xcb\x58\x21\x30\xa3\xff\x10\x08\x63\x29\x0a\x93\xf1\x78\x89\xab\xc3\xef\x95\xb9\x16\x88\x3d\x52\x67\x27\x27\x2f\x98\x84\xcf\x5f\x4c\x3f\x6a\x70\x5b\x8a\xa7\xed\x9e\x20\x5d\xcd\x07\x23\xdc\xa3\x7f\xdb\x45\x38\x0d\x3c\x9b\x04\xee\x23\xce\x69\xfa\xa7\x9b\xd1\x92\xb1\xd8\x54\x16\xbc\xb1\xbd\xec\x71\x3a\x16\x98\xdb\xac\xe2\x9d\x9f\xc2\x1f\xaf\xdf\x4f\x6f\xcf\x4d\xe2\x0c\xaf\xc8\xf2\x34\x1a\x1b\xd7\xd7\x11\xb9\x13\x62\x3f\x95\x37\xe6\x0d\x32\x7f\xd4\x8b\xff\x25\xa3\x1b\x59\xf6\x72\xba\x83\x66\x07\xab\xed\x4b\xac\x7a\x1a\x57\x35\x56\xef\xa2\x85\x4c\xff\x24\x1c\x72\x29\x28\x5f\x8d\x81\xd1\x35\x95\x40\xb9\x3c\x28\x06\xd6\x31\x2d\x64\xed\x7b\xc4\x85\xa8\xd9\xf9\x9d\xb2\xd0\xee\xc4\x77\x77\x39\xd2\xfd\xe9\xd5\x87\x46\xc3\x5b\xc4\xd7\xdb\x84\x2f\x95\xb2\xed\x73\x0d\x77\x1a\x42\x93\xea\x38\xa2\x08\x7c\x1f\xca\xfa\x46\x51\x2d\x83\x7f\xe5\x9b\x45\x85\x90\x77\x58\x72\x06\xe0\x80\x16\x90\x03\xba\xe4\xfb\x5d\x6d\xaa\xb0\xdb\xd9\xf9\x19\xae\x1a\xc0\xf5\x32\xe1\x81\xc5\x34\xd2\x75\x59\xab\x72\xeb\xa2\xb5\x99\xa5\x08\x92\xb5\x0c\xe3\x4c\x50\x2e\x9d\xd7\x67\xe3\x31\xf9\xf1\x4b\xa8\xcf\xda\xf0\xed\x9e\x1b\x0d\xad\xdc\xed\x24\x2b\x20\x2c\x27\x9d\xa6\xd9\xa8\xf6\xff\xaa\x75\x07\xee\x47\xb5\xe3\x59\x75\xf6\xe6\xfe\xf7\x0f\xf3\xb3\x09\xec\x22\x2d\xb8\x3c\x52\x59\x8d\xcf\x89\x92\xda\xf1\xdd\xa1\xa5\x1b\xbb\x86\x88\xde\xe8\xc5\x2d\x7d\x39\x42\x37\x1b\x11\xfb\x05\xb3\x93\x32\x1c\x72\xfd\xa1\x5c\x0e\x93\xb4\x66\xe5\x5d\x2d\x6b\xa3\x3b\xf7\xed\xe6\x2c\x1f\x78\x3d\x17\x9c\x43\xdf\x69\x4e\x86\xf6\x09\xca\xd5\xff\x7a\xcd\xb9\xbb\x8e\xcf\x46\xbe\x27\x9c\x1f\x49\xbd\x27\x9c\x9f\x48\xbc\x96\xe7\x0e\xda\x55\x56\x0d\xd2\xdd\xe1\xfc\x54\xca\xd5\xd1\xfa\x09\xd7\x4a\x36\xec\x73\xe3\x31\x4d\xd9\x30\xc2\x6d\x2a\xee\xd2\x6d\x1b\x99\x23\x9b\xe1\x60\x4d\x23\xc3\xa3\x01\x8a\xd3\x19\xec\x3d\xa3\x9c\x60\x96\x5b\xa2\x36\xa7\xd8\xe4\xd5\x2f\xc4\xde\x41\xfe\x37\x00\x00\xff\xff\xc6\x51\x02\x76\xf5\x12\x00\x00")

func golangSelectTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangSelectTmpl,
		"golang.select.tmpl",
	)
}

func golangSelectTmpl() (*asset, error) {
	bytes, err := golangSelectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.select.tmpl", size: 4853, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangUpdateTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x55\x51\x6f\xdb\x36\x10\x7e\x26\x7f\xc5\x4d\x0f\x83\x94\xc9\x2c\xf6\x9a\x41\x18\xba\x35\x05\x36\x0c\x1e\x12\x6f\xd8\x43\x10\xb4\x8c\x74\x32\xd4\x4a\xa4\x42\x4a\xb5\x0b\x9a\xff\x7d\x38\x52\xb2\xe5\x78\xd9\x06\x44\x40\x02\x8b\x77\xf7\xf1\xbb\xef\x3b\x52\xce\xad\xa0\xc2\xba\x51\x08\x89\x6d\xb6\x4a\x0e\xa3\xc1\x04\x56\xde\xf3\x3f\xfb\x4a\x0e\xe8\x1c\x88\xcd\x58\xd7\xcd\x1e\xbc\x4f\x9d\x83\x5e\x1a\xd9\x81\x78\x6b\xb6\x16\xbc\x1f\x43\x12\x2c\x72\x07\x33\x96\x83\x58\xcb\x0e\xc1\xfb\x0c\x52\x83\x76\x6c\x07\xb8\xba\x0c\xe6\x80\xc6\xd0\x9f\x36\x19\x27\x22\xa8\xaa\xb0\x33\x5f\xb2\x7a\xd4\xd5\xd7\x40\xc8\x71\x66\x70\x18\x8d\x02\xd5\xb4\x39\xfd\xe3\xfe\xbc\x8c\x3b\xf7\xe6\x8a\x17\xaf\x7c\x38\xc0\xef\x6d\x05\xb1\xb3\xd7\xa3\xf1\x7a\x54\x25\xa4\xfa\xf1\x53\xd4\xe0\x5d\x23\x5b\x2c\x07\xf0\xfe\xdd\x4f\x19\x38\x07\x03\x76\x7d\x4b\x22\x26\x71\xcb\x15\x15\x24\x20\x80\x5a\x7a\xb1\xf8\x8f\xfd\x7f\x17\x2f\x65\x5c\x84\x57\x4a\x76\x97\x1e\x07\x6b\xc0\x7b\x7a\x79\x3f\xaa\xf2\x68\xfa\xcb\xd6\x2c\x31\x6d\xb3\x8d\x90\x2f\x91\x9a\x76\x25\x66\x29\xbf\x98\xa3\x9c\x03\xc0\xa4\xb9\x05\x21\xc4\x19\xa7\x48\x33\x83\x34\x64\x5d\x4e\xd4\xff\x1e\xa6\x33\x91\xfe\x95\x6d\xe8\x87\xc8\x82\xe3\x9c\x7d\x91\x06\x9e\x2c\xdc\x3f\xd8\xc1\x34\x6a\x1b\x17\xbe\xc8\x76\x44\x5a\x6c\xd4\x80\xa6\x96\x25\x3a\xcf\x99\x45\x54\x70\x5d\x40\x27\xfb\xfb\x98\x4d\x71\x8a\xc8\xaa\x0a\x25\x14\xa5\x3d\x52\x52\x04\x62\x4e\x1e\xd1\x60\x01\x95\x81\xe3\x8c\x35\x35\x34\xd5\x3e\x07\xfd\x99\xca\x08\xfc\x9e\xca\x1e\x7e\x00\xfd\x99\xe2\x2c\xb2\xb8\x6f\xaa\xfd\x03\x14\x11\x85\x33\xe6\x39\x63\xa7\x64\x28\xa0\x45\x95\xc6\xd4\x2c\x88\x48\xcf\x93\x85\x02\x64\xdf\xa3\xaa\xd2\x27\x9b\x43\xe0\xf3\x1d\x24\x50\xc0\x8f\x49\xc6\x67\xec\x53\x52\x7c\x9f\xb8\x66\x9c\xc5\xd9\x68\x6a\x10\x6b\xc4\xca\xae\xf5\x8e\xe6\x85\x29\xbd\x23\xb2\x6b\xbd\x4b\xcf\xbd\xa0\xdf\x46\xaa\x2d\x82\x78\x3b\x0e\xfa\x7d\x83\x6d\x65\x43\xc9\xac\x4d\x9a\x90\xab\x3f\xeb\x76\xec\x14\x78\x9f\xe4\x34\xe4\xe2\x17\xd5\x90\xc7\x27\x30\x2a\xa9\xb5\x81\x0f\xf9\x34\x33\xb4\x5f\x44\x9e\x67\x88\xc4\x39\xa2\xc6\x45\x51\x06\x5c\xba\x7e\xd2\x6c\xae\x14\x31\x23\x0b\xed\x04\x69\xec\xd0\x0d\x41\xec\xe0\x8c\x15\x77\xd8\xb7\xb2\xc4\xf4\xa3\x73\x62\x73\xfb\x9b\xf7\x1f\xf3\xa3\x84\xc9\xe1\x70\xb8\xdd\x1c\x0e\x87\xe4\xb4\x36\xd7\xfd\xaa\x1b\x15\x74\x4d\x72\x48\xb2\x1c\xbe\xcf\x38\xeb\x0d\xf6\xd2\x60\x95\x83\x89\xa8\x71\x6e\xaf\x0b\xd0\x8f\x9f\xc4\x14\x4d\x89\x41\xc6\xc9\x7b\x0a\x7e\x53\xd0\x65\x17\x1a\xa2\xd7\x02\xfe\x32\xb2\xbf\x31\x26\x45\x63\xc8\xa5\x78\x2b\x12\x7d\x56\x61\x8d\x66\x86\x4e\x33\xce\x24\x1d\xaf\xeb\x0b\x03\x49\x47\x69\xb6\xd3\xf1\x5b\x79\x9f\x31\xce\x88\x41\xab\xb7\x9b\xa1\x1b\x02\x83\x9c\x52\xac\x10\x22\xe3\x47\x9f\x37\x63\xdf\x6b\x33\xd8\xbb\xb0\x67\xa3\xb6\x64\xc5\xe2\x50\x16\xf0\xed\xf9\x6d\x12\xa3\x91\xf7\xdc\xbc\xb8\x1d\xd1\x7c\xbd\xd3\xbb\x7d\x3a\xef\x30\x55\x6c\x4a\xa9\xa6\x2f\x46\x1c\xd3\x49\x82\xa2\x00\xfb\xd4\x8a\x1b\x63\xd6\xfa\x4e\xef\xc8\xdd\x59\xed\xe7\xdf\x04\x5a\xf3\xcb\xda\xa3\x7c\xff\x54\x71\x26\xe5\xa9\x74\x4a\x89\x4c\x22\x6e\x18\xbd\xd6\xe2\xdc\xf0\x87\xfc\x79\x57\x37\x7b\x2c\x8f\x0d\xbd\x86\xc1\xfc\x9d\x23\x43\xce\x2e\x28\x8b\x74\xfb\x5f\x5c\xa7\xce\x2d\xcc\x5c\x1e\x13\x3a\x73\xcf\xee\xef\xab\x37\xde\xf3\xbf\x03\x00\x00\xff\xff\xc6\xf9\xac\xbe\xf6\x07\x00\x00")

func golangUpdateTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangUpdateTmpl,
		"golang.update.tmpl",
	)
}

func golangUpdateTmpl() (*asset, error) {
	bytes, err := golangUpdateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.update.tmpl", size: 2038, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x4d\x8f\xda\x38\x18\x3e\xc3\xaf\x78\x55\x71\x60\xd0\x90\xde\x77\x55\x8d\x32\xe0\xe9\xa6\x0d\x0e\x93\x98\xad\xe6\x98\x12\x53\xbc\x4a\x1c\x36\x18\x8d\x90\xf1\x7f\x5f\xd9\xce\x27\x4d\xd8\xe9\x6a\x0e\x7b\x73\xec\xc7\xcf\xfb\xbc\x9f\x8e\x94\x1f\x67\xb0\x0e\x22\xf2\x39\x44\xd1\xb3\x0f\x11\x71\x09\x5a\x21\x4c\x80\xa0\xd5\xda\x77\x09\x8a\x00\x66\x1f\x95\x1a\x8f\xa5\x9c\x43\x42\x77\x8c\x53\xf8\x70\xdc\xee\x69\x16\x7f\x80\xb9\x52\x66\xbf\x88\xf9\x0f\x0a\x0e\x89\xbf\xa7\xf4\x08\x4a\x8d\x17\x21\x72\x09\x02\xe2\x3e\xfa\x08\xa4\x04\x07\xc7\x19\x05\xa5\x60\xda\xc2\x4f\xd8\x3d\x4c\xb6\x79\x0a\xbf\x7d\x02\x67\x91\xa7\xa7\x8c\x9b\xcb\x52\xb2\x1d\x4c\x98\x52\xf7\x52\x52\x9e\x28\x35\x92\x12\x5e\x99\xd8\x5b\xb4\x36\x3a\x6a\x73\xea\x35\x39\x1f\x68\x75\x32\x07\xb6\x03\x07\xe7\x02\x9f\xd2\x54\x03\x70\x40\x00\x6f\x7c\x1f\xf4\x19\xe5\x49\x17\x18\xd2\x1d\x2d\x28\xdf\x1a\xae\x10\x3d\xa1\x10\xe1\x05\x8a\x0c\x6d\x7d\x66\x7d\x03\xa5\xa6\xdd\x6d\x2b\x1b\x94\xba\x83\x00\xc3\x12\xf9\x88\xa0\xab\x9b\x01\x5f\xd2\x94\x0a\x7d\xb9\x6d\x7f\x78\x6d\x54\xad\x0b\x96\xc5\xc5\xf9\x2b\x3d\xeb\x90\xdc\x8f\xd6\xa1\xb7\x72\xc3\x17\xf8\x8a\x5e\x60\x3a\x10\xc3\xce\x9d\x26\x8a\x50\x86\x51\x4a\x0b\x35\x2b\x6d\x4e\xa9\xbb\x6b\xd3\x65\x26\x37\x9c\xfd\x7d\xa2\xd6\xf2\x06\x7b\xcf\x1b\x34\x68\xf4\x97\x4d\x29\x35\xbe\xfb\x7d\x5c\xef\xb7\x56\x9d\x1a\x4b\x72\xc1\xe3\x8c\x56\x45\x06\x75\x06\x1c\xfd\x51\xc7\xbd\xe3\x40\x87\x20\xa5\x3b\xf1\x57\xce\xb8\x65\xf0\xd1\x13\x81\x2f\x81\x87\x6d\x76\xd8\x8f\xbd\xa8\x19\x75\xea\xa4\x04\x41\xb3\x43\x1a\x8b\xb6\x6d\xc7\xa7\x3b\xa1\x11\x9f\x86\x00\x86\xe9\xa6\x8e\x6d\xce\x13\x26\x58\xce\x9b\x7e\xd1\x09\xb6\x1e\x2c\xb2\x43\x5d\xd0\x7d\xf4\x35\xaa\x56\xd2\x78\xaf\x77\x83\x03\x2d\x62\x91\x17\xfa\xe4\xe1\xa7\x9a\xea\xd8\x29\x43\xf6\x26\x6b\x76\xd1\x6f\xb3\x3c\x6b\x5b\x7e\x23\x5d\x6f\xac\xba\x3a\xbd\xb7\x08\xf4\x1a\x65\x1e\xd6\x85\xd9\xc2\x1e\x69\x4a\xb7\xa2\x0d\xf5\x78\x4f\xa1\x0f\xe4\xea\x75\x4f\x0b\x7a\x3d\xd7\xca\x72\xe7\x89\xad\xf7\x4a\x1f\xdb\x01\xcf\x05\x4c\x18\x28\xf5\xed\x0f\x14\x9a\xbe\xa7\xe9\xd1\x54\x94\x8b\x97\x50\x17\x76\x47\x60\xab\x1c\x2c\xe9\xad\x61\xd0\x9d\xba\xc6\xb5\xf9\xeb\x3e\x16\x75\x57\x4c\x84\xa9\x61\x2d\xac\xaa\xe6\x2a\xa2\x29\xe5\xe0\x7c\xdb\xc7\xa2\x56\xdc\x72\x47\x93\x98\x5b\x06\x60\x24\x9a\x1e\x06\xdb\xc4\x8d\xf0\xd2\x80\x6d\x3b\x7b\xad\xd5\xd4\x56\xac\xf6\xb9\xb2\xd1\xe0\x67\xbf\xe2\x95\x75\x28\x42\x3e\x5a\x10\xe8\x49\x68\xe9\xb5\xa3\x14\x3c\x85\xc1\x0a\xda\x03\xc1\x8e\xf2\x72\x72\xe9\xc2\xf8\x92\x33\xfb\x92\x8c\xba\x75\xd4\x4c\x04\xa7\xbe\xf6\xd3\x73\xb0\xa8\xf2\xd3\xc7\x50\xd6\xc7\x35\xa8\x97\x28\x28\x12\x5a\x3c\x9e\x2d\x4b\x10\x2e\x51\x08\x8f\x2f\x43\xad\x52\x82\x9b\xb9\x06\x6e\xb4\x18\x20\xf6\x59\xc6\x84\xa5\xf5\xbd\x95\x47\xe0\xa1\x0b\xbc\x31\x89\x4e\xbc\x1b\x69\xb3\x33\x9d\xdd\xfd\xdf\x83\xfa\x6f\x3d\xf1\x3d\x3e\xb6\xda\xb6\x17\x99\x98\x47\xd8\x82\xca\x77\x7a\xc0\xe9\x7e\xc1\xef\xa3\x97\xf1\x23\x2d\xca\x1c\x78\x38\x42\x21\x01\x0f\x93\x60\x50\x85\xfd\x29\x32\xb1\x1c\x0d\xbd\xc0\xcd\xaf\xd3\x70\x17\x5f\x3f\xc6\xf0\xa7\xeb\x6f\x50\x34\x35\xae\xfd\x27\xd6\x87\xd6\xcb\x5e\xfb\x6e\xfe\xa0\xc8\x26\xc4\x1e\xfe\x0c\xb3\xe1\x30\x9c\x0e\x49\x5c\x25\x63\xb3\x5e\xba\xe5\x4f\x53\xfd\x20\x47\x88\xc0\xe5\x72\x79\x8e\x2e\x97\xcb\xbb\x24\xe5\x86\xb0\x7f\x02\x00\x00\xff\xff\x5f\xa3\x67\x2b\x04\x0b\x00\x00")

func postgresTmplBytes() ([]byte, error) {
	return bindataRead(
		_postgresTmpl,
		"postgres.tmpl",
	)
}

func postgresTmpl() (*asset, error) {
	bytes, err := postgresTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.tmpl", size: 2820, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlite3Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x4d\x6f\xea\x38\x14\x5d\xc3\xaf\xb8\x7a\x62\x01\xa8\xe4\x2d\x66\x37\xa3\xa7\x2a\x05\x57\x93\xd7\x90\xd0\xc4\x4c\xd5\x65\x4a\x4c\xf1\x28\x71\x98\x60\x54\x21\xe3\xff\x3e\xb2\x9d\x4f\x9a\x30\xed\xa8\x8b\xb7\x73\xec\xe3\x73\xcf\xfd\x74\x84\xf8\x3e\x85\xf0\xd1\x75\x30\xfa\x0d\x42\x6c\x63\xb4\x44\x1e\x06\x8c\x96\x2b\xd7\xc6\x28\x04\x98\x7e\x97\x72\x38\x14\x62\x06\x31\xd9\x52\x46\xe0\xdb\x61\xb3\x23\x69\xf4\x0d\x66\x52\xea\xfd\x3c\x62\xaf\x04\x2c\x1c\xbd\x24\xe4\x00\x52\x0e\xe7\x01\xb2\x31\x02\x6c\xdf\xb9\x08\x84\x00\xcb\x8b\x52\x02\x52\xc2\xb8\x81\x1f\xd1\x1b\x18\x6d\xb2\x04\x7e\xff\x01\xd6\x3c\x4b\x8e\x29\xd3\x97\x85\xa0\x5b\x18\x51\x29\x6f\x84\x20\x2c\x96\x72\x20\x04\xbc\x51\xbe\x33\x68\x65\x74\xd0\xe4\x54\x6b\x7c\xda\x93\xf2\x64\x06\x74\x0b\x96\x97\x71\xef\x98\x24\x0a\xe0\xf9\x18\xbc\xb5\xeb\x82\x3a\x23\x2c\x6e\x03\x03\xb2\x25\x39\x61\x1b\xcd\x15\xa0\x7b\x14\x20\x6f\x8e\x42\x4d\x5b\x9d\x19\xdf\x40\xca\x71\x7b\xdb\xc8\x06\x29\x27\xe0\x7b\xb0\x40\x2e\xc2\xe8\xe2\xa6\xcf\x16\x24\x21\x5c\x5d\x6e\xda\xef\x5f\x6b\x55\xab\x9c\xa6\x51\x7e\x7a\x20\x27\x15\x92\x9b\xc1\x2a\x70\x96\x76\xf0\x0c\x0f\xe8\x19\xc6\x3d\x31\x6c\xdd\xa9\xa3\x08\x45\x18\x85\x30\x50\xbd\x52\xe6\xa4\x9c\x5c\x9a\x2e\x32\xb9\x66\xf4\x9f\x23\x31\x96\xd7\x9e\xf3\xb8\x46\xbd\x46\x3f\x6d\x4a\xca\xe1\xe4\x8f\x61\xb5\xdf\x58\xb5\x6a\x2c\xce\x38\x8b\x52\x52\x16\x19\x54\x19\xb0\xd4\x47\x15\xf7\x96\x03\x2d\x82\x84\x6c\xf9\xdf\x19\x65\x86\xc1\x45\xf7\x18\x7e\xfa\x8e\x67\xb2\x43\x5f\x77\xbc\x62\x54\xa9\x13\x02\x38\x49\xf7\x49\xc4\x9b\xb6\x2d\x97\x6c\xb9\x42\xfc\xe8\x03\x68\xa6\xab\x3a\x36\x19\x8b\x29\xa7\x19\xab\xfb\x45\x25\xd8\x78\x30\x4f\xf7\x55\x41\x77\xd1\x57\xa8\x4a\x49\xed\xbd\xda\xf5\xf7\x24\x8f\x78\x96\xab\x93\xdb\x77\x35\xd5\xb2\x53\x84\xec\x43\xd6\xcc\xa2\xdb\x66\x71\xd6\xb4\xfc\x41\xba\xce\x58\xb5\x75\x3a\x1f\x11\xe8\xd4\xca\x1c\x4f\x15\x66\x03\x7b\x20\x09\xd9\xf0\x26\xd4\x61\x1d\x85\xde\x93\xab\xb7\x1d\xc9\xc9\xe5\x5c\x2b\xca\x9d\xc5\xa6\xde\x4b\x7d\x74\x0b\x2c\xe3\x30\xa2\x20\xe5\xd3\x9f\x28\xd0\x7d\x4f\x92\x83\xae\x28\xdb\x5b\x40\x55\xd8\x2d\x81\x8d\x72\x30\xa4\xd7\x86\x41\x7b\xea\x6a\xd7\x66\x6f\xbb\x88\x57\x5d\x31\xe2\xba\x86\x95\xb0\xb2\x9a\xcb\x88\x26\x84\x81\xf5\xb4\x8b\x78\xa5\xb8\xe1\x8e\x22\xd1\xb7\x34\x40\x4b\xd4\x3d\x0c\xa6\x89\x6b\xe1\x85\x01\xd3\x76\xe6\x5a\xa3\xa9\x8d\x58\xe5\x73\x69\xa3\xc6\x4f\x3f\xe3\x95\x71\x28\x44\x2e\x9a\x63\xe8\x48\x68\xe1\xb5\x25\x25\xdc\x07\xfe\x12\x9a\x03\xc1\x8c\xf2\x62\x72\xa9\xc2\xf8\x99\x51\xf3\x92\x0c\xda\x75\x54\x4f\x04\xab\xba\xf6\xee\x39\x98\x97\xf9\xe9\x62\x28\xea\xe3\x12\xd4\x49\xe4\xe7\x31\xc9\xef\x4e\x86\xc5\x0f\x16\x28\x80\xbb\xe7\xbe\x56\x29\xc0\xf5\x5c\x03\x3b\x9c\xf7\x10\xbb\x34\xa5\xdc\xd0\xba\xce\xd2\xc1\x70\xdb\x06\x5e\x99\x44\x47\xd6\x8e\xb4\xde\x19\x4f\x27\xbf\x7a\x50\xff\xab\x27\x5e\xa2\x43\xa3\x6d\x3b\x91\xb1\x7e\x84\x0d\xa8\x78\xa7\x7b\x9c\xee\x16\xfc\x35\x7a\x29\x3b\x90\xbc\xc8\x81\xe3\x85\x28\xc0\xe0\x78\xd8\xef\x55\x61\x7e\x8a\x74\x2c\x07\x7d\x2f\x70\xfd\xeb\xd4\xdf\xc5\x97\x8f\x31\xfc\x65\xbb\x6b\x14\x8e\xb5\x6b\xff\x8b\xf5\xb6\xf1\xb2\x57\xbe\x5f\x73\xfd\xb8\x8f\xa3\x32\x01\xeb\xd5\xc2\x2e\x7e\x94\xaa\x47\x38\x44\x18\xce\xe7\xf3\x63\x78\x3e\x9f\xbf\x24\x11\x17\x62\xfe\x0d\x00\x00\xff\xff\x98\xb8\x02\x49\xe9\x0a\x00\x00")

func sqlite3TmplBytes() ([]byte, error) {
	return bindataRead(
		_sqlite3Tmpl,
		"sqlite3.tmpl",
	)
}

func sqlite3Tmpl() (*asset, error) {
	bytes, err := sqlite3TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sqlite3.tmpl", size: 2793, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"golang.delete-all.tmpl": golangDeleteAllTmpl,
	"golang.delete.tmpl": golangDeleteTmpl,
	"golang.footer.tmpl": golangFooterTmpl,
	"golang.funcs.tmpl": golangFuncsTmpl,
	"golang.get-last.tmpl": golangGetLastTmpl,
	"golang.header.tmpl": golangHeaderTmpl,
	"golang.insert.tmpl": golangInsertTmpl,
	"golang.select.tmpl": golangSelectTmpl,
	"golang.update.tmpl": golangUpdateTmpl,
	"postgres.tmpl": postgresTmpl,
	"sqlite3.tmpl": sqlite3Tmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"golang.delete-all.tmpl": &bintree{golangDeleteAllTmpl, map[string]*bintree{}},
	"golang.delete.tmpl": &bintree{golangDeleteTmpl, map[string]*bintree{}},
	"golang.footer.tmpl": &bintree{golangFooterTmpl, map[string]*bintree{}},
	"golang.funcs.tmpl": &bintree{golangFuncsTmpl, map[string]*bintree{}},
	"golang.get-last.tmpl": &bintree{golangGetLastTmpl, map[string]*bintree{}},
	"golang.header.tmpl": &bintree{golangHeaderTmpl, map[string]*bintree{}},
	"golang.insert.tmpl": &bintree{golangInsertTmpl, map[string]*bintree{}},
	"golang.select.tmpl": &bintree{golangSelectTmpl, map[string]*bintree{}},
	"golang.update.tmpl": &bintree{golangUpdateTmpl, map[string]*bintree{}},
	"postgres.tmpl": &bintree{postgresTmpl, map[string]*bintree{}},
	"sqlite3.tmpl": &bintree{sqlite3Tmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

