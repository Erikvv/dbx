// Code generated by go-bindata.
// sources:
// golang.funcs.tmpl
// golang.header.tmpl
// postgres.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _golangFuncsTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x59\xdd\x72\x9b\xc8\x12\xbe\x86\xa7\xe8\x43\xa5\x52\xe0\x42\x38\xe7\x5c\xe6\x14\xbb\xa5\xd8\xc4\xeb\x2d\x45\x76\x2c\x79\xf7\xc2\xe5\x5a\x4f\xc4\xe0\x10\xa3\x81\x1d\x86\xd8\x5e\xcc\xbb\x6f\xcd\x0c\x20\x7e\x0c\x02\x49\xc9\x8d\xcb\x30\x5f\xff\x4c\xf7\xd7\x3d\xcd\x28\x4d\x8f\x8f\xe0\xec\x62\x36\x9d\x9f\xc1\xc7\xeb\xf9\xc9\xf2\xfc\x62\x0e\x4b\xe7\xd3\xe5\x6c\xba\x74\x16\x70\x74\x9c\x65\xaa\x9a\xa6\x13\x70\xb1\xe7\x13\x0c\x5a\x84\x28\x5a\xc7\x1a\x4c\xb2\x4c\xbc\xa7\x88\xdc\x63\x78\xe3\x9b\xf0\x06\xd1\x7b\x78\x6f\x83\x25\xd6\x94\x34\x05\xdf\x83\x37\x3e\x64\x99\x09\x69\x8a\x89\x9b\x65\x69\x2a\x50\xd6\x1c\xad\x31\x64\x19\x14\xcf\xcb\xe7\x88\x3f\x0b\x85\x98\xb8\xa5\xf2\xe2\xff\x9a\x07\x88\xde\xef\x60\x5f\xe8\x6a\x79\x30\xcc\x22\xf1\x83\xc9\x5e\x56\x89\x1f\x0c\xb3\xe4\x25\x64\x35\xf9\x8a\x91\x8b\xa9\xc6\xdd\x53\x56\x21\x89\x19\xc4\x6c\xcd\xec\xbb\x34\x05\x6b\xf1\x79\x06\x59\x76\xa7\x2a\x11\xc5\x11\xa2\xd8\x35\x81\xe2\x28\x40\x2b\x6c\x02\xa6\x94\x7b\x12\x7e\xf9\x66\xe5\xab\x3a\x17\x34\x54\xc5\xf7\xc4\xe2\x7f\x6c\x20\x7e\x00\xa9\xaa\x28\xfc\xd1\x86\x3f\x29\x8a\x1c\x4a\x75\x4c\xa9\xa1\x2a\x0a\xc5\x2c\xa1\x44\x55\x32\x55\x71\xb1\x87\x69\xa1\x5a\x37\x54\x85\x6b\x0d\xc2\xfb\x05\x5b\x33\xa1\x55\xec\x8e\xe1\x75\x14\x20\x56\x26\xc5\x9a\xd2\xfb\x18\xb2\xcc\x50\xf3\xad\xe7\x1b\x3c\x3e\x82\x85\x33\x73\x4e\x96\xb0\x58\x4e\x97\xce\x27\x67\xbe\x94\xd4\x4a\xd3\x72\xeb\x31\x0e\xf0\x8a\x89\x5d\xf3\x28\x80\x1e\x7e\xf9\x06\x47\xa7\x1f\x8c\xba\x21\x09\x9b\x70\x88\x06\x16\x47\x57\xe1\xcb\xa7\xad\xf0\x32\x29\xf5\xc8\xd7\x80\xdc\xed\x33\xcc\x44\xc0\x19\x4d\x56\x4c\x32\xc7\xfa\x98\x90\xd5\x22\xf1\x3c\xff\x09\xb2\x4c\x17\xf2\x1b\x53\x45\x65\x94\x41\x00\x9d\xe2\x38\x09\x18\x1c\xd5\x14\xc9\x44\x61\x4a\x43\x6a\x40\xda\x50\x52\x23\x80\xf0\x57\xc9\x95\xd8\xf0\xb6\xee\x4f\xa6\xe6\x59\x2c\xa8\x60\x7d\x4e\x30\x7d\xbe\x0a\x1f\x9f\xf4\x34\xed\x4c\x4d\xae\x61\xb1\x42\x24\xf7\x6f\x43\x10\xdb\x86\xf8\xef\xc0\x72\x28\x9d\x87\x57\xe1\x63\x2c\xa8\x22\x59\xc1\x99\x63\xf2\x3f\x82\x1e\x6d\x42\x55\x51\x75\x5a\x89\x2d\x88\x45\x69\x4e\x6a\x69\x15\xc1\x86\x23\xd3\xd9\xac\xc9\x93\x36\x51\x26\x28\x08\x86\x92\x05\x05\xc1\x58\xc2\x34\x44\xfa\x49\xb3\x01\x6f\x88\x13\x05\x09\x45\x81\xff\x0f\x3e\x0c\x85\x6e\x6e\xf7\x23\x51\x83\x29\x0b\xe1\xb8\xfe\xb6\xc8\x48\x0f\x5f\x7e\x70\xb2\x2f\xa7\x67\xce\xe9\x80\x74\x47\xe8\x1e\xbb\x43\x13\x2e\xc0\x63\x53\xde\x12\xea\x4f\x7a\x15\xce\x77\x75\xc9\x9f\x47\xe7\xde\xf7\xca\x48\xf7\x53\xa1\x3c\x4d\xb8\x2d\x00\x80\x15\x0b\x1f\x30\x81\x98\x51\x9f\xdc\x9b\x10\xf8\x6b\x9f\x81\x4f\x58\x1f\x67\xa4\x4c\x98\xb0\x52\x6c\x14\x8b\x84\x5d\xdf\x2b\x4c\xdb\x36\x68\x1a\xa4\xe2\x6d\xc5\x23\x1b\xb4\x77\x9a\x78\x99\xa9\x03\x88\x57\x0f\x41\xe7\x91\x52\xce\x10\xb9\x99\x7c\xc7\x5b\xe9\xa9\x69\x6d\x8a\x0a\x99\x00\x97\xfd\x8f\xef\x44\xc6\x8f\x4b\x6f\x82\x64\x83\xb7\x66\xd6\x22\xa2\x3e\x61\x39\xf6\x46\xe0\x26\xff\xbd\xb5\x78\x68\x45\xce\x2f\x88\x2c\x13\xae\xb7\xc1\xfd\x52\x55\x77\x19\x9c\x5c\x5c\xcf\x5b\xc7\x62\x95\xff\xab\x30\x21\xdb\x8f\x45\x81\x1a\xcc\xf8\x5e\x74\x4b\xf7\x57\x14\x0f\xd6\xdc\xc0\x76\x94\x50\xd5\x3e\x0f\xc5\x09\x7f\x3e\xd4\x69\xeb\x13\xb6\x67\x77\x1c\x78\x8e\xf2\x13\xf4\x6d\xf3\x08\x6d\xd3\xf0\xdd\x8e\x3d\x72\x13\xae\x4d\x50\xf9\xd2\x6f\x28\x3e\x54\xa8\xbe\x84\x61\xd0\x88\x95\x22\x72\x53\x0e\x93\x62\x9a\x1c\x92\x9e\xdd\x4e\x10\x0f\x05\xb1\x9c\x5c\xab\x61\x11\x2e\xc0\x2f\x3c\x72\x5d\x65\x73\xea\xcc\x9c\xa5\xd3\x33\x4e\xba\x38\xc0\x0c\x6f\xad\x1b\x09\x1b\x4c\xef\x36\xbc\x83\xe1\x35\x20\x77\xfb\x54\xbc\xd8\x3b\x71\x52\xaf\xfb\x5a\xe6\x86\x0c\x92\x65\x5e\x4b\xae\x3b\x4f\x78\xb5\x5f\xf2\x5a\xe4\xae\x33\x88\xe2\xd8\xe2\xb3\xe4\xd4\xf3\xf0\x8a\x61\x57\xdf\x45\xe5\x70\x62\x0c\x9b\x21\xf3\xf4\x0c\x99\x21\x37\xd0\xb1\x2c\x19\x36\x43\xb6\xc0\x35\xb6\x1c\x6a\x8c\x94\x91\xdb\xa1\x35\x1e\x9a\x34\xaf\x75\xc3\x0a\x61\x46\xf2\xa5\xa7\xb7\xe6\x4a\xbb\x78\x72\x3e\x5f\x38\x57\x7d\xdf\xa3\x3e\x89\x31\xdd\x7e\xf0\x4a\xd8\x60\x6a\xb4\xe1\x1d\xb4\xa8\x01\xc5\x19\x49\x31\x6a\x34\x90\x1f\xf2\x05\x9a\x1b\x46\x09\x0b\x27\x3e\xf1\x59\xe9\xe6\x96\xd9\xb0\xe7\x3b\x35\x1f\x74\x49\xc8\xc0\xba\x12\xd9\xf9\xf0\x3c\xfa\xdc\x3d\x17\x7e\xc5\x5b\xbe\x60\xf7\xf8\x48\x11\x1c\x09\x62\x3c\x9e\xf6\x1b\xd7\x46\xfb\x11\x3d\xd4\x1a\xe5\x0c\xc5\x4c\x6a\x3b\xef\x27\x7e\xef\xae\xf8\x99\xdd\xbc\xbe\xf8\xf0\xcc\x1f\x2b\xd1\xd7\xa3\x07\xa3\x56\x17\xad\x2a\x69\x72\x91\x84\x13\x69\x60\x68\x51\x94\x02\x63\xcb\xe3\x55\xc1\xfe\x42\x69\x8a\xec\x5e\x32\x3f\xa2\x36\xfe\x2a\xba\xdb\x28\x2e\xe5\xe9\xac\xa5\xb9\x67\x4c\x6c\x7b\x57\xdc\x35\xf2\x4f\xac\x39\xc6\x6e\x3c\x0f\x1f\x05\xbd\x49\xf8\xc8\x29\x37\x0f\x1f\x75\xa3\x75\x33\x29\x2f\x37\xad\x69\xc2\xc2\x18\xf2\x4b\xcd\xf2\xca\xf6\xbd\xcd\x33\x66\x9d\x13\x9f\x6d\xb9\x3f\x3d\x3e\x82\xeb\xcb\xd3\x69\xef\x94\x96\x44\x2e\x1a\x30\xa5\x49\xd8\x60\x16\xb5\xe1\x1d\xdc\xa9\x01\xb9\xdb\xd7\xe2\xc5\x7e\x53\x9a\x09\x52\x6d\x0c\x96\x65\xd5\x54\x49\xed\x3b\x75\xe5\x8a\xa7\x15\x6e\x4d\x8a\x8f\xf2\xf1\xbd\x97\x4b\x75\xb6\x5f\xce\x45\xcb\xb2\x5e\xed\xb4\xf9\x1d\x40\xad\x2d\x15\x37\x00\x9d\xcd\x49\xde\x06\x54\x20\x5d\x8d\x37\xdf\x4c\x47\xef\x2d\xfc\xda\xd7\x89\xfe\xae\x7b\x98\x1d\x1e\xba\x09\xe7\x0c\x18\xde\x84\x9b\x02\x63\xcb\x67\x4c\x13\xee\x10\xf9\x89\x25\xb5\x53\xed\xf0\x74\x75\xb4\xe6\x1a\xd5\x46\x36\xe2\xd7\x0c\x8a\x5f\x87\xbe\x23\x0a\x04\xad\x71\x0c\x37\xb7\xf2\x06\x4e\xbe\xfb\x8e\x82\x44\xbc\xf4\x09\xc3\xd4\x43\x2b\x9c\x66\xaa\x12\x63\x4c\x38\x45\xd7\x28\xba\x91\x68\xbe\xce\x57\x90\xeb\x0a\x11\xbe\xca\xad\xe8\x5c\x69\x79\xa7\x27\x97\x2a\xaa\xc4\x77\x3d\x9f\x25\x7c\xf7\xc9\x84\xf0\x81\x8b\x71\xe5\x37\x5c\xec\xf6\xff\x10\x3e\xf0\x75\x45\x7a\x71\xe3\xbb\x4f\xb7\x60\x4b\x2d\xaa\xc2\xc7\x0a\x65\x03\x06\x5b\x5c\x9c\x89\x4d\x18\xaa\xa2\xc8\xdd\xd8\x80\xa2\x08\x13\x57\xbe\x37\xc5\x1e\xf9\x6a\xbe\xaf\x72\x59\x3e\xe7\x1e\x8a\x91\xe5\x00\xa7\x53\x11\x0c\x5d\xe3\xcc\x38\x09\x83\x64\x4d\x20\xcb\x34\xb3\x7a\x50\x6d\xf4\x70\x11\x2f\xa4\x3c\xef\x32\x4f\xa2\x0b\x08\xa5\x05\xc9\x78\x34\x4a\xad\xf2\xa5\xb5\x12\x7a\xf9\x29\xa8\x1b\x85\xa4\x25\x11\x46\x7e\xf9\x17\xb3\x35\x13\xa1\x15\x79\x88\xad\x39\x7e\xbc\x92\x3f\xa0\x51\x5d\x55\x14\xed\xe5\xe5\x65\x3e\xfd\xe4\x2c\x5e\x5e\x5e\x34\xb3\x44\xfd\x1e\xfa\xa4\x88\x9b\x66\x82\x66\x98\x39\xf6\x8f\xe9\xec\xba\x09\xbe\xc2\x11\x46\x4c\xd7\x4c\xf8\x55\x33\x45\x26\x64\x48\x0d\xe3\xe6\x7f\xef\x6f\x0d\x2b\xb7\xc7\xcd\xdd\xa5\xa9\xb5\xf8\x3c\xcb\xb2\x3b\xe3\xe7\xff\x5a\xc8\xab\x87\x6b\x6f\xe4\xbd\x5e\x97\xd5\x8f\xc6\x49\x96\x19\xca\x6b\xbf\x32\x96\x75\x58\xb9\xfe\xfe\x37\x00\x00\xff\xff\x30\xbc\x5b\x09\xb5\x1e\x00\x00")

func golangFuncsTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangFuncsTmpl,
		"golang.funcs.tmpl",
	)
}

func golangFuncsTmpl() (*asset, error) {
	bytes, err := golangFuncsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.funcs.tmpl", size: 7861, mode: os.FileMode(420), modTime: time.Unix(1475611702, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x57\x5d\x6f\xe3\xb8\xd5\xbe\x16\x7f\xc5\x59\xe3\x9d\x81\x94\x38\xf4\x5c\x7b\x37\x6f\xb1\x1e\xa7\x8b\x02\xd3\x64\x90\xf5\xa0\x28\x16\x8b\x01\x25\x1d\x3b\xac\x29\xd2\x43\x51\xfe\x58\xd5\xff\xbd\x38\x24\x25\xcb\xb1\x67\x3b\xdd\xd6\x17\x91\x44\x9e\x8f\xe7\x3c\x7c\x78\xc8\x4c\x26\xf0\xe3\xa7\xc5\xd3\x4f\x0f\x8f\x0f\xcf\x3f\x2e\x1e\xe6\x30\xfb\x3b\xac\xa4\x7b\x69\x72\x5e\x98\x6a\x52\x6f\x44\x81\x95\xd1\x6b\x3c\xac\xcc\xa4\xcc\xf7\x6c\x32\x81\xf9\x13\x3c\x3e\x2d\xe0\x61\xfe\x97\x05\x67\x6c\x23\x8a\xb5\x58\x21\xb4\x2d\xf0\x8f\xf1\xfd\x78\x64\x4c\x56\x1b\x63\x1d\xa4\x2c\x19\x95\xc2\x89\x5c\xd4\x38\xa9\xbf\xa8\x11\x4b\x46\xcb\xca\xd1\xa3\x76\x56\xea\x55\xed\x5f\x0f\xba\xa0\xa7\x93\x15\x8e\x18\x4b\x46\x03\x0c\xff\xa8\x8c\xb4\x46\x93\xf3\x7e\xc4\x32\xc6\xb6\xc2\xc2\xdf\xac\xd8\x3c\x58\x0b\xf7\xb0\x6c\x74\x91\xa2\xb5\x80\xd6\x1a\x9b\x85\x07\xb4\x16\x5d\x63\x35\x7d\x1d\xbd\xc3\x07\xb3\x5a\xa1\x0d\xd6\x4b\x63\x2b\xe1\x20\xe4\x1f\x83\xb0\xab\x1a\x38\xe7\x52\x3b\xb4\x4b\x51\x60\x7b\xcc\xbc\xcf\xa3\xd9\xc1\x3d\x10\x26\xfe\x68\x76\x8c\x91\x33\x28\xb3\xc2\x61\xbe\x96\x25\x72\xd9\x85\xff\xee\x1e\xb4\x54\xf0\xf6\x2d\xcd\x76\x5f\x2d\x4b\x92\x30\x9f\x8e\x02\xba\x42\x99\x5a\xea\x15\xd4\x4e\x38\xac\x50\xbb\x29\xbc\xd9\x8e\xc6\xe4\x94\xb1\xe4\xc8\x8e\x8c\xb5\x2d\x58\xa1\x57\x08\xfc\x67\x67\x9b\xc2\xd5\x44\xaa\x3b\x6c\x02\xd1\x8f\xa2\x22\x96\xa9\x84\xa6\x70\xd0\xb2\xb6\xbd\xeb\xec\xff\x2c\x51\x95\xde\x3c\x19\x9a\xd2\xfb\x82\xfc\xbb\x77\xb1\x22\x1b\x72\x44\x5d\xd2\xab\xcf\x7a\x07\x72\x09\xfc\xd3\xc6\xaf\x99\xc2\x53\xb0\xb6\x85\xff\x8b\xe9\xa6\xf7\x7d\xd8\x1e\x52\x37\x77\x3c\x7a\x5f\x84\x9e\x4d\xaa\xbf\x30\xaa\xa9\x34\xf9\xa4\x59\xe4\x9d\x25\x5b\xa1\x1a\xfa\x1e\xf0\xce\x92\x8d\x95\x5b\xe1\xf0\x2c\x62\x9a\xb1\xe3\x80\x90\xaf\x80\x6b\x36\x27\x78\x1b\x2b\xb5\x5b\xc2\xe8\x4d\xfd\xa6\x1e\x41\x5a\x88\x0a\x55\x69\x76\xba\x0b\x9a\x5d\x29\xa0\xf7\x3f\x27\x2b\xac\xfa\x19\x9e\x01\xad\xe9\x76\x68\x9b\x5d\x65\xa2\x85\x28\xc6\x57\x59\xd2\x6d\x06\x31\x7c\xda\xbc\x9e\xcc\xe0\x0a\x67\xa7\x50\x23\xca\xfa\xde\x5b\xc0\xf1\x38\xfa\xbd\x38\x57\x68\x3e\x83\xd4\x81\x4f\x9b\xdf\x85\x73\x7d\x61\xa0\x3d\x49\xe8\xee\x78\xfd\x9d\xba\x81\x67\x79\x3e\x3b\x09\x36\xb9\xa1\xfd\xcc\xe7\x33\xc6\x12\x65\x1b\xb8\x51\xb6\x21\x05\xfa\xfc\x4f\x1b\xd4\x69\x6d\x1a\x5b\x60\xbf\x4b\x95\x6d\x3e\xd7\xf2\x37\x2f\xac\x0c\xd2\x9b\xf9\x6c\x3c\xd8\x82\x65\xee\xbf\x68\xed\x7d\xdc\xf7\x46\x6b\x2c\x5c\x4a\xf5\xcd\xa5\x50\x58\x38\xf8\xe7\x49\x16\x5f\x46\x70\x3c\x8e\x21\xa4\xc8\xfc\x0e\x7e\xb5\x61\x23\x3f\x5a\xaa\x71\xd7\x6c\xd2\x6e\x7b\xb2\x6e\xf6\xed\x7c\x46\xb6\xf3\xd9\x14\xca\x7c\xcc\x12\xaa\x64\x0a\x1a\x77\x1f\x9e\x3f\xa5\x04\xa9\x03\x9d\x8d\x59\x72\x1c\x53\xb4\xbe\xc6\xb4\xcc\xe1\x66\x3e\xcb\xe0\xbd\x32\x35\xad\xcf\xab\xa6\x52\xe6\x5c\xd9\x86\x7f\x6c\xec\x0a\xd3\xac\x4f\xd9\x61\x29\x73\x3e\x9f\xf1\xe8\x9b\x5d\x46\xdd\x58\xdc\x08\x8b\x69\xed\xaa\xae\xd3\x65\x90\xc6\xd1\x12\x02\xfb\x3f\xbb\xca\x8d\xc1\xe2\x46\xd1\x3e\xf5\xbd\x31\x0b\x3c\x9e\x70\xa0\x76\xf6\xd0\x93\x1b\x51\xfd\x84\xce\x47\xfe\xb7\xd4\xf9\x3f\x68\x2d\xd1\xd6\x4d\xf8\x88\x31\x77\xc8\x09\x6d\x17\xf8\x39\x60\x49\xbd\x4d\x06\x5f\xe3\x4c\x99\x15\xf9\x0f\xab\x0b\x7d\x9c\x73\x3e\x14\xba\xaf\x60\x32\x81\xc5\xd3\xfc\x69\x0a\x16\x75\x89\x16\x7c\x86\x17\xa3\x4a\xb4\xf5\x95\xe6\x3d\x6c\xd7\xf5\x17\x35\x85\x11\xdc\x82\x4f\x74\x0b\x23\x9f\xe4\xde\x37\x6b\x7a\xeb\xba\xb5\x97\xf7\x62\x7f\x21\xef\xc5\x9e\x16\x92\x30\x5f\xd6\xe0\x45\x4e\x4a\x5e\xec\x87\x4a\x76\xfb\x21\xd9\xf3\x19\x9f\xe1\x4a\xea\x7d\xfa\x5f\xa8\x74\xb1\x27\xdb\xc5\x7e\x0a\x6e\x4f\x2a\x2d\xf3\xa8\xd7\xd7\xf4\xba\x3d\xdc\x2c\xf6\x19\xbc\x37\x55\x25\xdd\xa5\x26\x5f\x69\xd0\x51\x81\xbc\x33\xce\x2e\xe3\x3c\x1b\xa5\x72\x51\xac\xbf\x31\xd2\xc9\xfc\x4a\xac\xff\x99\xa0\x3b\x97\xde\x2e\x18\xdc\x83\xdb\xf3\x32\xe7\xc3\x3c\x7f\x48\xde\x2e\xc0\xd8\xf7\xd8\xb2\x41\xa6\xab\x74\xff\x47\x6a\x0e\x28\x87\x2e\xbd\x6d\xd6\x4b\xd1\x6f\x9f\x81\x1a\xc9\x76\x40\x11\x63\x89\xc6\xbd\x1b\x13\xa9\x5b\xb8\xf1\xd6\x2c\x59\xe3\x01\xe2\xaf\x3b\xa2\x2d\x2e\xeb\x38\x24\xb5\xeb\xc3\x53\xc3\x3e\x05\xaf\x9a\xce\xeb\xa0\x0b\xfe\xd7\xc6\x61\x50\x7d\xf8\xf5\x7d\x3e\x29\xc4\x46\x14\xd2\x1d\x7c\xa8\xc4\x1a\xe3\xbc\x41\xcc\x2e\x75\x89\x7b\xfa\xae\xc4\xe6\x97\x90\xff\xd7\x88\xec\xc8\xe8\xda\x19\xda\x6a\x3c\xb8\x6a\x10\x1a\xa4\x96\x4e\x0a\x25\x7f\xc3\x92\x20\xf1\x40\x6b\xdf\x7e\xfb\xd4\x63\x18\xa6\xce\xfc\x59\x43\xc0\x15\x6d\xb2\xb7\xca\x36\x6d\xdc\x14\xe1\x17\x5a\x79\xe7\x32\xed\x9d\x69\xd4\xa3\x9c\x06\x98\x6b\x4c\x2f\xb0\xfa\x46\xcf\x12\xc5\xa9\x3c\x4e\x24\x03\xa5\xf0\x9f\xfd\xb0\x67\x7d\x30\x1c\x85\xa3\x62\xa1\x52\xd7\x68\x5d\x7c\xd4\x80\x20\x96\x0e\x2d\x08\x37\x06\xa9\x0b\xeb\x2f\x8c\x35\x28\xae\x50\xc7\x92\x53\xe5\x6b\xca\xa2\x4f\x8a\x63\x10\x2e\xae\xab\x17\x8d\xa6\x4a\x45\x00\xc4\x12\xd1\x23\x43\x96\x60\x07\x47\x38\xfa\x88\x13\x9a\x25\xba\x9b\xc0\x88\xcb\x62\x65\xb6\x18\x1f\x84\x6b\x69\x4d\x05\x92\xb0\xc8\xda\x8d\xa1\xc4\x73\x70\xaf\xb0\x05\xbf\x14\x87\xb8\x42\xf2\x1e\x4d\xc4\x17\x9e\x7d\x7a\xff\x32\xc4\x26\x15\x4c\x26\x20\xb6\x46\x96\x50\x61\x65\xec\x01\x14\x8a\x75\x3d\x28\xe6\xeb\x36\xfd\xee\xeb\x70\xe1\x56\x16\x2e\x3d\x57\x48\xb8\xd4\xf7\x63\x3f\xc0\xbb\xc1\xd6\x0f\xcd\xd5\x99\xcf\xde\x93\x98\x55\xa8\x53\xc5\xbd\x36\x32\xb8\xeb\xfd\x58\x52\x34\xd6\xa2\x76\x41\x67\x71\xb5\x97\xc6\x82\xa4\x91\x77\xdf\x83\x84\x1f\xa0\x0b\xf4\x3d\xc8\xdb\x5b\x9f\xa6\xf3\xba\x87\xf8\x16\x19\xf0\x98\xba\xb9\x3e\xa2\x77\x49\x36\x42\xcb\x22\x1d\x85\x5d\x64\x1a\x07\x66\x09\xbb\x17\x51\xac\x39\x58\xea\x85\x85\xd1\xa5\x74\xd2\xe8\xfa\x4f\xa3\x8c\x25\x24\xd2\x41\x38\xee\x37\xfa\xff\xc7\x32\x93\xc2\x68\x27\x75\x83\xd1\x6e\x32\x81\xdd\x8b\x11\x90\x9b\x03\xc8\x1a\xdc\x8b\xac\xa1\x6e\x72\xa7\x90\x83\xe2\x51\x16\xb9\x32\xbb\x1a\xc4\x4e\x1c\xfa\xa0\x7e\xbd\x84\x2e\x43\x88\x61\x2d\x1c\xf2\xc6\x9d\xd9\x85\x85\xdb\x49\xa5\x20\x47\xa8\x1a\xfa\xcf\xa8\x04\x67\x20\xc7\x4b\x77\x20\x0e\xdd\x0b\x82\xcf\x20\x1d\x5a\x41\xa5\x7d\xc7\x12\xdf\xd7\x3e\x0f\x68\x1f\xe6\x60\x74\x43\x8b\x78\xd3\x38\x41\x5c\x94\xa8\xd0\x61\xb7\x82\xe3\xde\x67\x8d\x07\x9a\xf6\xff\xf1\x75\x63\xd4\x3e\x4f\xd7\xae\xb3\xc5\x1a\xa6\x8e\xf7\x82\x73\xa5\xd1\xad\x89\x9a\x6c\x7f\x7a\xdd\x9c\x2e\x57\xf1\x70\x52\xbc\x6a\xf8\x07\x43\x67\x20\x4b\x4a\x5c\xa2\x05\x3f\xf4\x49\xab\x30\xc8\x12\x1c\x83\x59\x7b\xd5\x05\xbc\xbf\xac\xf1\xf0\xab\xd7\xab\x59\xfb\xe5\xeb\x4b\x44\x8f\x9e\x9f\x9a\x42\x54\x0c\x0d\xa3\x5f\xf2\xdb\x5b\x76\x3a\xd1\xe2\xf1\xe4\xd5\x1d\xce\x95\x78\x0f\x51\x74\xe2\x7c\x0c\xa7\xd9\x3e\xf5\x5f\xcf\x98\x4b\x5d\x52\x35\xd9\x1f\xb8\x98\x20\x75\x3f\x5f\x3b\xd9\x12\xa5\x53\x7f\xc3\xa2\x0e\xbb\xc6\x03\xf5\xd7\x35\x1e\xba\x56\x7a\x0d\xff\xb0\xf6\xae\x8f\xf5\x05\x9d\xd7\x73\xb1\x0c\xfd\x1d\x73\xd8\x89\xbe\x85\x78\x9f\xe1\xee\x8e\x8c\x43\xd3\x50\xbc\xdb\xea\xd9\x65\x9a\x78\x73\xff\xc6\xe0\x5d\xc8\x77\x3e\x12\xfb\x57\x00\x00\x00\xff\xff\x48\x90\xbf\xf6\x98\x11\x00\x00")

func golangHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangHeaderTmpl,
		"golang.header.tmpl",
	)
}

func golangHeaderTmpl() (*asset, error) {
	bytes, err := golangHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.header.tmpl", size: 4504, mode: os.FileMode(420), modTime: time.Unix(1475366203, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x4d\x8f\xda\x38\x18\x3e\xc3\xaf\x78\x55\x71\x00\x34\xa4\xf7\x5d\x55\xa3\x0c\x78\xba\x69\x83\x43\x13\xb3\xd5\x1c\x53\x62\x8a\x57\x89\xc3\x06\xa3\x11\x32\xfe\xef\x2b\xdb\xf9\xa4\x09\x3b\x5d\xf5\xb0\x37\xc7\x79\xfc\xbc\xcf\xfb\x69\x4b\xf9\x7e\x0e\x9b\x20\x22\x1f\x43\x14\x7d\xf1\x21\x22\x2e\x41\x6b\x84\x09\x10\xb4\xde\xf8\x2e\x41\x11\xc0\xfc\xbd\x52\xe3\xb1\x94\x0b\x48\xe8\x9e\x71\x0a\xef\x4e\xbb\x03\xcd\xe2\x77\xb0\x50\xca\xec\x17\x31\xff\x4e\xc1\x21\xf1\xb7\x94\x9e\x40\xa9\xf1\x32\x44\x2e\x41\x40\xdc\x27\x1f\x81\x94\xe0\xe0\x38\xa3\xa0\x14\x4c\x5b\xf8\x09\x7b\x80\xc9\x2e\x4f\xe1\xb7\x0f\xe0\x2c\xf3\xf4\x9c\x71\x73\x58\x4a\xb6\x87\x09\x53\xea\x41\x4a\xca\x13\xa5\x46\x52\xc2\x2b\x13\x07\x8b\xd6\x46\x47\x6d\x4e\xbd\x26\x97\x23\xad\xfe\x2c\x80\xed\xc1\xc1\xb9\xc0\xe7\x34\xd5\x00\x1c\x10\xc0\x5b\xdf\x07\xfd\x8f\xf2\xa4\x0b\x0c\xe9\x9e\x16\x94\xef\x0c\x57\x88\x9e\x51\x88\xf0\x12\x45\x86\xb6\xfe\x67\x7d\x03\xa5\xa6\xdd\x6d\x2b\x1b\x94\x9a\x41\x80\x61\x85\x7c\x44\xd0\xcd\xc9\x80\xaf\x68\x4a\x85\x3e\xdc\xb6\x3f\xbc\x36\xaa\x36\x05\xcb\xe2\xe2\xf2\x99\x5e\x74\x48\x1e\x46\x9b\xd0\x5b\xbb\xe1\x0b\x7c\x46\x2f\x30\x1d\x88\x61\xe7\x4c\x13\x45\x28\xc3\x28\xa5\x85\x9a\x95\x36\xa7\xd4\xec\xd6\x74\x99\xc9\x2d\x67\x7f\x9f\xa9\xb5\xbc\xc5\xde\x97\x2d\x1a\x34\xfa\xd3\xa6\x94\x1a\xcf\x7e\x1f\xd7\xfb\xad\x55\xa7\xc6\x92\x5c\xf0\x38\xa3\x55\x91\x41\x9d\x01\x47\x7f\xd4\x71\xef\x38\xd0\x21\x48\xe9\x5e\xfc\x95\x33\x6e\x19\x7c\xf4\x4c\xe0\x53\xe0\x61\x9b\x1d\xf6\xfd\x20\x6a\x46\x9d\x3a\x29\x41\xd0\xec\x98\xc6\xa2\x6d\xdb\xf1\xe9\x5e\x68\xc4\x87\x21\x80\x61\xba\xab\x63\x97\xf3\x84\x09\x96\xf3\xa6\x5f\x74\x82\xad\x07\xcb\xec\x58\x17\x74\x1f\x7d\x8d\xaa\x95\x34\xde\xeb\xdd\xe0\x48\x8b\x58\xe4\x85\xfe\xf3\xf8\x43\x4d\x75\xec\x94\x21\x7b\x93\x35\xbb\xe8\xb7\x59\xfe\x6b\x5b\x7e\x23\x5d\x6f\xac\xba\x3a\xbd\xb7\x08\xf4\x1a\x65\x1e\xd6\x85\xd9\xc2\x9e\x68\x4a\x77\xa2\x0d\xf5\x78\x4f\xa1\x0f\xe4\xea\xf5\x40\x0b\x7a\x3b\xd7\xca\x72\xe7\x89\xad\xf7\x4a\x1f\xdb\x03\xcf\x05\x4c\x18\x28\xf5\xf5\x0f\x14\x9a\xbe\xa7\xe9\xc9\x54\x94\x8b\x57\x50\x17\x76\x47\x60\xab\x1c\x2c\xe9\xbd\x61\xd0\x9d\xba\xc6\xb5\xc5\xeb\x21\x16\x75\x57\x4c\x84\xa9\x61\x2d\xac\xaa\xe6\x2a\xa2\x29\xe5\xe0\x7c\x3d\xc4\xa2\x56\xdc\x72\x47\x93\x98\x53\x06\x60\x24\x9a\x1e\x06\xdb\xc4\x8d\xf0\xd2\x80\x6d\x3b\x7b\xac\xd5\xd4\x56\xac\xf6\xb9\xb2\xd1\xe0\xe7\x3f\xe3\x95\x75\x28\x42\x3e\x5a\x12\xe8\x49\x68\xe9\xb5\xa3\x14\x3c\x87\xc1\x1a\xda\x03\xc1\x8e\xf2\x72\x72\xe9\xc2\xf8\x94\x33\x7b\x93\x8c\xba\x75\xd4\x4c\x04\xa7\x3e\xf6\xc3\x75\xb0\xac\xf2\xd3\xc7\x50\xd6\xc7\x2d\xa8\x97\x28\x28\x12\x5a\x3c\x5d\x2c\x4b\x10\xae\x50\x08\x4f\x2f\x43\xad\x52\x82\x9b\xb9\x06\x6e\xb4\x1c\x20\xf6\x59\xc6\x84\xa5\xf5\xbd\xb5\x47\xe0\xb1\x0b\xbc\x33\x89\xce\xbc\x1b\x69\xb3\x33\x9d\xcf\xfe\xef\x41\xfd\xb7\x9e\xf8\x16\x9f\x5a\x6d\xdb\x8b\x4c\xcc\x25\x6c\x41\xe5\x3d\x3d\xe0\x74\xbf\xe0\x5f\xa3\x97\xf1\x13\x2d\xca\x1c\x78\x38\x42\x21\x01\x0f\x93\x60\x50\x85\x7d\x14\x99\x58\x8e\x86\x6e\xe0\xe6\xe9\x34\xdc\xc5\xb7\x97\x31\xfc\xe9\xfa\x5b\x14\x4d\x8d\x6b\xff\x89\xf5\xb1\x75\xb3\xd7\xbe\x9b\x17\x14\xd9\x86\xd8\xc3\x1f\x61\x3e\x1c\x86\xf3\x31\x89\xab\x64\x6c\x37\x2b\xb7\x7c\x34\xd5\x8f\xac\xeb\xf5\x8a\xdd\x35\x8a\xae\xd7\x6b\x25\x15\xf4\xa6\x5d\xea\xdd\x5f\x92\xaa\x3b\x72\xff\x09\x00\x00\xff\xff\xf1\xeb\xc6\x3a\x1a\x0b\x00\x00")

func postgresTmplBytes() ([]byte, error) {
	return bindataRead(
		_postgresTmpl,
		"postgres.tmpl",
	)
}

func postgresTmpl() (*asset, error) {
	bytes, err := postgresTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres.tmpl", size: 2842, mode: os.FileMode(420), modTime: time.Unix(1475605668, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"golang.funcs.tmpl": golangFuncsTmpl,
	"golang.header.tmpl": golangHeaderTmpl,
	"postgres.tmpl": postgresTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"golang.funcs.tmpl": &bintree{golangFuncsTmpl, map[string]*bintree{}},
	"golang.header.tmpl": &bintree{golangHeaderTmpl, map[string]*bintree{}},
	"postgres.tmpl": &bintree{postgresTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

