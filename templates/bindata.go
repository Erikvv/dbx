// Code generated by go-bindata.
// sources:
// golang.create.tmpl
// golang.delete-all.tmpl
// golang.delete-world.tmpl
// golang.delete.tmpl
// golang.footer.tmpl
// golang.get-all.tmpl
// golang.get-count.tmpl
// golang.get-first.tmpl
// golang.get-has.tmpl
// golang.get-last.tmpl
// golang.get-limitoffset.tmpl
// golang.get-one.tmpl
// golang.get-paged.tmpl
// golang.get-scalar.tmpl
// golang.header.tmpl
// golang.misc.tmpl
// golang.update.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _golangCreateTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\x4f\x8b\xdb\x30\x10\xc5\xcf\xd6\xa7\x98\x06\x0a\x36\x24\xfa\x00\x0b\x39\x94\x65\x0b\x0b\x4b\x60\x93\x2d\x3d\x1a\x6d\x34\x32\x6a\x1d\xc9\x1d\x4d\xea\x04\xa1\xef\x5e\xc6\x6e\x8a\xf7\xd0\x3d\xec\xc1\xe0\x3f\xf2\x7b\xbf\xf7\x66\x72\xde\x80\x45\xe7\x03\xc2\x2a\xf9\x2e\x18\x3e\x13\xae\x60\x53\x8a\xba\x27\x34\x8c\x39\x83\x77\xa0\xf7\x66\x84\x52\xf6\x66\x94\x1f\x30\x58\x39\x91\x33\xe8\xc3\xd9\x39\x7f\x81\x52\xea\x9c\xe1\xc8\x97\xc1\x90\x39\x81\xfe\x42\x5d\x82\x52\x1a\xa8\x55\x95\x33\xfc\x7d\xbb\x47\x3e\x53\x80\x52\xd6\x80\x44\x72\x45\x6a\xd4\x42\x51\xa9\x25\xcf\x6b\xb4\xd7\x09\x25\x8b\xc8\x66\xe2\xd8\x21\xda\xb4\x8b\x02\xa3\xaa\xb6\x0d\x71\x84\xbb\x2d\xec\xe2\x58\x37\xfa\xdb\xcb\x7d\xdd\x4c\x7e\x37\x39\xb9\xf7\xc1\x73\xc0\x11\xf4\x57\x8f\xbd\x15\x2a\xa5\xaa\x63\x0c\x89\xa1\x6d\x13\x9f\x78\x2b\x80\xe4\x03\x3b\x58\x7d\xfe\xb5\x02\x7d\x78\x7e\x9a\xe4\xe3\xeb\x0f\xdd\xc7\xee\xc0\x27\xae\xe7\xa3\x6b\xc8\x19\x0c\x75\x0b\xb1\x46\xcd\x2e\x4e\xba\x18\x86\x48\x9c\xe6\x98\x3e\x74\xb0\x40\x58\xa4\x57\x95\xa4\xdf\x82\xe8\x5b\xf2\xbf\x91\xf4\xf3\x19\xe9\xba\x8f\xe3\x3b\x3e\xfa\x70\x34\x41\x5a\x36\xd6\x52\x74\x50\xbb\xde\x30\x63\xb8\x09\x37\x13\x4c\xe5\xdd\xd4\xed\xa7\x2d\x04\xdf\x43\x56\x55\x45\xb3\x6f\xf0\xfd\x1a\xbe\x93\x19\x1e\x88\x6a\x24\x6a\x54\x55\xd4\xed\xe3\xcd\x6e\x31\xa1\xe0\xfb\xb9\xcb\x3e\xe1\x5c\x66\xdb\x12\xa6\x79\x74\x77\x6f\xe8\x1f\x2e\x78\xfc\x0f\xf9\x47\x98\xda\x76\xf8\xf9\xcf\x66\x32\xd5\x4f\x26\xf1\x63\x48\x48\xfc\x68\xeb\x0f\xa7\x14\xe4\x0e\x59\xc4\x64\x77\xe7\xb0\xfa\xe5\x3a\xa0\x2c\xf0\x91\x2f\x6b\x10\xef\xb7\x3b\x54\xd4\xe2\xe1\x4f\x00\x00\x00\xff\xff\xc5\xd0\xf6\xb4\x2f\x03\x00\x00")

func golangCreateTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangCreateTmpl,
		"golang.create.tmpl",
	)
}

func golangCreateTmpl() (*asset, error) {
	bytes, err := golangCreateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.create.tmpl", size: 815, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeleteAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x90\x31\x6b\xfb\x30\x10\x47\x67\xdd\xa7\xf8\xfd\x0d\x7f\x70\x20\x31\x1d\x4a\x87\x82\x87\x40\xb3\x75\x69\x33\x74\x34\x8e\x7d\x0a\x2a\x8e\x9c\x9e\xcf\x69\xca\xa1\xef\x5e\xec\x84\xb6\x5b\xe9\xa0\x49\x7a\xef\x9d\xce\x6c\x85\x96\x7d\x88\x8c\x6c\x08\xfb\x58\xeb\x28\x9c\x61\x95\x12\x3d\x70\xc7\xca\x66\x28\xb6\xa3\xf7\xe1\x8c\x94\x72\x33\x34\x7a\x3e\xd6\x52\x1f\x50\xac\x65\x3f\x20\xa5\x05\x72\x72\x4d\x3f\x46\x45\x88\x7a\x77\xbb\x04\x8b\x4c\xa7\x97\x05\x4d\x7e\x8e\xed\x2c\xa4\x9f\xb1\x5d\xdf\x7e\xcc\x1d\x9b\xe0\x38\x28\xaa\x6a\xd0\x83\x96\x66\x38\x4a\x88\xea\x91\xfd\x7f\xcb\x50\x6c\x9f\x1e\x91\x12\xb9\x7e\xf7\x5a\x74\xfd\x7e\xab\x07\xcd\x2f\x4f\x97\x30\x83\x0f\xdc\xb5\xa7\xba\x1b\xf9\x7b\x20\x22\x57\x55\xc2\xc3\x65\x92\xfb\x12\x13\xdb\x4a\x38\xb1\x14\x9b\x33\x37\xbf\xf2\x2e\xf8\x19\xfd\x57\x22\x86\x0e\x46\xce\x09\xeb\x28\x11\x37\x4b\xbc\x48\x7d\xdc\x88\xe4\x2c\xb2\x20\x97\xe8\xfa\xf9\x4b\xac\xc4\x5c\x2e\x9e\xfb\xf7\x61\xed\x3d\x37\xca\x6d\xfe\x67\xe1\xf5\xee\xea\x8d\xa1\xa3\x44\x66\x5f\x8b\xfc\x0c\x00\x00\xff\xff\xdd\x30\x4b\x51\xb5\x01\x00\x00")

func golangDeleteAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteAllTmpl,
		"golang.delete-all.tmpl",
	)
}

func golangDeleteAllTmpl() (*asset, error) {
	bytes, err := golangDeleteAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete-all.tmpl", size: 437, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeleteWorldTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x90\x31\x6b\xf3\x30\x10\x86\x67\xe9\x57\xdc\x67\xf8\xc0\xa6\x89\xe8\x50\xba\x65\x08\x25\x5b\x97\xa6\x43\xc7\xe0\x58\xe7\xa0\x22\x4e\xc9\xe9\x9c\xba\x08\xfd\xf7\x62\xb9\x0e\x59\x3b\x08\x81\xd0\x3d\xcf\xbd\x6f\x4a\x6b\xb0\xd8\x3b\x42\xa8\xa2\x3b\x51\x2b\x03\x63\x05\xeb\x9c\xb5\x45\x8f\x82\x5b\xef\xeb\x4e\x46\xe8\x02\x09\x8e\x62\x5e\xe6\xbb\x81\xba\x0b\x03\x09\x38\x92\xe7\xa7\x15\x20\xf3\x74\x02\x37\x7a\x42\x22\xd9\xc2\xd0\xf7\xfc\x63\xb0\xdf\x05\x9d\xb4\xba\xb6\x0c\x87\x03\x63\x84\x78\xf1\x66\x8f\x71\xf0\xb2\xbc\xde\x81\x67\x00\xb7\x74\x42\x30\xef\x6f\xaf\x11\x72\xd6\xaa\x0c\xce\xce\x0d\x84\xe3\xa7\xb1\xec\xae\xc8\x66\x37\x62\x57\xa7\x04\x67\x76\x24\x3d\x54\xff\x2f\x15\x18\xc8\xb9\xd1\xca\xf5\xe5\xfb\xbf\x0d\x90\xf3\x90\xb4\x52\x8c\x32\x30\xc1\xe3\x0a\x3e\xb8\x3d\xef\x98\x6b\x64\x6e\xb4\xca\x7a\x12\x94\x1d\x16\x45\xf1\x99\x7d\xf8\x8a\xdb\xbe\xc7\x4e\xd0\xd6\x7f\x44\xaa\x39\xd3\xc3\x66\x89\x77\x6b\x69\x2a\x69\x19\xfc\x95\x92\xf3\x3a\xeb\x94\x6e\x2d\xfe\x04\x00\x00\xff\xff\x02\xc8\x61\x23\xa5\x01\x00\x00")

func golangDeleteWorldTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteWorldTmpl,
		"golang.delete-world.tmpl",
	)
}

func golangDeleteWorldTmpl() (*asset, error) {
	bytes, err := golangDeleteWorldTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete-world.tmpl", size: 421, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDeleteTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x90\xb1\x6a\xf3\x30\x14\x85\x67\xe9\x29\xce\x6f\xf8\xc1\x01\xc7\x74\x2e\xa4\x10\x68\xb6\x2e\x6d\x86\x8e\xc6\xb1\xae\x82\x8a\x22\xa5\x57\x72\x9a\x72\xd1\xbb\x17\x3b\x21\xed\x56\xe8\xa0\x49\xe7\x3b\xdf\xe1\x8a\x2c\x61\xc8\xba\x40\xa8\x92\xdb\x87\x3e\x8f\x4c\x15\x96\xa5\xe8\x47\xf2\x94\x49\x04\xed\x76\xb4\xd6\x9d\x51\x4a\x2d\x82\x21\x9f\x8f\x3d\xf7\x07\xb4\x6b\xde\x27\x94\xb2\x40\xad\x95\x99\xc3\x06\xbb\x18\x7d\x03\x62\x9e\x5e\xe4\x85\x9e\x04\x14\xcc\xdc\xa8\x7f\xda\x76\xd1\x7c\xce\x22\xd1\x6a\x88\x21\x65\x74\x5d\xca\x87\xbc\x12\xc1\x91\x5d\xc8\x16\xd5\xff\xf7\x0a\xed\xf6\xf9\x09\xa5\x68\x15\x77\x6f\xad\x8f\xfb\x6d\x3e\xe4\xfa\x12\x6d\x20\x02\xeb\xc8\x9b\x53\xef\x47\xfa\x5e\xa4\xb5\xea\x3a\xa6\x74\x59\x72\xbf\xc2\xc4\x1a\x76\x27\xe2\x76\x73\xa6\xe1\x57\x5e\x39\x3b\xa3\xff\x56\x08\xce\x43\xb4\x52\x4c\x79\xe4\x00\xdb\xfb\x44\x0d\x5e\xb9\x3f\x6e\x98\x6b\x62\x5e\x68\x55\x66\xe1\x10\xc7\x90\x6f\xca\x79\x40\xfb\x12\x3f\xd2\xda\x5a\x1a\x32\x99\xfa\x4f\xbd\xd7\xff\x6b\x3d\x1e\x70\xd7\x4c\xac\x2e\x5a\xe4\x76\xd9\xaf\x00\x00\x00\xff\xff\xec\x7c\x37\xba\xc7\x01\x00\x00")

func golangDeleteTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangDeleteTmpl,
		"golang.delete.tmpl",
	)
}

func golangDeleteTmpl() (*asset, error) {
	bytes, err := golangDeleteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.delete.tmpl", size: 455, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xcf\xb1\x4e\x83\x21\x14\x05\xe0\x99\xfb\x14\x77\x04\xa3\x4c\xc6\x5d\x6b\xdc\x5c\xf4\x7f\x01\x0a\xd7\x96\xc8\x0f\x15\xae\x11\x43\x78\x77\x53\xdb\xd2\x85\x89\x93\x93\x9c\x0f\xe0\xdf\x03\xe1\x2b\xf1\x3e\xb9\x82\x3e\x32\xe5\x0f\x63\x09\x1b\xb4\x76\x87\xd9\xc4\x1d\xa1\x7e\xf9\x8e\xb6\x60\xef\x20\x5a\x43\x7d\x0c\xad\x21\x45\x77\x4c\x1d\xe0\x9f\x58\xea\x0c\x11\xe7\x12\x40\x6c\xd2\xba\x7a\x96\x0a\x29\xe7\x94\x41\xbc\xa5\x10\xb6\xc6\x7e\x8e\xe6\x22\xf1\x5c\x1a\x17\x00\x08\x47\x81\x98\x1e\x43\x90\x96\x2b\xda\x14\x99\x2a\xeb\xcd\xe9\x54\x28\x7d\xe4\x87\xfb\xdb\x93\xab\x06\xfc\xfc\x34\x85\xdf\xed\x9e\x56\x23\x15\x16\xce\x3e\xee\xae\x6f\xbe\xec\xdc\x76\xba\x1b\x1c\x80\xf8\xc9\xe6\xb0\x54\xc9\x15\x6f\xca\x57\xd0\x4b\x55\xd7\x6f\x40\x87\xbf\x00\x00\x00\xff\xff\x77\x97\x8c\x41\x65\x01\x00\x00")

func golangFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangFooterTmpl,
		"golang.footer.tmpl",
	)
}

func golangFooterTmpl() (*asset, error) {
	bytes, err := golangFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.footer.tmpl", size: 357, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetAllTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\xcd\xaa\xdb\x30\x10\x85\xd7\xd2\x53\x4c\x0d\x05\x19\x72\xfd\x00\xb7\x78\x11\x4a\x77\xa5\x90\x7a\xd1\xa5\x51\xac\x91\x51\x51\x24\x77\x2c\xe7\x87\x41\xef\x5e\x64\x27\x69\x17\x25\xd0\x85\x16\x92\x66\xce\xf9\xe6\x48\xcc\x6f\x60\xd0\xba\x80\x50\xcd\x6e\x0c\x3a\x2d\x84\x15\xbc\xe5\x2c\xf7\xde\x33\x43\xd3\x2d\xd6\xba\x2b\xe4\xac\x98\x61\x48\xd7\x49\x93\x3e\x41\xb3\xa7\x71\x86\x9c\x6b\x50\x52\x50\xbc\xcc\xc0\x0c\xb3\x77\x03\x46\x0b\xcd\xf7\x78\x81\x9c\x77\x80\x44\x65\x45\xaa\x65\x31\xc2\x60\x56\x65\xf9\xb7\xeb\x31\x9a\x5b\x05\x39\xb3\x14\x43\x0c\x73\x82\xbe\x9f\xd3\x29\xb5\xcc\x30\x91\x0b\xc9\x42\xf5\xf1\x57\x05\x4d\x77\xf8\x0a\x39\x4b\x11\x8f\x3f\x1b\x1f\xc7\x2e\x9d\x92\xda\x4a\x77\xc5\xdb\x3a\xf4\xe6\xac\xfd\x82\x7f\xd8\xa4\x14\x7d\x5f\xe0\x36\x92\xf7\x16\x4a\xb3\x21\x77\x46\x6a\x0e\x0b\xd2\xed\x95\x42\x11\x10\xce\xae\xad\x1f\x5a\x08\xce\x03\x4b\x21\x08\xd3\x42\xa1\x6c\x77\xf0\x83\xf4\xf4\x85\x48\x21\x51\x2d\x45\x96\xc2\xa0\x45\x82\xcd\xb4\xf9\xec\xe3\x8c\xaa\x50\xd8\xf8\x3c\xfc\x86\xd7\xa4\xea\x55\x89\x19\x5c\x70\x29\xe0\xe5\x91\x98\x14\xa2\xb8\xb5\x8f\xe2\x6e\xd0\xa1\xc4\xae\x8d\xa1\x68\x41\x59\xaf\x53\xc2\xb0\x96\xd7\xeb\x84\xe2\x1f\x84\x2f\x10\x0b\xe3\xf6\x5c\x2d\xe8\x69\xc2\x60\xd4\x96\x4f\x31\xa1\xf1\xc1\xb1\x0d\x73\x57\x7e\x7f\xe2\x14\x9d\xfa\xd3\x7f\x05\x72\xbf\xdc\x4c\x82\xf3\x32\x4b\xe6\xe7\x47\xf8\x1d\x00\x00\xff\xff\x74\xd0\x3d\xed\x7e\x02\x00\x00")

func golangGetAllTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetAllTmpl,
		"golang.get-all.tmpl",
	)
}

func golangGetAllTmpl() (*asset, error) {
	bytes, err := golangGetAllTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-all.tmpl", size: 638, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetCountTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x8f\x3f\x4f\xc3\x30\x10\xc5\x67\xdf\xa7\x78\x44\x02\x25\x52\x1a\x31\x20\xb6\x0e\x08\xb1\xb1\x94\x0c\x8c\x55\xda\x38\x95\x51\x6a\x87\x8b\x5d\x5a\x9d\xee\xbb\x23\x07\xf1\x67\x63\xf0\xe4\xf7\x7b\xf7\x7e\x22\x2b\xf4\x76\x70\xde\xa2\x98\xdd\xc1\x77\x31\xb1\x2d\xb0\x52\xa5\xc7\x90\x7c\x14\x41\xd3\xa6\x61\x70\x67\xa8\x96\x22\xd8\xc7\xf3\xd4\x71\x77\x44\xf3\xc0\x87\x19\xaa\x15\x4a\x32\xfb\x9c\x85\xf3\xf1\xfe\xae\x86\x65\xce\x2f\x70\x45\xb9\xde\xfa\x7e\xe9\xa3\xbf\xb7\x76\xa1\xbf\x14\x50\x95\xcc\xfa\x39\x62\xbb\x9d\xe3\x31\xae\x45\x30\xb1\xf3\x71\x40\x71\xfd\x5e\xa0\x69\x37\xcf\x50\x25\x13\x76\x6f\xcd\x18\x0e\x6d\x3c\xc6\xf2\x2b\x5a\x43\x04\x83\xb3\x63\x7f\xea\xc6\x64\x7f\xf7\x10\x99\xbc\x60\x8d\xcc\xf4\xec\x4e\x96\x9b\x4d\xb2\x7c\x79\x09\x1f\xff\xb1\x4d\xbb\xef\x7c\x79\xb3\xe8\x54\x64\xdc\xb0\xc8\x5c\xad\xe1\xdd\x08\x21\x63\xd8\xc6\xc4\x1e\xb7\x35\x5e\xb9\x9b\x9e\x98\x4b\xcb\x5c\x91\x51\xa2\xef\xbf\x05\xae\x33\x41\x4a\x22\x3f\xfe\x9f\x01\x00\x00\xff\xff\x73\xce\xbf\x3a\x6b\x01\x00\x00")

func golangGetCountTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetCountTmpl,
		"golang.get-count.tmpl",
	)
}

func golangGetCountTmpl() (*asset, error) {
	bytes, err := golangGetCountTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-count.tmpl", size: 363, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetFirstTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\xcb\x6a\xe3\x30\x14\x86\xd7\xd2\x53\x9c\x18\x06\x6c\x48\xfc\x00\x19\xbc\x18\x86\x99\x55\x29\xa4\x5e\x74\x69\x94\xe8\xc8\xa8\x38\x52\x7a\x24\xe7\x82\xd0\xbb\x97\xe3\xdc\xda\x2e\xb2\xe8\x42\x0b\x9d\xcb\xf7\xff\xe2\x57\x4a\x0b\xd0\x68\xac\x43\x28\x82\xed\x9d\x8a\x23\x61\x01\x8b\x9c\xe5\x7f\x4b\x21\xa6\x04\x75\x3b\x1a\x63\x8f\x90\x73\x99\x12\x6c\xe2\x71\xa7\x48\x6d\xa1\xfe\x43\x7d\x80\x9c\x2b\x28\xa5\x48\x09\x2e\xd5\x17\x7f\x80\x9c\xe7\x80\x44\x7c\x3c\x55\x92\x35\xd0\xe9\x09\x2a\x3f\x0b\xae\xbd\x3e\x15\x90\x73\x92\x62\xe3\x5d\x88\xd0\x75\x21\x6e\x63\xc3\x34\xb2\x2e\x1a\x28\x7e\xbd\x17\x50\xb7\xab\x27\xc8\x59\x0a\xbf\x7e\xab\x07\xdf\xb7\x71\x1b\xcb\xf3\xe8\x1c\x52\x02\x63\x71\xd0\x7b\x35\x8c\x78\x37\x25\xa5\xe8\x3a\xf2\x87\x70\x76\xb2\x6c\x80\x97\x35\xd9\x3d\x52\xbd\x1a\x91\x4e\x8f\x08\x0c\x10\xd6\x4c\xab\xb3\x06\x9c\x1d\x20\x49\x21\x08\xe3\x48\x8e\xaf\x73\x78\x25\xb5\xfb\x47\x54\x22\x51\x25\x45\x96\x42\xa3\x41\x82\xb3\x68\xfd\x77\xf0\x01\x4b\x76\x61\x0d\xcc\x2e\xc5\x67\x3c\xc6\xb2\x9a\x48\x17\xf6\xb2\xb9\x2e\x30\xaa\xfa\xfd\x5d\xf0\x81\x22\x4b\x7e\x69\x3b\x3b\xb0\x8f\x29\x0b\xeb\x6c\xbc\x46\x21\x05\x43\x6f\x42\xed\x46\x39\xce\x51\x69\x4d\xde\x40\x69\x06\x15\x23\xba\x69\xba\x82\x1f\x3c\x5c\x5e\xbb\x0c\xa5\xfe\xfe\x03\xd8\x50\x96\x29\xdd\xb2\xff\x08\x00\x00\xff\xff\x23\xeb\x75\xa5\x6c\x02\x00\x00")

func golangGetFirstTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetFirstTmpl,
		"golang.get-first.tmpl",
	)
}

func golangGetFirstTmpl() (*asset, error) {
	bytes, err := golangGetFirstTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-first.tmpl", size: 620, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetHasTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x8f\xbd\x6e\xeb\x30\x0c\x85\x67\xf1\x29\xce\x35\x70\x0b\x1b\x70\xfc\x06\x19\x3a\x14\xe8\xd0\x25\xf5\xd0\x31\x50\x62\x29\x51\xe1\x48\x2e\x25\xa7\x09\x08\xbe\x7b\xe1\x14\xfd\xd9\x3a\x70\x22\xbf\xc3\xf3\x89\xac\x30\x38\x1f\xa2\x43\x95\xc3\x21\xda\x32\xb3\xab\xb0\x52\xa5\x47\x9b\x45\xd0\xf5\xb3\xf7\xe1\x02\xd5\x5a\x04\xfb\x72\x99\x2c\xdb\x13\xba\x7b\x3e\x64\xa8\x36\xa8\xc9\x1c\x6d\xc6\x2e\xa5\xb1\x85\x63\x5e\x26\x71\x43\x4b\xb2\x8b\xc3\x2d\x8a\x7e\xbf\xd9\xa5\xe1\x5a\x41\x55\xc8\xec\x53\xcc\x05\xdb\x6d\x2e\xa7\xb2\x16\xc1\xc4\x21\x16\x8f\xea\xff\x5b\x85\xae\xdf\x3c\x41\x95\x4c\xda\xbd\x76\x63\x3a\xf4\xe5\x54\xea\xcf\xd3\x16\x22\xf0\xc1\x8d\xc3\xd9\x8e\xb3\xfb\x29\x43\x64\x96\x06\x6b\x2c\xcc\xc0\xe1\xec\xb8\xdb\xcc\x8e\xaf\xcf\xe9\xfd\x2f\xb6\xeb\xf7\x36\xd6\x77\x47\x9b\x1b\x32\xc1\xdf\x54\xfe\xad\x11\xc3\x08\x21\x63\xd8\x95\x99\x23\xbc\x1d\xb3\x6b\xf1\xc2\x76\x7a\x60\xae\x1d\x73\x43\x46\xe9\x6b\x7d\xb4\xb9\x5d\x10\x52\x12\xf9\xd6\xff\x08\x00\x00\xff\xff\x88\xaa\xbc\x96\x65\x01\x00\x00")

func golangGetHasTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetHasTmpl,
		"golang.get-has.tmpl",
	)
}

func golangGetHasTmpl() (*asset, error) {
	bytes, err := golangGetHasTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-has.tmpl", size: 357, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetLastTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x90\x31\x6f\xf2\x40\x0c\x86\xe7\xf3\xaf\xf0\x17\xe9\x93\x12\x09\x32\x55\xdd\x98\xaa\x6e\x2c\x40\xa5\x8e\xe8\x48\x9c\xe8\x4a\xf0\xa5\x8e\x69\xa1\xd6\xfd\xf7\x2a\x41\x54\x61\x38\xdd\xf2\xbe\x7e\x1e\xdb\x6c\x89\x35\x35\x81\x09\xb3\x21\xb4\xec\xf5\x2c\x94\xe1\x32\x25\x68\x49\xd7\x7e\x50\x33\x2c\xb7\xa4\x67\xe1\xf2\xed\xda\x13\xa6\x94\x57\x7a\xc1\x2a\xb2\xd2\x45\xcb\x97\xdb\xbf\x00\xd7\x1f\x31\xb0\x3e\x3f\x15\x98\x83\x33\xc3\xde\x8b\x3f\xdd\xbb\x98\xd2\x02\x49\x64\x7c\x51\x0a\x18\xb9\xc4\xf5\x04\x82\xb9\xc4\x21\xd6\xd7\x89\x6f\xe0\xaa\xc8\x83\xe2\x7e\x3f\xe8\x49\x57\xe3\x44\x09\xac\x0d\x66\xff\x3f\x33\x2c\x77\x9b\x35\xa6\x04\x2e\x1e\x3e\xca\x2e\xb6\x3b\x3d\x69\x7e\x8b\x2e\xb0\x3f\x16\x30\x39\x04\x0e\x3a\x53\x00\x37\x2a\xac\x70\xec\xd4\x12\xbe\x48\xca\xcd\x99\xe4\xba\x8d\xdf\xf3\x6e\xb9\xab\x3c\xe7\x66\xe8\xeb\x5a\x62\x83\x79\xd3\x79\x55\xe2\xfb\xa4\x02\x53\x2a\xc0\x85\x66\xda\xe8\xdf\x0a\x39\x74\x68\xe0\x9c\xdc\x40\x66\xf8\x43\x12\x1f\x76\x7f\x17\xdf\xbf\x8a\xe4\x24\x52\x80\x4b\x30\xcb\x7a\x69\x1f\xa2\x1c\x3a\x48\x60\xf6\x77\xa0\xdf\x00\x00\x00\xff\xff\x77\x00\x17\x29\xa5\x01\x00\x00")

func golangGetLastTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetLastTmpl,
		"golang.get-last.tmpl",
	)
}

func golangGetLastTmpl() (*asset, error) {
	bytes, err := golangGetLastTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-last.tmpl", size: 421, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetLimitoffsetTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\x31\x8b\xdc\x30\x14\x84\x6b\xe9\x57\x4c\x0c\x01\x1b\x7c\xae\x42\x8a\x0b\x2e\x42\x48\x77\x04\x2e\x5b\xa4\x5c\x74\xd6\xd3\xa2\x60\x4b\xce\xb3\x7c\xbb\x87\xf2\xfe\x7b\x90\x7d\xbb\xa4\x08\x81\xa4\x30\x58\xd2\x30\xf3\x69\x9e\x72\xbe\x83\x25\xe7\x03\xa1\x5a\xfc\x29\x98\xb4\x32\x55\xb8\x13\xd1\x0f\x7e\xf2\x89\x6c\xce\xe8\x0e\xab\x73\xfe\x02\x91\x3a\x67\x0c\xe9\x32\x1b\x36\x13\xba\x8f\x7c\x5a\x44\x5a\xad\xc6\x22\x85\x0f\xa9\x45\x74\x6e\xa1\xed\xff\xfd\xbb\x06\xb5\x56\x1c\xcf\x0b\x72\xc6\x32\xfa\x81\xa2\x43\xf7\x35\x9e\x21\xd2\x82\x98\xcb\x17\xb9\xd1\x85\x82\x82\xdd\x62\xf5\xef\x48\x4f\xd1\xbe\x54\x10\xc9\x5a\x0d\x31\x2c\x09\xc7\xe3\x92\xa6\xd4\xe7\x8c\x99\x7d\x48\x0e\xd5\xdb\x1f\x15\xba\xc3\xe3\x03\x44\xb4\x8a\x4f\xdf\xbb\x31\x9e\x0e\x69\x4a\xf5\x2e\x6d\x4b\xb6\xf3\x34\xda\x67\x33\xae\xb4\x43\xe3\x27\x86\x38\x4d\x06\x22\x1b\xfa\x15\xbb\xd1\x5a\x1d\x8f\x85\x78\xc7\xbb\xef\x51\x1c\x2d\xfb\x67\xe2\xee\x71\x25\x7e\xf9\x3f\x5b\xe5\xdd\x66\xf8\xa6\x47\xf0\x23\xb2\x56\x8a\x29\xad\x1c\xca\xb2\xc5\x37\x36\xf3\x67\xe6\x9a\x98\x1b\xad\x44\x2b\x4b\x8e\x18\x3b\x4a\xf7\x69\x8c\x0b\xd5\x85\xcd\xc5\xdb\xe6\x17\xba\xa4\xba\xd9\x9c\x72\x86\x0f\x3e\x05\x3a\x5f\xcb\xd5\x4a\x95\xb4\xfe\x2a\x3e\x0c\x26\x94\xd1\x19\x6b\x39\x3a\xd4\x6e\x34\x29\x51\xd8\xe4\x0d\x44\x1a\xad\xfe\x40\xf8\x17\xc4\xc2\xb8\x4f\xb6\x87\x99\x67\x0a\xb6\xde\x5b\x2b\x21\x7c\xba\x72\xec\x97\x79\x75\xbe\xbf\xe1\x14\x9f\xe6\xc3\x3f\x15\xf2\x7a\xb8\x87\x04\x3f\x6a\xd1\x39\xdf\xde\xcc\xaf\x00\x00\x00\xff\xff\xfa\x04\xd9\xfb\xc6\x02\x00\x00")

func golangGetLimitoffsetTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetLimitoffsetTmpl,
		"golang.get-limitoffset.tmpl",
	)
}

func golangGetLimitoffsetTmpl() (*asset, error) {
	bytes, err := golangGetLimitoffsetTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-limitoffset.tmpl", size: 710, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetOneTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x90\xbb\x6e\xc3\x30\x0c\x45\x67\xe9\x2b\x58\x03\x05\x6c\x20\xf1\x1f\x64\xe8\x50\x74\xe9\x92\x78\xe8\x18\x28\x11\x65\xa8\x70\xa4\x94\xa6\xf3\x28\xc1\x7f\x2f\xe4\x3e\x92\xad\x83\x16\xe1\xe2\xdc\xc3\x2b\xb2\x04\x8f\x21\x26\x84\x6a\x8c\x7d\x72\x3c\x11\x56\xb0\x54\xb5\x2f\xc8\x22\xd0\x76\x53\x08\xf1\x02\xaa\xb5\x08\xec\xf9\x72\x74\xe4\x0e\xd0\x3e\x51\x3f\x82\x6a\x03\xb5\x35\x22\xf0\xf3\xbb\xc9\x67\x50\x5d\x00\x12\x95\x97\xa9\xb1\xa5\x01\x93\x9f\x91\xf6\xbe\x6e\x97\xfd\xb5\x02\x55\xb1\x66\x9f\xd3\xc8\xb0\xdd\x8e\x7c\xe0\x55\xa1\x51\x4c\x1c\xa0\x7a\xfc\xa8\xa0\xed\xd6\xaf\xa0\x6a\x4d\xde\xbd\xb7\x43\xee\x3b\x3e\x70\xfd\x1d\x5d\x80\x08\x84\x88\x83\x3f\xb9\x61\xc2\x9b\x94\x9d\x9d\x62\x8a\xfc\xab\x64\x4d\x51\x5a\x41\x81\x78\x8a\x27\xa4\x76\x3d\x21\x5d\x37\xf9\xfc\x1f\xac\xed\xf6\x2e\x95\xe3\x9d\xf7\x94\x03\xd4\x61\x70\xcc\x98\x66\x74\x33\xd7\x99\x18\xe6\x93\x1f\x56\x90\xe2\x00\x62\x8d\x21\xe4\x89\x52\x61\x7e\x22\xe5\xdb\x32\x6f\xe4\x8e\xcf\x44\x35\x12\x35\xd6\xa8\xbd\x0b\x3a\xea\x6f\xb9\x14\x07\xab\x56\xe4\x6f\xbb\xaf\x00\x00\x00\xff\xff\x68\xc3\x9f\x53\xaa\x01\x00\x00")

func golangGetOneTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetOneTmpl,
		"golang.get-one.tmpl",
	)
}

func golangGetOneTmpl() (*asset, error) {
	bytes, err := golangGetOneTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-one.tmpl", size: 426, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetPagedTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x53\x4d\x6b\xdc\x30\x10\x3d\x4b\xbf\x62\x2a\x28\xd8\xe0\x98\x9c\x53\x5c\x28\xa5\xb7\x50\x92\xee\xa1\xc7\x45\xb1\x47\x46\x8d\x2d\x6d\xc7\xe3\xec\x06\x55\xff\xbd\x48\xda\xaf\xd2\x42\xdb\x83\xc1\x96\xdf\xbc\x8f\xf1\x73\x08\x37\x30\xa0\xb1\x0e\x41\x2d\x76\x74\x9a\x57\x42\x05\x37\x31\xca\x07\x3d\xe2\x10\x02\xb4\x9b\xd5\x18\x7b\x80\x18\xab\x10\xa0\xe7\xc3\x4e\x93\x9e\xa1\xfd\x40\xe3\x02\x31\x36\x52\x4c\x76\xb6\x0c\xd6\x71\x03\x3d\xfb\x67\x74\xb0\x30\x59\x37\xd6\x50\x49\x41\x7e\xbf\x40\x08\xb0\x4c\xb6\x47\x6f\xa0\xfd\xe2\xf7\x69\xec\x08\xf5\x2b\x1f\xd1\x0d\x20\x51\xba\x3c\xd5\x32\xf9\x42\x37\x64\x23\xf2\xda\xe4\x93\x1f\x5e\x15\xc4\x18\xa4\xb0\xe6\x24\xd7\x75\xa0\x14\x04\x29\xc4\xe9\x00\xd4\xad\x92\x22\x4a\x29\x7a\xef\x16\x86\xed\x76\xe1\x99\xbb\x10\x60\x47\xd6\xb1\x01\xf5\xf6\xbb\x82\x76\xf3\x78\x0f\x31\x4a\xe1\x9f\xbe\xb5\x93\x1f\x37\x3c\x73\x55\xa0\x4d\xf2\x6c\x2c\x4e\xc3\x8b\x9e\x56\x3c\xc6\xfd\x01\xbd\x9f\x67\x0d\x31\x16\xa1\x06\x72\xf6\x5a\x4a\xb1\xdd\xa6\xa4\x25\xc4\x5d\x07\x89\x71\x20\xfb\x82\xd4\x3e\xae\x48\xaf\xff\x42\xfb\x1b\x6b\x8a\x98\xf8\xde\x74\xe0\xec\x94\x03\x12\xf2\x4a\x2e\x3d\x36\xa0\x54\x03\x5f\x49\xef\x3e\x11\x55\x48\x54\xa7\xc0\x62\x40\x83\x04\xc5\x4d\xfb\x71\xf2\x0b\x56\xc9\x5e\x08\x60\x9d\x65\x87\x7b\x68\xef\xf5\xc2\x0f\xcf\x39\xb8\xf1\x67\xec\x67\x3c\x70\x55\x67\x91\x6b\x70\xf9\x5c\x52\x88\x64\xa4\x3b\x81\x37\xbd\x76\xa9\x0e\x7a\x18\xc8\x1b\xa8\xcc\xa4\x99\xd1\x65\x78\x7d\xb5\xa6\x0b\xe4\xa2\x5a\x4b\xf1\x87\x60\x7f\x49\x96\xa2\x95\x2e\x75\xa0\x77\x3b\x74\x43\x55\xf6\x9d\x14\x68\x3c\xf9\x2c\x3b\x38\xb2\xdf\x9d\xed\x26\x9e\xfa\xdd\xff\xee\x32\x13\x95\x72\xbf\x87\xdb\x3c\x92\x0e\xd0\x65\xe9\x3a\xd5\xae\xbc\xcd\xfe\x2f\x7d\xee\xc0\xcc\xdc\x6e\x72\xd3\xaa\x93\xbf\x5f\xe2\x47\x29\x22\xe0\xb4\xe0\x55\x69\xcb\x64\xb9\x2f\xea\x47\x7f\x25\xe7\x19\xd4\x24\xc3\x32\xca\x10\xce\x7f\xc8\xcf\x00\x00\x00\xff\xff\xcc\xa3\x6a\xd7\xc6\x03\x00\x00")

func golangGetPagedTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetPagedTmpl,
		"golang.get-paged.tmpl",
	)
}

func golangGetPagedTmpl() (*asset, error) {
	bytes, err := golangGetPagedTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-paged.tmpl", size: 966, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangGetScalarTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x90\x3f\x6f\xe3\x30\x0c\xc5\x67\xe9\x53\xf0\x0c\x1c\x60\x03\x89\xbe\x81\x87\x1b\x72\xd3\xe1\x80\xc4\x43\xc7\x40\x89\x28\x43\x85\x23\x25\xb4\x9c\x3f\x25\xf8\xdd\x0b\xb9\x6d\xd2\x2e\xed\xc0\x85\xe0\xfb\xbd\xc7\xc7\xbc\x04\x87\x3e\x44\x84\x6a\x0c\x7d\xb4\x79\x22\xac\x60\x29\xa2\xff\x86\xe8\x98\xc1\x74\x93\xf7\xe1\x0a\x22\x35\x33\xec\xf3\xf5\x68\xc9\x1e\xc0\xfc\xa1\x7e\x04\x91\x06\x6a\xad\x98\xe1\x7d\xbb\x49\x17\x10\x59\x00\x12\x95\x49\xd4\xe8\x62\x81\xd1\xcd\x4c\xfd\xd9\x6f\x97\xdc\xad\x02\x11\xd6\x6a\x9f\xe2\x98\x61\xbb\x1d\xf3\x21\xb7\x85\x46\x21\x66\x0f\xd5\xef\x53\x05\xa6\x5b\xff\x03\x11\xad\xd2\xee\xd9\x0c\xa9\xef\xf2\x21\xd7\x6f\xa7\x0b\x60\x06\x1f\x70\x70\x67\x3b\x4c\xf8\x08\xa5\xe7\x4c\x21\x86\xfc\x11\x49\xab\x12\xa9\x85\x02\x71\x14\xce\x48\x66\x3d\x21\xdd\x36\xe9\xf2\x13\xcc\x74\x7b\x1b\xcb\xf3\xd6\x39\x4a\x1e\x6a\x3f\xd8\x9c\x31\xce\xe8\x66\xb6\x53\xc1\xcf\x2f\xb7\x2d\x8c\xa7\xc1\xac\x88\xfe\xa7\x4d\xba\x8c\xc0\x5a\x29\xc2\x3c\x51\x2c\xf4\x17\xa4\xf4\xe8\x28\x86\x41\x2b\xb9\x6b\x7f\xb5\x65\xf3\xad\xe2\x89\xec\x71\x45\x54\x23\x51\x33\x4b\x1f\x87\x96\xfa\xaf\x64\xd1\xcc\xf7\xde\x5f\x03\x00\x00\xff\xff\xdb\xa0\xe0\xc7\xe7\x01\x00\x00")

func golangGetScalarTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangGetScalarTmpl,
		"golang.get-scalar.tmpl",
	)
}

func golangGetScalarTmpl() (*asset, error) {
	bytes, err := golangGetScalarTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.get-scalar.tmpl", size: 487, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x58\x5b\x6f\xdb\x38\x16\x7e\x16\x7f\xc5\x19\xa1\x19\x48\x85\xab\xec\x02\x8b\x7d\xf0\xc0\x0f\x71\x9c\x59\x04\x68\x93\x4e\xaa\xee\x62\x81\x01\x3c\xb4\x44\xb9\x9a\x50\xa4\x43\x52\xb6\x0a\xad\xfe\xfb\x82\x17\x49\x94\x2f\x69\x8b\x79\x8a\x4c\x9d\xeb\x77\xbe\xf3\x49\xca\xf5\x35\xdc\x7c\x4e\x1f\xff\x75\xf7\x70\xf7\x74\x93\xde\xad\x60\xf9\x5f\xd8\xf2\xdd\xf3\x36\x29\xd9\xb5\xdc\xe1\x8c\x54\x9c\x3d\x93\xaf\x5b\x7e\x9d\x6f\x9a\x64\xff\x77\x74\x7d\x0d\xab\x47\x78\x78\x4c\xe1\x6e\x75\x9f\x26\x08\xed\x70\xf6\x8c\xb7\x04\xda\x16\x92\x8f\xee\xba\xeb\x10\x2a\xab\x1d\x17\x0a\x22\x14\x84\x19\x67\x8a\x34\x2a\x44\x41\x98\x63\x85\x37\x58\x92\x6b\xf9\x42\xf5\x6f\x22\x04\x17\x52\x5f\x15\x95\x31\x50\x65\x45\xf4\x5f\xa9\x44\xc6\xd9\x3e\x44\xa8\x6d\xdf\x81\xc0\x6c\x4b\x20\xb9\x6b\x94\xc0\xf7\x26\xb0\xd4\x49\x02\x9d\xf4\x46\x5f\x42\x38\xcd\x1f\x1a\x37\xc2\x72\x6d\x16\x23\x5d\xf6\x47\x41\xf6\x84\x29\xc8\x38\xcb\x4b\x55\x72\x86\x29\x94\x2e\x56\x21\x78\x05\x19\xae\x65\xc9\xb6\xb0\xa9\x4b\x9a\x43\x81\x4b\x5a\x0b\x22\xd1\x1e\x0b\x58\xc3\x02\x5c\x45\xc9\xbd\xe2\x18\x99\xd3\xff\x08\xbc\xbb\x13\x02\x16\x50\xd4\x2c\x8b\x88\x10\x60\xfa\x89\xed\x1f\x68\x05\x51\xb5\x60\xfa\x57\x67\x1c\xde\xf3\xed\x96\x08\x6b\x5d\x70\x51\x61\xa5\xa3\x96\x6c\x3b\x03\x2c\xb6\x12\x92\x24\x29\x99\x22\xa2\xc0\x19\x69\xbb\xd8\xf8\x3c\xf0\x03\x2c\x40\xc3\x92\x3c\xf0\x03\x42\xea\xeb\x8e\x40\x2e\xca\x3d\x11\x30\x18\x43\x8b\x82\xbb\x86\x64\xd1\x4b\x4d\xc4\xd7\x57\x83\x42\x24\x5f\x68\xf2\x44\x64\x4d\xd5\xcc\xd5\x8b\x82\xdf\xb4\xdf\x77\x79\xbf\x35\xee\xfc\x20\x8f\x9c\x9f\xf8\xe1\x7b\xfc\x7b\x77\xd4\x59\x0c\x23\x14\x30\xae\x6e\x3e\x72\x63\x05\x0b\x1b\x54\x26\x0f\xe4\x10\x85\x39\x91\xaa\x64\x58\x0f\x0b\x18\x57\x80\x61\x67\xed\xc2\x18\x05\x94\x4b\xf9\xf5\x96\xb3\x3d\x11\x52\x1b\x4c\x5d\xcd\x5d\x3d\x6b\x77\x3b\x8c\x35\x0d\x0c\x78\xab\xa5\x2e\xb1\xce\x94\x46\xcd\xd4\xb3\x5a\xa2\x20\xdf\x7c\x20\xea\x0b\xcf\xa5\xae\x4c\x4f\x08\x1e\x77\x84\x45\x16\xe9\x19\x48\x5e\x8b\x8c\xb8\xde\x62\x88\xf2\x0d\xbc\x5d\x2d\x0d\x06\xfd\xd0\x5b\x14\xc8\x17\xba\xce\x37\xf6\x74\xbe\x00\x1d\xfb\x4c\x94\x18\x05\x65\x61\x6c\x7e\x5a\x00\x2b\xa9\xf6\x0c\x1c\x57\x58\x49\x67\x3d\xb1\x34\xa3\x62\x14\x74\x28\xc8\x49\xd1\xf3\xc6\xa6\x00\x57\xb7\xc9\x7a\x26\x9a\xab\x24\xb9\xa5\x5c\x92\x28\x46\x81\x8e\xd2\x39\xe7\x18\x0d\x05\xd8\x22\xb5\xe5\xc7\x92\x6d\xa3\xf8\x97\x1f\x29\x0b\x05\x7a\x82\x65\xb5\xa3\x30\xa2\x17\xc8\x43\xa9\xb2\x2f\x3d\x45\x5b\x7f\x7f\x57\x25\xa6\x24\x73\xbb\x9b\x61\x69\x55\xe3\x01\x57\x04\xfe\x07\x3b\x51\x32\x55\x40\x78\xf5\x12\x42\xd7\xcd\x75\x5b\x3a\xf2\x02\x18\x39\x0c\x66\xdd\xd8\xc3\x44\x17\x48\xf6\xc8\x34\xd2\x26\xb2\x6e\x6e\x3d\x83\xa3\x06\xcd\x7e\xb4\xed\x24\x4f\x02\x5d\x77\xda\xf3\x2b\x4d\x07\x9d\x2f\x2c\xde\xa5\x1e\x11\xae\xa9\x9a\x5f\xc0\xac\xa8\x54\x72\xa7\x79\x52\x44\x61\xcd\x64\xbd\xd3\xc2\x43\xf2\x1e\xa6\x2b\x19\xce\xdc\x75\xec\xb0\x75\x51\x7e\x5e\x2d\x75\x4d\xab\xe5\xdc\x35\x32\x43\xc1\x48\xd6\xb9\x81\x7f\x86\x82\x6e\xa6\xf3\x0d\xdc\x8d\xf8\xe6\x4f\x4d\xd0\x18\x1c\x03\x20\x9a\x32\xd5\x45\xef\xcb\xe3\x9b\x3f\x93\xd5\xb2\xa7\x4b\x7c\x26\x8e\xe1\x71\xa6\x1a\x70\x6a\x9e\xdc\xda\xbf\x5a\x12\xd2\x66\xe6\x85\x56\xcd\xb0\x00\x2e\xec\x92\x6c\x4b\x16\xfd\x30\xed\x47\x0c\xd2\x46\xdb\xaa\x66\x0e\xaa\x99\x99\xab\xa1\x7f\x9d\xe2\x20\xf0\x2e\x6d\x22\xd5\xc4\xa7\x48\xac\x08\x25\x8a\xdc\x50\x7a\xae\xf8\x19\xd8\x3d\x8e\x21\x2a\x99\xfa\xe7\x3f\x2e\xb4\x91\x6f\x92\xbe\xfd\xd7\x9a\xf8\x9b\x71\x38\x5e\xd8\xc9\x8a\x2e\x3c\x96\x99\xdf\x43\xd3\xaa\x49\x6e\x79\x55\x95\x4a\xc3\x3f\x70\xd0\x30\x6e\x70\x5f\x0b\x4e\xe9\x06\x67\xcf\xba\x28\xd5\x24\x4f\xee\xa7\xdb\xdb\xf1\xb6\x4f\xe6\xb2\xe8\x9f\x3b\xfe\x69\x60\xcf\xb4\xc6\x6a\x7c\xde\x61\x4a\xe7\x30\xf8\xeb\x87\x1f\xc9\xe7\x70\xb5\x0f\x27\x63\x19\x32\xd8\x1a\xbb\x5e\x57\xe2\x61\x54\xaa\x49\x72\x1f\x71\x43\x25\x23\xbb\x69\xe3\xc9\xae\x6a\xac\x82\xa5\x0d\x1a\x87\x39\x98\xe6\x56\x27\x2e\x79\x0c\xe4\xd4\x67\x83\x6d\x0c\x3d\x7e\xdf\xe0\xba\x6a\x92\x09\xd8\x97\xc2\x8d\xe8\x7e\x57\xc0\xd1\xdc\x84\xbc\x20\x7b\xe6\xfc\x4d\xbe\x31\x7d\xce\x17\xa7\xea\x27\x57\xcb\x10\xde\x39\x71\x79\xa3\x9a\xcb\x86\x69\xe3\x19\x6a\x19\xb8\x6c\x7a\x5f\xed\x68\x68\xd2\x1b\x9b\xb6\xf5\x1c\xba\xce\x43\xd9\xc9\x91\xfd\x73\xa4\x02\x47\x5e\x31\x50\xbe\xfd\xa4\x2a\x15\x49\x55\x4d\x5f\x64\x92\x24\x81\xc9\x53\xbf\xb5\xaf\x6a\x4e\xc2\xdf\x7b\x7e\x83\xc3\x48\x14\x9d\xc7\x01\x34\xad\x6d\x78\xea\xa1\xe0\xb8\x98\xa1\xd4\xa3\x87\x85\xff\xa4\x7c\x3b\x0d\x3c\xce\xf1\xe7\xc9\x8d\xd6\xe8\xeb\x1c\xac\xd2\x1e\xe5\x99\x5b\x63\xef\xc4\x6c\x93\xc5\xab\xf7\xe9\xb4\x0a\x9d\x01\x6f\x48\x11\xc3\xa7\xec\x0b\xa9\x70\x14\x3b\xd8\xbc\x62\xfe\xd0\xe5\xdb\xdb\x9f\x7e\x7b\x0f\x5d\xf7\xc7\xeb\x91\x06\xed\xeb\xd7\x23\x86\x61\xa1\x8e\x7b\x74\x6c\x72\x3d\xf6\x4c\x9f\x8f\xfb\xd6\x5a\x89\xed\x7e\xbc\x73\xab\xcb\x43\xe7\xc3\x20\x87\x94\xfe\x20\xfb\x74\xaf\xcc\xf1\x02\x5d\x5e\x7f\xb9\x6c\x51\x70\x7d\x0d\xe9\xe3\xea\x71\x0e\x82\xb0\x9c\x08\xd8\x51\x9c\x91\x2f\x9c\xe6\x44\x48\x74\x5e\x0b\x7b\x25\x94\x2f\x74\xfe\x3b\xbb\x92\xbf\x33\x1d\x5c\x5f\xbe\x84\x33\x18\x49\x1a\xbb\xde\xbc\xa7\x3e\x6a\xdb\x7e\xc9\x3f\x99\xf6\x64\xff\x5a\xf0\xc6\xb5\x3b\xac\xe3\xb0\xa9\x99\x20\x58\x11\xef\xf6\xad\x39\xb0\xfe\x53\xd3\x7a\x97\x4f\x4d\x3f\x9b\x03\xcf\x74\xb2\xd2\xce\xd0\xc7\xda\x53\xa1\x5f\x4b\x42\xf3\xf1\xb3\xc9\xb9\x1b\xa0\x53\x07\xbe\xd7\xd9\xc0\xb9\x49\xe0\x18\xd6\x29\xde\x50\xe2\x11\x17\x1c\xc1\xcc\x07\x98\xb9\xa9\x3f\xbf\xc0\xe1\x54\x16\x90\x3c\xee\xec\xd7\xd6\x3d\x93\x44\xa8\xb1\x8c\xb1\xf0\x09\x24\x17\xca\xbf\x14\xe5\xa4\x99\x29\x3a\xd3\x96\xfc\xd1\x0d\xd9\x27\x28\x5f\xc8\x6e\x80\xd7\xcd\xfd\x85\xc4\x27\x73\x30\x33\x2e\xbc\xf1\x9e\x46\x78\x93\x29\x6e\x5e\x41\x46\x2d\x5f\x5f\xc9\x10\x92\x0f\x3c\x27\xd4\x58\x26\xa7\x44\x28\xce\x34\x13\xac\x25\x51\xb0\xe1\x9c\xa2\x60\xbd\xc7\xb4\x26\x93\xd1\x7b\x7b\x67\x73\x76\x5d\xb4\x37\x16\xb7\x8a\x8b\x7f\x1b\x7b\x3d\xff\xa3\xf0\xed\x30\xe5\x0f\xb5\xc2\x8a\xfc\x6a\xdf\xc0\xf7\xb0\x30\xbe\xde\x61\xb4\x8f\x27\xef\xcb\x8e\x36\xd3\x78\x2d\xe8\x2a\xe7\xa0\x44\x4d\x66\x60\xcb\x9c\x6b\x1b\x9d\x21\xc5\xcf\xe4\x26\xcf\x75\x69\x5a\x8a\x6c\xa0\x3d\xe8\xda\x9d\xc5\x43\x4d\xa9\x63\xe0\x49\x37\xeb\x27\x7c\x70\x1d\xa5\xbd\x76\x9e\x34\xa3\x05\x62\xef\xbf\xa4\x79\x55\xf6\x71\x74\x92\xc8\x7e\x96\x9d\xde\x8d\x4e\x6b\x7d\x3b\xd6\x1a\x9f\x83\xd9\x05\x3c\x53\xcc\x37\x21\xea\x7b\xef\x29\x6d\x37\xb6\x38\xf2\x88\xc1\xe0\x18\xc5\xfe\x33\x19\x4c\x9d\x3f\x15\x89\xa1\xc5\xb0\xc5\xba\xef\xee\x97\xfe\x57\x91\x38\xa6\x4c\xd4\xc0\x8f\xbc\xbe\xe5\xb4\xae\xd8\x25\x3d\xb0\x77\x7d\x41\xd0\xa5\xbe\x9b\xae\x87\x0d\xad\xf8\xe7\xf4\x36\x52\xf6\x3f\x1d\x69\x59\x91\x78\xbc\xf4\xc0\x50\x89\x36\xd3\x40\xfe\x3f\x00\x00\xff\xff\xe3\xd9\x2a\xf1\xbc\x12\x00\x00")

func golangHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangHeaderTmpl,
		"golang.header.tmpl",
	)
}

func golangHeaderTmpl() (*asset, error) {
	bytes, err := golangHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.header.tmpl", size: 4796, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangMiscTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\x41\x4b\xc3\x40\x10\x85\xcf\xcd\xaf\x78\x84\x08\x2a\xa6\x3f\xa0\xe0\xa5\x07\x41\x04\x0f\x5a\x3c\x77\xcd\x4e\xc2\x48\xba\x8d\x9b\x8d\x50\xc6\xfd\xef\x32\xbb\xb2\x56\x7a\x5b\xde\x7c\xef\xbd\x99\x15\x69\x61\xa9\x67\x47\xa8\x2d\x75\x63\x8d\x18\xab\x7e\x71\x1d\xae\x8f\xef\x1f\xb8\x15\xc1\xfa\x85\x3a\xe2\x2f\xf2\x5b\x33\x13\x62\x7c\x3c\x4c\xe3\x0d\x74\xf0\xca\x83\x33\x61\xf1\xaa\x26\x61\x7b\xb4\x27\x0d\x10\x01\x39\x8b\x36\xc6\xaa\x3a\x6f\x98\x83\x5f\xba\x90\x3a\xc2\x69\xa2\xe4\x79\x36\x87\xe4\xcf\x33\x88\x9a\xbd\x71\x03\x61\xfd\xc0\x34\xda\x59\xe9\x95\x08\xb8\x2f\xf0\xb9\xef\xb7\x2b\x8b\x3b\x4d\x4d\x4f\xa5\x77\x66\x98\xd3\x12\xab\x7d\x09\x6d\xf8\x0e\x4d\xc0\xe6\xfe\x6f\x9c\xe9\x86\x2f\xd2\x9e\x48\xaf\xd9\xe8\xf3\xcd\x8c\x0b\xe1\x1b\x93\x67\x17\x7a\xd4\x57\x9f\x75\x86\x32\xbd\xd7\x0d\xdb\x72\x74\xd1\xab\x7f\x7f\xf1\x13\x00\x00\xff\xff\x1b\x36\x80\x57\x6d\x01\x00\x00")

func golangMiscTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangMiscTmpl,
		"golang.misc.tmpl",
	)
}

func golangMiscTmpl() (*asset, error) {
	bytes, err := golangMiscTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.misc.tmpl", size: 365, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangUpdateTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x55\xc1\x6e\xe3\x36\x10\x3d\x4b\x5f\x31\x15\x50\x80\x42\x1c\xa2\xe8\x71\x01\x1d\x82\x6d\x5a\x04\x48\x8d\x24\xee\xb6\x87\xc5\xc2\x60\xac\xa1\xc0\x40\x26\x6d\x72\x14\x27\x10\xf4\xef\xc5\x90\xb2\x63\x25\x4e\xda\xa2\x97\x3d\xf8\x40\x73\xe6\xcd\x9b\xf7\x86\xa3\xbe\x3f\x87\x1a\xb5\xb1\x08\x45\x30\x8d\x55\xd4\x79\x2c\xe0\x7c\x18\xf2\x2f\x9b\x5a\x11\xf6\x3d\xc8\x45\xa7\xb5\x79\x82\x61\x10\x7d\x0f\x2b\x7a\xda\x28\xaf\xd6\x20\x2f\x7c\x13\x60\x18\x66\x79\xd6\xc5\x50\x88\xb1\xe4\xbb\x15\xc9\x94\x9c\x0e\x73\xb5\x46\x18\x86\x12\x44\x9e\xf5\x3d\x8c\xd9\x77\x48\x9d\xb7\x9c\x0f\xe8\x3d\xff\x9c\x2f\x73\xe6\x83\xb6\x8e\x04\xf2\x63\x72\xf7\xae\x7e\x8e\xbc\xfa\x3c\x5b\x39\x1b\x08\x96\xcb\x40\x6b\x5a\x6e\x3c\x6a\xf3\x54\x31\xb0\x37\x96\x34\x14\x3f\x6e\x0b\x90\x8b\xdb\xeb\x9b\x78\x03\xc3\xf0\x2a\x23\xc4\x76\x4e\x65\x1c\x1a\xcd\xf3\xec\x51\x79\xd8\x06\xf8\xfa\xed\xfe\x99\x30\x1d\x1f\x55\xdb\x21\xff\x65\x2c\xa1\xd7\x6a\x85\x3d\x47\xf6\x3d\x18\x0d\xf2\xc6\x05\x43\xc6\x59\xd5\x5e\xf8\xa6\x5b\xa3\xa5\x10\x6b\x3f\xc0\xa7\x8a\xa5\x69\xd1\x1e\x34\x63\xbc\x88\x55\x81\xda\x6c\xd0\xd6\x22\x9d\x67\x1c\xa8\x0d\xb6\x75\x3c\x1f\xe2\xcb\x58\xe5\x20\x4c\xa6\xea\x7a\x5f\x84\xd1\x75\x67\x57\xc2\xb2\xcc\x81\xbc\xb1\x4d\x09\x7d\x9e\x65\xdb\x23\xf8\x6d\x98\x01\x07\x48\x29\xcb\x3c\xcb\x58\xd9\x8f\x38\x67\x0f\x67\x67\x27\x10\x0a\x88\x9d\xc8\x7d\xf0\x41\xe1\x62\xc4\x7d\x9d\x10\xc8\xaf\x9c\x7d\x94\x57\xe4\x94\x78\x28\xdf\x89\x2a\x66\x50\x1c\x11\xc3\x36\x60\x62\xf1\xaf\xeb\xbf\x02\xb0\x75\xcc\x1f\xf2\x6c\xc9\x00\x2f\x62\x25\xb7\xbc\xb2\x0d\x4e\x47\x55\xdd\xb7\xf8\x2b\xeb\x9e\xfa\x37\x1a\xd2\x4c\x4b\x2e\x37\x0e\xb0\x5c\x06\xa4\xa8\xec\x11\xa2\x28\x38\xe2\xb3\x6b\xbb\x35\x0f\x73\xc1\x1c\xde\xf3\xf6\x04\x64\xbc\x12\x65\x19\xc9\x8e\x16\x0f\x69\xa8\x92\x43\x73\xc4\x3a\xcc\xdd\x2e\xd2\x5a\x2e\xad\xdb\xb1\xe1\x73\xb7\x13\xa5\xfc\xf2\xc7\x67\x31\x9d\x8c\xa3\xee\x2e\x3a\x72\x47\x1d\xbd\xa1\x3c\x32\x60\xc2\x1f\xcc\xa2\xbc\xb2\x86\xfe\x54\xed\x64\x06\x87\x97\xa9\xb7\x8e\xde\x94\x32\x9a\x67\x5d\x6c\x43\x09\x55\x05\x3f\x45\xc5\x7c\x7a\xed\xd6\xb4\x33\xf8\xcb\xab\xcd\xa5\xf7\x42\xaf\x49\x5e\xf2\xb3\xd7\xa2\xb0\x88\x35\x90\x1b\x25\x02\x45\xd0\xa2\x0a\x04\xce\x62\x7a\x0f\xc5\x49\x8d\x0e\x14\x4e\x0d\xf2\xf9\xff\x79\x67\xb1\x40\x5a\x18\x2c\xf8\x64\xd9\xc0\xd9\xf8\xce\xc4\x36\x7c\xfd\x34\xf6\x7a\xfe\xf3\xb7\x12\xce\xa6\x3b\x26\xcf\xdc\xfd\x83\x6c\x5d\xb3\xa0\x35\x89\x74\x35\x1b\xd7\x48\x9c\xd7\xd4\x83\x35\x74\xb4\x0f\x0f\x0b\x65\xd1\x6d\x36\xce\x53\x48\x37\xc6\x36\xf1\x92\x97\x65\x05\x8c\x5b\x7b\xf3\x88\x5e\xde\x76\xe8\x9f\xef\xdc\xee\x04\xbe\x5c\xac\x94\xe5\xa5\xad\xea\xda\x3b\x0d\x42\xb7\x8a\x88\xf7\x50\xc2\x2c\x53\xcb\x46\xc7\x15\x5c\x55\x10\xb6\x2d\x5b\x32\x77\x77\x6e\x17\xde\x18\x67\x4d\x1b\x3d\x18\xe3\x7f\xa8\xf8\x9f\x77\xed\x45\xef\x5f\x2c\xe3\x27\x1d\xfd\x58\xa6\x75\x3f\xe9\xe0\xf2\x09\x57\xa7\xd4\xf9\xaf\x85\xf6\x5b\xbe\x41\x8a\x60\x6f\x56\xfc\x6f\x48\x8b\xdb\xeb\x28\xe3\xb1\x31\x85\xb8\xfa\xfd\xe6\xfa\xea\xf2\x97\x12\x8a\x68\xe1\x1e\xe0\xfd\x31\xf9\xd8\x87\x7f\xcc\xff\x7e\x8c\xd9\x2f\x8e\x31\x90\x29\xf9\x66\xf2\x75\x66\xf0\x61\xf2\x61\xfe\x3b\x00\x00\xff\xff\x75\xf1\x1d\x83\x35\x08\x00\x00")

func golangUpdateTmplBytes() ([]byte, error) {
	return bindataRead(
		_golangUpdateTmpl,
		"golang.update.tmpl",
	)
}

func golangUpdateTmpl() (*asset, error) {
	bytes, err := golangUpdateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang.update.tmpl", size: 2101, mode: os.FileMode(420), modTime: time.Unix(946710000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"golang.create.tmpl": golangCreateTmpl,
	"golang.delete-all.tmpl": golangDeleteAllTmpl,
	"golang.delete-world.tmpl": golangDeleteWorldTmpl,
	"golang.delete.tmpl": golangDeleteTmpl,
	"golang.footer.tmpl": golangFooterTmpl,
	"golang.get-all.tmpl": golangGetAllTmpl,
	"golang.get-count.tmpl": golangGetCountTmpl,
	"golang.get-first.tmpl": golangGetFirstTmpl,
	"golang.get-has.tmpl": golangGetHasTmpl,
	"golang.get-last.tmpl": golangGetLastTmpl,
	"golang.get-limitoffset.tmpl": golangGetLimitoffsetTmpl,
	"golang.get-one.tmpl": golangGetOneTmpl,
	"golang.get-paged.tmpl": golangGetPagedTmpl,
	"golang.get-scalar.tmpl": golangGetScalarTmpl,
	"golang.header.tmpl": golangHeaderTmpl,
	"golang.misc.tmpl": golangMiscTmpl,
	"golang.update.tmpl": golangUpdateTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"golang.create.tmpl": &bintree{golangCreateTmpl, map[string]*bintree{}},
	"golang.delete-all.tmpl": &bintree{golangDeleteAllTmpl, map[string]*bintree{}},
	"golang.delete-world.tmpl": &bintree{golangDeleteWorldTmpl, map[string]*bintree{}},
	"golang.delete.tmpl": &bintree{golangDeleteTmpl, map[string]*bintree{}},
	"golang.footer.tmpl": &bintree{golangFooterTmpl, map[string]*bintree{}},
	"golang.get-all.tmpl": &bintree{golangGetAllTmpl, map[string]*bintree{}},
	"golang.get-count.tmpl": &bintree{golangGetCountTmpl, map[string]*bintree{}},
	"golang.get-first.tmpl": &bintree{golangGetFirstTmpl, map[string]*bintree{}},
	"golang.get-has.tmpl": &bintree{golangGetHasTmpl, map[string]*bintree{}},
	"golang.get-last.tmpl": &bintree{golangGetLastTmpl, map[string]*bintree{}},
	"golang.get-limitoffset.tmpl": &bintree{golangGetLimitoffsetTmpl, map[string]*bintree{}},
	"golang.get-one.tmpl": &bintree{golangGetOneTmpl, map[string]*bintree{}},
	"golang.get-paged.tmpl": &bintree{golangGetPagedTmpl, map[string]*bintree{}},
	"golang.get-scalar.tmpl": &bintree{golangGetScalarTmpl, map[string]*bintree{}},
	"golang.header.tmpl": &bintree{golangHeaderTmpl, map[string]*bintree{}},
	"golang.misc.tmpl": &bintree{golangMiscTmpl, map[string]*bintree{}},
	"golang.update.tmpl": &bintree{golangUpdateTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

