{{/* GOLANG FUNCTION TEMPLATES */}}

{{- define "params" -}}
{{- range $i, $arg := . -}}
	{{ if $i }},
    {{end}}{{ $arg.Name }} {{ $arg.Type }}
{{- end -}}
{{- end -}}

{{- define "args" -}}
{{- range $i, $arg := . -}}
	{{ if $i }}, {{ end }}{{ $arg.Name }}
{{- end -}}
{{- end -}}

{{- define "nil-args" -}}
{{- range $i, $arg := . -}}
	{{ if $i }}, {{ end }}nil
{{- end -}}
{{- end -}}

{{- define "func-header" }}
	const stmt=`{{ .SQL }}`
	prepared, replace, err := obj.prepare(stmt)
	if err != nil {
		err = WrapErr(err)
		return
	}
	defer replace()
	obj.logStmt(stmt, {{ template "args" .Args }})
{{ end -}}

{{/* SELECT STATEMENT */}}
{{ define "select" }}
func (obj *DB) {{ template "select-func" . }}

func (obj *Tx) {{ template "select-func" . }}
{{ end }}

{{- define "select-func" -}}
Get{{ .Struct }}{{ .FuncSuffix }}(
{{ template "params" .Args }}) (result *{{ .Struct }}, err error) {

{{ template "func-header" . }}
	result = &{{ .Struct }}{}
	err = prepared.QueryRowx({{template "args" .Args }}).StructScan(result)
	if err == sql.ErrNoRows {
		return nil, nil
	}
	if err != nil {
		return nil, WrapErr(err)
	}
	return result, nil
}
{{- end -}}

{{/* SELECT ALL STATEMENT */}}

{{ define "select-all" }}
func (obj *DB) {{ template "select-all-func" . }}

func (obj *Tx) {{ template "select-all-func" . }}
{{ end }}

{{- define "select-all-func" -}}
Get{{ pluralize .Struct }}{{ .FuncSuffix }}(
{{ template "params" .Args }}) (result []*{{ .Struct }}, err error) {

{{ template "func-header" . }}
	err = prepared.Select(&result, {{template "args" .Args }})
	if err != nil {
		return nil, WrapErr(err)
	}
	return result, nil
}
{{- end -}}

{{/* SELECT PAGED STATEMENT */}}

{{ define "select-paged" }}
func (obj *DB) {{ template "select-paged-func" . }}

func (obj *Tx) {{ template "select-paged-func" . }}
{{ end }}

{{- define "select-paged-func" -}}
PagedGet{{ pluralize .Struct }}{{ .FuncSuffix }}(
{{ if .Args }}{{- template "params" .Args }}, {{ end -}}
    ctoken string, limit int) (result []*{{ .Struct }}, ctokenout string, err error) {

{{ template "func-header" . }}

    if ctoken == "" {
        ctoken = "0"
    }

	err = prepared.Select(&result, {{ if .Args }}{{ template "args" .Args }}, {{end}} ctoken, limit)
	if err != nil {
		return nil, "", WrapErr(err)
	}

	if len(result) == limit {
		ctokenout = fmt.Sprint(result[limit-1].{{ .PagedOn }})
	}

	return result, ctokenout, nil
}
{{- end -}}

{{/* COUNT STATEMENT */}}

{{ define "count" }}
func (obj *DB) {{ template "count-func" . }}

func (obj *Tx) {{ template "count-func" . }}

func (obj *DB) {{ template "has-func" . }}

func (obj *Tx) {{ template "has-func" . }}
{{ end }}

{{- define "count-func" -}}
Count{{ .Struct }}{{ .FuncSuffix }}(
{{ template "params" .Args }}) (result int, err error) {

{{ template "func-header" . }}
	err = prepared.QueryRowx({{template "args" .Args }}).Scan(&result)
	if err != nil {
		return 0, WrapErr(err)
	}
	return result, nil
}
{{- end -}}

{{- define "has-func" -}}
Has{{ .Struct }}{{ .FuncSuffix }}(
{{ template "params" .Args }}) (result bool, err error) {

	count, err :=  obj.Count{{ .Struct }}{{ .FuncSuffix }}({{template "args" .Args }})
	if err != nil {
		return false, err
	}
	return count > 0, nil
}
{{- end -}}

{{/* DELETE STATEMENT */}}
{{ define "delete" }}
func (obj *DB) {{ template "delete-func" . }}

func (obj *Tx) {{ template "delete-func" . }}
{{ end }}

{{- define "delete-func" -}}
Delete{{ .Struct }}{{ .FuncSuffix }}(
{{ template "params" .Args }}) (deleted bool, err error) {

{{ template "func-header" . }}
	res, err := prepared.Exec({{template "args" .Args }})
	if err != nil {
		return false, WrapErr(err)
	}
	count, err := res.RowsAffected()
	if err != nil {
		return false, WrapErr(err)
	}
	return count > 0, nil
}
{{- end -}}

{{/* SELECT ALL STATEMENT */}}

{{ define "delete-all" }}
func (obj *DB) {{ template "delete-all-func" . }}

func (obj *Tx) {{ template "delete-all-func" . }}
{{ end }}

{{- define "delete-all-func" -}}
Delete{{ pluralize .Struct }}{{ .FuncSuffix }}(
{{ template "params" .Args }}) (count int64, err error) {

{{ template "func-header" . }}
	res, err := prepared.Exec({{template "args" .Args }})
	if err != nil {
		return 0, WrapErr(err)
	}
	count, err = res.RowsAffected()
	if err != nil {
		return 0, WrapErr(err)
	}
	return count, nil
}
{{- end -}}

{{/* INSERT STATEMENT */}}
{{ define "insert" }}
func (obj *DB) {{ template "insert-func" . }}

func (obj *Tx) {{ template "insert-func" . }}

func (obj *DB) {{ template "raw-insert-func" . }}

func (obj *Tx) {{ template "raw-insert-func" . }}
{{ end }}

{{- define "insert-func" -}}
Create{{ .Struct }}(
{{ template "params" .Args }}) (result *{{ .Struct }}, err error) {

{{ template "insert-auto-init" . }}
{{- template "func-header" . }}

	result = &{{ .Struct }}{}
{{- if not .ReturnBy }}
	err = prepared.QueryRowx({{template "args" .Inserts}}).StructScan(result)
	if err != nil {
		return nil, WrapErr(err)
	}
	return result, nil
{{- else }}
	res, err := prepared.Exec({{template "args" .Inserts}})
	if err != nil {
		return nil, WrapErr(err)
	}
	pk, err := res.LastInsertId()
	if err != nil {
		return nil, WrapErr(err)
	}
	return obj.Get{{ .Struct }}By{{ .ReturnBy }}(pk)
{{- end -}}
}
{{- end -}}

{{ define "insert-no-return" }}
func (obj *DB) {{ template "insert-no-return-func" . }}

func (obj *Tx) {{ template "insert-no-return-func" . }}

func (obj *DB) {{ template "raw-insert-no-return-func" . }}

func (obj *Tx) {{ template "raw-insert-no-return-func" . }}
{{ end }}

{{- define "insert-no-return-func" -}}
Create{{ .Struct }}(
{{ template "params" .Args }}) (err error) {

{{ template "insert-auto-init" . }}
{{- template "func-header" . }}

	_, err = prepared.Exec({{template "args" .Inserts}})
	return WrapErr(err)
}
{{- end -}}

{{- define "raw-insert-func" -}}
RawCreate{{ .Struct }}(
{{ template "params" .Inserts }}) (result *{{ .Struct }}, err error) {

{{- template "func-header" . }}

	result = &{{ .Struct }}{}
{{- if not .ReturnBy }}
	err = prepared.QueryRowx({{template "args" .Inserts}}).StructScan(result)
	if err != nil {
		return nil, WrapErr(err)
	}
	return result, nil
{{- else }}
	res, err := prepared.Exec({{template "args" .Inserts}})
	if err != nil {
		return nil, WrapErr(err)
	}
	pk, err := res.LastInsertId()
	if err != nil {
		return nil, WrapErr(err)
	}
	return obj.Get{{ .Struct }}By{{ .ReturnBy }}(pk)
{{- end -}}
}
{{- end -}}


{{- define "raw-insert-no-return-func" -}}
RawCreate{{ .Struct }}(
{{ template "params" .Inserts }}) (err error) {

{{- template "func-header" . }}

	_, err = prepared.Exec({{template "args" .Inserts}})
	return WrapErr(err)
}
{{- end -}}


{{- define "insert-auto-init" -}}
{{- if .NeedsNow }}
	now := Now()
{{- end -}}
{{- range .Autos }}
	{{ .Name }} := {{ .Init }}
{{- end -}}
{{- end -}}

{{/* UPDATE STATEMENT */}}
{{ define "update" }}
func (obj *DB) {{ template "update-func" . }}

func (obj *Tx) {{ template "update-func" . }}
{{ end }}

{{- define "update-func" -}}
Update{{ .Struct }}{{ .FuncSuffix }}(
{{ template "params" .Args }}, updates ...{{ .Struct }}Update) (result *{{ .Struct }}, err error) {

{{ template "update-func-header" . -}}

    result = &{{ .Struct }}{}
{{- if not .ReturnBy }}
    err = prepared.QueryRowx(args...).StructScan(result)
    if err == sql.ErrNoRows {
        return nil, nil
    }
    if err != nil {
        return nil, WrapErr(err)
    }
    return result, nil
{{- else }}
    res, err := prepared.Exec(args...)
    if err != nil {
        return nil, WrapErr(err)
    }
    pk, err := res.LastInsertId()
    if err != nil {
        return nil, WrapErr(err)
    }
    return obj.Get{{ .Struct }}By{{ .ReturnBy }}(pk)
{{- end -}}
}
{{- end -}}

{{ define "update-no-return" }}
func (obj *DB) {{ template "update-no-return-func" . }}

func (obj *Tx) {{ template "update-no-return-func" . }}
{{ end }}

{{- define "update-no-return-func" -}}
Update{{ .Struct }}{{ .FuncSuffix }}(
{{ template "params" .Args }}, updates ...{{ .Struct }}Update) (err error) {

{{ template "update-func-header" . -}}
    _, err = prepared.Exec(args...)
    return WrapErr(err)
}
{{- end -}}

{{- define "update-func-header" -}}
	var qs []string
	var values []interface{}
	seen := map[string]int{}
	addvalue := func(name string, value interface{}) {
		if idx, ok := seen[name]; ok{
			values[idx] = value
		}
		seen[name] = len(values)
        qs = append(qs, name + " = ?")
		values = append(values, value)
	}
{{- if .NeedsNow }}
	now := Now()
{{- end -}}
{{- range .Autos }}
	addvalue("{{ .Column }}", {{ .Init }})
{{- end }}
	for _, update := range updates {
		addvalue(update.columnName(), update.value())
	}

    stmt := strings.Replace(`{{.SQL}}`,
        "|||QS|||",
        strings.Join(qs, ", "), 1)
	prepared, replace, err := obj.prepare(stmt)
	if err != nil {
		err = WrapErr(err)
		return
	}
	defer replace()
	args := append(values, {{- template "args" .Args -}})	
	obj.logStmt(stmt, args...)
{{ end -}}
