{{/* GOLANG FUNCTION TEMPLATES */}}

{{- define "params" -}}
{{- range $i, $field := . -}}
	{{ if $i }},
    {{end}}{{ $field.Param }}
{{- end -}}
{{- end -}}

{{- define "args" -}}
{{- range $i, $field := . -}}
    {{ if $i }}, {{ end }}{{ $field.Arg }}
{{- end -}}
{{- end -}}

{{- define "ptr-args" -}}
{{- range $i, $field := . -}}
    {{ if $i }}, {{ end }}&{{ $field.Arg }}
{{- end -}}
{{- end -}}

{{- define "nil-args" -}}
{{- range $i, $arg := . -}}
	{{ if $i }}, {{ end }}nil
{{- end -}}
{{- end -}}

{{- define "func-header" }}
	const stmt=`{{ .SQL }}`
	prepared, replace, err := obj.prepare(stmt)
	if err != nil {
		err = WrapErr(err)
		return
	}
	defer replace()
	obj.logStmt(stmt, {{ template "args" .Args }})
{{ end -}}

{{/* SELECT STATEMENT */}}
{{ define "select" }}
func (obj *{{ .Dialect }}DB) {{ template "select-func" . }}

func (obj *{{ .Dialect }}Tx) {{ template "select-func" . }}
{{ end }}

{{- define "select-func-name" -}}
Get{{ .FuncSuffix }}
{{- end -}}

{{- define "select-func-sig" -}}
{{ template "select-func-name" . }}(
{{ template "params" .Args }}) (
{{ template "params" .Returns }}, err error)
{{- end -}}

{{- define "select-func" -}}
{{- template "select-func-sig" . }} {

{{ template "func-header" . }}
{{ range .Returns }}
    {{ .Arg }} = {{ .Init }}
{{- end }}
	err = prepared.QueryRowx({{template "args" .Args }}).Scan(
    {{- range $ir, $return := .Returns -}}
        {{- range $if, $field := $return.Fields -}}
            {{ if or $ir $if }}, {{ end }}&{{ $field.Arg }}
        {{- end -}}
    {{- end -}}
    )
	if err == sql.ErrNoRows {
		return nil, nil
	}
	if err != nil {
		return nil, WrapErr(err)
	}
    return {{ template "args" .Returns }}, nil
}
{{- end -}}

{{/* SELECT ALL STATEMENT */}}
{{ define "select-all" }}
func (obj *{{ .Dialect }}DB) {{ template "select-all-func" . }}

func (obj *{{ .Dialect }}Tx) {{ template "select-all-func" . }}
{{ end }}

{{- define "select-all-func-name" -}}
Get{{ pluralize .Struct }}{{ .FuncSuffix }}
{{- end -}}

{{- define "select-all-func-sig" -}}
{{ template "select-all-func-name" . }}(
{{ template "params" .Args }}) (
    result []*{{ .Struct }}, err error)
{{- end -}}

{{- define "select-all-func" -}}
{{- template "select-all-func-sig" . }} {

{{ template "func-header" . }}
	err = prepared.Select(&result, {{template "args" .Args }})
	if err != nil {
		return nil, WrapErr(err)
	}
	return result, nil
}
{{- end -}}

{{/* SELECT PAGED STATEMENT */}}
{{ define "select-paged" }}
func (obj *{{ .Dialect }}DB) {{ template "select-paged-func" . }}

func (obj *{{ .Dialect }}Tx) {{ template "select-paged-func" . }}
{{ end }}

{{- define "select-paged-func-name" -}}
PagedGet{{ pluralize .Struct }}{{ .FuncSuffix }}
{{- end -}}

{{- define "select-paged-func-sig" -}}
{{ template "select-paged-func-name" . }}(
{{ template "params" .Args }}{{ if .Args }},
{{ end -}}
    ctoken string, limit int) (
    result []*{{ .Struct }}, ctokenout string, err error)
{{- end -}}

{{- define "select-paged-func" -}}
{{- template "select-paged-func-sig" . }} {

	const stmt=`{{ .SQL }}`
	prepared, replace, err := obj.prepare(stmt)
	if err != nil {
		err = WrapErr(err)
		return
	}
	defer replace()
    obj.logStmt(stmt, {{ if .Args }}{{ template "args" .Args }}, {{end}}ctoken, limit)

    if ctoken == "" {
        ctoken = "0"
    }

	err = prepared.Select(&result, {{ if .Args }}{{ template "args" .Args }}, {{end}} ctoken, limit)
	if err != nil {
		return nil, "", WrapErr(err)
	}

    if limit > 0 {
        if len(result) == limit {
            ctokenout = fmt.Sprint(result[limit-1].{{ .PagedOn }})
        }
    } else {
        ctokenout = ctoken
    }

    return {{ template "args" .Returns }}, ctokenout, nil
}
{{- end -}}

{{/* COUNT STATEMENT */}}
{{ define "count" }}
func (obj *{{ .Dialect }}DB) {{ template "count-func" . }}

func (obj *{{ .Dialect }}Tx) {{ template "count-func" . }}
{{ end }}

{{- define "count-func-name" -}}
Count{{ .Struct }}{{ .FuncSuffix }}
{{- end -}}

{{- define "count-func-sig" -}}
{{ template "count-func-name" .}}(
{{ template "params" .Args }}) (
    result int, err error)
{{- end -}}

{{- define "count-func" -}}
{{- template "count-func-sig" . }} {

{{ template "func-header" . }}
	err = prepared.QueryRowx({{template "args" .Args }}).Scan(&result)
	if err != nil {
		return 0, WrapErr(err)
	}
	return result, nil
}
{{- end -}}

{{ define "has" }}
func (obj *{{ .Dialect }}DB) {{ template "has-func" . }}

func (obj *{{ .Dialect }}Tx) {{ template "has-func" . }}
{{ end }}

{{- define "has-func-name" -}}
Has{{ .Struct }}{{ .FuncSuffix }}
{{- end -}}

{{- define "has-func-sig" -}}
{{ template "has-func-name" . }}(
{{ template "params" .Args }}) (
    result bool, err error)
{{- end -}}

{{- define "has-func" -}}
{{- template "has-func-sig" . }} {
	count, err :=  obj.Count{{ .Struct }}{{ .FuncSuffix }}({{template "args" .Args }})
	if err != nil {
		return false, err
	}
	return count > 0, nil
}
{{- end -}}

{{/* DELETE STATEMENT */}}
{{ define "delete" }}
func (obj *{{ .Dialect }}DB) {{ template "delete-func" . }}

func (obj *{{ .Dialect }}Tx) {{ template "delete-func" . }}
{{ end }}

{{- define "delete-func-name" -}}
Delete{{ .Struct }}{{ .FuncSuffix }}
{{- end -}}

{{- define "delete-func-sig" -}}
{{ template "delete-func-name" . }}(
{{ template "params" .Args }}) (
    deleted bool, err error)
{{- end -}}

{{- define "delete-func" -}}
{{ template "delete-func-sig" . }} {

{{ template "func-header" . }}
	res, err := prepared.Exec({{template "args" .Args }})
	if err != nil {
		return false, WrapErr(err)
	}
	count, err := res.RowsAffected()
	if err != nil {
		return false, WrapErr(err)
	}
	return count > 0, nil
}
{{- end -}}

{{/* SELECT ALL STATEMENT */}}
{{ define "delete-all" }}
func (obj *{{ .Dialect }}DB) {{ template "delete-all-func" . }}

func (obj *{{ .Dialect }}Tx) {{ template "delete-all-func" . }}
{{ end }}

{{- define "delete-all-func-name" -}}
Delete{{ pluralize .Struct }}{{ .FuncSuffix }}
{{- end -}}

{{- define "delete-all-func-sig" -}}
{{ template "delete-all-func-name" . }}(
{{ template "params" .Args }}) (
    count int64, err error)
{{- end -}}

{{- define "delete-all-func" -}}
{{ template "delete-all-func-sig" . }} {

{{ template "func-header" . }}
	res, err := prepared.Exec({{template "args" .Args }})
	if err != nil {
		return 0, WrapErr(err)
	}
	count, err = res.RowsAffected()
	if err != nil {
		return 0, WrapErr(err)
	}
	return count, nil
}
{{- end -}}

{{/* INSERT STATEMENT */}}
{{ define "insert" }}
func (obj *{{ .Dialect }}DB) {{ template "insert-func" . }}

func (obj *{{ .Dialect }}Tx) {{ template "insert-func" . }}
{{ end }}

{{- define "insert-func-name" -}}
Create{{ .FuncSuffix }}
{{- end -}}

{{- define "insert-func-sig" -}}
{{ template "insert-func-name" . }}(
{{ template "params" .Args }}) (
    result *{{ .Struct }}, err error)
{{- end -}}

{{- define "insert-func" -}}
{{ template "insert-func-sig" . }} {

{{ template "insert-auto-init" . }}
{{- template "func-header" . }}

{{- if not .ReturnBy }}
	result = &{{ .Struct }}{}
	err = prepared.QueryRowx({{template "args" .Inserts}}).StructScan(result)
	if err != nil {
		return nil, WrapErr(err)
	}
	return result, nil
{{- else }}
	res, err := prepared.Exec({{template "args" .Inserts}})
	if err != nil {
		return nil, WrapErr(err)
	}
{{ if .ReturnBy.Pk }}
	pk, err := res.LastInsertId()
	if err != nil {
		return nil, WrapErr(err)
	}
	return obj.Get{{ .Struct }}By{{ .ReturnBy.Pk }}(pk)
{{ else }}
	_ = res
	return obj.{{ template "select-func-name" .ReturnBy.Getter }}({{ template "args" .ReturnBy.Getter.Args }})
{{ end -}}
{{- end -}}
}
{{- end -}}

{{- define "insert-auto-init" -}}
{{- if .NeedsNow }}
	now := Now()
{{- end -}}
{{- range .Autos }}
	{{ .Name }} := {{ .Init }}
{{- end -}}
{{- end -}}

{{ define "raw-insert" }}
func (obj *{{ .Dialect }}DB) {{ template "raw-insert-func" . }}

func (obj *{{ .Dialect }}Tx) {{ template "raw-insert-func" . }}
{{ end }}

{{- define "raw-insert-func-sig" -}}
CreateRaw{{ .FuncSuffix }}(
{{ template "params" .Inserts }}) (
    result *{{ .Struct }}, err error)
{{- end -}}

{{- define "raw-insert-func" -}}
{{- template "raw-insert-func-sig" . }} {
	const stmt=`{{ .SQL }}`
	prepared, replace, err := obj.prepare(stmt)
	if err != nil {
		err = WrapErr(err)
		return
	}
	defer replace()
	obj.logStmt(stmt, {{ template "args" .Inserts }})

{{ if not .ReturnBy }}
	result = &{{ .Struct }}{}
	err = prepared.QueryRowx({{template "args" .Inserts}}).StructScan(result)
	if err != nil {
		return nil, WrapErr(err)
	}
	return result, nil
{{- else }}
	res, err := prepared.Exec({{template "args" .Inserts}})
	if err != nil {
		return nil, WrapErr(err)
	}
{{ if .ReturnBy.Pk }}
	pk, err := res.LastInsertId()
	if err != nil {
		return nil, WrapErr(err)
	}
	return obj.Get{{ .Struct }}By{{ .ReturnBy.Pk }}(pk)
{{ else }}
	_ = res
	return obj.{{ template "select-func-name" .ReturnBy.Getter }}({{ template "args" .ReturnBy.Getter.Args }})
{{ end -}}
{{- end -}}
}
{{- end -}}


{{/* UPDATE STATEMENT */}}
{{ define "update" }}
func (obj *{{ .Dialect }}DB) {{ template "update-func" . }}

func (obj *{{ .Dialect }}Tx) {{ template "update-func" . }}
{{ end }}

{{- define "update-func-name" -}}
Update{{ .Struct }}{{ .FuncSuffix }}
{{- end -}}

{{- define "update-func-sig" -}}
{{ template "update-func-name" . }}(
{{ template "params" .Args }},
    updates ...{{ .Struct }}Update) (
    result *{{ .Struct }}, err error)
{{- end -}}

{{- define "update-func" -}}
{{ template "update-func-sig" . }} {

{{ template "update-func-header" . -}}

{{- if .SupportsReturning }}
    result = &{{ .Struct }}{}
    err = prepared.QueryRowx(args...).StructScan(result)
    if err == sql.ErrNoRows {
        return nil, nil
    }
    if err != nil {
        return nil, WrapErr(err)
    }
    return result, nil
{{- else }}
    _, err = prepared.Exec(args...)
    if err != nil {
        return nil, WrapErr(err)
    }
	return obj.{{ template "select-func-name" . }}({{ template "args" .Args }})
{{- end -}}
}
{{- end -}}

{{- define "update-func-header" -}}
	var qs []string
	var values []interface{}
	seen := map[string]int{}
	addvalue := func(name string, value interface{}) {
		if idx, ok := seen[name]; ok{
			values[idx] = value
		}
		seen[name] = len(values)
        qs = append(qs, name + " = ?")
		values = append(values, value)
	}
{{- if .NeedsNow }}
	now := Now()
{{- end -}}
{{- range .Autos }}
	addvalue("{{ .Column }}", {{ .Init }})
{{- end }}
	for _, update := range updates {
		addvalue(update.columnName(), update.value())
	}

    stmt := strings.Replace(`{{.SQL}}`,
        "|||QS|||",
        strings.Join(qs, ", "), 1)
	prepared, replace, err := obj.prepare(stmt)
	if err != nil {
		err = WrapErr(err)
		return
	}
	defer replace()
	args := append(values, {{- template "args" .Args -}})	
	obj.logStmt(stmt, args...)
{{ end -}}
