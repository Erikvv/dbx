{{- define "signature" -}}
Paged_{{ .Suffix }}({{ ctxparam .AllArgs }},
	limit int, ctoken string) (
	rows {{ sliceof .Row }}, ctokenout string, err error)
{{- end -}}

{{- define "invoke" -}}
Paged_{{ .Suffix }}({{ ctxarg .AllArgs }}, limit, ctoken)
{{- end -}}

{{- define "body" }}
	if ctoken == "" {
		ctoken = "0"
	}

	{{ embedplaceholders .Info }}
	{{ embedsql .Info "__embed_stmt" }}

	var __values []interface{}
	__values = append(__values, {{ fieldvalue .StaticArgs }})

	{{ range $i, $arg := .NullableArgs }}
	if !{{ $arg.Name }}.isnull() {
		__cond_{{ $i }}.Null = false
		__values = append(__values, {{ $arg.Name }}.value())
	}
	{{ end }}

	__values = append(__values, ctoken, limit)

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, "", obj.makeErr(err)
	}
	defer __rows.Close()

	{{ initnew .LastPk }}
	for __rows.Next() {
		{{ initnew .Row }}
		err = __rows.Scan({{ addrof (flatten .Row) | comma }}{{ addrof .LastPk }})
		if err != nil {
			return nil, "", obj.makeErr(err)
		}
		rows = append(rows, {{ arg .Row }})
	}
	if err := __rows.Err(); err != nil {
		return nil, "", obj.makeErr(err)
	}

	if limit > 0 {
		if len(rows) == limit {
			ctokenout = fmt.Sprint({{ arg .LastPk }})
		}
	} else {
		ctokenout = ctoken
	}

	return rows, ctokenout, nil
{{ end -}}
