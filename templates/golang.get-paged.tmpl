{{- define "signature" -}}
Get{{ .Suffix }}({{ ctxparam .Args }}, ctoken string, limit int) (rows {{ sliceof .Row }}, ctokenout string, err error)
{{- end -}}

{{- define "body" }}{
	if ctoken == "" {
		ctoken = "0"
	}

	const __stmt={{ printf "%q" .SQL }}
	obj.logStmt(__stmt, {{ fieldvalue .Args | comma }}ctoken, limit)

	__rows, err := obj.driver.Query(__stmt, {{ fieldvalue .Args | comma}}ctoken, limit)
	if err != nil {
		return nil, "", WrapErr(err)
	}
	defer __rows.Close()

	{{ initnew .LastPk }}
	for __rows.Next() {
		{{ initnew .Row }}
		err = __rows.Scan({{ addrof (flatten .Row) | comma }}{{ addrof .LastPk }})
		if err != nil {
			return nil, "", WrapErr(err)
		}
		rows = append(rows, {{ arg .Row }})
	}
	if err := __rows.Err(); err != nil {
		return nil, "", WrapErr(err)
	}

	if limit > 0 {
		if len(rows) == limit {
			ctokenout = fmt.Sprint({{ arg .LastPk }})
		}
	} else {
		ctokenout = ctoken
	}

	return rows, ctokenout, nil
}
{{ end -}}
