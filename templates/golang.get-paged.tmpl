{{- define "signature" -}}
Paged_{{ .Suffix }}({{ ctxparam .AllArgs }},
	limit int, start *{{ .Continuation.Type }}) (
	rows {{ sliceof .Row }}, next *{{ .Continuation.Type }}, err error)
{{- end -}}

{{- define "invoke" -}}
Paged_{{ .Suffix }}({{ ctxarg .AllArgs }}, limit, start)
{{- end -}}

{{- define "body" }}
	{{ embedplaceholders .Info }}
	{{ embedsql .Info "__embed_stmt" }}
	{{ embedsql .FirstInfo "__embed_first_stmt" }}

	var __values []interface{}
	__values = append(__values, {{ fieldvalue .StaticArgs }})

	{{ range $i, $arg := .NullableArgs }}
	if !{{ $arg.Name }}.isnull() {
		__cond_{{ $i }}.Null = false
		__values = append(__values, {{ $arg.Name }}.value())
	}
	{{ end }}

	var __stmt string
	if start != nil && start._set {
		__values = append(__values, start._value, limit)
		__stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	} else {
		__values = append(__values, limit)
		__stmt = __sqlbundle_Render(obj.dialect, __embed_first_stmt)
	}
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.QueryContext(ctx, __stmt, __values...)
	if err != nil {
		return nil, nil, obj.makeErr(err)
	}
	defer __rows.Close()

	{{ declare .Continuation }}
	{{ .Continuation.Name }}._set = true

	for __rows.Next() {
		{{ initnew .Row }}
		err = __rows.Scan({{ addrof (flatten .Row) | comma }}{{ addrof .Continuation }}._value)
		if err != nil {
			return nil, nil, obj.makeErr(err)
		}
		rows = append(rows, {{ arg .Row }})
		next = {{ addrof .Continuation }}
	}
	if err := __rows.Err(); err != nil {
		return nil, nil, obj.makeErr(err)
	}

	return rows, next, nil
{{ end -}}
