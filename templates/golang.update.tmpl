{{- define "signature" -}}
Update{{ .Suffix }}({{ param .Args }}, update {{ .Struct.UpdateStructName }}) ({{ param .Return }}, err error)
{{- end -}}

{{- define "body" -}}{
	{{- if .NeedsNow }}
	__now := Now().UTC()
	{{ end -}}
	const __stmt_prefix=`{{ .SQLPrefix }}`
	const __stmt_suffix=`{{ .SQLSuffix }}`

	var qs []byte
	var values []interface{}

	{{ if .PositionalArguments }}
	j := {{ len .Args }}
	values = append(values, {{ arg .Args }})
	{{ end -}}

	addArgument := func(name string) {
		qs = append(qs, name...)
		{{- if .PositionalArguments }}
		j++
		qs = append(qs, " = {{ .ArgumentPrefix }}"...)
		qs = append(qs, strconv.Itoa(j)...)
		qs = append(qs, ", "...)
		{{- else }}
		qs = append(qs, " = {{ .ArgumentPrefix }}, "...)
		{{- end }}
	}

	{{ range .Struct.UpdatableFields }}
	if update.{{ .Name }} != nil {
		addArgument("{{ .Column }}")
		values = append(values, update.{{ .Name }}.value())
	}
	{{ end }}

	{{ range .AutoFields }}
	addArgument("{{ .Name }}")
	values = append(values, {{ .InitVal }})
	{{ end }}

	{{ if not .AutoFields }}
	if len(qs) == 0 {
		return nil, WrapErr(fmt.Errorf("need to update at least one field"))
	}
	{{ end }}

	{{ if not .PositionalArguments -}}
	values = append(values, {{ arg .Args }})
	{{ end }}

	__stmt := __stmt_prefix + string(qs[:len(qs)-2]) + __stmt_suffix
	__prepared, __replace, err := obj.prepare(__stmt)
	if err != nil {
		return nil, WrapErr(err)
	}
	defer __replace()
	obj.logStmt(__stmt, {{ arg .Args }})

	{{ if .SupportsReturning }}
	{{ init .Return }}
	err = __prepared.QueryRow(values).Scan({{ addrof (flatten .Return) }})
	if err != nil {
		return nil, WrapErr(err)
	}
	return {{ arg .Return }}, nil
	{{ else -}}
	__res, err := __prepared.Exec(values)
	if err != nil {
		return nil, WrapErr(err)
	}
	__pk, err := __res.LastInsertId()
	if err != nil {
		return nil, WrapErr(err)
	}
	return obj.getLast{{ .Return.Type }}(__pk)
	{{ end -}}
}
{{- end -}}
