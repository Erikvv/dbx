{{- define "signature" -}}
Update{{ .Suffix }}({{ param .Args }}, update {{ .Struct.UpdateStructName }}) ({{ param .Return }}, err error)
{{- end -}}

{{- define "body" -}}{
	{{- if .NeedsNow }}
	__now := Now().UTC()
	{{ end -}}
	const __stmt_prefix=`{{ .SQLPrefix }}`
	const __stmt_suffix=`{{ .SQLSuffix }}`

	var qs []byte
	var values []interface{}

	{{ range .Struct.UpdatableFields }}
	if update.{{ .Name }} != nil {
		qs = append(qs, "{{ .Column }} = ?, "...)
		values = append(values, update.{{ .Name }}.value())
	}
	{{ end -}}

	{{ range .AutoFields }}
	qs = append(qs, "{{ .Name }} = ?, "...)
	values = append(values, {{ .InitVal }})
	{{ end -}}

	if len(qs) == 0 {
		return nil, WrapErr(error.New("need to update at least one field"))
	}

	__stmt := __stmt_prefix + string(qs[:len(qs)-2]) + __stmt_suffix
	__prepared, __replace, err := obj.prepare(__stmt)
	if err != nil {
		return nil, WrapErr(err)
	}
	defer __replace()
	obj.logStmt(__stmt, {{ arg .Args }})

	{{ if .SupportsReturning }}
	{{ init .Return }}
	err = __prepared.QueryRow({{ arg .Args }}).Scan({{ addrof (flatten .Return) }})
	if err != nil {
		return nil, WrapErr(err)
	}
	return {{ arg .Return }}, nil
	{{ else -}}
	__res, err := __prepared.Exec({{ arg .Args}})
	if err != nil {
		return nil, WrapErr(err)
	}
	__pk, err := __res.LastInsertId()
	if err != nil {
		return nil, WrapErr(err)
	}
	return obj.getLast{{ .Return.Type }}(__pk)
	{{ end -}}
}
{{- end -}}


{{/*
================================================================
  Old update
================================================================

func (obj *{{ .Dialect }}DB) {{ template "update-func" . }}

func (obj *{{ .Dialect }}Tx) {{ template "update-func" . }}

{{- define "update-func-name" -}}
Update{{ .Struct }}{{ .FuncSuffix }}
{{- end -}}

{{- define "update-func-sig" -}}
{{ template "update-func-name" . }}(
{{ param .Args }},
    updates ...{{ .Struct }}Update) (
    result *{{ .Struct }}, err error)
{{- end -}}

{{- define "update-func" -}}
{{ template "update-func-sig" . }} {

	var qs []string
	var values []interface{}
	seen := map[string]int{}
	addvalue := func(name string, value interface{}) {
		if idx, ok := seen[name]; ok{
			values[idx] = value
		}
		seen[name] = len(values)
        qs = append(qs, name + " = ?")
		values = append(values, value)
	}
{{- if .NeedsNow }}
	now := Now()
{{- end -}}
{{- range .AutoFields }}
	addvalue("{{ .Column }}", {{ .Init }})
{{- end }}
	for _, update := range updates {
		addvalue(update.columnName(), update.value())
	}

    stmt := strings.Replace(`{{.SQL}}`,
        "|||QS|||",
        strings.Join(qs, ", "), 1)
	prepared, replace, err := obj.prepare(stmt)
	if err != nil {
		err = WrapErr(err)
		return
	}
	defer replace()
	args := append(values, {{- arg .Args -}})	
	obj.logStmt(stmt, args...)

{{- if .SupportsReturning }}
    result = &{{ .Struct }}{}
    err = prepared.QueryRowx(args...).StructScan(result)
    if err == sql.ErrNoRows {
        return nil, nil
    }
    if err != nil {
        return nil, WrapErr(err)
    }
    return result, nil
{{- else }}
    _, err = prepared.Exec(args...)
    if err != nil {
        return nil, WrapErr(err)
    }
	return obj.{{ template "select-func-name" . }}({{ arg .Args }})
{{- end -}}
}
{{- end -}}

*/}}
