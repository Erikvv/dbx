{{- define "signature" -}}
Update_{{ .Suffix }}({{ ctxparam .Args }},
	update {{ .Struct.UpdateStructName }}) (
	{{ param .Return }}, err error)
{{- end -}}

{{- define "invoke" -}}
Update_{{ .Suffix }}({{ ctxarg .Args }}, update)
{{- end -}}

{{- define "body" -}}
	{{ embedsql .InfoPrefix "__embed_stmt_prefix" }}
	var __stmt_prefix = __sqlbundle_Render(obj.dialect, __embed_stmt_prefix, __sqlbundle_NoTerminate) + " "
	{{ embedsql .InfoSuffix "__embed_stmt_suffix" }}
	var __stmt_suffix = " " + __sqlbundle_Render(obj.dialect, __embed_stmt_suffix)

	var qs []byte
	var values []interface{}

	{{ if .PositionalArguments }}
	j := {{ len .Args }}
	values = append(values, {{ fieldvalue .Args }})
	{{ end -}}

	addArgument := func(name string) {
		qs = append(qs, name...)
		{{- if .PositionalArguments }}
		j++
		qs = append(qs, " = {{ .ArgumentPrefix }}"...)
		qs = append(qs, strconv.Itoa(j)...)
		qs = append(qs, ", "...)
		{{- else }}
		qs = append(qs, " = {{ .ArgumentPrefix }}, "...)
		{{- end }}
	}
	_ = addArgument

	{{ range .Struct.UpdatableFields }}
	if update.{{ .Name }}._set {
		addArgument("{{ .Column }}")
		values = append(values, update.{{ .Name }}.value())
	}
	{{ end }}

	{{- if .NeedsNow }}
	__now := obj.db.Hooks.Now().UTC()
	{{ end -}}
	{{ range .AutoFields }}
	addArgument("{{ .Name }}")
	values = append(values, {{ .InitVal }})
	{{ end }}

	{{ if not .AutoFields }}
	if len(qs) == 0 {
		return nil, emptyUpdate()
	}
	{{ end }}

	{{ if not .PositionalArguments -}}
	values = append(values, {{ fieldvalue .Args }})
	{{ end }}

	__stmt := __stmt_prefix + string(qs[:len(qs)-2]) + __stmt_suffix
	obj.logStmt(__stmt, values...)

	{{ init .Return }}
	{{ if .SupportsReturning }}
	err = obj.driver.QueryRow(__stmt, values...).Scan({{ addrof (flatten .Return) }})
	if err == sql.ErrNoRows {
		return nil, nil
	}
	if err != nil {
		return nil, obj.makeErr(err)
	}
	{{ else -}}
	_, err = obj.driver.Exec(__stmt, values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}

	{{ embedsql .InfoGet "__embed_stmt_get" }}
	var __stmt_get = __sqlbundle_Render(obj.dialect, __embed_stmt_get)
	obj.logStmt("(IMPLIED) " + __stmt_get, {{ fieldvalue .Args }})

	err = obj.driver.QueryRow(__stmt_get, {{ fieldvalue .Args }}).Scan({{ addrof (flatten .Return) }})
	if err == sql.ErrNoRows {
		return nil, nil
	}
	if err != nil {
		return nil, obj.makeErr(err)
	}
	{{ end -}}
	return {{ arg .Return }}, nil
{{- end -}}
